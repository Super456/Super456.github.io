<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猿来独往</title>
  
  <subtitle>在岁月的长河里寻找一种度过时光的乐趣</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://super456.github.io/"/>
  <updated>2018-07-12T14:03:47.098Z</updated>
  <id>https://super456.github.io/</id>
  
  <author>
    <name>猿来独往</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue2.0实战项目——简单的快餐店系统</title>
    <link href="https://super456.github.io/2018/07/12/2018-07-12-vue2-sellpossystem/"/>
    <id>https://super456.github.io/2018/07/12/2018-07-12-vue2-sellpossystem/</id>
    <published>2018-07-12T13:50:25.000Z</published>
    <updated>2018-07-12T14:03:47.098Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近学习vue看到网上很多学习的资料，就找了一个项目系统练习，主要是想学习了的一些知识点，系统的组合运用一遍。网上根据<strong>技术胖老师</strong>博客的内容自己也实战了一遍，挺实用的，对vue框架有了更深入的了解以及自身能力的提升。</p></blockquote><p>欢迎下载使用或二次开发。</p><h3 id="（一）项目分析"><a href="#（一）项目分析" class="headerlink" title="（一）项目分析"></a>（一）项目分析</h3><p>这个项目主要是实现在线的用户点餐以及对点餐列表商品的增删改查等功能；然后使用mockplus工具画出草图，主要是方便开发。<br><img src="https://img-blog.csdn.net/20180712173352759?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="项目框线图"></p><h3 id="（二）运用到的技术"><a href="#（二）运用到的技术" class="headerlink" title="（二）运用到的技术"></a>（二）运用到的技术</h3><p>1.使用vue-cli2.x搭建的开发环境；</p><p>2.使用vue-router做路由转换；</p><p>3.使用element-ui做界面美化；</p><p>4.使用axios做跨域请求接口数据；</p><p>5.使用icofont在线图标管理；</p><p>6.使用webpack打包管理；</p><p>7.使用vue2.0语法和es6语法；</p><h3 id="（三）系统成果"><a href="#（三）系统成果" class="headerlink" title="（三）系统成果"></a>（三）系统成果</h3><p><img src="https://img-blog.csdn.net/20180712174527579?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="运行结果"></p><h3 id="（四）系统使用"><a href="#（四）系统使用" class="headerlink" title="（四）系统使用"></a>（四）系统使用</h3><p>1.前提是要有node.js、npm、vue-cli环境（最好有Git，会方便很多）；</p><p>2.<a href="https://github.com/super456/vue2.0-SellPosSystem" target="_blank" rel="noopener">下载项目</a>（git clone最好）；</p><p>3.打开终端切换到该项目名称下，执行以下命令行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># install dependencies 安装开发环境的依赖，因为不是直接打包上传的项目</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"># serve with hot reload at localhost:8080 运行项目基本没问题</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>技术胖老师的 <a href="http://jspang.com/2017/05/22/vuedemo/" target="_blank" rel="noopener">Vue实战视频-快餐店收银系统</a></p>]]></content>
    
    <summary type="html">
    
      最近学习vue看到网上很多学习的资料，就找了一个项目系统练习，主要是想学习了的一些知识点，系统的组合运用一遍。网上根据**技术胖老师**博客的内容自己也实战了一遍，挺实用的，对vue框架有了更深入的了解以及自身能力的提升
    
    </summary>
    
      <category term="Vue.js" scheme="https://super456.github.io/categories/Vue-js/"/>
    
    
      <category term="vue2" scheme="https://super456.github.io/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js2.0生命周期的理解与应用</title>
    <link href="https://super456.github.io/2018/07/08/2018-07-08-vue2-lifestyle/"/>
    <id>https://super456.github.io/2018/07/08/2018-07-08-vue2-lifestyle/</id>
    <published>2018-07-08T05:47:25.000Z</published>
    <updated>2018-07-12T14:08:56.675Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在学习vue2.x入门后，开始慢慢熟悉vue的模式和开发脚手架项目实践过程中，需要对生命周期钩子函数一定的理解，多少会用到这些钩子函数，根据自己的理解写了一下，欢迎指正或学习交流。</strong></p><h3 id="（一）vue2-x生命周期图"><a href="#（一）vue2-x生命周期图" class="headerlink" title="（一）vue2.x生命周期图"></a>（一）vue2.x生命周期图</h3><p><img src="https://img-blog.csdn.net/20180708113143806?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="vue生命周期"></p><h3 id="（二）生命周期钩子函数说明"><a href="#（二）生命周期钩子函数说明" class="headerlink" title="（二）生命周期钩子函数说明"></a>（二）生命周期钩子函数说明</h3><table><thead><tr><th style="text-align:left">生命周期钩子函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">beforeCreate</td><td style="text-align:left">在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</td></tr><tr><td style="text-align:left">created</td><td style="text-align:left">实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)属性初始化和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</td></tr><tr><td style="text-align:left">beforeMount</td><td style="text-align:left">在挂载开始之前被调用：相关的 render 函数首次被调用。</td></tr><tr><td style="text-align:left">mounted</td><td style="text-align:left"><code>el</code>被新创建的 <code>vm.$el</code> 替换，并挂载到实例上去之后调用该钩子。如果 root实例挂载了一个文档内元素，当mounted被调用时 vm.$el 也在文档内。</td></tr><tr><td style="text-align:left">beforeUpdate</td><td style="text-align:left">数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</td></tr><tr><td style="text-align:left">updated</td><td style="text-align:left">由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</td></tr><tr><td style="text-align:left">beforeDestroy</td><td style="text-align:left">实例销毁之前调用。在这一步，实例仍然完全可用。</td></tr><tr><td style="text-align:left">destroyed</td><td style="text-align:left">Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</td></tr></tbody></table><h3 id="（三）代码演示"><a href="#（三）代码演示" class="headerlink" title="（三）代码演示"></a>（三）代码演示</h3><ol><li><p>通过嵌套组件的页面加载查看显示顺序：<br>代码如下(可直接复制使用)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">   &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;vue生命周期的理解应用&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;p&gt;以下是调用组件信息&lt;/p&gt;</span><br><span class="line">        &lt;div class=&quot;test&quot;&gt;</span><br><span class="line">            &lt;keep-alive&gt;&lt;/keep-alive&gt;</span><br><span class="line">            &lt;test-component v-bind:msg=&quot;msg&quot; v-on:msgchange=&quot;updateMsg($event)&quot;&gt;&lt;/test-component&gt;</span><br><span class="line">            &lt;/keep-alive&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var child = &#123;</span><br><span class="line">        props: [&apos;msg&apos;],</span><br><span class="line">        template: &apos;&lt;button v-on:click=&quot;changeChuanzhi&quot;&gt;点击向父组件事件传值--&#123;&#123;msg&#125;&#125;&lt;/button&gt;&apos;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeChuanzhi: function () &#123;</span><br><span class="line">                this.$emit(&quot;msgchange&quot;, &quot;子组件向父组件传值&quot;); //注意两个参数：第一个参数是事件名，第二个参数是传递的内容</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        deactivated: function () &#123;</span><br><span class="line">            console.log(&apos;component deactivated!&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        activated: function () &#123;</span><br><span class="line">            console.log(&apos;component activated&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &apos;#vue-app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            msg: &apos;父亲给儿子的信息&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            updateMsg: function (msg) &#123;</span><br><span class="line">                this.msg = msg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            &apos;test-component&apos;: child</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        //生明周期示例</span><br><span class="line">        beforeCreate: function () &#123;</span><br><span class="line">            alert(&quot;组件实例化之前执行的函数：beforeCreate()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        created: function () &#123;</span><br><span class="line">            alert(&quot;组件实例化完毕，但页面还未显示出来:created()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount: function () &#123;</span><br><span class="line">            alert(&quot;组件挂载前，页面仍未展示，但虚拟DOM已经配置:beforeMount()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted: function () &#123;</span><br><span class="line">            alert(&quot;组件挂载后，此方法执行后，页面显示:mounted()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate: function () &#123;</span><br><span class="line">            alert(&quot;组件更新前，页面仍未更新，但虚拟DOM已经配置:beforeUpdate()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        updated: function () &#123;</span><br><span class="line">            alert(&quot;组件更新后，此方法执行后，页面显示:updated()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy: function () &#123;</span><br><span class="line">            alert(&quot;组件销毁前:beforeDestroy()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed: function () &#123;</span><br><span class="line">            alert(&quot;组件销毁:destroyed()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdn.net/20180708114229457?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="演示1"></p></li><li><p>通过控制台查看页面加载显示顺序日志：<br>代码如下（可直接复制使用）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">   &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;vue生命周期的理解应用&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;p&gt;以下是调用组件信息&lt;/p&gt;</span><br><span class="line">        &lt;div class=&quot;test&quot;&gt;</span><br><span class="line">            &lt;p&gt;默认显示的数据：&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;test-component v-bind:msg=&quot;msg&quot; v-on:msgchange=&quot;updateMsg($event)&quot;&gt;&lt;/test-component&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var child = &#123;</span><br><span class="line">        props: [&apos;msg&apos;],</span><br><span class="line">        data: function () &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                childtofather: &apos;子组件向父组件传值&apos;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        template: &apos;&lt;button v-on:click=&quot;changeChuanzhi&quot;&gt;点击向父组件事件传值--&#123;&#123;msg&#125;&#125;&lt;/button&gt;&apos;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeChuanzhi: function () &#123;</span><br><span class="line">                this.$emit(&quot;msgchange&quot;, this.childtofather); //注意两个参数：第一个参数是事件名，第二个参数是传递的内容</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    var app =new Vue(&#123;</span><br><span class="line">        el: &apos;#vue-app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            msg: &apos;父亲给儿子的信息&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            updateMsg: function (msg) &#123;</span><br><span class="line">                this.msg = msg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            &apos;test-component&apos;: child</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        //生明周期示例</span><br><span class="line">        beforeCreate: function () &#123;</span><br><span class="line">            // alert(&quot;组件实例化之前执行的函数：beforeCreate()&quot;);</span><br><span class="line">            console.group(&apos;beforeCreate 创建前状态===============》&apos;);</span><br><span class="line">            var state1 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(state1);</span><br><span class="line">        &#125;,</span><br><span class="line">        created: function () &#123;</span><br><span class="line">            // alert(&quot;组件实例化完毕，但页面还未显示出来:created()&quot;);</span><br><span class="line">            console.group(&apos;created 创建完毕状态===============》&apos;);</span><br><span class="line">            var state2 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(state2);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount: function () &#123;</span><br><span class="line">            // alert(&quot;组件挂载前，页面仍未展示，但虚拟DOM已经配置:beforeMount()&quot;);</span><br><span class="line">            console.group(&apos;beforeMount 挂载前状态===============》&apos;);</span><br><span class="line">            var state3 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">            console.log(state3);</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted: function () &#123;</span><br><span class="line">            // alert(&quot;组件挂载后，此方法执行后，页面显示:mounted()&quot;);</span><br><span class="line">            console.group(&apos;mounted 挂载结束状态===============》&apos;);</span><br><span class="line">            var state4 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">            console.log(state4);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate: function () &#123;</span><br><span class="line">            // alert(&quot;组件更新前，页面仍未更新，但虚拟DOM已经配置:beforeUpdate()&quot;);</span><br><span class="line">            console.group(&apos;beforeUpdate 更新前状态===============》&apos;);</span><br><span class="line">            var state5 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">            console.log(state5);</span><br><span class="line">            debugger</span><br><span class="line">        &#125;,</span><br><span class="line">        updated: function () &#123;</span><br><span class="line">            // alert(&quot;组件更新后，此方法执行后，页面显示:updated()&quot;);</span><br><span class="line">            console.group(&apos;updated 更新完成状态===============》&apos;);</span><br><span class="line">            var state6 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">            console.log(state6);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy: function () &#123;</span><br><span class="line">            // alert(&quot;组件销毁前:beforeDestroy()&quot;);</span><br><span class="line">            console.group(&apos;beforeDestroy 销毁前状态===============》&apos;);</span><br><span class="line">            var state7 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">            console.log(state7);</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed: function () &#123;</span><br><span class="line">            // alert(&quot;组件销毁:destroyed()&quot;);</span><br><span class="line">            console.group(&apos;destroyed 销毁完成状态===============》&apos;);</span><br><span class="line">            var state8 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">            console.log(state8);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><pre><code>简单说明一下结构：（1）创建了一个Vue根实例命名为vue-app，将其挂载到页面id为vue-app的dom元素上。（2）局部注册的一个组件child并在根实例中将其注册使其可以在根实例的作用域中使用。（3）将子组件用&lt;keep-alive&gt; 包裹，为接下来的测试作准备。（4）打开开发者工具的控制台查看结果：</code></pre><p><img src="https://img-blog.csdn.net/20180708120001224?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="运行结果"></p><h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h4><p>1.beforeCreate执行时：data和el均未初始化，值为：undefined；<br><img src="https://img-blog.csdn.net/20180708120535188?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="1"><br>2.created执行时：Vue 实例观察的数据对象data已经配置好，已经可以得到vue-app.msg的值，但Vue 实例使用的根 DOM 元素el还未初始化；<br><img src="https://img-blog.csdn.net/20180708120656851?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="2"><br>3.beforeMount执行时：data和el均已经初始化，但从等页面展示数据可以看出此时el并没有渲染进数据，el的值为“虚拟”DOM的元素节点；<br><img src="https://img-blog.csdn.net/20180708121111519?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="3"></p><p>4.mounted执行时：此时el已经渲染完成并挂载到实例上，页面基本显示完成；<br><img src="https://img-blog.csdn.net/20180708121250995?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="4"></p><p>5.beforeUpdate执行时：会更新当前组件数据，但未在页面渲染出来；<br><img src="https://img-blog.csdn.net/20180708123626921?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="5"></p><p>6.updated执行时：会更新当前组件数据，并在页面渲染出来；<br><img src="https://img-blog.csdn.net/20180708123809593?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="6"></p><p>7.beforeDestroy和destroyed执行时：Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。注意：这里的销毁并不指代’抹去’，而是表示’解绑’。<br><img src="https://img-blog.csdn.net/20180708124940141?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="7.1"></p><p>验证一下，控制台输入：<code>app.msg=&#39;super456&#39;</code> 页面并没有显示出来，结果显示：<br><img src="https://img-blog.csdn.net/20180708125515860?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="7.2"></p><h3 id="（四）一些钩子函数应用"><a href="#（四）一些钩子函数应用" class="headerlink" title="（四）一些钩子函数应用"></a>（四）一些钩子函数应用</h3><p>1.beforeCreate钩子中可以进行loading之类的动画加载；<br>2.在created钩子中可以对data数据进行操作，这个时候可以进行ajax请求将返回的数据赋给data，还可以进行网络接口的请求操作；<br>3.在mounted钩子对挂载的dom进行操作，也可以进行后台获取数据操作；</p><h3 id="（五）文献参考"><a href="#（五）文献参考" class="headerlink" title="（五）文献参考"></a>（五）文献参考</h3><p><em>特别感谢：作者：hxgzj 的<a href="https://segmentfault.com/a/1190000010336178" target="_blank" rel="noopener">关于Vue.js2.0生命周期的研究与理解</a> 这篇文章分析的很详细，看完后参考写了一个案例出来的。内容中也引用了很多。</em></p>]]></content>
    
    <summary type="html">
    
      在学习vue2.x入门后，开始慢慢熟悉vue的模式和开发脚手架项目实践过程中，需要对生命周期钩子函数一定的理解，多少会用到这些钩子函数，根据自己的理解写了一下，欢迎指正或学习交流。
    
    </summary>
    
      <category term="Vue.js" scheme="https://super456.github.io/categories/Vue-js/"/>
    
    
      <category term="vue2" scheme="https://super456.github.io/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>vue2.0基础知识点（一）</title>
    <link href="https://super456.github.io/2018/07/07/2018-07-07-vue2-base1/"/>
    <id>https://super456.github.io/2018/07/07/2018-07-07-vue2-base1/</id>
    <published>2018-07-07T04:47:25.000Z</published>
    <updated>2018-07-12T14:04:43.260Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文针对自己学习官方文档时，总结一些易容易混淆的知识点做一下记录。欢迎指正或学习交流。</strong></p><h3 id="（一）常用基础知识点"><a href="#（一）常用基础知识点" class="headerlink" title="（一）常用基础知识点"></a>（一）常用基础知识点</h3><ol><li><p><code>v-on:click=&#39;&#39;</code>、<code>@click=&#39;&#39;</code>、<code>:click=&#39;&#39;</code> 三种写法；<br>注意函数调用：直接使用双花括号调用函数是要使用函数名+括号，其他直接使用函数名即可，或使用函数名+括号（click事件中）注意传参的函数必须带括号，可以不带参数，不然会报错对象空值；</p></li><li><p><code>v-if=&#39;&#39;</code> 条件渲染与<code>v-show=&#39;&#39;</code> 的区别：v-if 条件：不存在不会占位空间不会被渲染挂载；v-show为真时，去掉display：none，为假时显示display：none。默认会占用空间，会被渲染挂载。</p></li><li><p><code>v-for=&#39;&#39;</code> 可以通过两组方式遍历数组（也可以遍历对象）：一种是通过数组下标；另一种是循环遍历；<br><code>v-for=&#39;user in users&#39; 或 v-for=&#39;(user,index) in users&#39;</code> 第二个参数是数组索引值；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   &lt;p&gt;v-for还可以渲染div&lt;/p&gt;</span><br><span class="line">&lt;div v-for=&apos;(user,index) in users&apos;&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;index+1&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;user.name&#125;&#125;---&#123;&#123;user.age&#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;v-for使用template标签，这个标签不像div一样会被渲染出来，只渲染template里面的标签&lt;/p&gt;</span><br><span class="line">&lt;template v-for=&apos;(user,index) in users&apos;&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;index+1&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;user.name&#125;&#125;---&#123;&#123;user.age&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;遍历数组里面的对象，遍历两次&lt;/p&gt;</span><br><span class="line">&lt;template v-for=&apos;(user,index) in users&apos;&gt;</span><br><span class="line">    &lt;div v-for=&quot;(item,key) in user&quot; &gt;</span><br><span class="line">        &lt;h5&gt;&#123;&#123;item&#125;&#125;---&#123;&#123;key&#125;&#125;&lt;/h5&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>数据双向绑定的两种方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   &lt;p&gt;双向数据绑定ref/$refs示例：input/select/textarea&lt;/p&gt;</span><br><span class="line">&lt;label for=&quot;&quot;&gt;姓名&lt;/label&gt;</span><br><span class="line">&lt;!-- ref属性标记值，可获取 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-on:keyup=&quot;logName&quot; ref=&apos;refName&apos;&gt;</span><br><span class="line">&lt;span&gt;您输入的名字为：&#123;&#123;name&#125;&#125;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">&lt;label for=&quot;age&quot;&gt;年龄&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-on:keyup=&apos;logAge&apos; id=&quot;age&quot; ref=&quot;refAge&quot;&gt;</span><br><span class="line">&lt;span&gt;您输入的年龄为：&#123;&#123;age&#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;双向数据绑定v-model示例：input/select/textarea&lt;/p&gt;</span><br><span class="line">&lt;label for=&quot;&quot;&gt;姓名&lt;/label&gt;</span><br><span class="line">&lt;!-- ref属性标记值，可获取 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&apos;name&apos;&gt;</span><br><span class="line">&lt;span&gt;您输入的名字为：&#123;&#123;name&#125;&#125;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">&lt;label for=&quot;age&quot;&gt;年龄&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;age&quot;&gt;</span><br><span class="line">&lt;span&gt;您输入的年龄为：&#123;&#123;age&#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><p> js部分：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el:&apos;#vue-app&apos;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:&apos;&apos;,</span><br><span class="line">        age:&apos;&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        logName:function()&#123;</span><br><span class="line">            // console.log(&quot;您正在输入名字~&quot;);</span><br><span class="line">            // $refs获取标记的值，后面接命名值+value</span><br><span class="line">            // console.log(this.$refs.refName.value);</span><br><span class="line">            this.name=this.$refs.refName.value;</span><br><span class="line">        &#125;,</span><br><span class="line">        logAge:function()&#123;</span><br><span class="line">            // console.log(&quot;您正在输入年龄~&quot;);</span><br><span class="line">            this.age=this.$refs.refAge.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>computed</code> 和 <code>methods</code> 方法：只要methods方法之一被调用，其他所有方法都会被渲染执行，很耗费性能；计算属性，只会调用相应的方法体，是应用于搜索，调用比较多的方法体。 </p></li></ol>]]></content>
    
    <summary type="html">
    
      本文针对自己学习官方文档时，总结一些易容易混淆的知识点做一下记录。欢迎指正或学习交流
    
    </summary>
    
      <category term="Vue.js" scheme="https://super456.github.io/categories/Vue-js/"/>
    
    
      <category term="vue2" scheme="https://super456.github.io/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>使用vue-cli2.x入门简单demo游戏</title>
    <link href="https://super456.github.io/2018/07/05/2018-07-05-vue2-demo-game/"/>
    <id>https://super456.github.io/2018/07/05/2018-07-05-vue2-demo-game/</id>
    <published>2018-07-05T04:47:25.000Z</published>
    <updated>2018-07-12T14:03:25.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-cli2-x-demo"><a href="#vue-cli2-x-demo" class="headerlink" title="vue-cli2.x-demo"></a>vue-cli2.x-demo</h1><p><strong>第一次使用vue-cli2.x搭建一个小demo游戏。代码文件有很多注释信息，通俗易懂的使用这个脚手架搭建一个入门小项目哈。</strong></p><h2 id="介绍使用"><a href="#介绍使用" class="headerlink" title="介绍使用"></a>介绍使用</h2><ul><li>使用默认创建的脚手架；</li><li>修改App.vue、HelloWorld.vue文件，assets文件夹添加了两张图片；</li><li>然后编译运行；</li></ul><h2 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h2><p><img src="https://img-blog.csdn.net/20180705123932887?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="运行截图"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>Web前端网站教程-米斯特吴</li></ul><p>源码在我的GitHub上：<a href="https://github.com/super456/vue-cli2.x-demo" target="_blank" rel="noopener">点击跳转</a></p>]]></content>
    
    <summary type="html">
    
      第一次使用vue-cli2.x搭建一个小demo游戏。代码文件有很多注释信息，通俗易懂的使用这个脚手架搭建一个入门小项目哈。
    
    </summary>
    
      <category term="Vue.js" scheme="https://super456.github.io/categories/Vue-js/"/>
    
    
      <category term="vue2" scheme="https://super456.github.io/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>vue基础父子组件输入动态传值</title>
    <link href="https://super456.github.io/2018/06/26/2018-06-26-vue2-component/"/>
    <id>https://super456.github.io/2018/06/26/2018-06-26-vue2-component/</id>
    <published>2018-06-26T13:11:25.000Z</published>
    <updated>2018-07-12T14:03:34.728Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在学习vue2.x的时候，遇到了一个问题，就是父子组件如何传递动态输入的值，文档介绍都是传递固定值的，比如我想传递一个刚输入的值呢，子组件如何显示？一下就是简单的代码：</strong></p><p>注：本人使用的是官方的<strong>脚手架</strong>学习的，可以通过父级组件向子级组件传递动态输入的值。然后本人重写了一个测试页面，直接复制代码就可以运行的（看懂以下代码，父子组件传递原理也是一样的，此处以对象为例）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;父组件向子组件动态传值示例&lt;/title&gt;</span><br><span class="line">    &lt;!-- 导入官方cdn的vue文件--&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">                &#123;&#123;item&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;p&gt;添加一个列表项：</span><br><span class="line">            &lt;input type=&quot;text&quot; v-model=&quot;newItem&quot; v-on:keyup.enter=&apos;addNew()&apos; placeholder=&quot;按回车键提交&quot;&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;显示输入框传递给子组件的添加内容（对象）：&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 注意这个传递的参数值必须前面有：v-bind:组件获取的变量名=&apos;需要传递的变量名&apos; 或 :组件获取的变量名=&apos;需要传递的变量名&apos;  ,否则传递的永远是字符串的值--&gt;</span><br><span class="line">        &lt;!-- 这种方式传递的是字符串 --&gt;</span><br><span class="line">        &lt;!-- &lt;component-a msg1childtofather=&apos;msgchildtofather&apos;&gt;&lt;/component-a&gt; --&gt;</span><br><span class="line">        &lt;!-- 以下两种方式都是传递对象 --&gt;</span><br><span class="line">        &lt;component-a :msg1childtofather=&apos;msgchildtofather&apos;&gt;&lt;/component-a&gt;</span><br><span class="line">        &lt;!-- &lt;component-a v-bind:msg1childtofather=&apos;msgchildtofather&apos;&gt;&lt;/component-a&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&apos;component-a&apos;, &#123;</span><br><span class="line">        props: [&apos;msg1childtofather&apos;],</span><br><span class="line">        template: &apos;&lt;h2 v-text=\&apos;msg1childtofather\&apos;&gt;&lt;/h2&gt;&apos;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            output: function () &#123;</span><br><span class="line">                alert(&apos;You click button! and submit value:&apos; + this.msg1childtofather);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            items: [],</span><br><span class="line">            newItem: &quot;&quot;,</span><br><span class="line">            msgchildtofather: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            addNew: function () &#123;</span><br><span class="line">                // 使用v-model和ul li input向数组items添加一个动态项内容，注意添加数组格式</span><br><span class="line">                this.items.push(this.newItem);</span><br><span class="line">                // 测试传递动态添加对象值</span><br><span class="line">                var childfather = &#123;</span><br><span class="line">                    label: this.newItem,</span><br><span class="line">                    label2: &apos;默认值&apos;</span><br><span class="line">                &#125;;</span><br><span class="line">                this.msgchildtofather = childfather;</span><br><span class="line"></span><br><span class="line">                this.newItem = &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>测试结果如下：<br><img src="https://img-blog.csdn.net/20180626230924404?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="默认界面"></p><p><img src="https://img-blog.csdn.net/20180626230934333?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="输入结果页面"></p>]]></content>
    
    <summary type="html">
    
      在学习vue2.x的时候，遇到了一个问题，就是父子组件如何传递动态输入的值，文档介绍都是传递固定值的，比如我想传递一个刚输入的值呢，子组件如何显示？一下就是简单的代码：
    
    </summary>
    
      <category term="Vue.js" scheme="https://super456.github.io/categories/Vue-js/"/>
    
    
      <category term="vue2" scheme="https://super456.github.io/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>小程序筛选框</title>
    <link href="https://super456.github.io/2018/05/09/2018-05-09-wxapp-filterbar/"/>
    <id>https://super456.github.io/2018/05/09/2018-05-09-wxapp-filterbar/</id>
    <published>2018-05-09T15:55:25.000Z</published>
    <updated>2018-07-12T13:29:53.377Z</updated>
    
    <content type="html"><![CDATA[<p>本来是一个GitHub上wux-weapp组件的筛选框，但是整个项目过于系统化，想提取某个组件都是有点难度的，首先要看得懂某个组件的整个生命逻辑，所以自己也是摸索过来的，便简单的提取了wux-weapp组件的FilterBar筛选框的部分功能，满足个人需求及分享一下。</p><h3 id="（一）原组件信息"><a href="#（一）原组件信息" class="headerlink" title="（一）原组件信息"></a>（一）原组件信息</h3><p>原组件是GitHub上的wux - 微信小程序自定义组件可以实现对话框、指示器、五星评分等22种功能。<a href="https://github.com/skyvow/wux" target="_blank" rel="noopener">点击这里跳转查看原组件</a><br><img src="http://pbr0erxxq.bkt.clouddn.com/wux-filterbar/01.png" alt="原组件图"></p><h3 id="（二）原组件筛选框"><a href="#（二）原组件筛选框" class="headerlink" title="（二）原组件筛选框"></a>（二）原组件筛选框</h3><p><img src="http://pbr0erxxq.bkt.clouddn.com/wux-filterbar/02.gif" alt="原组件筛选框"></p><h3 id="（三）提取的组件"><a href="#（三）提取的组件" class="headerlink" title="（三）提取的组件"></a>（三）提取的组件</h3><p>主要提取了筛选框页面中通过点击某个字或按钮右侧弹出的方式，方便个人将该组件放在任意需要的位置。<br><img src="http://pbr0erxxq.bkt.clouddn.com/wux-filterbar/03.gif" alt="提取的组件"></p><p><a href="https://github.com/super456/simpleFilterbar" target="_blank" rel="noopener">下载代码</a></p><p>简单的分享，各取所需吧。</p>]]></content>
    
    <summary type="html">
    
      本来是一个GitHub上wxUI组件的筛选框，但是整个项目过于系统化，想提取某个组件都是有点难度的，首先要看得懂某个组件的整个生命逻辑，所以自己也是摸索过来的，便简单的提取了wxUI组件的FilterBar筛选框的部分功能，满足个人需求及分享一下。
    
    </summary>
    
      <category term="小程序" scheme="https://super456.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="JavaScript" scheme="https://super456.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>今天真的好心塞</title>
    <link href="https://super456.github.io/2018/03/26/2018-03-26-heart-hurt/"/>
    <id>https://super456.github.io/2018/03/26/2018-03-26-heart-hurt/</id>
    <published>2018-03-26T15:33:25.000Z</published>
    <updated>2018-03-26T16:22:27.956Z</updated>
    
    <content type="html"><![CDATA[<p><strong>好久没有这么难受过了，可能经历过不如意的事情积累都一定程度是会爆发出来的吧！</strong></p><h3 id="我想要的"><a href="#我想要的" class="headerlink" title="我想要的"></a>我想要的</h3><p>从上大学以来，大一大二的生活，虽然不是那么逍遥、得意。但至少，没有那么多的烦恼，没有那么多的忧虑，没有那么多的害怕。那时候的自己，真的是，拿得起，放得下，心态很稳，就算遇到不开心的事，忍忍就过了，心中的热情很高涨，主要是对生活的还是很乐观的。</p><h3 id="很难得到"><a href="#很难得到" class="headerlink" title="很难得到"></a>很难得到</h3><p>结果，自从上了大三，真的是经历的人生中的过山车一样，最高点没站稳，就已经下坡很快了。失望的、绝望的事一推一堆。真的不能像个平常人一样笑得很自然了，就算是笑，都感觉带着心酸了。真的是好累、好累。<br><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/s/15220811854_medium.jpg" alt="d50735fae6cd7b894f830302082442a7d8330e47" border="0"></p><h3 id="造物弄人"><a href="#造物弄人" class="headerlink" title="造物弄人"></a>造物弄人</h3><p>大三下学期，开学到现在也是，不如意的事，也很多。关键是总感觉自己运气差的要死，心态都要崩溃了。好烦、好烦。以前总以为自己心态放好一点，眼不见心不烦，与其抱怨，不如想想怎么变得更好。这些都是安慰自己的谎言，时间都抹去不了，太刻苦铭心了。总以为努力就可以做的更好，结果还是得不到回报，只会让自己更受伤害，甚至留下眼泪，让你看清现实。</p><h3 id="生活好累"><a href="#生活好累" class="headerlink" title="生活好累"></a>生活好累</h3><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/152208118486.jpg" alt="185176869" border="0"></p><p>其实，我一点都不是一个悲观主义者，自己喜欢开同学玩笑，看内涵段子，努力有梦想的人。我也不是因为一些经历不如意的事就应该自暴自弃，而不是去反思自己以后做的更好的人。该笑的笑，该哭的哭，只要不是生死抉择的问题。没有什么大不了，大不了重头再来是吧。</p><p>高进的《有太多人》的中有几句歌词：也许你很在乎，别人眼中的自己，就算拼了命，只为了得到一次肯定，太难过的时候，就哭不出声音，擦干泪无所谓。</p><p>我有酒也有故事，就是等不到一个愿意听我讲的人。</p>]]></content>
    
    <summary type="html">
    
      有的路，你注定要一个人走，这不是孤独，而是选择。有些事，经历了，真的会很难受，但你又不得不重新面对。
    
    </summary>
    
      <category term="朝花惜拾" scheme="https://super456.github.io/categories/%E6%9C%9D%E8%8A%B1%E6%83%9C%E6%8B%BE/"/>
    
    
      <category term="生活" scheme="https://super456.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>一些容易忽视的JS基础知识</title>
    <link href="https://super456.github.io/2018/03/23/2018-03-23-return-js-base/"/>
    <id>https://super456.github.io/2018/03/23/2018-03-23-return-js-base/</id>
    <published>2018-03-23T10:18:25.000Z</published>
    <updated>2018-03-23T10:21:09.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="（一）、函数"><a href="#（一）、函数" class="headerlink" title="（一）、函数"></a>（一）、函数</h2><ol><li><p>使用未声明的变量时，它将自动被视为全局变量，即便你在函数中首次使用它亦如此。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">playTurn</span>(<span class="params">player,location</span>)</span>&#123;</span><br><span class="line"><span class="comment">//    使用变量points前，我们忘了关键字var声明它，因此它被自动视为全局变量</span></span><br><span class="line">   points=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">if</span>(location==<span class="number">1</span>)&#123;</span><br><span class="line">       points=points+<span class="number">100</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> points;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>如果局部变量与全局变量同名，它将“遮住”全局变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beanCounter=<span class="number">10</span>;<span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumberOfItems</span>(<span class="params">ordertype</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> beanCounter=<span class="number">0</span>;<span class="comment">//局部变量</span></span><br><span class="line">    <span class="keyword">if</span>(ordertype==<span class="string">"order"</span>)&#123;</span><br><span class="line">     <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beanCounter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此每次调用函数使用的是局部变量beanCounter时，都会遮住全局变量，但是全局变量和局部变量不会相互影响：如果你修改其中的一个，对另一个不会有任何影响，它们是彼此独立的变量。</p></li><li><p>如果形参与全局变量同名，它会遮住全局变量。</p></li><li><p>函数声明和函数表达式区别：</p><ul><li><p>使用函数声明时，函数将在执行代码前创建；而使用函数表达式时，函数将在运行阶段执行代码时创建。（简单的说浏览器执行代码分两遍时，第一遍分析所有的函数声明，并定义函数声明创建的函数，第二遍浏览器从上到下顺序执行代码，并定义函数表达式创建的函数。）</p></li><li><p>使用函数声明时，将创建一个与函数同名的变量，并让它指向函数；而使用函数表达式时，通常不给函数指定名称，因此你要么在代码中将函数赋给一个变量，要么以其他方式使用函数表达式。</p></li></ul></li><li><p>函数用法：可以将函数赋给变量；可以将函数传递给函数；可以从函数返回函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//可以将函数传递给函数</span></span><br><span class="line"><span class="comment">//定义一个对象变量</span></span><br><span class="line">      <span class="keyword">var</span> passengers = [&#123;</span><br><span class="line">       name: <span class="string">"dudu"</span>,</span><br><span class="line">       paid: <span class="literal">true</span>,</span><br><span class="line">       ticket: <span class="string">"firstclass"</span></span><br><span class="line">   &#125;, &#123;</span><br><span class="line">       name: <span class="string">"jane"</span>,</span><br><span class="line">       paid: <span class="literal">true</span>,</span><br><span class="line">       ticket: <span class="string">"coach"</span></span><br><span class="line">   &#125;, &#123;</span><br><span class="line">       name: <span class="string">"Sue"</span>,</span><br><span class="line">       paid: <span class="literal">false</span>,</span><br><span class="line">       ticket: <span class="string">"firstclass"</span></span><br><span class="line">   &#125;, &#123;</span><br><span class="line">       name: <span class="string">"Fujia"</span>,</span><br><span class="line">       paid: <span class="literal">true</span>,</span><br><span class="line">       ticket: <span class="string">"caoach"</span></span><br><span class="line">   &#125;];</span><br><span class="line">   <span class="comment">//创建一个传递函数，参数一个是对象一个是函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">processPassengers</span>(<span class="params">passengers, testFunction</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; passengers.length; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (testFunction(passengers[i].name)) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建需要作为参数传递的函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">checkNoFlyList</span>(<span class="params">passenger</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (passenger.name === <span class="string">"dudu"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 向函数传递函数</span></span><br><span class="line">   <span class="keyword">var</span> allCanFly = processPassengers(passengers, checkNoFlyList);<span class="comment">//第一个参数是对象，第二个参数是函数</span></span><br><span class="line">   <span class="keyword">if</span> (allCanFly) &#123;</span><br><span class="line">       alert(<span class="string">"这架飞机不能起飞，因为有乘客在禁飞名单里面"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以从函数返回函数</span></span><br><span class="line"><span class="comment">//定义一个对象变量</span></span><br><span class="line">   <span class="keyword">var</span> passengers = [&#123;</span><br><span class="line">         name: <span class="string">"dudu"</span>,</span><br><span class="line">         paid: <span class="literal">true</span>,</span><br><span class="line">         ticket: <span class="string">"firstclass"</span></span><br><span class="line">     &#125;, &#123;</span><br><span class="line">         name: <span class="string">"jane"</span>,</span><br><span class="line">         paid: <span class="literal">true</span>,</span><br><span class="line">         ticket: <span class="string">"coach"</span></span><br><span class="line">     &#125;, &#123;</span><br><span class="line">         name: <span class="string">"Sue"</span>,</span><br><span class="line">         paid: <span class="literal">false</span>,</span><br><span class="line">         ticket: <span class="string">"firstclass"</span></span><br><span class="line">     &#125;, &#123;</span><br><span class="line">         name: <span class="string">"Fujia"</span>,</span><br><span class="line">         paid: <span class="literal">true</span>,</span><br><span class="line">         ticket: <span class="string">"caoach"</span></span><br><span class="line">     &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createDrinkOrder</span>(<span class="params">passenger</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> orderFunction;<span class="comment">//创建一个变量用于存储要返回的函数</span></span><br><span class="line">         <span class="keyword">if</span> (passenger.ticket === <span class="string">"firstclass"</span>) &#123;</span><br><span class="line">             orderFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//定义返回的函数代码</span></span><br><span class="line">                 alert(<span class="string">"Would you like a cocktail or wine?"</span>);</span><br><span class="line">             &#125;;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             orderFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//定义返回的函数代码</span></span><br><span class="line">                 alert(<span class="string">"Your choice is cola or water."</span>);</span><br><span class="line">             &#125;;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> orderFunction;<span class="comment">//返回创建的函数</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">serveCustomer</span>(<span class="params">passenger</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> getDrinkOrderFunction = createDrinkOrder(passenger);<span class="comment">//注意这里是将返回的函数赋给变量引用</span></span><br><span class="line">         getDrinkOrderFunction();<span class="comment">//引用变量指向返回的函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">servePassengers</span>(<span class="params">passengers</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; passengers.length; i++) &#123;</span><br><span class="line">             serveCustomer(passengers[i]);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     servePassengers(passengers);</span><br></pre></td></tr></table></figure></li></ol><h2 id="（二）、对象"><a href="#（二）、对象" class="headerlink" title="（二）、对象"></a>（二）、对象</h2><ol><li><p>可以随时增删属性： <code>fido.dogYears=35;</code>就新增对象fido的一个属性dogYears，并赋值为35 , <code>delete fido.dogYears;</code>删除了一个对象fido的属性dogYears，如果成功删除了属性，delete表达式将返回true，仅当属性无法删除时，delete才返回false。如果对象属于浏览器而受到保护，即便你要删除的属性在对象中不存在，delete也将返回true。</p></li><li><p>对象变量存储的不是对象本身，而是指向对象的引用，因此对象变量也被称为引用变量。</p></li><li><p>向函数传递对象时，函数获得的是指向该对象的引用的副本，而不是对象本身的副本。因此，如果在函数中修改属性的值，修改的将是原始对象的值。</p></li><li><p>调用对象的方法时，关键字this指向其方法被调用的对象。要在对象的方法中访问对象的属性，必须使用句点表示法，但使用关键字this而不是对象名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fiat=&#123;</span><br><span class="line">    make:<span class="string">"Fiat"</span>,</span><br><span class="line">    started:<span class="literal">false</span>,</span><br><span class="line">    start:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.started=<span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    stop:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.started=<span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    drive:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.started)&#123;</span><br><span class="line">            alert(<span class="string">"Zoom Zoom"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(<span class="string">"You need to start the engine first."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>需要创建大量类似的对象时，适合使用构造函数。注意<code>new</code>和<code>this</code>的使用。</p></li></ol><h2 id="（三）、类型"><a href="#（三）、类型" class="headerlink" title="（三）、类型"></a>（三）、类型</h2><ol><li><p><code>undefined</code>类型:</p><ul><li>没有return语句的函数返回的值。</li><li>未赋值的变量的值。</li><li>稀疏数组中不存在的数组元素的值。</li><li>已删除的属性的值。</li><li>创建对象时没有赋给属性的值。</li></ul></li><li><p><code>null</code>表示对象不存在，跟<code>undefined</code>的区别是：在应该提供一个对象，但无法创建或找到时，将提供<code>null</code>；在变量未初始化、对象没有指定属性或数组没有指定元素时，将返回<code>undefined</code>。</p></li><li><p><code>NaN</code>表示无法用数字表示的数值结果，但它的类型仍是数字，注意：<code>NaN!=NaN</code>。判断一个数是不是<code>NaN</code>，使用<code>isNaN()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test=<span class="number">0</span>/<span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> test);<span class="comment">//number</span></span><br></pre></td></tr></table></figure></li><li><p>在JavaScript中总共有5个假值：<code>undefined</code>，<code>null</code>，<code>0</code>，<code>&quot;&quot;</code>和<code>false</code>；其他值都是真值。</p></li></ol><h2 id="（四）、闭包"><a href="#（四）、闭包" class="headerlink" title="（四）、闭包"></a>（四）、闭包</h2><ol><li><p>闭包：名词，指的是函数和引用环境。包含自由变量的函数与为所有这些自由变量提供了变量绑定的环境一起，被称为闭包。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">makeCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        count = count + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Counter;<span class="comment">//这是一个闭包</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> doCount = makeCounter();<span class="comment">//调用函数试，获得的是一个闭包：一个函数及其环境</span></span><br><span class="line"><span class="built_in">console</span>.log(doCount());</span><br><span class="line"><span class="built_in">console</span>.log(doCount());</span><br></pre></td></tr></table></figure></li></ol><h2 id="（五）、原型"><a href="#（五）、原型" class="headerlink" title="（五）、原型"></a>（五）、原型</h2><ol><li><p>原型：对象可以从其他对象那里继承属性和行为。更具体地说，js使用原型式继承，其中其行为被继承的对象称为原型（对象继承另一个对象后，就可以访问其多有的方法和属性）。</p></li><li><p>给构造函数的原型添加属性后，使用这个构造函数创建的实例都将继承这些属性。即便是以前创建的实例也不例外。</p></li><li><p>使用自定义的原型对象时，务必将原型的属性<code>constructor</code>设置为相应的构造函数，以保持一致。</p></li><li><p>要调用函数并指定函数体中<code>this</code>指向的对象，可调用其方法<code>call()</code>；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个构造函数    </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name, breed, weight</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.breed = breed;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给构造函数原型添加属性</span></span><br><span class="line">    Dog.prototype.species = <span class="string">"Canine"</span>;</span><br><span class="line">    <span class="comment">//给构造函数原型添加方法</span></span><br><span class="line">    Dog.prototype.bark = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.weight &gt; <span class="number">25</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"Says Woof"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"says Yip"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Dog.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Run"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    Dog.prototype.wag = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"wag"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个继承Dog构造函数的新的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ShowDog</span>(<span class="params">name, breed, weight, handler</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// this.name = name;</span></span><br><span class="line">        <span class="comment">// this.breed = breed;</span></span><br><span class="line">        <span class="comment">// this.weight = weight;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dog(name, breed, weight);  后面调用Dog原型属性会返回undefined</span></span><br><span class="line"></span><br><span class="line">        Dog.call(<span class="keyword">this</span>, name, breed, weight);<span class="comment">//注意这里要使用this</span></span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//ShowDog.prototype = new Dog();</span></span><br><span class="line">    ShowDog.prototype.constructor = ShowDog;<span class="comment">//设置构造函数ShowDog的原型指向自己本身</span></span><br><span class="line">    ShowDog.prototype.league = <span class="string">"Webville"</span>;</span><br><span class="line">    ShowDog.prototype.stack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Stack"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    ShowDog.prototype.bait = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Bait"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ShowDog.prototype.gait = <span class="function"><span class="keyword">function</span>(<span class="params">kind</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(kind + <span class="string">"ing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ShowDog.prototype.groom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Groom"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> scotty = <span class="keyword">new</span> ShowDog(<span class="string">"Scotty"</span>, <span class="string">"Scottish Terrish"</span>, <span class="number">15</span>, <span class="string">"Cookie"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(scotty.name); <span class="comment">//undefined，原因是showDog中使用的是：        Dog(name, breed, weight);</span></span><br><span class="line">    scotty.stack();</span><br><span class="line">    scotty.bark();</span><br><span class="line">    <span class="built_in">console</span>.log(scotty.league);</span><br><span class="line">    <span class="built_in">console</span>.log(scotty.species);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"scotty constructor is:"</span> + scotty.constructor); <span class="comment">//showDog</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>《Head First JavaScript 程序设计》</li></ul>]]></content>
    
    <summary type="html">
    
      学习JavaScript也有一段时间了，但是总有一些基础知识点容易搞混或者忘记，所以当自己回顾这些这些知识点的时候会模糊不清，又要重新看一遍资料，为了以后方便，所以这里记录一下，也是为了更深入的理解透彻。
    
    </summary>
    
      <category term="前端基础" scheme="https://super456.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="https://super456.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>如何简单的使用VScode编程工具</title>
    <link href="https://super456.github.io/2018/02/24/2018-02-24-simple-use-vs-code/"/>
    <id>https://super456.github.io/2018/02/24/2018-02-24-simple-use-vs-code/</id>
    <published>2018-02-23T16:00:00.000Z</published>
    <updated>2018-03-13T04:16:46.254Z</updated>
    
    <content type="html"><![CDATA[<p>由于经常使用，之前使用一些功能老是过段时间就忘记，只记住一些基本的操作。俗话说：工欲善其事，必先利其器。所以打算整理一下，以便忘记的时候可以温习一下，不至于浪费编码时间。</p><p>Visual Studio Code 是一个运行在桌面上，多平台的轻量级且功能强大的源代码编辑器。内置有JavaScript的，TypeScript和Node.js的支持，其他语言如C ++，C＃，Python和PHP等的可扩展，是一个非常丰富的生态系统。主打 web 开发，也是本人在学习前端过程中主要的使用的编程工具。</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/151954910151.png" alt="01" border="0"></p><h1 id="主命令框"><a href="#主命令框" class="headerlink" title="主命令框"></a>主命令框</h1><ol><li><p><code>F1</code>或 <code>Ctrl+Shift+P</code>: 打开命令面板。在打开的输入框内，可以输入任何命令，例如：按一下<code>Backspace</code>会进入到 <code>Ctrl+P</code>模式</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/151954910702.png" alt="04" border="0"></p></li><li><p>在<code>Ctrl+P</code>下输入&gt;可以进入<code>Ctrl+Shift+P</code>模式</p></li><li>在 <code>Ctrl+P</code>窗口下还可以:</li></ol><ul><li>直接输入文件名，跳转到文件</li><li><code>?</code>列出当前可执行的动作</li><li><code>!</code>显示 Errors或 Warnings，也可以<code>Ctrl+Shift+M</code></li><li><code>:</code>跳转到行数，也可以 <code>Ctrl+G</code>直接进入</li><li><code>@</code>跳转到symbol（搜索变量或者函数），也可以 <code>Ctrl+Shift+O</code>直接进入</li><li><code>@</code>根据分类跳转<code>symbol</code>，查找属性或函数，也可以 <code>Ctrl+Shift+O</code>后输入:进入</li><li><code>#</code>根据名字查找 <code>symbol</code>，也可以 <code>Ctrl+T</code></li></ul><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>打开一个新窗口：</td><td><code>Ctrl+Shift+N</code></td></tr><tr><td>关闭窗口：</td><td><code>Ctrl+Shift+W</code></td></tr><tr><td>同时打开多个编辑器（查看多个文件）</td></tr><tr><td>切出一个新的编辑器（最多 3 个）</td><td><code>Ctrl+\</code>，也可以按住 <code>Ctrl</code> 鼠标点击 Explorer 里的文件名</td></tr><tr><td>左中右 3 个编辑器的快捷键</td><td><code>Ctrl+1</code> <code>Ctrl+2</code> <code>Ctrl+3</code></td></tr><tr><td>编辑器换位置</td><td><code>Ctrl+k</code>然后按 <code>Left</code>或 <code>Right</code></td></tr></tbody></table><h1 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a>代码编辑</h1><h2 id="格式调整"><a href="#格式调整" class="headerlink" title="格式调整"></a>格式调整</h2><p><strong>注意：</strong> 对python文件进行代码格式化操作时，会提示安装<code>autopep8</code></p><ul><li>代码格式化： <code>Shift+Alt+F</code>，或 <code>Ctrl+Shift+P</code> 后输入 <code>format code</code></li><li>代码行缩进: <code>Ctrl+[</code> 、 <code>Ctrl+]</code></li><li>在当前行下边插入一行 <code>Ctrl+Enter</code></li><li>在当前行上方插入一行 <code>Ctrl+Shift+Enter</code></li><li>上下移动一行： <code>Alt+Up</code> 或 <code>Alt+Down</code></li><li>向上向下复制一行： <code>Shift+Alt+Up</code> 或 <code>Shift+Alt+Down</code></li></ul><h2 id="光标相关"><a href="#光标相关" class="headerlink" title="光标相关"></a>光标相关</h2><ul><li>移动到定义处： <code>F12</code></li><li>定义处缩略图：只看一眼而不跳转过去:<code>Alt+F12</code></li><li>移动到文件结尾： <code>Ctrl+End</code></li><li>移动到文件开头： <code>Ctrl+Home</code></li><li>跳转到光标上一次(下一次)位置（误操作的回退方案，非常有用）<code>ctrl + Left / Ctrl + Right</code></li></ul><p><strong>注意：</strong> 下面两个功能和alt+↑/↓配合，很方便的移动代码块：</p><ul><li>选择从光标到行尾：<code>Shift+End</code></li><li>选择从行首到光标处：<code>Shift+Home</code></li></ul><p><strong>注意：</strong> 这两个功能很爽，可以同时编辑一些变量名：</p><ul><li>多行编辑(列编辑)：<code>Ctrl+Alt+Down/Up</code>或者<code>Alt+Shift</code>+鼠标左键，可以批量选中文本并编辑</li><li>同时选中所有匹配： <code>Ctrl+Shift+L</code></li><li><code>Ctrl+D</code> 下一个匹配的也被选中 (在 sublime 中是删除当前行，后面自定义快键键中，设置与 <code>Ctrl+Shift+K</code> 互换了)</li><li>回退上一个光标操作： <code>Ctrl+U</code></li><li>删除光标右侧的所有字： <code>Ctrl+Delete</code></li><li>扩展/缩小选取范围： <code>Shift+Alt+Left</code> 和 <code>Shift+Alt+Right</code></li><li>多光标选取<code>Alt + 鼠标单击</code></li><li>逐步选中其它相同的symbol <code>Ctrl + D</code>(已更改快捷方式为：<code>Ctrl+Shift+K</code>)</li><li>全选相同symbol<code>Ctrl + F12</code></li><li>重构（重命名）Symbol <code>F2</code></li><li>查找所有引用了选中symbol的代码 <code>Shift + F12</code></li><li>跳转到symbol的定义处 <code>F12</code></li><li>瞥见下symbol的定义出（在该symbol下方展开面板，显示定义处代码，非常有用）<code>Alt + F12</code></li></ul><h2 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h2><p><strong>注意：</strong> 查看函数引用和批量休修改函数名，好用：</p><ul><li>重命名：比如要修改一个方法名，可以选中后按 <code>F2</code>，输入新的名字，回车，会发现所有的文件都修改了</li><li>找到所有的引用： <code>Shift+F12</code></li><li>同时修改本文件中所有匹配的： <code>Ctrl+F12</code></li><li>跳转到下一个 Error 或 Warning：当有多个错误时可以按 <code>F8</code>逐个跳转</li><li>查看 diff： 在 explorer 里选择文件右键 <code>Set file to compare</code>，然后需要对比的文件上右键选择 <code>Compare with file_name_you_chose</code></li></ul><h2 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h2><ul><li>查找:<code>Ctrl+F</code></li><li>查找替换:<code>Ctrl+H</code></li><li>整个文件夹中查找:<code>Ctrl+Shift+F</code></li></ul><h2 id="显示相关"><a href="#显示相关" class="headerlink" title="显示相关"></a>显示相关</h2><ul><li>全屏：<code>F11</code></li><li>区域整块放大/缩小：<code>Ctrl +/-</code></li><li>侧边栏显/隐：<code>Ctrl+B</code></li><li>显示资源管理器:<code>Ctrl+Shift+E</code></li><li>显示搜索:<code>Ctrl+Shift+F</code></li><li>显示 Git:<code>Ctrl+Shift+G</code></li><li>显示 Debug:<code>Ctrl+Shift+D</code></li><li>显示 Output:<code>Ctrl+Shift+U</code></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>文件自动保存设置：<code>File</code> -&gt; <code>AutoSave</code> ，或者 <code>Ctrl+Shift+P</code>，输入 <code>auto</code></p><h1 id="修改默认快捷键"><a href="#修改默认快捷键" class="headerlink" title="修改默认快捷键"></a>修改默认快捷键</h1><p>打开默认键盘快捷方式设置：<br><code>File</code>（文件） -&gt; <code>Preferences</code>（首选项） -&gt; <code>Keyboard Shortcuts</code>（键盘快捷方式），或者：<code>Alt+F</code> -&gt;<code>p</code>-&gt; <code>k</code>-&gt; 回车。</p><p>修改<code>keybindings.json</code>：(这个是当时自己添加的)</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// ctrl+d 删除一行</span><br><span class="line"> &#123;</span><br><span class="line">     &quot;key&quot;: &quot;ctrl+d&quot;,</span><br><span class="line">     &quot;command&quot;: &quot;editor.action.deleteLines&quot;,</span><br><span class="line">     &quot;when&quot;: &quot;editorTextFocus&quot;</span><br><span class="line"> &#125;,</span><br><span class="line"> // 与删除一行的快捷键互换</span><br><span class="line"> &#123;</span><br><span class="line">     &quot;key&quot;: &quot;ctrl+shift+k&quot;,</span><br><span class="line">     &quot;command&quot;: &quot;editor.action.addSelectionToNextFindMatch&quot;,</span><br><span class="line">     &quot;when&quot;: &quot;editorFocus&quot;</span><br><span class="line"> &#125;,</span><br><span class="line"> // ctrl+shift+/多行注释</span><br><span class="line"> &#123;</span><br><span class="line">     &quot;key&quot;:&quot;ctrl+shift+/&quot;,</span><br><span class="line">     &quot;command&quot;: &quot;editor.action.blockComment&quot;,</span><br><span class="line">     &quot;when&quot;: &quot;editorTextFocus&quot;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h1 id="推荐前端开发会用到的插件"><a href="#推荐前端开发会用到的插件" class="headerlink" title="推荐前端开发会用到的插件"></a>推荐前端开发会用到的插件</h1><ul><li>auto close tag 自动关闭HTML标签</li><li>Auto Rename Tag：自动修改标签</li><li>AutoFileNmae:auto complete file name，自动补全文件的名字</li><li>Beautify:显示js/json/css美化，按<code>F1</code></li><li>Bracket Pair Colorizer 标记显示不同颜色的关联括号</li><li>Color Info 显示颜色信息</li><li>CSS Formatter css格式化工具</li><li>Debugger for Chrome 谷歌调试工具（需要配置launch.json）</li><li>Document This  添加备注信息（only supports JavaScript and TypeScript）<code>Ctrl+Alt+D</code> and again <code>Ctrl+Alt+D</code></li><li>filesize 文件大小提示</li><li>GitLens 提示文件修改信息，具体到代码行</li><li>Guides:显示代码对其辅助线</li><li>HTML CSS Support css文件支持HTML标签提示</li><li>HTML Preview 预览编译HTML文件</li><li>HTML SCSS Support scss文件支持HTML标签提示</li><li>HTML Snippets 支持HTML标签提示</li><li>HTMLHint</li><li>intellisense for css class names in html 支持HTML文件中类名提示</li><li>JavaScript (ES6) snippets</li><li>jQuery Code Snippets</li><li>JS, CSS, HTML Formatting</li><li>Live HTML Previewer</li><li>markdownlint</li><li>Npm Intellisense</li><li>Path Intellisense: 路径匹配</li><li>Path Autocomplete</li><li>Vetur：VUE扩展</li><li>PostCSS Sorting</li><li>stylelint</li><li>stylefmt</li><li>ESLint</li><li>javascript standard format</li><li>Babel ES6/ES7</li><li>Add jsdoc comments</li><li>vue</li><li>weex</li><li>Reactjs code snippets</li><li>React Native Tools</li><li>Instant Markdown</li><li>Markdown Shortcuts</li><li>TextTransform</li><li>Color Highlight:写csss时，颜色值会增加对应的颜色背景显示</li><li>open in browser:  <code>alt+b</code>选择浏览器预览文件</li><li>Rainbow Brackets：有颜色的显示括号匹配</li><li>Settings Sync: 同步配置（需要配置GitHub的本地token key）</li></ul><h2 id="官网推荐插件"><a href="#官网推荐插件" class="headerlink" title="官网推荐插件"></a>官网推荐插件</h2><p><a href="https://marketplace.visualstudio.com/vscode" target="_blank" rel="noopener">点击跳转</a><br><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/15195491027.png" alt="02" border="0"></p><h2 id="推荐主题"><a href="#推荐主题" class="headerlink" title="推荐主题"></a>推荐主题</h2><p><a href="https://marketplace.visualstudio.com/search?target=VSCode&amp;category=Themes&amp;sortBy=Downloads" target="_blank" rel="noopener">点击跳转</a><br><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/151954910499.png" alt="03" border="0"></p><p><strong>注：</strong> 切换主题的快捷键：<code>f1</code> 或<code>ctrl+shift+p</code>输入theme 回车,上下切换：<code>ctrl+k</code>,<code>ctrl+t</code>。</p><ul><li>One Dark Pro</li><li>Atom One Dark</li><li>FlatUI</li><li>Material Icon Theme: 图标主题</li><li>vscode-icons</li><li>VSCode Great Icons</li><li>Dracula Official：主题，推荐</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://segmentfault.com/a/1190000010750790" target="_blank" rel="noopener">打造性感好用的VS Code编辑器</a></li><li><a href="https://www.w3cschool.cn/visualstudiocode/visualstudiocode-iy3422zb.html" target="_blank" rel="noopener">Visual Studio Code 简明使用教程</a></li><li><a href="https://jeasonstudio.gitbooks.io/vscode-cn-doc/content/md/Overview.html" target="_blank" rel="noopener">VScode中文文档</a></li><li><a href="http://mrpeak.github.io/2015/07/02/vscode-guide/#%E4%BB%8D%E6%9C%89%E4%B8%8D%E8%B6%B3" target="_blank" rel="noopener">Visual Studio Code 不完全使用指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      简单的VScode使用教程。
    
    </summary>
    
      <category term="编程工具" scheme="https://super456.github.io/categories/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="VScode" scheme="https://super456.github.io/tags/VScode/"/>
    
  </entry>
  
  <entry>
    <title>博客名称更改</title>
    <link href="https://super456.github.io/2018/02/13/2018-02-23-new-myblog-name/"/>
    <id>https://super456.github.io/2018/02/13/2018-02-23-new-myblog-name/</id>
    <published>2018-02-12T16:00:00.000Z</published>
    <updated>2018-03-12T16:08:05.789Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/151937660943.jpg" alt="0223" border="0"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在家无聊，努力的动力不大，但是不能总闲着，没事做就看书。本来之前想改博客名称的，一时想不到好的，现在想到了，就改了一个字而已，哈哈哈，有点无聊吧，不过，改完之后更能表现我内心的世界，最真实的想法，这才是最好的。2018，狗年一切都旺起来呦！</p>]]></content>
    
    <summary type="html">
    
      修改博客名称，代表新的寓意，新的出发点。
    
    </summary>
    
      <category term="建站记录" scheme="https://super456.github.io/categories/%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Hexo" scheme="https://super456.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>2018，我还没准备好开始呢</title>
    <link href="https://super456.github.io/2018/01/23/2018-01-23-new-start/"/>
    <id>https://super456.github.io/2018/01/23/2018-01-23-new-start/</id>
    <published>2018-01-22T16:00:00.000Z</published>
    <updated>2018-03-12T16:06:16.420Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/151669659893.jpg" alt="01" border="0"></p><p>“这些年我一直提醒自己一件事情，千万不要自己感动自己。大部分人看似的努力，不过是愚蠢导致的。”</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一直想写一份2017年的总结报告，就是想回首自己在这一年的得与失，更多的是想认清自己，然后想想未来的路要怎么走。可能这大三上学期，过的很复杂，更多的是不如意，但都过去的事了，没什么好说的，还是挺过来了，但这些都不算什么。总的来说就是一句话：<strong>越想得到的东西，越是得不到或者不如意，有些东西，注定是得不到的时候才是最好的。</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2018，你还是来了，不知不觉，而且已经过了半个多月了。然而我一切都还没打算好，我也不知道以后要怎么做的更好了，很迷茫，也会很累。我知道自己改变不了什么，就只是不想浑浑噩噩过日子而已。好吧，我会答应自己，过好每一天，哪怕是最简单的一天，我知道我不要变的那么孤独，要相信，这个世界上的真的有很多人在过着我想要的生活。2017，不再留念，2018，昂首前行。</p><p>相信自己，好好活着。:dog: :punch: :smiley:</p>]]></content>
    
    <summary type="html">
    
      荒废了几个月没更新博客了，时间过得真快，不知不觉已经2018年了，要好好奋斗了。
    
    </summary>
    
      <category term="朝花惜拾" scheme="https://super456.github.io/categories/%E6%9C%9D%E8%8A%B1%E6%83%9C%E6%8B%BE/"/>
    
    
      <category term="生活" scheme="https://super456.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>学生课程评教管理系统</title>
    <link href="https://super456.github.io/2017/12/01/2017-12-01-javaweb-ces/"/>
    <id>https://super456.github.io/2017/12/01/2017-12-01-javaweb-ces/</id>
    <published>2017-12-01T15:55:25.000Z</published>
    <updated>2018-07-12T13:36:51.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学生课程评教管理系统"><a href="#学生课程评教管理系统" class="headerlink" title="学生课程评教管理系统"></a>学生课程评教管理系统</h1><h3 id="（一）系统介绍"><a href="#（一）系统介绍" class="headerlink" title="（一）系统介绍"></a>（一）系统介绍</h3><p>本系统是针对我们学院课程接近期末会用纸质版评教卡对老师本学期的课程评分的不便及效率问题而做的在线学生课程评教管理系统。</p><p>本系统主要包括系统管理员、教师、学生三种类型的用户，以下是主要功能，其他以实际开发为准。</p><ol><li>系统管理员：完成系统管理与维护，例如，维护学生、教师及管理人员的维护。管理课程信息、课程评比、课程评教卡内容等。</li><li>教师：可以查询所教班级的评教情况、查询教师好评榜的评比结果、查询留言。</li><li>学生：可以查询自己的基本信息，可以对自己所选课程的老师进行评教、留言。</li></ol><h3 id="（二）系统技术介绍"><a href="#（二）系统技术介绍" class="headerlink" title="（二）系统技术介绍"></a>（二）系统技术介绍</h3><p>本系统是学习JSP课程而做的练习，欢迎二次开发。</p><ol><li>使用MVC模式开发；</li><li>界面使用HTML5、CSS3、boostrap封装；</li><li>使用jQuery库DOM处理；</li><li>使用一些组件特效（比如选项卡画面、登录背景方块滚动等）；</li><li>使用SQL Server 2008（使用mysql都可以，只要是JDBC驱动的都行，不过修改一下数据库连接接口参数就行了）；</li></ol><h3 id="（三）系统成果"><a href="#（三）系统成果" class="headerlink" title="（三）系统成果"></a>（三）系统成果</h3><ol><li><p>登录界面<br><img src="http://pbr0erxxq.bkt.clouddn.com/CES/login.png" alt="登录界面"></p></li><li><p>学生主页面<br><img src="http://pbr0erxxq.bkt.clouddn.com/CES/student.png" alt="登录界面"></p></li><li><p>教师主页面<br><img src="http://pbr0erxxq.bkt.clouddn.com/CES/teacher.png" alt="登录界面"></p></li><li><p>管理员主页面<br><img src="http://pbr0erxxq.bkt.clouddn.com/CES/admin.png" alt="登录界面"></p></li></ol><h3 id="（四）系统使用说明"><a href="#（四）系统使用说明" class="headerlink" title="（四）系统使用说明"></a>（四）系统使用说明</h3><ol><li><p><a href="https://github.com/super456/CurriculumEvaluationSystem" target="_blank" rel="noopener">下载项目代码</a></p></li><li><p>导入IDE，当时我开发的工具是myeclipse8.5，JDK1.7，tomcat6.0；eclipse其他都行，配置修改系统环境包文件（不同编程工具和系统配置环境都会有影响，按照提示补充或修改、缺失包文件就行了）</p></li><li><p>使用tomcat服务器启动</p></li><li><p>浏览器输入：<a href="http://localhost:8080/CurriculumEvaluationSystem" target="_blank" rel="noopener">http://localhost:8080/CurriculumEvaluationSystem</a></p></li></ol><p>如果遇到什么问题，解决不了的，欢迎留言。</p>]]></content>
    
    <summary type="html">
    
      本系统是针对我们学院课程接近期末会用纸质版评教卡对老师本学期的课程评分的不便及效率问题而做的在线学生课程评教管理系统。
    
    </summary>
    
      <category term="Java" scheme="https://super456.github.io/categories/Java/"/>
    
    
      <category term="后端Java基础" scheme="https://super456.github.io/tags/%E5%90%8E%E7%AB%AFJava%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java与Sql JDBC数据库连接及相关操作</title>
    <link href="https://super456.github.io/2017/11/06/2017-11-06-java-web-sql-jdbc/"/>
    <id>https://super456.github.io/2017/11/06/2017-11-06-java-web-sql-jdbc/</id>
    <published>2017-11-05T16:00:00.000Z</published>
    <updated>2018-03-12T16:05:20.994Z</updated>
    
    <content type="html"><![CDATA[<p>本人第一次使用Java来连接 SQL Server Management Studio ，记录一下自己的连接过程，也是为了方便他人，减少不必要的麻烦。</p><h3 id="（一）、下载安装数据库连接驱动"><a href="#（一）、下载安装数据库连接驱动" class="headerlink" title="（一）、下载安装数据库连接驱动"></a>（一）、下载安装数据库连接驱动</h3><ol><li>下载网址：<a href="https://www.microsoft.com/en-US/download/details.aspx?id=11774" target="_blank" rel="noopener">https://www.microsoft.com/en-US/download/details.aspx?id=11774</a></li></ol><ol><li><p>点击下载</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299225.png" alt="01" border="0"></p></li></ol><ol><li><p>点击运行解压，解压路径默认或自定义，后面要用到</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/15099429926.png" alt="02" border="0"></p></li></ol><ol><li><p>然后将解压好的文件打开到如图所示目录，根据自己安装或配置的JDK选择JRE文件夹打开（本人选择jre7），打开系统环境变量中，在classpath下添加sqljdbc41.jar的路径，如本人的路径是“F:\sqljdbc\sqljdbc_6.0\enu\jre7\sqljdbc41.jar;”(或者可直接复制sqljdbc41.jar到自己安装的jdk目录下)</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299341.png" alt="03" border="0"></p></li><li><p>设置SQL Server配置管理器，（不知道在哪里打开的，可以查询Sql Server Management Studio的文件位置，打开配置工具文件夹就可以找到了），打开MSSQL SERVER的协议，启动TCP/IP服务(打开的话在状态里会显示“已启用”)，重启服务器</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299377.png" alt="04" border="0"></p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299415.png" alt="05" border="0"></p></li></ol><h3 id="（二）、配置myeclipse8-5"><a href="#（二）、配置myeclipse8-5" class="headerlink" title="（二）、配置myeclipse8.5"></a>（二）、配置myeclipse8.5</h3><ol><li><p>打开MyEclipse中的，Window –&gt; Preferences –&gt; Java –&gt; Installed JRES——&gt;选中相应的jdk（本人的是自己添加的）——&gt;edit<br>如图所示：</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299487.png" alt="07" border="0"></p></li><li><p>选择如图的添加：自己之前解压的sqljdbc的jar包，如图本人选择的：</p></li></ol><p>   <img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299517.png" alt="08" border="0"></p><p>   <img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299545.png" alt="09" border="0"></p><ol><li><p>自己新建或选择一个项目右键单击目录窗口中, 选择Build Path –&gt; Configure Build Path…, 添加扩展jar文件，即把sqljdbc.jar添加到其中：</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299585.png" alt="10" border="0"></p></li></ol><h3 id="（三）、测试连接数据库"><a href="#（三）、测试连接数据库" class="headerlink" title="（三）、测试连接数据库"></a>（三）、测试连接数据库</h3><ol><li><p>编写java代码来测试连接数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">       <span class="keyword">import</span> java.sql.*;  </span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSqlJDBC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String driverName = <span class="string">"com.microsoft.sqlserver.jdbc.SQLServerDriver"</span>;   <span class="comment">//加载JDBC驱动  </span></span><br><span class="line"><span class="comment">//注意端口号可能会冲突和DatabaseName需要链接的数据库名称</span></span><br><span class="line">   String dbURL = <span class="string">"jdbc:sqlserver://localhost:1433; DatabaseName=curriculumEvaluationSystem"</span>;  </span><br><span class="line">   String userName = <span class="string">"sa"</span>;    </span><br><span class="line">   String userPwd = <span class="string">"123456"</span>;  </span><br><span class="line">   Connection dbConn;  </span><br><span class="line">   <span class="keyword">try</span> &#123;  </span><br><span class="line">   Class.forName(driverName);  </span><br><span class="line">   dbConn = DriverManager.getConnection(dbURL, userName, userPwd);  </span><br><span class="line">   System.out.println(<span class="string">"Connection Successful!"</span>); </span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">   e.printStackTrace();  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>运行会在Console界面提示：Connection Successful!则连接成功啦。</p></li><li><p>可能会遇到的问题及解决方式：（1）端口号冲突，自行修改SSMS的配置。（2）“Exception in thread “main” java.lang.UnsupportedClassVersionError: com/micro”，这个问题确实是由较高版本的JDK编译的java class文件试图在较低版本的JVM上运行产生的错误。需要更改JDK的版本。</p></li></ol>]]></content>
    
    <summary type="html">
    
      Java与Sql JDBC数据库连接及相关操作。
    
    </summary>
    
      <category term="数据库" scheme="https://super456.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Java" scheme="https://super456.github.io/tags/Java/"/>
    
      <category term="Sql JDBC" scheme="https://super456.github.io/tags/Sql-JDBC/"/>
    
  </entry>
  
  <entry>
    <title>关于SQL Server的Exec实现动态查询语句</title>
    <link href="https://super456.github.io/2017/10/16/2017-10-16-sql-server-exec-query/"/>
    <id>https://super456.github.io/2017/10/16/2017-10-16-sql-server-exec-query/</id>
    <published>2017-10-15T16:00:00.000Z</published>
    <updated>2018-03-12T16:04:07.067Z</updated>
    
    <content type="html"><![CDATA[<p>在Sql Server查询语句中使用变量表示表名、列字段名等动态查询方式</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天看了《SQL Server数据库应用技术》的书，遇到的点疑惑也解决了，顺便分享一下。我本来也要想做一个JSP的动态网页，也要用到这个数据库的查询语句的知识点，所以正好实用。<strong>（注：需要点SQL Server基础知识）</strong></p><h3 id="（一）exec与sp-executesql的区别"><a href="#（一）exec与sp-executesql的区别" class="headerlink" title="（一）exec与sp_executesql的区别"></a>（一）exec与sp_executesql的区别</h3><p>EXEC和sp_executesql都是SQL Server提供的两种动态查询语句，各有各的优势,但是比较实用的还是后者，它提供了输入输出的接口，而exec是没有的，最重要的是可以重用执行。一般使用exec语句命令，要么是执行一个存储过程，要么是执行一个动态的查询过程。</p><h3 id="（二）exec的使用"><a href="#（二）exec的使用" class="headerlink" title="（二）exec的使用"></a>（二）exec的使用</h3><ol><li><p>普通使用SQL语句查询可以使用以下3种方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> TableName</span><br><span class="line">exec(<span class="string">'select * from TableName'</span>)</span><br><span class="line">exec sp_executesql N<span class="string">'select * from TableName'</span></span><br></pre></td></tr></table></figure></li><li><p>字段名做变量查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @course <span class="built_in">varchar</span> </span><br><span class="line"><span class="keyword">set</span> @course = <span class="string">'课程名'</span></span><br><span class="line">Exec(<span class="string">'select '</span>+ @course +<span class="string">' from 课程表'</span>)</span><br></pre></td></tr></table></figure><p>执行结果截图是：</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150816519713.png" alt="03表变量动态查询课程名信息" border="0"></p><p><strong>需要注意的是：</strong></p><p>(2-1)要声明数据类型的长度，否则会报错</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/15081651974.png" alt="04坑1没有声明数据类型大小很重要" border="0"></p><p>(2-2)字符串衔接没有使用空格</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150816537825.png" alt="05坑2没有使用空格" border="0"></p></li><li><p>表名做变量查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @tableName <span class="built_in">varchar</span>(<span class="number">50</span>) </span><br><span class="line"><span class="keyword">set</span> @tableName = <span class="string">'课程表'</span></span><br><span class="line">Exec(<span class="string">'select * from '</span>+@TableName)</span><br></pre></td></tr></table></figure><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150816620699.png" alt="06表名做变量查询结果" border="0"></p><p><strong>注意事项跟上面一样</strong></p></li><li><p>批处理查询（多个变量字符串）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @TableName <span class="built_in">varchar</span>(<span class="number">50</span>),@SqlString <span class="built_in">varchar</span>(<span class="number">200</span>),@CourseID <span class="built_in">int</span>;</span><br><span class="line"><span class="keyword">SET</span> @TableName = <span class="string">'课程表'</span>;</span><br><span class="line"><span class="keyword">SET</span> @CourseID =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @SqlString = <span class="string">'select * from '</span>+<span class="keyword">quotename</span>(@TableName) +<span class="string">'where ID = '</span>+<span class="keyword">cast</span>(@CourseID <span class="keyword">as</span> <span class="built_in">varchar</span>(<span class="number">10</span>))</span><br><span class="line">EXEC(@SqlString);</span><br></pre></td></tr></table></figure><p>执行结果截图：</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150816713992.png" alt="08成功结果" border="0"></p><p><strong>需要注意的是：</strong></p><p>(3-1)要将变量不是字符型的转换成字符型，否则会报错，使用cast()转换</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150816713964.png" alt="07注意cast" border="0"></p><p>(3-2)exec()括号内不允许使用多个变量串联的字符串，否则会报错</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/1508168496.png" alt="09变量串联字符串查询" border="0"></p><p>建议使用多个字符串的变量之间串联，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(@SqlString1+@SqlString2+@SqlString3)</span><br></pre></td></tr></table></figure></li><li><p>exec()接口问题</p><p>简单的说就是不支持动态查询输入参数和输出参数，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @TableName <span class="built_in">varchar</span>(<span class="number">50</span>),@XXCourseID <span class="built_in">varchar</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">SET</span> @TableName = <span class="string">'课程表'</span>;</span><br><span class="line"><span class="keyword">SET</span> @XXCourseID =<span class="string">'5'</span>;</span><br><span class="line">exec('<span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">'+quotename(@TableName) +'</span><span class="keyword">where</span> 先修课<span class="keyword">ID</span> = <span class="string">'+@XXCourseID)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="（三）sp-executesql的使用"><a href="#（三）sp-executesql的使用" class="headerlink" title="（三）sp_executesql的使用"></a>（三）sp_executesql的使用</h3><ol><li><p>简单的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @TableName <span class="built_in">varchar</span>(<span class="number">50</span>),@SqlString <span class="keyword">nvarchar</span>(<span class="number">200</span>),@CourseID <span class="built_in">int</span>;</span><br><span class="line"><span class="keyword">SET</span> @TableName = <span class="string">'课程表'</span>;</span><br><span class="line"><span class="keyword">SET</span> @CourseID =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @SqlString = <span class="string">'select * from '</span>+<span class="keyword">quotename</span>(@TableName) +<span class="string">'where ID = '</span>+<span class="keyword">cast</span>(@CourseID <span class="keyword">as</span> <span class="built_in">varchar</span>(<span class="number">10</span>))</span><br><span class="line">EXEC sp_executesql @SqlString</span><br></pre></td></tr></table></figure><p><strong>需要注意的是：</strong></p><p>(1-1)执行的查询语句字符串为三种类型：ntext、nchar、nvarchar，否则会报错</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150816938945.png" alt="10注意查询语句" border="0"></p></li><li><p>使用接口（支持参数的输入输出）</p><blockquote><p><code>@stmt = &lt;statement&gt;</code>,–类似存储过程主体</p><p><code>@params = &lt;params&gt;</code>, –类似存储过程参数部分</p><p><code>&lt;params assignment&gt;</code>–类似存储过程调用</p><p><code>@stmt</code>参数是输入的动态批处理，它可以引入输入参数或输出参数，和存储过程的主体语句一样，只不过它是动态的，而存储过程是静态的，不过你也可以在存储过程中使用sp_executesql;</p><p><code>@params</code>参数与定义输入/输出参数的存储过程头类似，实际上和存储过程头的语法完全一样；</p><p><code>@&lt;params assignment&gt;</code> 与调用存储过程的EXEC部分类似。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @TableName <span class="built_in">varchar</span>(<span class="number">50</span>),@SqlString <span class="keyword">nvarchar</span>(<span class="number">200</span>),@CourseID <span class="built_in">int</span>;</span><br><span class="line"><span class="keyword">SET</span> @TableName = <span class="string">'课程表'</span>;</span><br><span class="line"><span class="keyword">SET</span> @CourseID =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @SqlString = <span class="string">'select * from '</span>+<span class="keyword">quotename</span>(@TableName) +<span class="string">'where ID = @ID'</span></span><br><span class="line">EXEC sp_executesql </span><br><span class="line">    @stmt=@SqlString,</span><br><span class="line">    @params=N<span class="string">'@ID int'</span>,</span><br><span class="line">    @<span class="keyword">ID</span>=@CourseID</span><br></pre></td></tr></table></figure><p>执行结果截图：</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150817020063.png" alt="12接口查询" border="0"></p></li><li><p>使用输出参数为调用批处理中的变量返回值</p><p>不做说明，目前暂时没有用到</p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://www.cnblogs.com/xbf321/archive/2008/11/02/1325067.html" target="_blank" rel="noopener">返回主页 兴百放’s Blogs</a></li></ul>]]></content>
    
    <summary type="html">
    
      关于SQL Server的Exec实现动态查询语句。
    
    </summary>
    
      <category term="数据库" scheme="https://super456.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL Server" scheme="https://super456.github.io/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>国庆兼职——我们的故事</title>
    <link href="https://super456.github.io/2017/10/07/2017-10-07-national-day-parttime-jobs/"/>
    <id>https://super456.github.io/2017/10/07/2017-10-07-national-day-parttime-jobs/</id>
    <published>2017-10-06T16:00:00.000Z</published>
    <updated>2018-03-12T16:03:00.449Z</updated>
    
    <content type="html"><![CDATA[<p>【世界那么大——可我偏偏认识你】赚的钱虽然不多，但是我们有缘走到了一起。每天纯纯碎碎为了工作，简简单单的快乐，让我们活得洒脱，过得充实，玩得任性，走得自如。这些日子让我明白：在一起的陪伴，胜过千言万语，而这终将是记忆中一片靓丽的风景。好怀念曾经的我们。</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/1507370913.jpg" alt="timg" border="0"></p><p>想起我们几个男生要准备去的前几天，很憧憬着那里——嘉华温泉酒店，算是五星级酒店吧。想了很多我们要带的东西，比如说带UNO、带扑克牌，带三国杀、带脸盘、带洗发水、带沐浴露、带洗衣粉等等。一大推乱七八糟的东西，毕竟要在那里住一个星期的。还要准备一些任职的东西，还要提前安排好自己的工作。真的好期待那里，不知道去到后会是怎么样的。</p><p>30号那天下午，倩仪姐来接牌坊我们，我们10个人出发了，4个女生，6个男生，不知道会发生什么样的故事，好期待，不过倩仪姐说会很忙，真的会很忙，:worried::worried::worried:，这个我真信了，不过就算这样样，来到来了，怕啥？不能怂，就是干！:confused::confused::confused:去到之后，倩仪姐带我们搞定一切事务及工作明天上班的工作安排。酒店很大，有点像小区，很豪华，工衣很好，这里的员工也都很年轻，这里的环境也很优美，反正比我们学校好很多，宿舍环境好的没话说，这里还可以看到白水寨的瀑布，很壮观。员工餐厅很小，但是饭菜好吃的一批（主要是跟学校饭堂比的），还有宵夜，还有水果。反正打饭菜都是自己动手，想吃什么就吃什么，想吃多少都可以的。过节还有福利呦:smirk::smirk::smirk:。</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150737070191.jpg" alt="微信图片_201710071745036" border="0"></p><p>我们各自被安排好本分工作之后，这几天的工作性质是一样的。我被安排到上午去客房开荒（刚装修完的客房打扫卫生）3个小时，下午扮演卡通（扮演熊大）3个小时，晚上中餐传菜员3个小时。第一天上班，感觉身体被掏空:scream:，累的真的是躺下就能睡着了:sleeping:，可能第一次接触工作量太大的东西，真的是比工厂干活还累的那种，特别是开荒，扮演卡通。开荒容易手腿麻痹，但是可以偷懒呀（我们可以在一起讲话，去其他地方闲逛:wink::wink::wink:），扮演卡通主要是腰和腿都很麻痹，容易酸痛，关键是不容易偷懒，很悲催。晚上的传菜员还好，可以偷懒，工作有时也很闲，有时手臂也累的顶不住。第二天和第三天就开始慢慢适应了工作，虽然每天都很累，但是我们吃的很多，比我在饭堂吃的多了很多，要补回来的。每天也是一上班就希望快点下班，等不及了的那种。有一个男生干了两天就说要辞职了，结果真的走了，还一直抱怨太辛苦。还好，再苦再累，都挺的过来，我们几个人在一起都没有放弃，我相信我们不会忘记这段艰苦的岁月:sweat_smile::sweat_smile::sweat_smile:。</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150737070092.jpg" alt="微信图片_201710071745027" border="0"><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/15073707003.jpg" alt="微信图片_201710071745025" border="0"></p><p>2号那晚，娜娜生日啦！我们一起帮她过生日，感觉自己几年没有吃生日蛋糕了，好美呦:smiley::kissing_closed_eyes:。</p><p>4号那晚，也就是中秋节。下班后，酒店举办的客人及员工参与的中秋节活动，奖品很丰富，还有免费的吃喝，哈哈哈。我们几个人，玩的好开心，可惜没怎么拍照。有猜灯谜、比慢骑单车、吹乒乓球过水杯、接扔公仔游戏四样。当然，主要是奖品啦。不好的就是：为什么要分员工区奖品和客人区奖品。还差距这么大，客人区奖品都是很有纪念性的东西，而员工区奖品都是生活用品。一直想要客人区奖品的二等奖熊熊公仔，真的好可爱呢，特别是棕褐色的，好暖心。</p><p>6号那晚，我们聚在一起吃了酒店西餐的自助餐，员工价88的，还可以哦，这一波不亏不亏:yum::yum::yum:。好多东西可以吃的，反正目前这是我吃的最豪华的自助餐了吧。甜品、牛排、羊排、鸡排、蒸包、饮料、小吃、关东煮、水果、海鲜等等呢。</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/15073706973.jpg" alt="微信图片_20171007174459" border="0"></p><p>吃的撑呀。还有，我们去看了草坪飞飞姐的举办的活动（也是我待过的部门），互动了很多，人也很多。听唱歌看跳舞，我们也用扑克牌玩了真心话大冒险，这个可以有，很刺激，还好大家都玩的开，很稳啦。这一晚，我们几个男生，也卧床谈了几个钟，我们明天就要回学校了，时间过的好快的，今晚也是我们在嘉华待过最特别的时光:relaxed::relaxed::relaxed:。</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150737069946.jpg" alt="微信图片_201710071745012" border="0"></p><p>7号早上十点半，我们离开了嘉华，感谢嘉华，让我们走到了一起，让我们度过了难忘的日子，让我们留下了彼此的记忆。<strong>感谢一起兼职的我们，我们不负好人生时光。我们像是一“嘉”人了。When we were young…:no_mouth::no_mouth::no_mouth:</strong></p>]]></content>
    
    <summary type="html">
    
      赚的钱虽然不多，但是我们有缘走到了一起。每天纯纯碎碎为了工作，简简单单的快乐，让我们活得洒脱，过得充实，玩得任性，走得自如。这些日子让我明白：在一起的陪伴，胜过千言万语。好怀念曾经的我们。
    
    </summary>
    
      <category term="我的大学" scheme="https://super456.github.io/categories/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="大三上" scheme="https://super456.github.io/tags/%E5%A4%A7%E4%B8%89%E4%B8%8A/"/>
    
  </entry>
  
  <entry>
    <title>【js基础】对象（二）</title>
    <link href="https://super456.github.io/2017/09/24/2017-09-24-study-js7-object-data/"/>
    <id>https://super456.github.io/2017/09/24/2017-09-24-study-js7-object-data/</id>
    <published>2017-09-23T16:00:00.000Z</published>
    <updated>2018-03-12T16:01:33.226Z</updated>
    
    <content type="html"><![CDATA[<p>重新温故学习JavaScript基础知识点，记录自己的学习过程，学习js基础第六章节对象第二节对象分类-内建对象-数据封装对象。</p><h2 id="对象分类"><a href="#对象分类" class="headerlink" title="对象分类"></a>对象分类</h2><h3 id="一-、内建对象"><a href="#一-、内建对象" class="headerlink" title="(一)、内建对象"></a>(一)、内建对象</h3><h4 id="一-、数据封装对象"><a href="#一-、数据封装对象" class="headerlink" title="(一)、数据封装对象"></a>(一)、数据封装对象</h4><ol><li><p>Object对象</p><p>(1)定义：Object是Javascript中所有对象的父级对象，我们创建的所有对象都继承于此，包括内建对象</p><p>(2)语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种：</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Object</span>([value]);</span><br><span class="line"> <span class="comment">//第二种：</span></span><br><span class="line">&#123;<span class="attr">name</span>:value,<span class="attr">name</span>:value...&#125;;</span><br></pre></td></tr></table></figure><p>(3)描述：Object 构造函数为给定的值创建一个对象包装。如果给定值是  <code>null or undefined</code>，将会创建并返回一个空对象，否则，将返回一个与给定值对应类型的对象。当以非构造函数形式被调用时，Object 等同于 <code>new Object()</code>。</p><p>(4)属性：<code>Object.prototype</code>：可以为所有Object类型的对象添加属性</p><p>(5)方法</p><p>(5-1) <code>Object.create()</code>:指定原型对象和属性创建一个对象。</p><p>语法：<code>Object.create(proto,[propertiesObject]);</code></p><p>参数：<code>proto</code>:一个对象，作为新创建对象的原型，<code>propertiesObject</code>:一个对象值，可以包含若干个属性，属性名称为新建对象的属性名，属性值为那个属性的属性描述对象。</p><p>(5-2) <code>Object.defineProperty()</code>:给对象添加/修改一个属性并指定该属性的配置</p><p>语法：<code>Object.defineProperty(obj,prop,descriptor);</code></p><p>参数：<code>obj</code>：需要定义的对象，<code>prop</code>：需要定义或修改的属性名，<code>descriptor</code>：属性定义或修改的属性的描述</p><p><strong>描述：</strong></p><p><em>该方法允许精确添加或修改对象的属性。正常的属性添加通过赋值来创建并显示在属性枚举中（for…in 循环 或 Object.keys 方法）， 这种方式添加的属性值可能被改变，也可能会被 删除。该方法允许改变这些额外细节的默认设置。</em></p><p><em>对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。数据描述符是一个拥有可写或不可写值的属性。存取描述符是由一对 getter-setter 函数功能来描述的属性。描述符必须是两种形式之一；</em></p><p><strong>数据描述符和存取描述符均具有以下可选键值：</strong></p><p>|   属性  |   作用  |<br>|———–|————|<br>|configureable|当且仅当这个属性描述符值为 true 时，该属性可能会改变，也可能会被从相应的对象删除。默认为 false。|<br>|enumerable| 当且仅当该属性出现在相应的对象枚举属性中。默认为 false。|<br>|value|与属性有关的值。可以是任何有效的Javascript值。默认为undefined|<br>|writable|当且仅当可能用赋值运算符改变与属性相关的值。默认为false|</p><p><strong>存取描述同时具有以下可选键值：</strong></p><p>|   属性  |   作用  |<br>|———–|————|<br>|get|一个给属性提供getter的方法，如果没有getter则为undefined。方法将返回作用属性的值，默认为undefined|<br>|set|一个给属性提供setter的方法，如果没有setter则为undefined。该方法将受到作为唯一参数的新值分配给属性。默认为undefined|</p><p><strong>注意：</strong>这些选项不一定是自身属性，如果是继承来的也要考虑。为了确认保留这些默认值，你可能要在这之前冻结 <code>Object.prototype</code>，明确指定所有的选项，或者将 <code>__proto__ =null;</code>属性指向空。</p><p>(5-2-1)可选键值对应作用表：</p></li></ol><p>   (5-3) <code>Object.defineProperties()</code>:在一个对象上添加或修改一个或者多个自有属性，并返回该对象。</p><p>   语法：<code>Object.defineProperities(obj,props);</code></p><p>   参数：<code>obj</code>:将要被添加属性或修改属性的对象，<code>props</code>:该对象的一个或多个键值对定义了将要为对象添加或修改的属性的具体配置</p><p>   (5-4) <code>Object.keys()</code>:方法会返回一个由给定对象的所有可枚举自身属性的属性名组成的数组，数组中属性名的排列顺序和使用for-in循环遍历该对象时返回的顺序一致(两者的主要区别是for-in还会遍历除一个对象从其原型链上继承到得可枚举的属性)</p><p>   语法：<code>Object.keys(obj);</code></p><p>   参数：返回该对象的所有可枚举自身属性的属性名</p><p>   <strong>描述：</strong><code>Object.keys</code>返回一个所有元素为字符串的数组，其元素来自于从给定的对象上面可直接枚举的属性。这些属性的顺序与手动遍历该对象属性时的一致。如果你想获取一个对象的所有属性,，甚至包括不可枚举的，可以通过<code>Object.getOwnPropertyNames()</code>实现</p><p>   (5-5) <code>Object.getOwnPropertyNames()</code>:返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性）组成的数组</p><p>   语法：<code>Object.getOwnPropertyNames(obj);</code></p><p>   参数：<code>obj</code>:要查看的对象</p><p>   <strong>描述：</strong><code>Object.getOwnPropertyNames</code> 返回一个数组，该数组对元素是 obj 自身拥有的枚举或不可枚举属性名称字符串。数组中枚举属性的顺序与通过 for…in loop（或 Object.keys)）迭代该对象属性时一致。 数组中不可枚举属性的顺序未定义。</p><p>   (5-6) <code>Object.getOwnPropertyDescriptor()</code>：返回指定对象上一个自有属性对应的属性描述符。(自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）)</p><p>   语法：<code>Object.getOwnPropertyDescriptor(obj,prop);</code></p><p>   参数：<code>obj</code>:在该对象上查看属性，<code>prop</code>:一个属性名称，该属性的属性描述被返回</p><p>   返回值：如果指定的属性存在于对象上，则返回其属性描述符（property descriptor），否则返回 undefined</p><p>   <strong>描述：</strong>该方法允许对一个属性的描述进行检索。在 Javascript 中， 属性 由一个字符串类型的“名字”（name）和一个“属性描述符”（property descriptor）对象构成。一个属性描述符是一个记录。</p><p>   (5-7) <code>Object.getPrototypeOf()</code>:返回指定对象的原型(也就是该对象内部属性[[Prototype]]的值)</p><p>   语法：<code>Object.getPrototypeOf(obj);</code></p><p>   参数：要返回的对象</p><p>   <strong>描述：</strong>如果参数不是一个对象类型，将跑出TypeError异常</p><p>   (5-8) <code>Object.freeze()</code>:冻结一个对象。冻结对象是指那些不能添加新的属性，不能修改已有属性的值，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性的对象。也就是说这个对象永远不能改变的。</p><p>   语法：<code>Object.freeze(obj);</code></p><p>   参数：<code>obj</code>:要被冻结的对象</p><p>   <strong>描述：</strong>冻结对象的所有自身属性都不可能以任何方式被修改。任何尝试修改该对象的操作都会失败，可能是静默失败，也可能会抛出异常（严格模式中）。数据属性的值不可更改，访问器属性（有getter和setter）也同样（但由于是函数调用，给人的错觉是还是可以修改这个属性）。如果一个属性的值是个对象，则这个对象中的属性是可以修改的，除非它也是个冻结对象。</p><p>   (5-9) <code>Object.isFrozen()</code>:判断对象是否已经被冻结</p><p>   语法：<code>Object.isFrozen(obj);</code></p><p>   参数：<code>obj</code>:被检测的对象</p><p>   <strong>描述：</strong>一个对象是冻结的（frozen）是指它不可扩展，所有属性都是不可配置的（non-configurable），且所有数据属性（data properties）都是不可写的（non-writable）。数据属性是值那些没有取值器（getter）或赋值器（setter）的属性。</p><p>   (5-10) <code>Object.preventExtensions()</code>:阻止对象扩展</p><p>   语法：<code>Object.preventExtensions(obj);</code></p><p>   参数：<code>obj</code>:将要变得不可扩展的对象</p><p>   描述：如果一个对象可以添加新的属性，则这个对象是可扩展的。preventExtensions 可以让这个对象变的不可扩展，也就是不能再有新的属性。需要注意的是不可扩展的对象的属性通常仍然可以被删除。尝试给一个不可扩展对象添加新属性的操作将会失败，不过可能是静默失败，也可能会抛出 TypeError 异常（严格模式）。</p><p>   (5-11) <code>Object.isExtensible()</code>:检测一个对象是否可扩展(是否可以在它上面添加新的属性)</p><p>   语法：<code>Object.isExtensible(obj);</code></p><p>   参数：<code>obj</code>：需要检测的对象</p><p>   <strong>描述：</strong>默认情况下，对象是可扩展的：即可以为他们添加新的属性。以及它们的 <code>__proto__</code>属性可以被更改。<code>Object.preventExtensions</code>，<code>Object.seal</code> 或 <code>Object.freeze</code> 方法都可以标记一个对象为不可扩展（<code>non-extensible</code>）。</p><p>   (5-12) <code>Object.seal()</code>:可以让一个对象密封，并返回被密封之后的对象。密封对象是指那些不能添加新的属性、不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性，但可能可以修改已有属性的值的对象</p><p>   语法：<code>Object.seal(obj);</code></p><p>   参数：<code>obj</code>:要被密封的对象</p><p>   <strong>描述：</strong>通常情况下，一个对象是可扩展的（可以添加新的属性）。密封一个对象会让这个对象变的不能添加新属性，且所有已有属性会变的不可配置。属性不可配置的效果就是属性变的不可删除，以及一个数据属性不能被重新定义成为访问器属性，或者反之。但属性的值仍然可以修改。尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出TypeError 异常（严格模式）。不会影响从原型链上继承的属性。但 <code>__proto__ (  )</code>属性的值也会不能修改。</p><p>   (5-13) <code>Object.isSealed()</code>:检测一个对象是否被密封sealed</p><p>   语法：<code>Object.isSealed(obj);</code></p><p>   参数：<code>obj</code>:要被检测的对象</p><p>   <strong>描述：</strong>如果这个对象是密封的，则返回 true，否则返回 false。密封对象是指那些不可 扩展 的，且所有自身属性都不可配置的（non-configurable）对象。</p><ol><li><p><code>Object.prototype</code></p><p>(1)JavaScript语言的所有对象都是由Object衍生的对象。</p><p>(2)所有对象都继承了<code>Object.prototype</code>的方法和属性，尽管它们可能被覆盖。</p><p>(3)属性：<code>Object.prototype.constructor</code>:返回一个指向创建了该对象原型的函数引用。</p><p><strong>注意：</strong>该属性的值是那个函数本身，而不是一个包含函数名称的字符串。对于原始值（如1，true 或 “test”），该属性为只读。所有对象都会从它的原型上继承一个 constructor 属性。</p><p>(4)方法</p><p>(4-1) <code>Object.prototype.hasOwnProperty()</code>:检测某个对象是否含有指定的自身属性。</p><p>语法：<code>obj.hasOwnProperty(prop);</code></p><p>参数：要检测的属性名称。</p><p><strong>描述：</strong>所有继承了 <code>Object.prototype</code> 的对象都会从原型链上继承到 hasOwnProperty 方法。这个方法可以用来检测一个对象是否含有特定的自身属性，和 in 运算符不同，该方法会忽略掉那些从原型链上继承到的属性。</p><p>(4-2) <code>Object.prototype.isPrototypeOf()</code>:检测一个对象是否存在于另一个对象的原型链上。</p><p>语法：<code>prototype.isPrototypeOf(object);</code></p><p>参数：<code>prototype</code>:检测该对象是否在参数object的原型链上。<code>object</code>:在该对象的原型链上搜寻。</p><p><strong>描述：</strong><code>isPrototypeOf</code>方法允许你检测一个对象是否存在于另一个对象的原型链上。</p><p>(4-3) <code>Object.prototype.propertyIsEnumerable()</code>:检测指定的属性名是否是当前对象可枚举的自身属性。</p><p>语法：<code>obj.propertyIsEnumerable(prop);</code></p><p>参数：<code>prop</code>:需要检测的属性名。</p><p><strong>描述：</strong>每个对象都有 <code>propertyIsEnumerable</code> 方法。该方法可以判断出指定的属性是否是自身的可枚举属性，也就是说该属性是否可以通过 for…in 循环等遍历到。有些属性虽然可以通过 for…in 循环遍历到，但因为它们不是自身属性，而是从原型链上继承的属性,所以该方法也会返回false。如果对象没有指定的属性，该方法返回 false。</p><p>(4-4) <code>Object.prototype.toString()</code>:返回一个代表该对象的字符串。</p><p>语法：<code>object.toString();</code></p><p>描述：当对象需要转换为字符串时，会调用它的<code>toString()</code>方法.默认情况下，每个对象都会从Object上继承到<code>toString()</code>方法，如果这个方法没有被这个对象自身或者更接近的上层原型上的同名方法覆盖(遮蔽)，则调用该对象的<code>toString()</code>方法时会返回”<code>[object type]</code>“，这里的字符串type表示了一个对象类型。</p><p>(4-5) <code>Object.prototype.valueOf()</code>:返回的诗this值，即对象本身。</p><p>语法：<code>object.valueOf();</code></p><p>返回值：在其他类型的对象中，<code>valueOf</code>有可能返回一个不同的值。</p></li><li><p>Number对象</p><p>定义：Number JavaScript 对象是一个允许你处理数字值的包装对象。Number 对象使用<code>Number()</code> 构造器创建。</p><p>语法：<code>new Number(value);</code></p><p>描述：如果参数无法被转换为数字，则返回 NaN。在非构造器上下文中 (如：没有 new 操作符)，Number 能被用来执行类型转换。</p><p>属性：</p><p>|   属性  |   作用  |<br>|———–|————|<br>|MAX_VALUE|最大的正数|<br>|MIN_VALUE|最小的正数|<br>|NaN|特殊的非数字值|<br>|NEGATIVE_INFINITY|特殊的负无穷大值，在溢出时返回|<br>|POSITIVE_INFINITY|特殊的正无穷大值，在溢出时返回|<br>|prototype|Number对象上允许的额外属性|</p><p>方法:</p><p>|   方法  |   作用  |<br>|———–|————|<br>|<code>toFixed()</code>|返回一个字符串，以定点数的形式来表示某一个数字，并进行四舍五入|<br>|<code>toExponential()</code>|返回一个字符串，以指数形式来表示某一数字|<br>|<code>toPrecision()</code>|返回一个字符串，既可以是指数型，也可以是小数型|</p></li><li><p>Boolean对象</p><p>定义：Boolean对象是一个包装了布尔值的对象</p><p>语法：<code>new Boolean([value]);</code></p><p><strong>描述：</strong>如果Boolean构造函数的参数不是一个布尔值,则该参数会被转换成一个布尔值.如果参数是 0, -0, null, false, NaN, undefined, 或者空字符串 (“”),生成的Boolean对象的值为false。其他任何值,包括任何对象或者字符串”false”, 都会创建一个值为true的Boolean对象.</p><p><strong>注意：</strong>原始的布尔值和Boolean对象是不一样的。任何值为 undefined 或者 null的对象, 包括值为false的Boolean对象, 在条件语句中,其值都将作为true来判断。不要通过新建Boolean对象的方法将一个非布尔值转换成布尔值。直接使用Boolean函数即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="built_in">Boolean</span>(exp);<span class="comment">//这样使用</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="keyword">new</span> <span class="built_in">Boolean</span>(exp);<span class="comment">//不要这样使用</span></span><br></pre></td></tr></table></figure><p>如过你用一个对象作为Boolean对象的初始化值,则即使该对象是个值为false的Boolean对象,生成的Boolean对象的值也是true。不要在该使用Boolean原始值的地方使用<br>Boolean对象。</p></li><li><p>String对象</p><p>定义：<code>new String(s)</code>构造函数，<code>function String(s)</code>转换函数</p><p>参数：存储到一个String对象中或转换为一个原始字符串的值</p><p>描述：当使用new操作符将String()作为一个构造函数使用时，它将返回一个String对象，内容为字符串s或s的字符串表示。当不带new操作符调用String()构造函数时，只是简单地将s转换为原始字符串并返回转换后的值</p><p>属性：length，得到字符串的长度</p><p>方法</p><p>String.charAt(n)</p><pre><code>    描述        取得一个字符串中的第n个字符    参数        希望返回的字符在字符串string中的索引    返回值        字符串string的第n个字符    注意        返回字符串中的第n个字符        字符串的起始点为0        如果不再字符串长度之内返回空字符串String.charCodeAt(n)    描述        取得字符串中第n个字符的编码    参数        返回编码字符的索引    返回值        string中第n个字符的Unicode编码。返回的值为一个16位的整数，值在0~5535之间    注意        如果n为负数或大于等于字符串的长度，则返回NaNString.fromCharCode(c1,c2,...)    描述        从字符编码创建一个字符串    参数        指定待创建字符串中的字符的Unicode编码，一个或多个整数    返回值        一个新的字符串，内容为指定编码对应的字符    注意        这是一个静态方法，是String()构造函数的一个属性，而不是String对象的方法String.concat(value,...)    描述        连接字符串    参数        一个或多个待连接的字符串    返回值        返回连接之后的字符串    注意        和+作用一样，连接字符串的String.indexOf(substring[,start])    描述        搜索一个字符串    参数        在string中搜索的字符串        一个可选的整数参数start。指定string中起始点。    返回值        在字符串string中start位置之后，substring第一次出现的位置，如果没找到返回-1    注意        String.indexOf()搜索指定的字符串，从前到后搜索        找到返回字符串第一次出现的位置        没找到返回-1        搜索的字符串按照字符串整体搜索String.lastIndexOf(substring[,start])    描述        从后面搜索    参数        一个可选的整数参数start。指定string中起始点。        在string中搜索的字符串    返回值        返回字符串最后一次出现的位置String.localeCompare(target)    描述        使用本地特定的顺序比较两个字符串    参数        要与string使用区分地区设置的方式比较的字符串    返回值        string&lt;target,比0小的数        string&gt;target,比0大的数        string=target，返回0    注意        当使用&gt;或者&lt;操作符比较字符串的时候，是按照字符的Unicode编码进行比较的，不考虑本地的顺序，这种方式不准确        使用localeCompare()提供了一个根据默认的本地排序来比较字符串的方法，这个函数利用底层的操作系统提供的排序进行String.match(regexp)    描述        找到一个或多个正则表达式匹配结果    参数        一个指定要匹配的模式的RegExp对象。如果如果这个参数不是一个RegExp对象，则它将先被传入RegExp()构造函数，后转换为RegExp对象    返回        一个包含撇皮结果的数组String.repalce(regexp,replacement)    描述        替换匹配给定正则表达式的一个或多个子串    参数        指定了要替换的模式的RegExp对象。如果这个参数是一个字符串，它将用作一个要搜索的直接量文本模式；它将不会先转化为RegExp对象        replacement为替换文本的字符串，或者一个函数，用在替换时对应的替换文本    返回值        返回替换之后的内容String.search(regexp)    描述        根据一个正则表达式查找    参数        一个RegExp对象，指定要在字符串string中查找的模式。如果这个参数不是一个RegExp，它将先传入RegExp()构造函数，后转换为一个RegExp对象    返回        string中第一个匹配regexp的子串的开始位置，如果没有找到匹配则返回-1String.slice(start,end)    描述        截取字符串    参数        start起始点        end结束的位置    返回值        返回截取之后的字符串String.substr(start,length)    描述        截取字符串    参数        start起始点        length截取字符串的长度    返回值        返回截取之后的字符串String.substring(from,to)    描述        截取字符串    参数        起始点        结束点    返回值        返回截取之后的字符串String.split(delimiter,limit)    描述        将一个字符串切分为一个由字符串组成的数组    参数        delimiter分隔符        limit指定已返回数组的最大长度。如果指定，则最多返回数量为这个数字的子串。如果没有指定，则将切分整个字符串，无论结果数组有多长    返回值        返回拆分之后的数组String.toLowerCase()    描述        返回小写之后的字符串    返回值        返回小写之后的字符串String.toUperCase()    描述        返回大写之后的字符串    返回值        返回大写之后的字符串String.toLocaleLowerCase()    描述        返回小写之后的字符串    返回值        返回小写之后的字符串String.toLocaleUpperCase()    描述        返回大写之后的字符串    返回值        返回大写之后的字符串String.toString()    描述        返回对象的字符串    返回值        返回字符串String.trim()    描述        去掉字符串两端的空白字符    返回        返回去除字符串两端空白的字符串String.valueOf()    描述        返回对应的字符串    返回值        返回String的原始字符串值String.link(url)    描述        link() 方法创建一个 &lt;a&gt; HTML 元素，用该字符串作为超链接的显示文本，参数作为指向另一个 URL 的超链接。    参数        任何能够指定 a 标签的 href 属性的字符串；它应当是有效的 URL（相对或绝对），任何 &amp; 字符将会被转义为 &amp;amp;，任何 &quot; 字符将会被转义为 &amp;quot;。    返回        返回创建好的链接String.anchor(name)    描述        用anchor方法差un关键一个&lt;&lt;a&gt;HTML锚元素    参数        超链接的name属性    返回值        返回创建的锚点元素</code></pre><p> Array对象<br> Function对象</p><pre><code>定义    JavaScript中的Function对象，就是我们常说的函数对象。在JS中，所有的函数也是以对象的形式存在的。语法    充当Function对象的构造函数使用，用于结合new关键字构造一个新的Function对象。        new Function( [ argName1 [, argName1 [, argNameN... [, funcBody ]]]] )    当作普通函数使用，其行为与用法一(使用new关键字)完全一致，相当于用法一省略了new关键字。        Function( [ argName1 [, argName1 [, argNameN... [, funcBody ]]]] )返回值    Function()的返回值是Function类型，返回一个函数对象注意    多数时候，你无需显示地通过new关键字来构造一个Function对象，因为在JavaScript中，你可以直接以function关键字形式声明函数    JavaScript在调用Function()构造函数时编译由该构造函数创建的对象。虽然它使您的脚本在运行时重新定义函数的情况下具有更大的灵活性，但它也会减慢代码的执行速度。为了避免减慢脚本速度，应尽可能少地使用Function()构造函数。建议优先考虑以function关键字的形式声明函数。    Function()会把传入的最后一个参数作为函数定义的执行代码，之前的所有参数均依次作为函数定义的参数。    如果没有指定任何参数，则表示该函数没有定义参数列表，函数的执行代码也为空    如果只指定了一个参数，则该参数将被视作函数的执行代码。如果你想定义一个参数、执行代码为空，请传入两个参数，第二个参数为空字符串即可：new Function(&quot;argName1&quot;, &quot;&quot;)。属性    arguments        返回该函数执行时内置的arguments对象。    caller        返回调用当前函数的函数。    constructor        返回创建该对象的构造函数。    length        返回函数定义的参数个数。方法    call()        调用当前Function对象，可同时改变函数内的this指针引用，函数参数一个个分别传入。    apply()        调用当前Function对象，可同时改变函数内的this指针引用，函数参数以数组或arguments对象的形式传入。    toString()        返回定义该Function对象的字符串。    valueOf()        返回Function对象本身。</code></pre></li></ol><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><ul><li>麦子学院——King老师xmind文件</li></ul>]]></content>
    
    <summary type="html">
    
      学习js基础第六章节对象第二节。
    
    </summary>
    
      <category term="前端基础" scheme="https://super456.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="https://super456.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>【js基础】对象（一）</title>
    <link href="https://super456.github.io/2017/09/24/2017-09-24-study-js6-object-base/"/>
    <id>https://super456.github.io/2017/09/24/2017-09-24-study-js6-object-base/</id>
    <published>2017-09-23T16:00:00.000Z</published>
    <updated>2018-03-12T16:00:35.138Z</updated>
    
    <content type="html"><![CDATA[<p>重新温故学习JavaScript基础知识点，记录自己的学习过程，学习js基础第六章节对象第一节对象入门基础。</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="一-、JavaScript对象基础"><a href="#一-、JavaScript对象基础" class="headerlink" title="(一)、JavaScript对象基础"></a>(一)、JavaScript对象基础</h3><ol><li><p>对象介绍</p><p>(1)Javascript对象是基本数据类型之一，是复合类型。<br>(2)Javascript中几乎所有事物都是做对象。<br>(3)Javascript的对象是拥有属性和方法的数据。</p></li><li><p>JavaScript 中的对象可以简单理解成”名称:值”对：<code>(name:value)</code></p><p>(1)JavaScript 中的对象与这些概念类似：</p><p>Python 中的字典、Perl 和 Ruby 中的散列（哈希）、C/C++ 中的散列表、Java 中的 HashMap、PHP 中的关联数组</p><p>(2)名称：”名称”部分是一个 JavaScript 字符串</p><p><strong>(3)注意：</strong></p><p>(3-1)、可以将属性名括在引号之间，这三种形式一样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;<span class="attr">prop</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;<span class="string">"prop"</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;<span class="string">'prop'</span>:<span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure><p>(3-2)、必须放到引号之间：</p><p>如果属性名是Javascript的保留字之一</p><p>如果属性名种包含特殊字符(除字母、数字、下划线以外的字符)</p><p>如果属性名以数字开头</p><p>在ECMAScript5中，保留字可以用作不带引号的属性名，但对于ECMAScript3中必须用引号括起来</p><p>在ECMAScript5中对象直接量中的最后一个属性后的逗号将被忽略，在ECMAScript 3的大部分实现中也可以忽略这个逗号，但在IE中报错</p></li><li><p>值</p><p>“值”部分可以是任何 JavaScript 的数据类型——包括对象</p></li><li><p>创建对象的形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.通过对象字面量的形式创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">//没有任何内容的对象</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="keyword">typeof</span> obj);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line"><span class="comment">// 也可以创建对象的时候赋值（键值对），注意逗号隔开</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    x : <span class="number">1</span>,</span><br><span class="line">    y : <span class="number">2</span>,</span><br><span class="line">    z : <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 注意放在引号问题</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="string">'x'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"y"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'for'</span>: <span class="string">"javascript关键字必须放在引号之间"</span>,</span><br><span class="line">    username: <span class="string">"username"</span>,</span><br><span class="line">    <span class="string">'first-name'</span>: <span class="string">"dudu"</span>,</span><br><span class="line">    married: <span class="literal">true</span>,</span><br><span class="line">    test: <span class="literal">null</span>,</span><br><span class="line">    test1: <span class="literal">undefined</span>,</span><br><span class="line">    test2: <span class="number">12.5</span>,</span><br><span class="line">    person: &#123;</span><br><span class="line">        age: <span class="number">18</span>,</span><br><span class="line">        xuehao: <span class="number">123</span>,</span><br><span class="line">        name: <span class="string">"456"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 2.通过new object()创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">//空对象</span></span><br><span class="line"><span class="keyword">var</span> obj4 = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//创建日期对象</span></span><br><span class="line"><span class="keyword">var</span> obj5 = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">//创建数组对象</span></span><br><span class="line"><span class="keyword">var</span> obj6 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(); <span class="comment">//创建正则表达式对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.通过构造函数创建对象</span></span><br><span class="line"><span class="comment">// 函数名称首字母大写，主要是分了区分内置函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj7=<span class="keyword">new</span> Test();</span><br><span class="line"><span class="comment">//也可以创建传参的构造函数</span></span><br><span class="line"><span class="keyword">var</span> n=<span class="number">0</span>,m=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test1</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// this.n=a;</span></span><br><span class="line">    <span class="comment">// this.m=b;</span></span><br><span class="line">    n=a;</span><br><span class="line">    m=b;</span><br><span class="line">    <span class="built_in">document</span>.write(n+<span class="string">"---"</span>+m+<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj8=<span class="keyword">new</span> Test1(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="keyword">typeof</span> obj8);</span><br><span class="line"><span class="comment">// instanceof检测对象是否是该函数构造器创建的</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line"><span class="built_in">document</span>.write(obj8 <span class="keyword">instanceof</span> Test1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.通过Object.create创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj9=<span class="built_in">Object</span>.create(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> obj10=<span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 创建一个普通的空对象</span></span><br><span class="line"><span class="keyword">var</span> obj11=<span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><ul><li>麦子学院——King老师xmind文件</li></ul>]]></content>
    
    <summary type="html">
    
      学习js基础第六章节对象第一节。
    
    </summary>
    
      <category term="前端基础" scheme="https://super456.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="https://super456.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《活着》-心有所感</title>
    <link href="https://super456.github.io/2017/09/24/2017-09-24-alive-yuhua/"/>
    <id>https://super456.github.io/2017/09/24/2017-09-24-alive-yuhua/</id>
    <published>2017-09-23T16:00:00.000Z</published>
    <updated>2018-03-12T15:59:19.191Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一位真正的作家永远只为内心写作，只有内心才会真实地告诉他，他的自私、他的高尚是多么的突出。</p></blockquote><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/15062327278.jpg" alt="余华" border="0"><br>《活着》，作者余华，第一次看他写的书。这本小说正如他所说的：写人苦难的承受能力，和对世界乐观的态度。也是最终想告诉我们一个道理：“人是为活着本身而活着的，而不是为了活着之外的任何事物所活着。”看完这本书，内心是庆幸的，也是羞惭的。庆幸的是，自己可以读到这部作品，能感受到作者所传授的道理，更加庆幸的是，自己没有生活在作者笔下的那个年代，不然所经历的事情就不是这样了。羞惭的是，面对自己的处境和作为，跟小说主人公相比，差远了。不管是意志上，还是责任担当上，感觉自己好落寞，还欠缺很多需要锻炼。读完这部小说，可以让人回忆联想到自己的人生。不得不说这是一部高尚的作品。接下来，是自己此时此刻所想所感，一己之见，胡扯胡扯。不要看得太认真哈。</p><h3 id="人物情节简介"><a href="#人物情节简介" class="headerlink" title="人物情节简介"></a>人物情节简介</h3><p>介绍一下小说主要人物：福贵（主角光环）、家珍（福贵妻子，很好的一个存在）、凤霞（福贵大女儿）、有庆（福贵小儿子）、王二喜（偏头，凤霞丈夫）、苦根（凤霞儿子）、队长（村里相当于村长的人）、龙二（赌博场老板）、春生（福贵战友）、老全（福贵战友）等，作者以一名游客的身份遇到老农民福贵，并由此回想起了他自己的过去…描述了中国过去五十多年的历史情形。<br><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150623801914.jpg" alt="活着 (1)" border="0"></p><h3 id="感动、成大三部曲"><a href="#感动、成大三部曲" class="headerlink" title="感动、成大三部曲"></a>感动、成大三部曲</h3><h4 id="一-福贵家族破产前后"><a href="#一-福贵家族破产前后" class="headerlink" title="(一)福贵家族破产前后"></a>(一)福贵家族破产前后</h4><p>福贵年轻的时候，家族里是一个地主，坐拥百多亩田地，可以说是村里最富有的家族，取了个老婆，叫家珍，是城镇上米店老板的女儿，也是貌美如花，关键是还温柔体贴善良持家（与当时的福贵性格状态形成对比）。他的一生可以说是衣食无忧的。可惜，财运不济，他因为迷上了赌博，而且还赊账的赌，最终被龙二下套，赌输了整个家族的财产，家里不得不卖掉房子和田地帮他还债，这也是他命运的转折点。从此他们一家搬到了以前小茅草屋，父亲也因此被气死，当时凤霞四岁多，家珍怀着有庆，母亲也病了。福贵一开始很消沉，毕竟是自己毁了家里，但还算是有点良知，知道悔改。</p><p>当父亲死后，家珍被娘家人接回去。不过，还好，家珍生完有庆半年后就回来了。福贵也知道勤勤劳劳在养家糊口，一家人也艰苦安稳过了一段时间。</p><h4 id="二-福贵被捉、白发送黑发"><a href="#二-福贵被捉、白发送黑发" class="headerlink" title="(二)福贵被捉、白发送黑发"></a>(二)福贵被捉、白发送黑发</h4><p>还是命运不济吧，母亲病重，福贵拿着家珍给了两个银元去城里找医生，结果被国名党军队捉去拉大炮，一走就是两年，也认识了一起被捉的春生和老全，最终老全死了，春生也失踪了。福贵还好遇到了解放军的解救后回家了。回来后，母亲也在自己离开的两个月后死了，凤霞因为发烧导致又哑又聋。还好，有有庆，家珍陪着。那时候真的很穷，穷到了吃野菜，连几个月米都没有的日子。也赶上了村里人民公社、文化革命。福贵一家人还是艰苦的熬过了。</p><p>然而，不巧的事，又发生了，有庆在十三岁的时候医院抽血抽死了，听说是为了救县长夫人生小孩大出血。那时候县长就是春生。等到凤霞有个城里人二喜，相中结婚后。好日子不长，难产死了，生下苦根。家珍也在凤霞死后的三四个月后死了。苦根长大到四岁左右，二喜也在一次意外中死了。可悲的是，苦根也在7岁多的时候一次高烧死了。面对着一系列的打击与心痛，现实终究是现实，福贵还是坚持顽强的活下来了。</p><h4 id="三-余生还活着"><a href="#三-余生还活着" class="headerlink" title="(三)余生还活着"></a>(三)余生还活着</h4><p>尽管命运爱捉弄福贵，但是福贵没有放弃活着，还是辛辛苦苦耕作，攒了钱买了一头跟自己一样老了牛，并取名叫做福贵，陪自己度过余生。福贵晚年唱道的歌——少年去游荡，中年想掘藏，老年做和尚。也许这就是他最平凡也是最不平凡的一生。</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150623813296.jpg" alt="去坚持" border="0"></p><h3 id="总言"><a href="#总言" class="headerlink" title="总言"></a>总言</h3><p>很喜欢余华这种写作的风格，描绘了很多常人的心里，抠入人心。每个人都有自己的命运，都有自己的归宿。也许一个人有时候活着很难，真的很难，毕竟现实是残酷的。特别是无牵无挂的时候，自己都不知道怎么度过每一天。<strong>我想：客观的压力再大，环境再怎么恶劣，只要自己意志够坚定，该面对的还是要面对，不是顺其自然，而是乘分破浪，活出自己，哪怕只剩自己了，也要好好的。因为你身上寄予了你爱的人的希望。</strong>这就是我所领悟到的。谢谢阅读。</p>]]></content>
    
    <summary type="html">
    
      活着的意志，一个人艰苦的一生。
    
    </summary>
    
      <category term="朝花惜拾" scheme="https://super456.github.io/categories/%E6%9C%9D%E8%8A%B1%E6%83%9C%E6%8B%BE/"/>
    
    
      <category term="阅读" scheme="https://super456.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>半夜有感——我爱我自己了</title>
    <link href="https://super456.github.io/2017/09/18/2017-09-18-feel-at-midnight/"/>
    <id>https://super456.github.io/2017/09/18/2017-09-18-feel-at-midnight/</id>
    <published>2017-09-17T16:00:00.000Z</published>
    <updated>2018-03-12T15:57:53.306Z</updated>
    
    <content type="html"><![CDATA[<h3 id="没有深夜痛哭过的人，不足以谈人生。——柴静"><a href="#没有深夜痛哭过的人，不足以谈人生。——柴静" class="headerlink" title="没有深夜痛哭过的人，不足以谈人生。——柴静"></a>没有深夜痛哭过的人，不足以谈人生。——柴静</h3><embed src="//music.163.com/style/swf/widget.swf?sid=27955654&type=2&auto=1&width=320&height=66" width="340" height="86" allownetworking="all"><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150571276114.jpg" alt="心情" border="0"></p><h3 id="昨晚，心很累"><a href="#昨晚，心很累" class="headerlink" title="昨晚，心很累"></a>昨晚，心很累</h3><p>又一次感觉自己心累了，看来最近我到底经历了什么，让自己那么不舒服、那么的不顺心。自从今年八月份开始，一切安定的局面都被打破了，发生了太多事了，本来以为自己可以扛过来的，结果还是变成了心结，每每想起，都有一种难以启齿的痛。也许，这就是我宿命的一部分吧。有时候不是自己想太多，而是真的认真了，却换来自己被伤害的结果，然后自己感觉就是无助、无奈、无何的人，真的不知道怎么做才好。我不知道接下来是顺其自然好，还是自己默默承受好，真希望时间可以过得快点，也许时间会告诉我，不管是不是我想要的答案，经历过岁月的沉淀，一切都会变得那么释然的。这样最好不过了。<strong>这三件事是这样的：</strong></p><h3 id="恋人变伤人"><a href="#恋人变伤人" class="headerlink" title="恋人变伤人"></a>恋人变伤人</h3><p>也许我不知道甚至不懂、不理解，曾经那么喜欢的她到底经历了什么，可以让她从突然出现在我的世界里然后又突然消失。呵呵，感觉好好玩的样子。有种玩过山车的意外。一切都这么毫无节奏的发生了。我以为，两个人在一起，彼此相爱了，就算外界客观因素干扰再大，也会抵不过两人真挚的心，结果我想的还是错了，看来是我太无知了。果然，爱的越深，伤的也越深。开学这段时间，真的好可悲，曾有这么一刻是想到的：失去她，就像失去了全世界一样。算啦，心清了，自然定了。</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150571276091.jpg" alt="生而为人" border="0"></p><h3 id="舍友变冷漠"><a href="#舍友变冷漠" class="headerlink" title="舍友变冷漠"></a>舍友变冷漠</h3><p>大二换了新宿舍，也换了舍友。那时候我们几个，其乐融融，相依相靠，就像兄弟一样。几个人经常在一起去吃饭、去上课。然而好景不长。也许经过一段时间的相处，随着学识和阅历，变得各个深沉了。特别有一个舍友，之前跟我很亲密，很友好。喜欢跟我学弄发型，睡觉前喜欢跟我谈人生，我也跟着他学做菜，一起买一样的风衣，一样的皮鞋。可惜，我们因为上学期彼此吵过一次架，就回不去曾经的那种关系了。虽然现在时不时会说几句，但也是没有那种情调了，真的变了，变得互相都不想搭理对方。我也变的在这个宿舍，除了一些问候语之外，想不到跟他们几个说什么了，可能还有一些学习的交集吧。自己喜欢变得沉默，变得一个人独处了，一个人默默的做自己的事，变得没那么爱讲话了。回忆起来，真的变化了好多，也许这就是成长吧。</p><h3 id="亲朋不亲脑"><a href="#亲朋不亲脑" class="headerlink" title="亲朋不亲脑"></a>亲朋不亲脑</h3><p>这个说起来，也是一个悲催的故事，原本我跟他是很要好的亲密朋友，他也为人比较正直，但是就是处事很不用心，说话也开玩笑和爱吹牛逼。感觉他就是别人眼中的老好人和小丑吧。但是我跟他还有一个人，三个人是很要好的朋友，他有点让我佩服的就是，我能看到他对我的真诚，不然那也许我跟他也发展不到这个地步，本来我就是跟他志不同、道不合的人。所以，我一直想帮他做一些改变，让他变的有人格魅力的男人，这样他会变的更好。但是，也许他做的事，很多令我不屑一顾，但我能忍都忍了，毕竟认识这么久了是吧，又不是第一次。昨晚，真的忍不了，在我面前说一套，在别人面前又是一套，他还是改不了他的坏毛病，以至于我错过了机会，之前有跟他说过，但是他就是想不通，也许这就是他吧！我不知道我什么时候能真的不想鸟他了，但是我发现不可能像以前一样对他了，可能他不知道这是无形对我的伤害，但是真的，我不想让自己那么心累，放开一点好。</p><h3 id="还能坚持多久"><a href="#还能坚持多久" class="headerlink" title="还能坚持多久"></a>还能坚持多久</h3><p>经历过这三件事，我想自己会改变很多。不知道自己还能坚持多久，可能总有一天会爆发出来吧，如果我坚持不下去了，不是我真的放下了，而是我不想伤害自己了，真的需要自己一个人好好享受自己，爱自己了，不想去理解、包容、去管别人的是与非了，就想自己好好的对自己，好好珍惜在乎我的人，好好爱身边一直陪伴我的人，最重要的是，要让自己每天都是最好的状态去迎接新的一天，不管过去了，未来才是最重要的。爱自己，做自己，最好成就自己。</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/15057127606.jpg" alt="爱自己" border="0"></p><p><strong>最后，我相信，世界也会给予我一份温柔。</strong></p>]]></content>
    
    <summary type="html">
    
      昨晚半夜失眠，然后想了很多。
    
    </summary>
    
      <category term="朝花惜拾" scheme="https://super456.github.io/categories/%E6%9C%9D%E8%8A%B1%E6%83%9C%E6%8B%BE/"/>
    
    
      <category term="生活" scheme="https://super456.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>【js基础】运算符与表达式</title>
    <link href="https://super456.github.io/2017/09/17/2017-09-17-study-js3-operators-expressions/"/>
    <id>https://super456.github.io/2017/09/17/2017-09-17-study-js3-operators-expressions/</id>
    <published>2017-09-16T16:00:00.000Z</published>
    <updated>2018-03-12T15:54:50.638Z</updated>
    
    <content type="html"><![CDATA[<p>重新温故学习JavaScript基础知识点，记录自己的学习过程，学习js基础第三章节运算符与表达式。</p><h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><h3 id="一-、表达式"><a href="#一-、表达式" class="headerlink" title="(一)、表达式"></a>(一)、表达式</h3><p>   表达式是用于JavaScript脚本运行时进行计算的式子，可以包含常量、变量、运算符</p><h3 id="二-、运算符"><a href="#二-、运算符" class="headerlink" title="(二)、运算符"></a>(二)、运算符</h3><ol><li><p>算术运算符：<code>+、-、*、/、%、++、--、++、--</code>分为前缀形式和后缀形式</p><p>前缀形式先加减1在执行，后缀形式先执行再加减1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(r + p);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(r * p);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(r - p);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(r / p);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line"><span class="built_in">document</span>.write(-r % p);</span><br></pre></td></tr></table></figure></li></ol><p>   <strong>注意：</strong> <code>+</code>号用来连接两个字符串，只要+连接的操作数中有一个是字符串型，Js就会自动把非字符串型数据作为字符串型数据来处理。Js代码的执行顺序是从左到右，所以在<code>+</code>连接的表达式中，遇到字符串型数据之前，所有出现的数值型数据(或者可以自动转换为数值型的数据)仍被作为数值来处理。为了避免这种情况，我们可以在表达式前拼一个空字符串。</p><ol><li><p>字符连接符：通过 <code>+</code> 连接字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line"><span class="built_in">document</span>.write(r + <span class="string">'8'</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line"><span class="comment">// 注意结果是r+p再拼接5djaoi</span></span><br><span class="line"><span class="built_in">document</span>.write(r + p + <span class="string">"5djaoi"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"hello wordl"</span> + <span class="string">"465"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="number">1123</span> + <span class="string">"fkasdjl"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">''</span> + r + num1);</span><br></pre></td></tr></table></figure></li><li><p>赋值运算符：<code>=、+=、-=、*=、/=、%=、.=</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">a += <span class="number">8</span>; <span class="comment">//a=a+8</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span> + a);</span><br></pre></td></tr></table></figure></li><li><p>比较运算符：<code>&gt;、&gt;=、&lt;、&lt;=、==、!=、===、!==</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line"><span class="built_in">document</span>.write(a &gt; num1);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="number">1</span> === <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>比较运算符的结果为布尔类型，<code>==</code>只比较值是否相等、<code>===</code>比较值和类型。</p></li><li><p>逻辑运算符：<code>&amp;&amp;、||、!</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逻辑运算符：短路现象</span></span><br><span class="line"><span class="comment">//要求两个表达式为true，结果才是true</span></span><br><span class="line"><span class="comment">//alert(true &amp;&amp; true);</span></span><br><span class="line"><span class="comment">//alert(true &amp;&amp; false);</span></span><br><span class="line"><span class="comment">//alert(false &amp;&amp; true);</span></span><br><span class="line"><span class="comment">//alert(false &amp;&amp; false);</span></span><br><span class="line"><span class="comment">//如果第一个表达式为false，整个结果为false，就把第二个表达式短路了</span></span><br><span class="line"><span class="comment">// 逻辑与</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i-- &amp;&amp; j++) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"hello"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"world"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line"><span class="built_in">document</span>.write(i);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// j++被短路未执行</span></span><br><span class="line"><span class="built_in">document</span>.write(j);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑或</span></span><br><span class="line"><span class="comment">//两个表达中有一个为true，整个结果为true</span></span><br><span class="line"><span class="comment">//alert(true || true);</span></span><br><span class="line"><span class="comment">//alert(true || false);</span></span><br><span class="line"><span class="comment">//alert(false || true);</span></span><br><span class="line"><span class="comment">//alert(false || false);</span></span><br><span class="line"><span class="comment">//如果第一个表达式为true，整个结果为true，把第二个表达式短路了</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>,</span><br><span class="line">    b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a-- || b++) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"true"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"false"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(a + <span class="string">"  "</span> + b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑非：取反的作用</span></span><br><span class="line"><span class="keyword">var</span> takeback = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">document</span>.write(!takeback + <span class="string">'&lt;br/&gt;'</span>);</span><br></pre></td></tr></table></figure></li></ol><p>   <strong>注意：</strong>逻辑运算符的结果为布尔类型，<code>&amp;&amp;</code>如果第一个表达式为<code>false</code>，造成短路，<code>||</code>如果第一个表达式为<code>true</code>,造成短路。</p><ol><li><p>三元运算符：<code>exp1?exp2:exp3</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*if(exp)&#123;</span></span><br><span class="line"><span class="comment">exp为true的代码段;</span></span><br><span class="line"><span class="comment">&#125;else&#123;</span></span><br><span class="line"><span class="comment">exp为false的代码段;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">exp1?exp2:exp3;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">var</span> sanyuan = a &gt; b ? <span class="string">"aa"</span> : <span class="string">"bb"</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(sanyuan);</span><br></pre></td></tr></table></figure></li><li><p>其它运算符</p><p>(1)、逗号运算符：逗号用来将多个表达式连接为一个表达式，新表达式的值为最后一个表达式的值，多用在变量声明处</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逗号表达式：douhoa的值为最后一个表达式的值</span></span><br><span class="line"><span class="keyword">var</span> douhoa = (a = <span class="number">8</span>, b = <span class="number">9</span>, c = <span class="number">389</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(douhoa);</span><br></pre></td></tr></table></figure><p>(2)、<code>void</code>运算符：<code>void</code>运算符用来指明一个表达式无返回结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// void运算符：void（）；</span></span><br><span class="line"><span class="keyword">var</span> voidreturn = <span class="keyword">void</span>(a = <span class="number">2</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(voidreturn);</span><br></pre></td></tr></table></figure><p>(3)、<code>typeof</code>运算符：<code>typeof</code>运算符用来返回一个字符串，返回的是操作数的数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typeof 运算符返回变量的类型</span></span><br><span class="line"><span class="keyword">var</span> test=<span class="literal">NaN</span>;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="keyword">typeof</span> test);</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-、运算符的优先级"><a href="#三-、运算符的优先级" class="headerlink" title="(三)、运算符的优先级"></a>(三)、运算符的优先级</h3><ol><li><p>默认优先级图表：</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150565508806.png" alt="运算符优先级" border="0"></p></li><li><p>通过 <code>()</code> 改变优先级</p></li></ol><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><ul><li>麦子学院——King老师xmind文件</li></ul>]]></content>
    
    <summary type="html">
    
      学习js基础第三章节运算符与表达式。
    
    </summary>
    
      <category term="前端基础" scheme="https://super456.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="https://super456.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
