<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猿来独往</title>
  
  <subtitle>在岁月的长河里寻找一种度过时光的乐趣</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://super456.github.io/"/>
  <updated>2018-07-29T09:20:50.715Z</updated>
  <id>https://super456.github.io/</id>
  
  <author>
    <name>猿来独往</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小程序图片遮罩层demo</title>
    <link href="https://super456.github.io/2018/07/29/2018-07-29-wechatMask-demo/"/>
    <id>https://super456.github.io/2018/07/29/2018-07-29-wechatMask-demo/</id>
    <published>2018-07-29T09:17:25.000Z</published>
    <updated>2018-07-29T09:20:50.715Z</updated>
    
    <content type="html"><![CDATA[<p>在工作中经常会用到遮罩层弹窗，所以简单分享一下，之前写过的一个弹出广告图片遮罩层功能demo。</p><h3 id="（一）实现效果"><a href="#（一）实现效果" class="headerlink" title="（一）实现效果"></a>（一）实现效果</h3><p><img src="http://pbr0erxxq.bkt.clouddn.com/2018-07-29/wechatMask.gif" alt="实现效果"></p><h3 id="（二）实现过程"><a href="#（二）实现过程" class="headerlink" title="（二）实现过程"></a>（二）实现过程</h3><p>实现过程主要是设置css样式，比较容易理解。<br>1、设置wxml代码布局：设置一个背景布局：用来显示灰色背景；嵌套一个显示展示图片容器，嵌套一个显示闭关按钮的容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  &lt;view class=&quot;b1&quot; hidden=&quot;&#123;&#123;flag&#125;&#125;&quot;&gt;</span><br><span class="line">&lt;view class=&quot;b2&quot;&gt;</span><br><span class="line">&lt;image src=&apos;../../images/test.jpg&apos;/&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">  &lt;view class=&quot;t_w&quot;&gt;</span><br><span class="line">   &lt;cover-view class=&quot;t_image&quot; bindtap=&quot;closeMask&quot;&gt;</span><br><span class="line">     &lt;cover-image  src=&quot;../../images/qcm.png&quot;&gt;&lt;/cover-image&gt;</span><br><span class="line">    &lt;/cover-view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p> 2、wxss样式设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/* 设置背景遮罩层样式 */</span><br><span class="line">.b1 &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  top: 0;</span><br><span class="line">  background: rgba(0, 0, 0, 0.4);</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line">/* 设置展示图片大小 */</span><br><span class="line">.b2 &#123;</span><br><span class="line">  width: 50%;</span><br><span class="line">  height: 50%;</span><br><span class="line">&#125;</span><br><span class="line">/* 设置展示图片与关闭按钮图片的距离 */</span><br><span class="line">.t_w &#123;</span><br><span class="line">  margin-top: 20rpx;</span><br><span class="line">&#125;</span><br><span class="line">/* 设置关闭按钮图片显示的大小 */</span><br><span class="line">.b2 image &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">/* 设置关闭按钮宽高 */</span><br><span class="line">.t_image &#123;</span><br><span class="line">  width: 60rpx;</span><br><span class="line">  height: 60rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、 js两个方法控制显示与关闭操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> data: &#123;</span><br><span class="line">    motto: &apos;微信遮罩层显示&apos;,</span><br><span class="line">   flag: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  showMask:function()&#123;</span><br><span class="line">    this.setData(&#123; flag: false &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  closeMask: function () &#123;</span><br><span class="line">    this.setData(&#123; flag: true &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="（三）完整代码"><a href="#（三）完整代码" class="headerlink" title="（三）完整代码"></a>（三）完整代码</h3><p><a href="https://github.com/super456/wechatMask" target="_blank" rel="noopener">代码下载</a></p>]]></content>
    
    <summary type="html">
    
      在工作中经常会用到遮罩层弹窗，所以简单分享一下，之前写过的一个弹出广告图片遮罩层功能demo。
    
    </summary>
    
      <category term="小程序" scheme="https://super456.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="weChatApp" scheme="https://super456.github.io/tags/weChatApp/"/>
    
  </entry>
  
  <entry>
    <title>小程序登录欢迎页面demo</title>
    <link href="https://super456.github.io/2018/07/29/2018-07-29-wechatapp-weclomepage/"/>
    <id>https://super456.github.io/2018/07/29/2018-07-29-wechatapp-weclomepage/</id>
    <published>2018-07-29T08:17:25.000Z</published>
    <updated>2018-07-29T09:27:07.689Z</updated>
    
    <content type="html"><![CDATA[<p>之前有用过小程序的欢迎页面，也是GitHub上找到的一个案例。近期有用到，简单的分享一下，可以让有需要的人避免重复造轮子和更好的创新学习。</p><h3 id="（一）效果预览"><a href="#（一）效果预览" class="headerlink" title="（一）效果预览"></a>（一）效果预览</h3><p>直接看效果如何，是否符合您的要求，不符合直接结束浏览，避免浪费您的时间。</p><p><img src="http://pbr0erxxq.bkt.clouddn.com/2018-07-29/02.gif" alt="运行结果图"></p><h3 id="（二）代码目录"><a href="#（二）代码目录" class="headerlink" title="（二）代码目录"></a>（二）代码目录</h3><p>简单实用，直接下载工具打开预览，<a href="https://github.com/super456/wechatWeclomePage" target="_blank" rel="noopener">代码下载</a></p><p><img src="http://pbr0erxxq.bkt.clouddn.com/2018-07-29/01.png" alt="代码目录"></p><h3 id="（三）参考文献"><a href="#（三）参考文献" class="headerlink" title="（三）参考文献"></a>（三）参考文献</h3><p><a href="https://github.com/EastWorld/wechat-app-mall" target="_blank" rel="noopener">微信小程序商城，微信小程序微店</a></p>]]></content>
    
    <summary type="html">
    
      之前有用过小程序的欢迎页面，也是GitHub上找到的一个案例。近期有用到，简单的分享一下，可以让有需要的人避免重复造轮子和更好的创新学习。
    
    </summary>
    
      <category term="小程序" scheme="https://super456.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="weChatApp" scheme="https://super456.github.io/tags/weChatApp/"/>
    
  </entry>
  
  <entry>
    <title>css中的position定位</title>
    <link href="https://super456.github.io/2018/07/15/2018-07-15-css-position-methods/"/>
    <id>https://super456.github.io/2018/07/15/2018-07-15-css-position-methods/</id>
    <published>2018-07-15T14:50:25.000Z</published>
    <updated>2018-07-17T04:04:22.449Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在复习position定位属性，看到一篇介绍很棒的文章，所以转载记录一下。原文章地址<a href="https://www.jianshu.com/p/a116022c6c99" target="_blank" rel="noopener">点击跳转</a>。</strong></p><p>今天给大家分享一下，深度思考中的知识点——position定位有哪几种?各有什么特点?</p><h3 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h3><p>position是CSS中非常重要的一个属性，通过position属性，我们可以让元素相对于其正常位置，父元素或者浏览器窗口进行偏移。</p><h3 id="二、知识剖析"><a href="#二、知识剖析" class="headerlink" title="二、知识剖析"></a>二、知识剖析</h3><p>position概念：<br>CSS的很多其他属性大多容易理解，比如字体，文本，背景等。有些CSS书籍、博客或网站也会对这些简单的属性进行大张旗鼓的介绍，而偏偏忽略了对一些难缠的属性讲解，有避重就轻的嫌疑。CSS中主要难以理解的属性包括盒型结构，各种垂直居中问题、弹性布局以及定位。<br>正如position is everything.<br>position属性值:<br>position的属性值共有四个常用的：static、relative、absolute、fixed。<br>还有三个不常用的：inherit、initial、sticky。</p><h3 id="三、知识详解"><a href="#三、知识详解" class="headerlink" title="三、知识详解"></a>三、知识详解</h3><ol><li><p>Static<br>所有元素在默认的情况下position属性均为static，而我们在布局上经常会用到的相对定位和绝对定位常用的属性top、bottom、left、right或者 z-index<br>声明在position为static的情况下无效。其用法为：在改变了元素的position属性后可以将元素重置为static让其回归到页面默认的文档流中。</p></li><li><p>Relative<br>relative定位，又称为相对定位，从字面上来解析，我们就可以看出该属性的主要特性：相对。但是它相对的又是相对于什么地方而言的呢？这个是个重点，也是最让我在学习CSS中迷糊的一个地方，现在让我们来做个测试，我想大家都会明白的：<br>(1) 初始未定位<br><img src="https://img-blog.csdn.net/20180715215751281?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="01"></p><p>(2) 我们修改first元素的position属性：<br>相对偏移20px后：<br><img src="https://img-blog.csdn.net/20180715215815596?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="02"></p><p>已经很明显了，相对定位相对的是它原本在文档流中的位置而进行的偏移，而我们也知道relative定位也是遵循正常的文档流，它没有脱离文档流，但是它的top/left/right/bottom属性是生效的，可以说它是static到absoult的一个中间过渡属性，最重要的是它还占有文档空间，而且占据的文档空间不会随top / right / left / bottom 等属性的偏移而发生变动，也就是说它后面的元素是依据虚线位置( top / left / right / bottom等属性生效之前)进行的定位，这点一定要理解。</p><p>小扩展：那好，我们知道了top / right / left / bottom 属性是不会对relative定位的元素所占据的文档空间产生偏移，那么margin /padding属性会让该文档空间产生偏移吗？</p><p>答案是肯定的，我们一起来做个试验吧：<br>(3) 添加margin属性：<br> 设置margin：20px后：<br><img src="https://img-blog.csdn.net/20180715215954853?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="03"><br>对比一下，答案一目了然，我们先将first元素外边距设为20px，那么second元素就得向下偏移40px，所以margin是占据文档空间！</p><p>同理，大家可以自己动手测下padding的效果！</p></li><li><p>Absolute<br>absolute定位，也称为绝对定位，虽然它的名字号曰“绝对”，但是它的功能却更接近于”相对”一词，为什么这么讲呢？原来，使用absolut定位的元素脱离文档流后，就只能根据祖先类元素(父类以上)进行定位，而这个祖先类还必须是以position非static方式定位的，<br>举个例子，a元素使用absolute定位，它会从父类开始找起，寻找以position非static方式定位的祖先类元素(Note!一定要是直系祖先才算.），直到html根标签为止。<br>这里还需要注意的是，relative和static方式在最外层时是以body标签为定位原点的，而absolute方式在无父级是position非static定位时是以html作为原点定位。<br>但是呢，我们都知道html和body元素相差大概有9px左右。我们来看下效果：</p><p>(4) 添加absolute属性：<br>position: absolute;top :0;left : 0</p><p><img src="https://img-blog.csdn.net/20180715220232269?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="04"></p><p>看了上面的信息后，细心的同学肯定要问了，为什么absolute定位要加 top:0; left:0; 属性，这不是多此一举吗？<br>其实我们加上这两个属性是完全必要的，因为我们如果使用absolute或fixed定位的话，必须指定 left、right、 top、 bottom属性中的至少一个，否则left/right/top/bottom属性会使用它们的默认值 auto，这将导致对象遵从正常的HTML布局规则，在前一个对象之后立即被呈递，简单讲就是都变成relative，会占用文档空间，这点非常重要，很多人使用absolute定位后发现没有脱离文档流就是这个原因，这里要特别注意。</p><p>小扩展<br>既然absolute是根据祖先类中的position非static元素进行定位的，那么祖先类中的margin/padding会不会对position产生影响呢？看个例子先：</p><p>(5) 在absolute定位中添加margin / padding属性：<br><img src="https://img-blog.csdn.net/20180715220308414?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="05"><br><img src="https://img-blog.csdn.net/2018071522031474?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="06"></p><p>结果很明朗了，祖先类的margin会让子类的absolute跟着偏移，而padding却不会让子类的absolute发生偏移。<br>总结一下，就是absolute是根据祖先类的border进行的定位。<br>Note : 充分了解Relative和Absolute的区别后，我们可以分析得出这个结论：(absolute)定位对象在可视区域之外会导致滚动条出现。而放置(relative)定位对象在可视区域之外，滚动条不会出现。这点在我们的前端页面制作中需要多加注意~~~</p></li><li><p>Fixed</p><p> 在很长的时间里，这个属性值因为兼容性问题，并没有得到非常广泛的应用（IE6未实现该属性值）。fixed和absolute有很多共同点：</p><p> 1.会改变行内元素的呈现模式，使display之变更为block。</p><p> 2.会让元素脱离文档流，不占据空间。</p><p> 3.默认会覆盖到非定位元素上。</p><p> 所以，fixed与absolute最大的区别在于：absolute的”根元素“是可以被设置的，而fixed则其”根元素“固定为浏览器窗口。即当你滚动网页，其元素与浏览器窗口之间的距离是恒定不变的。</p></li></ol><h3 id="四、拓展知识"><a href="#四、拓展知识" class="headerlink" title="四、拓展知识"></a>四、拓展知识</h3><ol><li><p><code>z-index</code>属性：</p><p><code>z-index</code>，又称为对象的层叠顺序，它用一个整数来定义堆叠的层次，整数值越大，则被层叠在越上面，当然这是指同级元素间的堆叠，如果两个对象的此属性具有同样的值，那么将依据它们在HTML文档中流的顺序层叠，写在后面的将会覆盖前面的。需要注意的是，父子关系是无法用<code>z-index</code>来设定上下关系的，一定是子级在上父级在下。</p></li><li><p>Note：使用static 定位或无position定位的元素z-index属性是无效的。</p></li><li><p>什么是文档流？<br>将窗体自上而下分成一行行, 并在每行中按从左至右的顺序排放元素,即为文档流。<br>只有三种情况会使得元素脱离文档流，分别是：浮动、绝对定位和相对定位。</p></li></ol><p>原作者：Borvay<br>链接：<a href="https://www.jianshu.com/p/a116022c6c99" target="_blank" rel="noopener">https://www.jianshu.com/p/a116022c6c99</a><br>來源：简书</p>]]></content>
    
    <summary type="html">
    
      在复习position定位属性，看到一篇介绍很棒的文章，所以转载记录一下。原文章地址点击跳转。
    
    </summary>
    
      <category term="前端基础" scheme="https://super456.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="CSS" scheme="https://super456.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>div+css设置水平垂直居中方法</title>
    <link href="https://super456.github.io/2018/07/15/2018-07-15-div-css-center-vertical/"/>
    <id>https://super456.github.io/2018/07/15/2018-07-15-div-css-center-vertical/</id>
    <published>2018-07-15T14:10:25.000Z</published>
    <updated>2018-07-17T03:43:40.304Z</updated>
    
    <content type="html"><![CDATA[<p><strong>之前写前端页面经常会遇到这个问题，所以抽了个时间总结了一下这些常用的方法，通常分为两种情况来设置：已知宽高和未知。简单的分享一下经验。</strong></p><h3 id="（一）已知宽高情况的设置"><a href="#（一）已知宽高情况的设置" class="headerlink" title="（一）已知宽高情况的设置"></a>（一）已知宽高情况的设置</h3><ol><li><p><code>position：absolute;</code>，<code>margin：auto;</code>使用position的绝对定位和margin的居中定位 ，四个方向位置距离设置成一样就行了（通过填充父元素的可用空间 ，子元素设定了宽高，那么多余的空间，被margin：auto平均分配的原理）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//html代码</span><br><span class="line">  &lt;div class=&quot;box1&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;box2&quot;&gt;div+css设置水平垂直居中显示&lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> //css样式代码</span><br><span class="line">     .box1 &#123;</span><br><span class="line">     width: 400px;</span><br><span class="line">     height: 400px;</span><br><span class="line">     margin: auto;</span><br><span class="line">     border: 1px solid red;</span><br><span class="line">             /* 位置值设置相等即可*/</span><br><span class="line">     top: 0;</span><br><span class="line">     left: 0;</span><br><span class="line">     right: 0;</span><br><span class="line">     bottom: 0;</span><br><span class="line">     position: absolute;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdn.net/20180715153903326?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="01"></p></li><li><p>设置 使用position的绝对定位和margin的居中定位，top和left设置与屏幕相距成50%，然后用transform向左（上）平移它自己宽度（高度）的50%即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   .box1 &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    margin: auto;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    position: absolute;</span><br><span class="line">    transform: translate(-50%,-50%); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果一样。</p></li><li><p>设置 使用position的绝对定位和margin的居中定位，top和left设置与屏幕相距成50%，使用<code>margin:高的一半px 0 0 宽的一半px;</code> 即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   .box1 &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    margin: auto;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    position: absolute;</span><br><span class="line">    margin: -200px 0 0 -200px; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="（二）未知元素宽高"><a href="#（二）未知元素宽高" class="headerlink" title="（二）未知元素宽高"></a>（二）未知元素宽高</h3><p>这里是使用了两个div的class为box1和box2，方便区别显示，主要设置box2来显示；</p><ol><li><p>通过position的绝对定位和固定定位left和top都设置相对屏幕的50%距离，然后使用transform的translate负偏移来显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//html</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;</span><br><span class="line">     &lt;div class=&quot;box2&quot;&gt;div+css设置水平垂直居中显示&lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> //css</span><br><span class="line">     .box2 &#123;</span><br><span class="line">     border: 5px solid green;</span><br><span class="line">     position: absolute;</span><br><span class="line">     top: 50%;</span><br><span class="line">     left: 50%;</span><br><span class="line">     transform: translate(-50%,-50%);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdn.net/20180715161549700?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="02"></p></li><li><p>通过css设置父元素为display: table，子元素为 display: table-cell，这种方法是让元素包含的内容居中，但是会占据整个父元素，因为子元素没有设置宽高的，如下所示（红线方框是设置宽高的父元素）：<br><img src="https://img-blog.csdn.net/20180715162612228?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="03"></p></li><li><p>最实用的方法：css3新的布局方法——弹性布局 display: flex。在这个方法中，不管是在已知或未知元素宽高的情况下，都能使元素居中显示（推荐使用）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//css</span><br><span class="line">.box1 &#123;</span><br><span class="line">        width: 400px;</span><br><span class="line">        height: 400px;</span><br><span class="line">        margin: auto;</span><br><span class="line">        border: 5px solid red;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;/*垂直居中*/</span><br><span class="line">        justify-content: center;/*水平居中*/</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    .box2 &#123;</span><br><span class="line">        border: 5px solid green;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>运行结果：<br><img src="https://img-blog.csdn.net/20180715163413803?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="04"></p>]]></content>
    
    <summary type="html">
    
      之前写前端页面经常会遇到这个问题，所以抽了个时间总结了一下这些常用的方法，通常分为两种情况来设置：已知宽高和未知。简单的分享一下经验。
    
    </summary>
    
      <category term="前端基础" scheme="https://super456.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="CSS" scheme="https://super456.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue 进阶教程之：详解 v-model</title>
    <link href="https://super456.github.io/2018/07/15/2018-07-15-vue2-v-model/"/>
    <id>https://super456.github.io/2018/07/15/2018-07-15-vue2-v-model/</id>
    <published>2018-07-15T06:22:25.000Z</published>
    <updated>2018-07-17T03:36:35.420Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文声明：这是转载简书上的一篇文章，原作者Yi罐可乐，写的这篇文章非常详细却容易理解，对v-model的理解有了更深入的认识，感谢。以下是原文，也可以<a href="https://www.jianshu.com/p/4147d3ed2e60" target="_blank" rel="noopener">点击跳转到原文章查看</a></strong></p><p>Vue 官网教程上关于 <code>v-model</code> 的讲解不是十分的详细，写这篇文章的目的就是详细的剖析一下， 并介绍 Vue 2.2 <code>v-model</code> 改进的地方，然后穿插的再说点 Vue 的小知识。</p><p>在 Vue 中，有许多方法和 Angular 相似，这主要是因为 Angular 是 Vue 早期开发的灵感来源。然而，Augular 中存在许多问题，在 Vue 中已经得到解决。</p><h3 id="（一）v-model解析"><a href="#（一）v-model解析" class="headerlink" title="（一）v-model解析"></a>（一）v-model解析</h3><p>1.<code>v-model</code>用在 <code>input</code>元素上时<code>v-model</code>虽然很像使用了双向数据绑定的 Angular 的 <code>ng-model</code>，但是 Vue 是单项数据流，<code>v-model</code> 只是语法糖而已：↓</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;sth&quot; /&gt;</span><br><span class="line">&lt;input v-bind:value=&quot;sth&quot; v-on:input=&quot;sth = $event.target.value&quot; /&gt;</span><br></pre></td></tr></table></figure><p>第一行的代码其实只是第二行的语法糖。然后第二行代码还能简写成这样：<br><code>&lt;input :value=&quot;sth&quot; @input=&quot;sth = $event.target.value&quot; /&gt;</code></p><p>要理解这行代码，首先你要知道 <code>input</code> 元素本身有个<code>oninput</code>事件，这是 HTML5 新增加的，类似 <code>onchange</code>，每当输入框内容发生变化，就会触发 <code>oninput</code> ，把最新的<code>value</code>传递给 <code>sth</code>。<br>如果你不知道 <a href="https://cn.vuejs.org/v2/guide/events.html" target="_blank" rel="noopener">$event </a>是从哪来的，那你需要点击它再复习一下文档。</p><p>2.我们仔细观察语法糖和原始语法那两行代码，可以得出一个结论：</p><p>在给 <code>&lt;input /&gt;</code>元素添加<code>v-model</code>属性时，默认会把 <code>value</code>作为元素的属性，然后把<code>input</code>事件作为实时传递 <code>value</code>的触发事件。</p><h3 id="（二）v-model用在组件上时"><a href="#（二）v-model用在组件上时" class="headerlink" title="（二）v-model用在组件上时"></a>（二）v-model用在组件上时</h3><p><code>v-model</code>不仅仅能在<code>input</code>上用，在组件上也能使用，下面是一个和 Vue 官网教程类似的例子（在看这个例子时我们要考虑两个问题）：<br><img src="https://upload-images.jianshu.io/upload_images/1430985-7b1aa19fecc5efb1.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/320" alt="实例演示.gif"></p><p>父组件的 price 的初始值是 100，更改子组件的值能实时更新父组件的 price<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;demo&quot;&gt;</span><br><span class="line">  &lt;currency-input v-model=&quot;price&quot;&gt;&lt;/currentcy-input&gt;</span><br><span class="line">  &lt;span&gt;&#123;&#123;price&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/vue/2.3.0/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&apos;currency-input&apos;, &#123;</span><br><span class="line">  template: `</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        ref=&quot;input&quot;</span><br><span class="line">        :value=&quot;value&quot;</span><br><span class="line">        &lt;!--为什么这里把 &apos;input&apos; 作为触发事件的事件名？`input` 在哪定义的？--&gt;</span><br><span class="line">        @input=&quot;$emit(&apos;input&apos;, $event.target.value)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  `,</span><br><span class="line">  props: [&apos;value&apos;],// 为什么这里要用 value 属性，value在哪里定义的？貌似没找到啊？</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var demo = new Vue(&#123;</span><br><span class="line">  el: &apos;#demo&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    price: 100,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>如果你知道这两个问题的答案，那么恭喜你真正掌握了 v-model，如果你没明白，那么可以看下这段代码：↓<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;currency-input v-model=&quot;price&quot;&gt;&lt;/currentcy-input&gt;</span><br><span class="line">&lt;!--上行代码是下行的语法糖</span><br><span class="line">  &lt;currency-input :value=&quot;price&quot; @input=&quot;price = arguments[0]&quot;&gt;&lt;/currency-input&gt;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure></p><p>现在你知道 <code>value</code> 和<code>input</code>从哪来的了吧。与上面总结的类似：</p><p>给组件添加<code>v-model</code>属性时，默认会把<code>value</code>作为组件的属性，然后把 <code>&#39;input&#39;</code>值作为给组件绑定事件时的事件名</p><p><code>v-model</code>的缺点和解决办法<br>在创建类似复选框或者单选框的常见组件时，v-model就不好用了。</p><p><code>&lt;input type=&quot;checkbox&quot; v-model=&quot;sth&quot; /&gt;</code><br>v-model 给我们提供好了 <code>value</code>属性和 <code>oninput</code>事件，但是，我们需要的不是<code>value</code>属性，而是 <code>checked</code> 属性，并且当你点击这个单选框的时候不会触发 <code>oninput</code>事件，它只会触发<code>onchange</code>事件。这就尴尬了。</p><p>因为<code>v-model</code>只是用到了<code>input</code>元素上，所以这种情况好解决：↓</p><p><code>&lt;input type=&quot;checkbox&quot; :checked=&quot;status&quot; @change=&quot;status = $event.target.checked&quot; /&gt;</code></p><p>当 <code>v-model</code>用到组件上时：↓<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-checkbox v-model=&quot;foo&quot;&gt;&lt;/my-checkbox&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;my-checkbox&apos;, &#123;</span><br><span class="line">  tempalte: `&lt;input </span><br><span class="line">               type=&quot;checkbox&quot;</span><br><span class="line">               @change=&quot;$emit(&apos;input&apos;, $event.target.checked)&quot;</span><br><span class="line">               :checked=&quot;value&quot;</span><br><span class="line">             /&gt;`</span><br><span class="line">  props: [&apos;value&apos;],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在 Vue 2.2 版本，你可以在定义组件时通过 model 选项的方式来定制 prop/event：↓<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-checkbox v-model=&quot;foo&quot;&gt;&lt;/my-checkbox&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;my-checkbox&apos;, &#123;</span><br><span class="line">  tempalte: `&lt;input </span><br><span class="line">               type=&quot;checkbox&quot;</span><br><span class="line">               &lt;!--这里就不用 input 了，而是 balabala--&gt;</span><br><span class="line">               @change=&quot;$emit(&apos;balabala&apos;, $event.target.checked)&quot;</span><br><span class="line">               :checked=&quot;checked&quot;</span><br><span class="line">             /&gt;`</span><br><span class="line">  props: [&apos;checked&apos;], //这里就不用 value 了，而是 checked</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &apos;checked&apos;,</span><br><span class="line">    event: &apos;balabala&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>看到这里我相信你肯定理解了 Vue 的 v-model，文中如有错误，欢迎在评论中指出谢谢。</p><p>原作者：Yi罐可乐<br>链接：<a href="https://www.jianshu.com/p/4147d3ed2e60" target="_blank" rel="noopener">https://www.jianshu.com/p/4147d3ed2e60</a><br>來源：简书</p>]]></content>
    
    <summary type="html">
    
      本文声明：这是转载简书上的一篇文章，原作者Yi罐可乐，写的这篇文章非常详细却容易理解，对v-model的理解有了更深入的认识，感谢。以下是原文，也可以点击跳转到原文章查看
    
    </summary>
    
      <category term="Vue.js" scheme="https://super456.github.io/categories/Vue-js/"/>
    
    
      <category term="vue2基础" scheme="https://super456.github.io/tags/vue2%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>vue2.0基础知识坑（一）</title>
    <link href="https://super456.github.io/2018/07/14/2018-07-14-vue2-base-hole1/"/>
    <id>https://super456.github.io/2018/07/14/2018-07-14-vue2-base-hole1/</id>
    <published>2018-07-14T03:30:25.000Z</published>
    <updated>2018-07-17T03:32:52.589Z</updated>
    
    <content type="html"><![CDATA[<p><strong>学完vue2.0，在写代码啦官网的<a href="https://xiedaimala.com/courses/0d531a6f-40a7-4120-a8f6-9e816ff9d51c#/common" target="_blank" rel="noopener">方方老师的《Vue 自测题》</a>测试了一下，惨不忍睹，记录一下测试中的容易错误知识点及坑。</strong><br><img src="https://img-blog.csdn.net/20180713210635764?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="官网"></p><h3 id="（一）安装与介绍"><a href="#（一）安装与介绍" class="headerlink" title="（一）安装与介绍"></a>（一）安装与介绍</h3><ol><li><p>v-bind绑定之问题<br>html部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;span ____________???____________&gt;</span><br><span class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>js部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   var app = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;Hello Vue!&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>问号处应该填入什么，才能使得 span 的 title 为 message 的值？</p><p>答案是：<br>(1).<code>:title=&quot;message&quot;</code>；<br>(2).<code>v-bind:title=&quot;message&quot;</code>；<br>(3).<code>:title=message</code>；<br>(4).<code>v-bind:title=message</code>；<br>后两种方法很迷，没找到解释，知道的小伙伴欢迎留言，建议答案都自己亲测试一下。</p></li><li><p>关于不同版本的都是正确的说法：<br>（1）如果你需要在客户端编译模板 (比如传入一个字符串给 template 选项，或挂载到一个元素上并以其 DOM 内部的 HTML 作为模板)，就将需要加上编译器，即完整版；<br>（2）当使用 vue-loader 或 vueify 的时候，*.vue 文件内部的模板会在构建时预编译成 JavaScript。你在最终打好的包里实际上是不需要编译器的，所以只用运行时版本即可；<br>（3）运行时版本相比完整版体积要小约 30%；</p></li></ol><h3 id="（二）实例与模板"><a href="#（二）实例与模板" class="headerlink" title="（二）实例与模板"></a>（二）实例与模板</h3><ol><li><p><code>var vm = new Vue(options)</code>其中 options 是一个对象，请问文档中说 options 可以包含哪些 key ？</p><p>答案是：<br>（1） data props propsData computed methods watch<br>（2）el template render renderError<br>（3）beforeCreate created beforeMount mounted beforeUpdate updated activated deactivated beforeDestroy destroyed errorCaptured<br>（4）directives filters components parent mixins extends provide inject<br>（5）name delimiters functional model inheritAttrs comments</p></li><li><p>data数据问题</p><p>html</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;span class=span-a&gt;</span><br><span class="line">      &#123;&#123;obj.a&#125;&#125; </span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span class=span-b&gt;</span><br><span class="line">      &#123;&#123;obj.b&#125;&#125;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>js</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">      a: &apos;a&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">app.obj.a = &apos;a2&apos;</span><br><span class="line">app.obj.b = &apos;b&apos;</span><br></pre></td></tr></table></figure><p> 请问最终 span-a 和 span-b 中分别展示什么字符串？</p><p> 答案是：<code>span-a 中显示a2，span-b 中显示b</code>，注意不是显示undefined。</p></li><li><p>文档中建议 Vue 实例的生命周期钩子不要写成箭头函数，给出的理由是什么</p><p> 答：<br> （1）箭头函数是和父级上下文绑定在一起的，this 不会是如你所预期的 Vue 实例；<br> （2）经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。</p></li></ol><h3 id="（三）计算属性和侦听器"><a href="#（三）计算属性和侦听器" class="headerlink" title="（三）计算属性和侦听器"></a>（三）计算属性和侦听器</h3><ol><li><p>如果 data属性是对象 obj.count，那么要如何写代码才能监听 obj.count 的变化？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el: &apos;#app&apos;,</span><br><span class="line">data: &#123;</span><br><span class="line">    obj:&#123;count: 1&#125;,</span><br><span class="line">    modified: 0</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">    _______???________</span><br><span class="line">    this.modified += 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>答案是：<code>&#39;obj.count&#39;:function(){</code>可以监听指定的对象属性</p></li><li><p>如果data中的对象 obj 有 N 个属性，要怎么才能监听所有属性呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el: &apos;#app&apos;,</span><br><span class="line">data: &#123;</span><br><span class="line">    modified: 0,</span><br><span class="line">    obj: &#123;a:1,b:2,c:3&#125;</span><br><span class="line">&#125;,</span><br><span class="line">created()&#123;</span><br><span class="line">    this.$watch(&apos;obj&apos;, ()=&gt;&#123;</span><br><span class="line">        this.modified += 1</span><br><span class="line">    &#125;, ___________????_________)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>答案是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch()&#123;</span><br><span class="line">    obj:&#123;</span><br><span class="line">    handler(oldval,newval)&#123;</span><br><span class="line">    console.log()</span><br><span class="line">&#125;,</span><br><span class="line">deep:true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想监听obj对象中的b属性变化时才执行handler函数，可以使用计算属性computed做中间层，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">el: &apos;#app&apos;,</span><br><span class="line">data: &#123;</span><br><span class="line">    modified: 0,</span><br><span class="line">    obj: &#123;a:1,b:2,c:3&#125;</span><br><span class="line">&#125;,</span><br><span class="line">created()&#123;</span><br><span class="line">    this.$watch(&apos;obj&apos;, ()=&gt;&#123;</span><br><span class="line">        this.modified += 1</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">　　b() &#123;</span><br><span class="line">　　　　return this.obj.b</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;,</span><br><span class="line">    watch()&#123;</span><br><span class="line">    b(oldval,newval)&#123;</span><br><span class="line">    console.log()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      学完vue2.0，在写代码啦官网的方方老师的《Vue 自测题》测试了一下，惨不忍睹，记录一下测试中的容易错误知识点及坑。
    
    </summary>
    
      <category term="Vue.js" scheme="https://super456.github.io/categories/Vue-js/"/>
    
    
      <category term="vue2基础" scheme="https://super456.github.io/tags/vue2%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>vue2.0实战项目——简单的快餐店系统</title>
    <link href="https://super456.github.io/2018/07/12/2018-07-12-vue2-sellpossystem/"/>
    <id>https://super456.github.io/2018/07/12/2018-07-12-vue2-sellpossystem/</id>
    <published>2018-07-12T13:50:25.000Z</published>
    <updated>2018-07-17T03:32:57.428Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近学习vue看到网上很多学习的资料，就找了一个项目系统练习，主要是想学习了的一些知识点，系统的组合运用一遍。网上根据<strong>技术胖老师</strong>博客的内容自己也实战了一遍，挺实用的，对vue框架有了更深入的了解以及自身能力的提升。</p></blockquote><p>欢迎下载使用或二次开发。</p><h3 id="（一）项目分析"><a href="#（一）项目分析" class="headerlink" title="（一）项目分析"></a>（一）项目分析</h3><p>这个项目主要是实现在线的用户点餐以及对点餐列表商品的增删改查等功能；然后使用mockplus工具画出草图，主要是方便开发。<br><img src="https://img-blog.csdn.net/20180712173352759?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="项目框线图"></p><h3 id="（二）运用到的技术"><a href="#（二）运用到的技术" class="headerlink" title="（二）运用到的技术"></a>（二）运用到的技术</h3><p>1.使用vue-cli2.x搭建的开发环境；</p><p>2.使用vue-router做路由转换；</p><p>3.使用element-ui做界面美化；</p><p>4.使用axios做跨域请求接口数据；</p><p>5.使用icofont在线图标管理；</p><p>6.使用webpack打包管理；</p><p>7.使用vue2.0语法和es6语法；</p><h3 id="（三）系统成果"><a href="#（三）系统成果" class="headerlink" title="（三）系统成果"></a>（三）系统成果</h3><p><img src="https://img-blog.csdn.net/20180712174527579?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="运行结果"></p><h3 id="（四）系统使用"><a href="#（四）系统使用" class="headerlink" title="（四）系统使用"></a>（四）系统使用</h3><p>1.前提是要有node.js、npm、vue-cli环境（最好有Git，会方便很多）；</p><p>2.<a href="https://github.com/super456/vue2.0-SellPosSystem" target="_blank" rel="noopener">下载项目</a>（git clone最好）；</p><p>3.打开终端切换到该项目名称下，执行以下命令行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># install dependencies 安装开发环境的依赖，因为不是直接打包上传的项目</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"># serve with hot reload at localhost:8080 运行项目基本没问题</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>技术胖老师的 <a href="http://jspang.com/2017/05/22/vuedemo/" target="_blank" rel="noopener">Vue实战视频-快餐店收银系统</a></p>]]></content>
    
    <summary type="html">
    
      最近学习vue看到网上很多学习的资料，就找了一个项目系统练习，主要是想学习了的一些知识点，系统的组合运用一遍。网上根据**技术胖老师**博客的内容自己也实战了一遍，挺实用的，对vue框架有了更深入的了解以及自身能力的提升
    
    </summary>
    
      <category term="Vue.js" scheme="https://super456.github.io/categories/Vue-js/"/>
    
    
      <category term="vue2基础" scheme="https://super456.github.io/tags/vue2%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js2.0生命周期的理解与应用</title>
    <link href="https://super456.github.io/2018/07/08/2018-07-08-vue2-lifestyle/"/>
    <id>https://super456.github.io/2018/07/08/2018-07-08-vue2-lifestyle/</id>
    <published>2018-07-08T05:47:25.000Z</published>
    <updated>2018-07-17T03:33:02.815Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在学习vue2.x入门后，开始慢慢熟悉vue的模式和开发脚手架项目实践过程中，需要对生命周期钩子函数一定的理解，多少会用到这些钩子函数，根据自己的理解写了一下，欢迎指正或学习交流。</strong></p><h3 id="（一）vue2-x生命周期图"><a href="#（一）vue2-x生命周期图" class="headerlink" title="（一）vue2.x生命周期图"></a>（一）vue2.x生命周期图</h3><p><img src="https://img-blog.csdn.net/20180708113143806?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="vue生命周期"></p><h3 id="（二）生命周期钩子函数说明"><a href="#（二）生命周期钩子函数说明" class="headerlink" title="（二）生命周期钩子函数说明"></a>（二）生命周期钩子函数说明</h3><table><thead><tr><th style="text-align:left">生命周期钩子函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">beforeCreate</td><td style="text-align:left">在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</td></tr><tr><td style="text-align:left">created</td><td style="text-align:left">实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)属性初始化和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</td></tr><tr><td style="text-align:left">beforeMount</td><td style="text-align:left">在挂载开始之前被调用：相关的 render 函数首次被调用。</td></tr><tr><td style="text-align:left">mounted</td><td style="text-align:left"><code>el</code>被新创建的 <code>vm.$el</code> 替换，并挂载到实例上去之后调用该钩子。如果 root实例挂载了一个文档内元素，当mounted被调用时 vm.$el 也在文档内。</td></tr><tr><td style="text-align:left">beforeUpdate</td><td style="text-align:left">数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</td></tr><tr><td style="text-align:left">updated</td><td style="text-align:left">由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</td></tr><tr><td style="text-align:left">beforeDestroy</td><td style="text-align:left">实例销毁之前调用。在这一步，实例仍然完全可用。</td></tr><tr><td style="text-align:left">destroyed</td><td style="text-align:left">Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</td></tr></tbody></table><h3 id="（三）代码演示"><a href="#（三）代码演示" class="headerlink" title="（三）代码演示"></a>（三）代码演示</h3><ol><li><p>通过嵌套组件的页面加载查看显示顺序：<br>代码如下(可直接复制使用)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">   &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;vue生命周期的理解应用&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;p&gt;以下是调用组件信息&lt;/p&gt;</span><br><span class="line">        &lt;div class=&quot;test&quot;&gt;</span><br><span class="line">            &lt;keep-alive&gt;&lt;/keep-alive&gt;</span><br><span class="line">            &lt;test-component v-bind:msg=&quot;msg&quot; v-on:msgchange=&quot;updateMsg($event)&quot;&gt;&lt;/test-component&gt;</span><br><span class="line">            &lt;/keep-alive&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var child = &#123;</span><br><span class="line">        props: [&apos;msg&apos;],</span><br><span class="line">        template: &apos;&lt;button v-on:click=&quot;changeChuanzhi&quot;&gt;点击向父组件事件传值--&#123;&#123;msg&#125;&#125;&lt;/button&gt;&apos;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeChuanzhi: function () &#123;</span><br><span class="line">                this.$emit(&quot;msgchange&quot;, &quot;子组件向父组件传值&quot;); //注意两个参数：第一个参数是事件名，第二个参数是传递的内容</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        deactivated: function () &#123;</span><br><span class="line">            console.log(&apos;component deactivated!&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        activated: function () &#123;</span><br><span class="line">            console.log(&apos;component activated&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &apos;#vue-app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            msg: &apos;父亲给儿子的信息&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            updateMsg: function (msg) &#123;</span><br><span class="line">                this.msg = msg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            &apos;test-component&apos;: child</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        //生明周期示例</span><br><span class="line">        beforeCreate: function () &#123;</span><br><span class="line">            alert(&quot;组件实例化之前执行的函数：beforeCreate()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        created: function () &#123;</span><br><span class="line">            alert(&quot;组件实例化完毕，但页面还未显示出来:created()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount: function () &#123;</span><br><span class="line">            alert(&quot;组件挂载前，页面仍未展示，但虚拟DOM已经配置:beforeMount()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted: function () &#123;</span><br><span class="line">            alert(&quot;组件挂载后，此方法执行后，页面显示:mounted()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate: function () &#123;</span><br><span class="line">            alert(&quot;组件更新前，页面仍未更新，但虚拟DOM已经配置:beforeUpdate()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        updated: function () &#123;</span><br><span class="line">            alert(&quot;组件更新后，此方法执行后，页面显示:updated()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy: function () &#123;</span><br><span class="line">            alert(&quot;组件销毁前:beforeDestroy()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed: function () &#123;</span><br><span class="line">            alert(&quot;组件销毁:destroyed()&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdn.net/20180708114229457?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="演示1"></p></li><li><p>通过控制台查看页面加载显示顺序日志：<br>代码如下（可直接复制使用）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">   &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;vue生命周期的理解应用&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;p&gt;以下是调用组件信息&lt;/p&gt;</span><br><span class="line">        &lt;div class=&quot;test&quot;&gt;</span><br><span class="line">            &lt;p&gt;默认显示的数据：&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;test-component v-bind:msg=&quot;msg&quot; v-on:msgchange=&quot;updateMsg($event)&quot;&gt;&lt;/test-component&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var child = &#123;</span><br><span class="line">        props: [&apos;msg&apos;],</span><br><span class="line">        data: function () &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                childtofather: &apos;子组件向父组件传值&apos;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        template: &apos;&lt;button v-on:click=&quot;changeChuanzhi&quot;&gt;点击向父组件事件传值--&#123;&#123;msg&#125;&#125;&lt;/button&gt;&apos;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeChuanzhi: function () &#123;</span><br><span class="line">                this.$emit(&quot;msgchange&quot;, this.childtofather); //注意两个参数：第一个参数是事件名，第二个参数是传递的内容</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    var app =new Vue(&#123;</span><br><span class="line">        el: &apos;#vue-app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            msg: &apos;父亲给儿子的信息&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            updateMsg: function (msg) &#123;</span><br><span class="line">                this.msg = msg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            &apos;test-component&apos;: child</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        //生明周期示例</span><br><span class="line">        beforeCreate: function () &#123;</span><br><span class="line">            // alert(&quot;组件实例化之前执行的函数：beforeCreate()&quot;);</span><br><span class="line">            console.group(&apos;beforeCreate 创建前状态===============》&apos;);</span><br><span class="line">            var state1 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(state1);</span><br><span class="line">        &#125;,</span><br><span class="line">        created: function () &#123;</span><br><span class="line">            // alert(&quot;组件实例化完毕，但页面还未显示出来:created()&quot;);</span><br><span class="line">            console.group(&apos;created 创建完毕状态===============》&apos;);</span><br><span class="line">            var state2 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(state2);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount: function () &#123;</span><br><span class="line">            // alert(&quot;组件挂载前，页面仍未展示，但虚拟DOM已经配置:beforeMount()&quot;);</span><br><span class="line">            console.group(&apos;beforeMount 挂载前状态===============》&apos;);</span><br><span class="line">            var state3 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">            console.log(state3);</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted: function () &#123;</span><br><span class="line">            // alert(&quot;组件挂载后，此方法执行后，页面显示:mounted()&quot;);</span><br><span class="line">            console.group(&apos;mounted 挂载结束状态===============》&apos;);</span><br><span class="line">            var state4 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">            console.log(state4);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate: function () &#123;</span><br><span class="line">            // alert(&quot;组件更新前，页面仍未更新，但虚拟DOM已经配置:beforeUpdate()&quot;);</span><br><span class="line">            console.group(&apos;beforeUpdate 更新前状态===============》&apos;);</span><br><span class="line">            var state5 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">            console.log(state5);</span><br><span class="line">            debugger</span><br><span class="line">        &#125;,</span><br><span class="line">        updated: function () &#123;</span><br><span class="line">            // alert(&quot;组件更新后，此方法执行后，页面显示:updated()&quot;);</span><br><span class="line">            console.group(&apos;updated 更新完成状态===============》&apos;);</span><br><span class="line">            var state6 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">            console.log(state6);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy: function () &#123;</span><br><span class="line">            // alert(&quot;组件销毁前:beforeDestroy()&quot;);</span><br><span class="line">            console.group(&apos;beforeDestroy 销毁前状态===============》&apos;);</span><br><span class="line">            var state7 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">            console.log(state7);</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed: function () &#123;</span><br><span class="line">            // alert(&quot;组件销毁:destroyed()&quot;);</span><br><span class="line">            console.group(&apos;destroyed 销毁完成状态===============》&apos;);</span><br><span class="line">            var state8 = &#123;</span><br><span class="line">                &apos;el&apos;: this.$el,</span><br><span class="line">                &apos;data&apos;: this.$data,</span><br><span class="line">                &apos;msg&apos;: this.msg</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">            console.log(state8);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><pre><code>简单说明一下结构：（1）创建了一个Vue根实例命名为vue-app，将其挂载到页面id为vue-app的dom元素上。（2）局部注册的一个组件child并在根实例中将其注册使其可以在根实例的作用域中使用。（3）将子组件用&lt;keep-alive&gt; 包裹，为接下来的测试作准备。（4）打开开发者工具的控制台查看结果：</code></pre><p><img src="https://img-blog.csdn.net/20180708120001224?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="运行结果"></p><h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h4><p>1.beforeCreate执行时：data和el均未初始化，值为：undefined；<br><img src="https://img-blog.csdn.net/20180708120535188?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="1"><br>2.created执行时：Vue 实例观察的数据对象data已经配置好，已经可以得到vue-app.msg的值，但Vue 实例使用的根 DOM 元素el还未初始化；<br><img src="https://img-blog.csdn.net/20180708120656851?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="2"><br>3.beforeMount执行时：data和el均已经初始化，但从等页面展示数据可以看出此时el并没有渲染进数据，el的值为“虚拟”DOM的元素节点；<br><img src="https://img-blog.csdn.net/20180708121111519?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="3"></p><p>4.mounted执行时：此时el已经渲染完成并挂载到实例上，页面基本显示完成；<br><img src="https://img-blog.csdn.net/20180708121250995?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="4"></p><p>5.beforeUpdate执行时：会更新当前组件数据，但未在页面渲染出来；<br><img src="https://img-blog.csdn.net/20180708123626921?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="5"></p><p>6.updated执行时：会更新当前组件数据，并在页面渲染出来；<br><img src="https://img-blog.csdn.net/20180708123809593?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="6"></p><p>7.beforeDestroy和destroyed执行时：Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。注意：这里的销毁并不指代’抹去’，而是表示’解绑’。<br><img src="https://img-blog.csdn.net/20180708124940141?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="7.1"></p><p>验证一下，控制台输入：<code>app.msg=&#39;super456&#39;</code> 页面并没有显示出来，结果显示：<br><img src="https://img-blog.csdn.net/20180708125515860?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="7.2"></p><h3 id="（四）一些钩子函数应用"><a href="#（四）一些钩子函数应用" class="headerlink" title="（四）一些钩子函数应用"></a>（四）一些钩子函数应用</h3><p>1.beforeCreate钩子中可以进行loading之类的动画加载；<br>2.在created钩子中可以对data数据进行操作，这个时候可以进行ajax请求将返回的数据赋给data，还可以进行网络接口的请求操作；<br>3.在mounted钩子对挂载的dom进行操作，也可以进行后台获取数据操作；</p><h3 id="（五）文献参考"><a href="#（五）文献参考" class="headerlink" title="（五）文献参考"></a>（五）文献参考</h3><p><em>特别感谢：作者：hxgzj 的<a href="https://segmentfault.com/a/1190000010336178" target="_blank" rel="noopener">关于Vue.js2.0生命周期的研究与理解</a> 这篇文章分析的很详细，看完后参考写了一个案例出来的。内容中也引用了很多。</em></p>]]></content>
    
    <summary type="html">
    
      在学习vue2.x入门后，开始慢慢熟悉vue的模式和开发脚手架项目实践过程中，需要对生命周期钩子函数一定的理解，多少会用到这些钩子函数，根据自己的理解写了一下，欢迎指正或学习交流。
    
    </summary>
    
      <category term="Vue.js" scheme="https://super456.github.io/categories/Vue-js/"/>
    
    
      <category term="vue2基础" scheme="https://super456.github.io/tags/vue2%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>vue2.0基础知识点（一）</title>
    <link href="https://super456.github.io/2018/07/07/2018-07-07-vue2-base1/"/>
    <id>https://super456.github.io/2018/07/07/2018-07-07-vue2-base1/</id>
    <published>2018-07-07T04:47:25.000Z</published>
    <updated>2018-07-17T03:33:08.154Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文针对自己学习官方文档时，总结一些易容易混淆的知识点做一下记录。欢迎指正或学习交流。</strong></p><h3 id="（一）常用基础知识点"><a href="#（一）常用基础知识点" class="headerlink" title="（一）常用基础知识点"></a>（一）常用基础知识点</h3><ol><li><p><code>v-on:click=&#39;&#39;</code>、<code>@click=&#39;&#39;</code>、<code>:click=&#39;&#39;</code> 三种写法；<br>注意函数调用：直接使用双花括号调用函数是要使用函数名+括号，其他直接使用函数名即可，或使用函数名+括号（click事件中）注意传参的函数必须带括号，可以不带参数，不然会报错对象空值；</p></li><li><p><code>v-if=&#39;&#39;</code> 条件渲染与<code>v-show=&#39;&#39;</code> 的区别：v-if 条件：不存在不会占位空间不会被渲染挂载；v-show为真时，去掉display：none，为假时显示display：none。默认会占用空间，会被渲染挂载。</p></li><li><p><code>v-for=&#39;&#39;</code> 可以通过两组方式遍历数组（也可以遍历对象）：一种是通过数组下标；另一种是循环遍历；<br><code>v-for=&#39;user in users&#39; 或 v-for=&#39;(user,index) in users&#39;</code> 第二个参数是数组索引值；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   &lt;p&gt;v-for还可以渲染div&lt;/p&gt;</span><br><span class="line">&lt;div v-for=&apos;(user,index) in users&apos;&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;index+1&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;user.name&#125;&#125;---&#123;&#123;user.age&#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;v-for使用template标签，这个标签不像div一样会被渲染出来，只渲染template里面的标签&lt;/p&gt;</span><br><span class="line">&lt;template v-for=&apos;(user,index) in users&apos;&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;index+1&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;user.name&#125;&#125;---&#123;&#123;user.age&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;遍历数组里面的对象，遍历两次&lt;/p&gt;</span><br><span class="line">&lt;template v-for=&apos;(user,index) in users&apos;&gt;</span><br><span class="line">    &lt;div v-for=&quot;(item,key) in user&quot; &gt;</span><br><span class="line">        &lt;h5&gt;&#123;&#123;item&#125;&#125;---&#123;&#123;key&#125;&#125;&lt;/h5&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>数据双向绑定的两种方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   &lt;p&gt;双向数据绑定ref/$refs示例：input/select/textarea&lt;/p&gt;</span><br><span class="line">&lt;label for=&quot;&quot;&gt;姓名&lt;/label&gt;</span><br><span class="line">&lt;!-- ref属性标记值，可获取 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-on:keyup=&quot;logName&quot; ref=&apos;refName&apos;&gt;</span><br><span class="line">&lt;span&gt;您输入的名字为：&#123;&#123;name&#125;&#125;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">&lt;label for=&quot;age&quot;&gt;年龄&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-on:keyup=&apos;logAge&apos; id=&quot;age&quot; ref=&quot;refAge&quot;&gt;</span><br><span class="line">&lt;span&gt;您输入的年龄为：&#123;&#123;age&#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;双向数据绑定v-model示例：input/select/textarea&lt;/p&gt;</span><br><span class="line">&lt;label for=&quot;&quot;&gt;姓名&lt;/label&gt;</span><br><span class="line">&lt;!-- ref属性标记值，可获取 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&apos;name&apos;&gt;</span><br><span class="line">&lt;span&gt;您输入的名字为：&#123;&#123;name&#125;&#125;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">&lt;label for=&quot;age&quot;&gt;年龄&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;age&quot;&gt;</span><br><span class="line">&lt;span&gt;您输入的年龄为：&#123;&#123;age&#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><p> js部分：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el:&apos;#vue-app&apos;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:&apos;&apos;,</span><br><span class="line">        age:&apos;&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        logName:function()&#123;</span><br><span class="line">            // console.log(&quot;您正在输入名字~&quot;);</span><br><span class="line">            // $refs获取标记的值，后面接命名值+value</span><br><span class="line">            // console.log(this.$refs.refName.value);</span><br><span class="line">            this.name=this.$refs.refName.value;</span><br><span class="line">        &#125;,</span><br><span class="line">        logAge:function()&#123;</span><br><span class="line">            // console.log(&quot;您正在输入年龄~&quot;);</span><br><span class="line">            this.age=this.$refs.refAge.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>computed</code> 和 <code>methods</code> 方法：只要methods方法之一被调用，其他所有方法都会被渲染执行，很耗费性能；计算属性，只会调用相应的方法体，是应用于搜索，调用比较多的方法体。 </p></li></ol>]]></content>
    
    <summary type="html">
    
      本文针对自己学习官方文档时，总结一些易容易混淆的知识点做一下记录。欢迎指正或学习交流
    
    </summary>
    
      <category term="Vue.js" scheme="https://super456.github.io/categories/Vue-js/"/>
    
    
      <category term="vue2基础" scheme="https://super456.github.io/tags/vue2%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>使用vue-cli2.x入门简单demo游戏</title>
    <link href="https://super456.github.io/2018/07/05/2018-07-05-vue2-demo-game/"/>
    <id>https://super456.github.io/2018/07/05/2018-07-05-vue2-demo-game/</id>
    <published>2018-07-05T04:47:25.000Z</published>
    <updated>2018-07-17T03:33:12.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-cli2-x-demo"><a href="#vue-cli2-x-demo" class="headerlink" title="vue-cli2.x-demo"></a>vue-cli2.x-demo</h1><p><strong>第一次使用vue-cli2.x搭建一个小demo游戏。代码文件有很多注释信息，通俗易懂的使用这个脚手架搭建一个入门小项目哈。</strong></p><h2 id="介绍使用"><a href="#介绍使用" class="headerlink" title="介绍使用"></a>介绍使用</h2><ul><li>使用默认创建的脚手架；</li><li>修改App.vue、HelloWorld.vue文件，assets文件夹添加了两张图片；</li><li>然后编译运行；</li></ul><h2 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h2><p><img src="https://img-blog.csdn.net/20180705123932887?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="运行截图"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>Web前端网站教程-米斯特吴</li></ul><p>源码在我的GitHub上：<a href="https://github.com/super456/vue-cli2.x-demo" target="_blank" rel="noopener">点击跳转</a></p>]]></content>
    
    <summary type="html">
    
      第一次使用vue-cli2.x搭建一个小demo游戏。代码文件有很多注释信息，通俗易懂的使用这个脚手架搭建一个入门小项目哈。
    
    </summary>
    
      <category term="Vue.js" scheme="https://super456.github.io/categories/Vue-js/"/>
    
    
      <category term="vue2基础" scheme="https://super456.github.io/tags/vue2%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>vue基础父子组件输入动态传值</title>
    <link href="https://super456.github.io/2018/06/26/2018-06-26-vue2-component/"/>
    <id>https://super456.github.io/2018/06/26/2018-06-26-vue2-component/</id>
    <published>2018-06-26T13:11:25.000Z</published>
    <updated>2018-07-17T03:33:16.357Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在学习vue2.x的时候，遇到了一个问题，就是父子组件如何传递动态输入的值，文档介绍都是传递固定值的，比如我想传递一个刚输入的值呢，子组件如何显示？一下就是简单的代码：</strong></p><p>注：本人使用的是官方的<strong>脚手架</strong>学习的，可以通过父级组件向子级组件传递动态输入的值。然后本人重写了一个测试页面，直接复制代码就可以运行的（看懂以下代码，父子组件传递原理也是一样的，此处以对象为例）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;父组件向子组件动态传值示例&lt;/title&gt;</span><br><span class="line">    &lt;!-- 导入官方cdn的vue文件--&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">                &#123;&#123;item&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;p&gt;添加一个列表项：</span><br><span class="line">            &lt;input type=&quot;text&quot; v-model=&quot;newItem&quot; v-on:keyup.enter=&apos;addNew()&apos; placeholder=&quot;按回车键提交&quot;&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;显示输入框传递给子组件的添加内容（对象）：&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 注意这个传递的参数值必须前面有：v-bind:组件获取的变量名=&apos;需要传递的变量名&apos; 或 :组件获取的变量名=&apos;需要传递的变量名&apos;  ,否则传递的永远是字符串的值--&gt;</span><br><span class="line">        &lt;!-- 这种方式传递的是字符串 --&gt;</span><br><span class="line">        &lt;!-- &lt;component-a msg1childtofather=&apos;msgchildtofather&apos;&gt;&lt;/component-a&gt; --&gt;</span><br><span class="line">        &lt;!-- 以下两种方式都是传递对象 --&gt;</span><br><span class="line">        &lt;component-a :msg1childtofather=&apos;msgchildtofather&apos;&gt;&lt;/component-a&gt;</span><br><span class="line">        &lt;!-- &lt;component-a v-bind:msg1childtofather=&apos;msgchildtofather&apos;&gt;&lt;/component-a&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&apos;component-a&apos;, &#123;</span><br><span class="line">        props: [&apos;msg1childtofather&apos;],</span><br><span class="line">        template: &apos;&lt;h2 v-text=\&apos;msg1childtofather\&apos;&gt;&lt;/h2&gt;&apos;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            output: function () &#123;</span><br><span class="line">                alert(&apos;You click button! and submit value:&apos; + this.msg1childtofather);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            items: [],</span><br><span class="line">            newItem: &quot;&quot;,</span><br><span class="line">            msgchildtofather: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            addNew: function () &#123;</span><br><span class="line">                // 使用v-model和ul li input向数组items添加一个动态项内容，注意添加数组格式</span><br><span class="line">                this.items.push(this.newItem);</span><br><span class="line">                // 测试传递动态添加对象值</span><br><span class="line">                var childfather = &#123;</span><br><span class="line">                    label: this.newItem,</span><br><span class="line">                    label2: &apos;默认值&apos;</span><br><span class="line">                &#125;;</span><br><span class="line">                this.msgchildtofather = childfather;</span><br><span class="line"></span><br><span class="line">                this.newItem = &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>测试结果如下：<br><img src="https://img-blog.csdn.net/20180626230924404?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="默认界面"></p><p><img src="https://img-blog.csdn.net/20180626230934333?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0NDUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="输入结果页面"></p>]]></content>
    
    <summary type="html">
    
      在学习vue2.x的时候，遇到了一个问题，就是父子组件如何传递动态输入的值，文档介绍都是传递固定值的，比如我想传递一个刚输入的值呢，子组件如何显示？一下就是简单的代码：
    
    </summary>
    
      <category term="Vue.js" scheme="https://super456.github.io/categories/Vue-js/"/>
    
    
      <category term="vue2基础" scheme="https://super456.github.io/tags/vue2%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>小程序筛选框</title>
    <link href="https://super456.github.io/2018/05/09/2018-05-09-wxapp-filterbar/"/>
    <id>https://super456.github.io/2018/05/09/2018-05-09-wxapp-filterbar/</id>
    <published>2018-05-09T15:55:25.000Z</published>
    <updated>2018-07-29T09:24:49.840Z</updated>
    
    <content type="html"><![CDATA[<p>本来是一个GitHub上wux-weapp组件的筛选框，但是整个项目过于系统化，想提取某个组件都是有点难度的，首先要看得懂某个组件的整个生命逻辑，所以自己也是摸索过来的，便简单的提取了wux-weapp组件的FilterBar筛选框的部分功能，满足个人需求及分享一下。</p><h3 id="（一）原组件信息"><a href="#（一）原组件信息" class="headerlink" title="（一）原组件信息"></a>（一）原组件信息</h3><p>原组件是GitHub上的wux - 微信小程序自定义组件可以实现对话框、指示器、五星评分等22种功能。<a href="https://github.com/skyvow/wux" target="_blank" rel="noopener">点击这里跳转查看原组件</a><br><img src="http://pbr0erxxq.bkt.clouddn.com/wux-filterbar/01.png" alt="原组件图"></p><h3 id="（二）原组件筛选框"><a href="#（二）原组件筛选框" class="headerlink" title="（二）原组件筛选框"></a>（二）原组件筛选框</h3><p><img src="http://pbr0erxxq.bkt.clouddn.com/wux-filterbar/02.gif" alt="原组件筛选框"></p><h3 id="（三）提取的组件"><a href="#（三）提取的组件" class="headerlink" title="（三）提取的组件"></a>（三）提取的组件</h3><p>主要提取了筛选框页面中通过点击某个字或按钮右侧弹出的方式，方便个人将该组件放在任意需要的位置。<br><img src="http://pbr0erxxq.bkt.clouddn.com/wux-filterbar/03.gif" alt="提取的组件"></p><p><a href="https://github.com/super456/simpleFilterbar" target="_blank" rel="noopener">下载代码</a></p><p>简单的分享，各取所需吧。</p>]]></content>
    
    <summary type="html">
    
      本来是一个GitHub上wxUI组件的筛选框，但是整个项目过于系统化，想提取某个组件都是有点难度的，首先要看得懂某个组件的整个生命逻辑，所以自己也是摸索过来的，便简单的提取了wxUI组件的FilterBar筛选框的部分功能，满足个人需求及分享一下。
    
    </summary>
    
      <category term="小程序" scheme="https://super456.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="weChatApp" scheme="https://super456.github.io/tags/weChatApp/"/>
    
  </entry>
  
  <entry>
    <title>今天真的好心塞</title>
    <link href="https://super456.github.io/2018/03/26/2018-03-26-heart-hurt/"/>
    <id>https://super456.github.io/2018/03/26/2018-03-26-heart-hurt/</id>
    <published>2018-03-26T15:33:25.000Z</published>
    <updated>2018-03-26T16:22:27.956Z</updated>
    
    <content type="html"><![CDATA[<p><strong>好久没有这么难受过了，可能经历过不如意的事情积累都一定程度是会爆发出来的吧！</strong></p><h3 id="我想要的"><a href="#我想要的" class="headerlink" title="我想要的"></a>我想要的</h3><p>从上大学以来，大一大二的生活，虽然不是那么逍遥、得意。但至少，没有那么多的烦恼，没有那么多的忧虑，没有那么多的害怕。那时候的自己，真的是，拿得起，放得下，心态很稳，就算遇到不开心的事，忍忍就过了，心中的热情很高涨，主要是对生活的还是很乐观的。</p><h3 id="很难得到"><a href="#很难得到" class="headerlink" title="很难得到"></a>很难得到</h3><p>结果，自从上了大三，真的是经历的人生中的过山车一样，最高点没站稳，就已经下坡很快了。失望的、绝望的事一推一堆。真的不能像个平常人一样笑得很自然了，就算是笑，都感觉带着心酸了。真的是好累、好累。<br><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/s/15220811854_medium.jpg" alt="d50735fae6cd7b894f830302082442a7d8330e47" border="0"></p><h3 id="造物弄人"><a href="#造物弄人" class="headerlink" title="造物弄人"></a>造物弄人</h3><p>大三下学期，开学到现在也是，不如意的事，也很多。关键是总感觉自己运气差的要死，心态都要崩溃了。好烦、好烦。以前总以为自己心态放好一点，眼不见心不烦，与其抱怨，不如想想怎么变得更好。这些都是安慰自己的谎言，时间都抹去不了，太刻苦铭心了。总以为努力就可以做的更好，结果还是得不到回报，只会让自己更受伤害，甚至留下眼泪，让你看清现实。</p><h3 id="生活好累"><a href="#生活好累" class="headerlink" title="生活好累"></a>生活好累</h3><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/152208118486.jpg" alt="185176869" border="0"></p><p>其实，我一点都不是一个悲观主义者，自己喜欢开同学玩笑，看内涵段子，努力有梦想的人。我也不是因为一些经历不如意的事就应该自暴自弃，而不是去反思自己以后做的更好的人。该笑的笑，该哭的哭，只要不是生死抉择的问题。没有什么大不了，大不了重头再来是吧。</p><p>高进的《有太多人》的中有几句歌词：也许你很在乎，别人眼中的自己，就算拼了命，只为了得到一次肯定，太难过的时候，就哭不出声音，擦干泪无所谓。</p><p>我有酒也有故事，就是等不到一个愿意听我讲的人。</p>]]></content>
    
    <summary type="html">
    
      有的路，你注定要一个人走，这不是孤独，而是选择。有些事，经历了，真的会很难受，但你又不得不重新面对。
    
    </summary>
    
      <category term="朝花惜拾" scheme="https://super456.github.io/categories/%E6%9C%9D%E8%8A%B1%E6%83%9C%E6%8B%BE/"/>
    
    
      <category term="生活" scheme="https://super456.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>一些容易忽视的JS基础知识</title>
    <link href="https://super456.github.io/2018/03/23/2018-03-23-return-js-base/"/>
    <id>https://super456.github.io/2018/03/23/2018-03-23-return-js-base/</id>
    <published>2018-03-23T10:18:25.000Z</published>
    <updated>2018-03-23T10:21:09.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="（一）、函数"><a href="#（一）、函数" class="headerlink" title="（一）、函数"></a>（一）、函数</h2><ol><li><p>使用未声明的变量时，它将自动被视为全局变量，即便你在函数中首次使用它亦如此。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">playTurn</span>(<span class="params">player,location</span>)</span>&#123;</span><br><span class="line"><span class="comment">//    使用变量points前，我们忘了关键字var声明它，因此它被自动视为全局变量</span></span><br><span class="line">   points=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">if</span>(location==<span class="number">1</span>)&#123;</span><br><span class="line">       points=points+<span class="number">100</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> points;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>如果局部变量与全局变量同名，它将“遮住”全局变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beanCounter=<span class="number">10</span>;<span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumberOfItems</span>(<span class="params">ordertype</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> beanCounter=<span class="number">0</span>;<span class="comment">//局部变量</span></span><br><span class="line">    <span class="keyword">if</span>(ordertype==<span class="string">"order"</span>)&#123;</span><br><span class="line">     <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beanCounter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此每次调用函数使用的是局部变量beanCounter时，都会遮住全局变量，但是全局变量和局部变量不会相互影响：如果你修改其中的一个，对另一个不会有任何影响，它们是彼此独立的变量。</p></li><li><p>如果形参与全局变量同名，它会遮住全局变量。</p></li><li><p>函数声明和函数表达式区别：</p><ul><li><p>使用函数声明时，函数将在执行代码前创建；而使用函数表达式时，函数将在运行阶段执行代码时创建。（简单的说浏览器执行代码分两遍时，第一遍分析所有的函数声明，并定义函数声明创建的函数，第二遍浏览器从上到下顺序执行代码，并定义函数表达式创建的函数。）</p></li><li><p>使用函数声明时，将创建一个与函数同名的变量，并让它指向函数；而使用函数表达式时，通常不给函数指定名称，因此你要么在代码中将函数赋给一个变量，要么以其他方式使用函数表达式。</p></li></ul></li><li><p>函数用法：可以将函数赋给变量；可以将函数传递给函数；可以从函数返回函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//可以将函数传递给函数</span></span><br><span class="line"><span class="comment">//定义一个对象变量</span></span><br><span class="line">      <span class="keyword">var</span> passengers = [&#123;</span><br><span class="line">       name: <span class="string">"dudu"</span>,</span><br><span class="line">       paid: <span class="literal">true</span>,</span><br><span class="line">       ticket: <span class="string">"firstclass"</span></span><br><span class="line">   &#125;, &#123;</span><br><span class="line">       name: <span class="string">"jane"</span>,</span><br><span class="line">       paid: <span class="literal">true</span>,</span><br><span class="line">       ticket: <span class="string">"coach"</span></span><br><span class="line">   &#125;, &#123;</span><br><span class="line">       name: <span class="string">"Sue"</span>,</span><br><span class="line">       paid: <span class="literal">false</span>,</span><br><span class="line">       ticket: <span class="string">"firstclass"</span></span><br><span class="line">   &#125;, &#123;</span><br><span class="line">       name: <span class="string">"Fujia"</span>,</span><br><span class="line">       paid: <span class="literal">true</span>,</span><br><span class="line">       ticket: <span class="string">"caoach"</span></span><br><span class="line">   &#125;];</span><br><span class="line">   <span class="comment">//创建一个传递函数，参数一个是对象一个是函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">processPassengers</span>(<span class="params">passengers, testFunction</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; passengers.length; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (testFunction(passengers[i].name)) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建需要作为参数传递的函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">checkNoFlyList</span>(<span class="params">passenger</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (passenger.name === <span class="string">"dudu"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 向函数传递函数</span></span><br><span class="line">   <span class="keyword">var</span> allCanFly = processPassengers(passengers, checkNoFlyList);<span class="comment">//第一个参数是对象，第二个参数是函数</span></span><br><span class="line">   <span class="keyword">if</span> (allCanFly) &#123;</span><br><span class="line">       alert(<span class="string">"这架飞机不能起飞，因为有乘客在禁飞名单里面"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以从函数返回函数</span></span><br><span class="line"><span class="comment">//定义一个对象变量</span></span><br><span class="line">   <span class="keyword">var</span> passengers = [&#123;</span><br><span class="line">         name: <span class="string">"dudu"</span>,</span><br><span class="line">         paid: <span class="literal">true</span>,</span><br><span class="line">         ticket: <span class="string">"firstclass"</span></span><br><span class="line">     &#125;, &#123;</span><br><span class="line">         name: <span class="string">"jane"</span>,</span><br><span class="line">         paid: <span class="literal">true</span>,</span><br><span class="line">         ticket: <span class="string">"coach"</span></span><br><span class="line">     &#125;, &#123;</span><br><span class="line">         name: <span class="string">"Sue"</span>,</span><br><span class="line">         paid: <span class="literal">false</span>,</span><br><span class="line">         ticket: <span class="string">"firstclass"</span></span><br><span class="line">     &#125;, &#123;</span><br><span class="line">         name: <span class="string">"Fujia"</span>,</span><br><span class="line">         paid: <span class="literal">true</span>,</span><br><span class="line">         ticket: <span class="string">"caoach"</span></span><br><span class="line">     &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createDrinkOrder</span>(<span class="params">passenger</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> orderFunction;<span class="comment">//创建一个变量用于存储要返回的函数</span></span><br><span class="line">         <span class="keyword">if</span> (passenger.ticket === <span class="string">"firstclass"</span>) &#123;</span><br><span class="line">             orderFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//定义返回的函数代码</span></span><br><span class="line">                 alert(<span class="string">"Would you like a cocktail or wine?"</span>);</span><br><span class="line">             &#125;;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             orderFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//定义返回的函数代码</span></span><br><span class="line">                 alert(<span class="string">"Your choice is cola or water."</span>);</span><br><span class="line">             &#125;;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> orderFunction;<span class="comment">//返回创建的函数</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">serveCustomer</span>(<span class="params">passenger</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> getDrinkOrderFunction = createDrinkOrder(passenger);<span class="comment">//注意这里是将返回的函数赋给变量引用</span></span><br><span class="line">         getDrinkOrderFunction();<span class="comment">//引用变量指向返回的函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">servePassengers</span>(<span class="params">passengers</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; passengers.length; i++) &#123;</span><br><span class="line">             serveCustomer(passengers[i]);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     servePassengers(passengers);</span><br></pre></td></tr></table></figure></li></ol><h2 id="（二）、对象"><a href="#（二）、对象" class="headerlink" title="（二）、对象"></a>（二）、对象</h2><ol><li><p>可以随时增删属性： <code>fido.dogYears=35;</code>就新增对象fido的一个属性dogYears，并赋值为35 , <code>delete fido.dogYears;</code>删除了一个对象fido的属性dogYears，如果成功删除了属性，delete表达式将返回true，仅当属性无法删除时，delete才返回false。如果对象属于浏览器而受到保护，即便你要删除的属性在对象中不存在，delete也将返回true。</p></li><li><p>对象变量存储的不是对象本身，而是指向对象的引用，因此对象变量也被称为引用变量。</p></li><li><p>向函数传递对象时，函数获得的是指向该对象的引用的副本，而不是对象本身的副本。因此，如果在函数中修改属性的值，修改的将是原始对象的值。</p></li><li><p>调用对象的方法时，关键字this指向其方法被调用的对象。要在对象的方法中访问对象的属性，必须使用句点表示法，但使用关键字this而不是对象名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fiat=&#123;</span><br><span class="line">    make:<span class="string">"Fiat"</span>,</span><br><span class="line">    started:<span class="literal">false</span>,</span><br><span class="line">    start:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.started=<span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    stop:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.started=<span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    drive:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.started)&#123;</span><br><span class="line">            alert(<span class="string">"Zoom Zoom"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(<span class="string">"You need to start the engine first."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>需要创建大量类似的对象时，适合使用构造函数。注意<code>new</code>和<code>this</code>的使用。</p></li></ol><h2 id="（三）、类型"><a href="#（三）、类型" class="headerlink" title="（三）、类型"></a>（三）、类型</h2><ol><li><p><code>undefined</code>类型:</p><ul><li>没有return语句的函数返回的值。</li><li>未赋值的变量的值。</li><li>稀疏数组中不存在的数组元素的值。</li><li>已删除的属性的值。</li><li>创建对象时没有赋给属性的值。</li></ul></li><li><p><code>null</code>表示对象不存在，跟<code>undefined</code>的区别是：在应该提供一个对象，但无法创建或找到时，将提供<code>null</code>；在变量未初始化、对象没有指定属性或数组没有指定元素时，将返回<code>undefined</code>。</p></li><li><p><code>NaN</code>表示无法用数字表示的数值结果，但它的类型仍是数字，注意：<code>NaN!=NaN</code>。判断一个数是不是<code>NaN</code>，使用<code>isNaN()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test=<span class="number">0</span>/<span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> test);<span class="comment">//number</span></span><br></pre></td></tr></table></figure></li><li><p>在JavaScript中总共有5个假值：<code>undefined</code>，<code>null</code>，<code>0</code>，<code>&quot;&quot;</code>和<code>false</code>；其他值都是真值。</p></li></ol><h2 id="（四）、闭包"><a href="#（四）、闭包" class="headerlink" title="（四）、闭包"></a>（四）、闭包</h2><ol><li><p>闭包：名词，指的是函数和引用环境。包含自由变量的函数与为所有这些自由变量提供了变量绑定的环境一起，被称为闭包。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">makeCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        count = count + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Counter;<span class="comment">//这是一个闭包</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> doCount = makeCounter();<span class="comment">//调用函数试，获得的是一个闭包：一个函数及其环境</span></span><br><span class="line"><span class="built_in">console</span>.log(doCount());</span><br><span class="line"><span class="built_in">console</span>.log(doCount());</span><br></pre></td></tr></table></figure></li></ol><h2 id="（五）、原型"><a href="#（五）、原型" class="headerlink" title="（五）、原型"></a>（五）、原型</h2><ol><li><p>原型：对象可以从其他对象那里继承属性和行为。更具体地说，js使用原型式继承，其中其行为被继承的对象称为原型（对象继承另一个对象后，就可以访问其多有的方法和属性）。</p></li><li><p>给构造函数的原型添加属性后，使用这个构造函数创建的实例都将继承这些属性。即便是以前创建的实例也不例外。</p></li><li><p>使用自定义的原型对象时，务必将原型的属性<code>constructor</code>设置为相应的构造函数，以保持一致。</p></li><li><p>要调用函数并指定函数体中<code>this</code>指向的对象，可调用其方法<code>call()</code>；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个构造函数    </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name, breed, weight</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.breed = breed;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给构造函数原型添加属性</span></span><br><span class="line">    Dog.prototype.species = <span class="string">"Canine"</span>;</span><br><span class="line">    <span class="comment">//给构造函数原型添加方法</span></span><br><span class="line">    Dog.prototype.bark = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.weight &gt; <span class="number">25</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"Says Woof"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"says Yip"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Dog.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Run"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    Dog.prototype.wag = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"wag"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个继承Dog构造函数的新的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ShowDog</span>(<span class="params">name, breed, weight, handler</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// this.name = name;</span></span><br><span class="line">        <span class="comment">// this.breed = breed;</span></span><br><span class="line">        <span class="comment">// this.weight = weight;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dog(name, breed, weight);  后面调用Dog原型属性会返回undefined</span></span><br><span class="line"></span><br><span class="line">        Dog.call(<span class="keyword">this</span>, name, breed, weight);<span class="comment">//注意这里要使用this</span></span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//ShowDog.prototype = new Dog();</span></span><br><span class="line">    ShowDog.prototype.constructor = ShowDog;<span class="comment">//设置构造函数ShowDog的原型指向自己本身</span></span><br><span class="line">    ShowDog.prototype.league = <span class="string">"Webville"</span>;</span><br><span class="line">    ShowDog.prototype.stack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Stack"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    ShowDog.prototype.bait = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Bait"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ShowDog.prototype.gait = <span class="function"><span class="keyword">function</span>(<span class="params">kind</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(kind + <span class="string">"ing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ShowDog.prototype.groom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Groom"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> scotty = <span class="keyword">new</span> ShowDog(<span class="string">"Scotty"</span>, <span class="string">"Scottish Terrish"</span>, <span class="number">15</span>, <span class="string">"Cookie"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(scotty.name); <span class="comment">//undefined，原因是showDog中使用的是：        Dog(name, breed, weight);</span></span><br><span class="line">    scotty.stack();</span><br><span class="line">    scotty.bark();</span><br><span class="line">    <span class="built_in">console</span>.log(scotty.league);</span><br><span class="line">    <span class="built_in">console</span>.log(scotty.species);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"scotty constructor is:"</span> + scotty.constructor); <span class="comment">//showDog</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>《Head First JavaScript 程序设计》</li></ul>]]></content>
    
    <summary type="html">
    
      学习JavaScript也有一段时间了，但是总有一些基础知识点容易搞混或者忘记，所以当自己回顾这些这些知识点的时候会模糊不清，又要重新看一遍资料，为了以后方便，所以这里记录一下，也是为了更深入的理解透彻。
    
    </summary>
    
      <category term="前端基础" scheme="https://super456.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="https://super456.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>如何简单的使用VScode编程工具</title>
    <link href="https://super456.github.io/2018/02/24/2018-02-24-simple-use-vs-code/"/>
    <id>https://super456.github.io/2018/02/24/2018-02-24-simple-use-vs-code/</id>
    <published>2018-02-23T16:00:00.000Z</published>
    <updated>2018-03-13T04:16:46.254Z</updated>
    
    <content type="html"><![CDATA[<p>由于经常使用，之前使用一些功能老是过段时间就忘记，只记住一些基本的操作。俗话说：工欲善其事，必先利其器。所以打算整理一下，以便忘记的时候可以温习一下，不至于浪费编码时间。</p><p>Visual Studio Code 是一个运行在桌面上，多平台的轻量级且功能强大的源代码编辑器。内置有JavaScript的，TypeScript和Node.js的支持，其他语言如C ++，C＃，Python和PHP等的可扩展，是一个非常丰富的生态系统。主打 web 开发，也是本人在学习前端过程中主要的使用的编程工具。</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/151954910151.png" alt="01" border="0"></p><h1 id="主命令框"><a href="#主命令框" class="headerlink" title="主命令框"></a>主命令框</h1><ol><li><p><code>F1</code>或 <code>Ctrl+Shift+P</code>: 打开命令面板。在打开的输入框内，可以输入任何命令，例如：按一下<code>Backspace</code>会进入到 <code>Ctrl+P</code>模式</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/151954910702.png" alt="04" border="0"></p></li><li><p>在<code>Ctrl+P</code>下输入&gt;可以进入<code>Ctrl+Shift+P</code>模式</p></li><li>在 <code>Ctrl+P</code>窗口下还可以:</li></ol><ul><li>直接输入文件名，跳转到文件</li><li><code>?</code>列出当前可执行的动作</li><li><code>!</code>显示 Errors或 Warnings，也可以<code>Ctrl+Shift+M</code></li><li><code>:</code>跳转到行数，也可以 <code>Ctrl+G</code>直接进入</li><li><code>@</code>跳转到symbol（搜索变量或者函数），也可以 <code>Ctrl+Shift+O</code>直接进入</li><li><code>@</code>根据分类跳转<code>symbol</code>，查找属性或函数，也可以 <code>Ctrl+Shift+O</code>后输入:进入</li><li><code>#</code>根据名字查找 <code>symbol</code>，也可以 <code>Ctrl+T</code></li></ul><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>打开一个新窗口：</td><td><code>Ctrl+Shift+N</code></td></tr><tr><td>关闭窗口：</td><td><code>Ctrl+Shift+W</code></td></tr><tr><td>同时打开多个编辑器（查看多个文件）</td></tr><tr><td>切出一个新的编辑器（最多 3 个）</td><td><code>Ctrl+\</code>，也可以按住 <code>Ctrl</code> 鼠标点击 Explorer 里的文件名</td></tr><tr><td>左中右 3 个编辑器的快捷键</td><td><code>Ctrl+1</code> <code>Ctrl+2</code> <code>Ctrl+3</code></td></tr><tr><td>编辑器换位置</td><td><code>Ctrl+k</code>然后按 <code>Left</code>或 <code>Right</code></td></tr></tbody></table><h1 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a>代码编辑</h1><h2 id="格式调整"><a href="#格式调整" class="headerlink" title="格式调整"></a>格式调整</h2><p><strong>注意：</strong> 对python文件进行代码格式化操作时，会提示安装<code>autopep8</code></p><ul><li>代码格式化： <code>Shift+Alt+F</code>，或 <code>Ctrl+Shift+P</code> 后输入 <code>format code</code></li><li>代码行缩进: <code>Ctrl+[</code> 、 <code>Ctrl+]</code></li><li>在当前行下边插入一行 <code>Ctrl+Enter</code></li><li>在当前行上方插入一行 <code>Ctrl+Shift+Enter</code></li><li>上下移动一行： <code>Alt+Up</code> 或 <code>Alt+Down</code></li><li>向上向下复制一行： <code>Shift+Alt+Up</code> 或 <code>Shift+Alt+Down</code></li></ul><h2 id="光标相关"><a href="#光标相关" class="headerlink" title="光标相关"></a>光标相关</h2><ul><li>移动到定义处： <code>F12</code></li><li>定义处缩略图：只看一眼而不跳转过去:<code>Alt+F12</code></li><li>移动到文件结尾： <code>Ctrl+End</code></li><li>移动到文件开头： <code>Ctrl+Home</code></li><li>跳转到光标上一次(下一次)位置（误操作的回退方案，非常有用）<code>ctrl + Left / Ctrl + Right</code></li></ul><p><strong>注意：</strong> 下面两个功能和alt+↑/↓配合，很方便的移动代码块：</p><ul><li>选择从光标到行尾：<code>Shift+End</code></li><li>选择从行首到光标处：<code>Shift+Home</code></li></ul><p><strong>注意：</strong> 这两个功能很爽，可以同时编辑一些变量名：</p><ul><li>多行编辑(列编辑)：<code>Ctrl+Alt+Down/Up</code>或者<code>Alt+Shift</code>+鼠标左键，可以批量选中文本并编辑</li><li>同时选中所有匹配： <code>Ctrl+Shift+L</code></li><li><code>Ctrl+D</code> 下一个匹配的也被选中 (在 sublime 中是删除当前行，后面自定义快键键中，设置与 <code>Ctrl+Shift+K</code> 互换了)</li><li>回退上一个光标操作： <code>Ctrl+U</code></li><li>删除光标右侧的所有字： <code>Ctrl+Delete</code></li><li>扩展/缩小选取范围： <code>Shift+Alt+Left</code> 和 <code>Shift+Alt+Right</code></li><li>多光标选取<code>Alt + 鼠标单击</code></li><li>逐步选中其它相同的symbol <code>Ctrl + D</code>(已更改快捷方式为：<code>Ctrl+Shift+K</code>)</li><li>全选相同symbol<code>Ctrl + F12</code></li><li>重构（重命名）Symbol <code>F2</code></li><li>查找所有引用了选中symbol的代码 <code>Shift + F12</code></li><li>跳转到symbol的定义处 <code>F12</code></li><li>瞥见下symbol的定义出（在该symbol下方展开面板，显示定义处代码，非常有用）<code>Alt + F12</code></li></ul><h2 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h2><p><strong>注意：</strong> 查看函数引用和批量休修改函数名，好用：</p><ul><li>重命名：比如要修改一个方法名，可以选中后按 <code>F2</code>，输入新的名字，回车，会发现所有的文件都修改了</li><li>找到所有的引用： <code>Shift+F12</code></li><li>同时修改本文件中所有匹配的： <code>Ctrl+F12</code></li><li>跳转到下一个 Error 或 Warning：当有多个错误时可以按 <code>F8</code>逐个跳转</li><li>查看 diff： 在 explorer 里选择文件右键 <code>Set file to compare</code>，然后需要对比的文件上右键选择 <code>Compare with file_name_you_chose</code></li></ul><h2 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h2><ul><li>查找:<code>Ctrl+F</code></li><li>查找替换:<code>Ctrl+H</code></li><li>整个文件夹中查找:<code>Ctrl+Shift+F</code></li></ul><h2 id="显示相关"><a href="#显示相关" class="headerlink" title="显示相关"></a>显示相关</h2><ul><li>全屏：<code>F11</code></li><li>区域整块放大/缩小：<code>Ctrl +/-</code></li><li>侧边栏显/隐：<code>Ctrl+B</code></li><li>显示资源管理器:<code>Ctrl+Shift+E</code></li><li>显示搜索:<code>Ctrl+Shift+F</code></li><li>显示 Git:<code>Ctrl+Shift+G</code></li><li>显示 Debug:<code>Ctrl+Shift+D</code></li><li>显示 Output:<code>Ctrl+Shift+U</code></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>文件自动保存设置：<code>File</code> -&gt; <code>AutoSave</code> ，或者 <code>Ctrl+Shift+P</code>，输入 <code>auto</code></p><h1 id="修改默认快捷键"><a href="#修改默认快捷键" class="headerlink" title="修改默认快捷键"></a>修改默认快捷键</h1><p>打开默认键盘快捷方式设置：<br><code>File</code>（文件） -&gt; <code>Preferences</code>（首选项） -&gt; <code>Keyboard Shortcuts</code>（键盘快捷方式），或者：<code>Alt+F</code> -&gt;<code>p</code>-&gt; <code>k</code>-&gt; 回车。</p><p>修改<code>keybindings.json</code>：(这个是当时自己添加的)</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// ctrl+d 删除一行</span><br><span class="line"> &#123;</span><br><span class="line">     &quot;key&quot;: &quot;ctrl+d&quot;,</span><br><span class="line">     &quot;command&quot;: &quot;editor.action.deleteLines&quot;,</span><br><span class="line">     &quot;when&quot;: &quot;editorTextFocus&quot;</span><br><span class="line"> &#125;,</span><br><span class="line"> // 与删除一行的快捷键互换</span><br><span class="line"> &#123;</span><br><span class="line">     &quot;key&quot;: &quot;ctrl+shift+k&quot;,</span><br><span class="line">     &quot;command&quot;: &quot;editor.action.addSelectionToNextFindMatch&quot;,</span><br><span class="line">     &quot;when&quot;: &quot;editorFocus&quot;</span><br><span class="line"> &#125;,</span><br><span class="line"> // ctrl+shift+/多行注释</span><br><span class="line"> &#123;</span><br><span class="line">     &quot;key&quot;:&quot;ctrl+shift+/&quot;,</span><br><span class="line">     &quot;command&quot;: &quot;editor.action.blockComment&quot;,</span><br><span class="line">     &quot;when&quot;: &quot;editorTextFocus&quot;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h1 id="推荐前端开发会用到的插件"><a href="#推荐前端开发会用到的插件" class="headerlink" title="推荐前端开发会用到的插件"></a>推荐前端开发会用到的插件</h1><ul><li>auto close tag 自动关闭HTML标签</li><li>Auto Rename Tag：自动修改标签</li><li>AutoFileNmae:auto complete file name，自动补全文件的名字</li><li>Beautify:显示js/json/css美化，按<code>F1</code></li><li>Bracket Pair Colorizer 标记显示不同颜色的关联括号</li><li>Color Info 显示颜色信息</li><li>CSS Formatter css格式化工具</li><li>Debugger for Chrome 谷歌调试工具（需要配置launch.json）</li><li>Document This  添加备注信息（only supports JavaScript and TypeScript）<code>Ctrl+Alt+D</code> and again <code>Ctrl+Alt+D</code></li><li>filesize 文件大小提示</li><li>GitLens 提示文件修改信息，具体到代码行</li><li>Guides:显示代码对其辅助线</li><li>HTML CSS Support css文件支持HTML标签提示</li><li>HTML Preview 预览编译HTML文件</li><li>HTML SCSS Support scss文件支持HTML标签提示</li><li>HTML Snippets 支持HTML标签提示</li><li>HTMLHint</li><li>intellisense for css class names in html 支持HTML文件中类名提示</li><li>JavaScript (ES6) snippets</li><li>jQuery Code Snippets</li><li>JS, CSS, HTML Formatting</li><li>Live HTML Previewer</li><li>markdownlint</li><li>Npm Intellisense</li><li>Path Intellisense: 路径匹配</li><li>Path Autocomplete</li><li>Vetur：VUE扩展</li><li>PostCSS Sorting</li><li>stylelint</li><li>stylefmt</li><li>ESLint</li><li>javascript standard format</li><li>Babel ES6/ES7</li><li>Add jsdoc comments</li><li>vue</li><li>weex</li><li>Reactjs code snippets</li><li>React Native Tools</li><li>Instant Markdown</li><li>Markdown Shortcuts</li><li>TextTransform</li><li>Color Highlight:写csss时，颜色值会增加对应的颜色背景显示</li><li>open in browser:  <code>alt+b</code>选择浏览器预览文件</li><li>Rainbow Brackets：有颜色的显示括号匹配</li><li>Settings Sync: 同步配置（需要配置GitHub的本地token key）</li></ul><h2 id="官网推荐插件"><a href="#官网推荐插件" class="headerlink" title="官网推荐插件"></a>官网推荐插件</h2><p><a href="https://marketplace.visualstudio.com/vscode" target="_blank" rel="noopener">点击跳转</a><br><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/15195491027.png" alt="02" border="0"></p><h2 id="推荐主题"><a href="#推荐主题" class="headerlink" title="推荐主题"></a>推荐主题</h2><p><a href="https://marketplace.visualstudio.com/search?target=VSCode&amp;category=Themes&amp;sortBy=Downloads" target="_blank" rel="noopener">点击跳转</a><br><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/151954910499.png" alt="03" border="0"></p><p><strong>注：</strong> 切换主题的快捷键：<code>f1</code> 或<code>ctrl+shift+p</code>输入theme 回车,上下切换：<code>ctrl+k</code>,<code>ctrl+t</code>。</p><ul><li>One Dark Pro</li><li>Atom One Dark</li><li>FlatUI</li><li>Material Icon Theme: 图标主题</li><li>vscode-icons</li><li>VSCode Great Icons</li><li>Dracula Official：主题，推荐</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://segmentfault.com/a/1190000010750790" target="_blank" rel="noopener">打造性感好用的VS Code编辑器</a></li><li><a href="https://www.w3cschool.cn/visualstudiocode/visualstudiocode-iy3422zb.html" target="_blank" rel="noopener">Visual Studio Code 简明使用教程</a></li><li><a href="https://jeasonstudio.gitbooks.io/vscode-cn-doc/content/md/Overview.html" target="_blank" rel="noopener">VScode中文文档</a></li><li><a href="http://mrpeak.github.io/2015/07/02/vscode-guide/#%E4%BB%8D%E6%9C%89%E4%B8%8D%E8%B6%B3" target="_blank" rel="noopener">Visual Studio Code 不完全使用指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      简单的VScode使用教程。
    
    </summary>
    
      <category term="编程工具" scheme="https://super456.github.io/categories/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="VScode" scheme="https://super456.github.io/tags/VScode/"/>
    
  </entry>
  
  <entry>
    <title>博客名称更改</title>
    <link href="https://super456.github.io/2018/02/13/2018-02-23-new-myblog-name/"/>
    <id>https://super456.github.io/2018/02/13/2018-02-23-new-myblog-name/</id>
    <published>2018-02-12T16:00:00.000Z</published>
    <updated>2018-03-12T16:08:05.789Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/151937660943.jpg" alt="0223" border="0"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在家无聊，努力的动力不大，但是不能总闲着，没事做就看书。本来之前想改博客名称的，一时想不到好的，现在想到了，就改了一个字而已，哈哈哈，有点无聊吧，不过，改完之后更能表现我内心的世界，最真实的想法，这才是最好的。2018，狗年一切都旺起来呦！</p>]]></content>
    
    <summary type="html">
    
      修改博客名称，代表新的寓意，新的出发点。
    
    </summary>
    
      <category term="建站记录" scheme="https://super456.github.io/categories/%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Hexo" scheme="https://super456.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>2018，我还没准备好开始呢</title>
    <link href="https://super456.github.io/2018/01/23/2018-01-23-new-start/"/>
    <id>https://super456.github.io/2018/01/23/2018-01-23-new-start/</id>
    <published>2018-01-22T16:00:00.000Z</published>
    <updated>2018-03-12T16:06:16.420Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/151669659893.jpg" alt="01" border="0"></p><p>“这些年我一直提醒自己一件事情，千万不要自己感动自己。大部分人看似的努力，不过是愚蠢导致的。”</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一直想写一份2017年的总结报告，就是想回首自己在这一年的得与失，更多的是想认清自己，然后想想未来的路要怎么走。可能这大三上学期，过的很复杂，更多的是不如意，但都过去的事了，没什么好说的，还是挺过来了，但这些都不算什么。总的来说就是一句话：<strong>越想得到的东西，越是得不到或者不如意，有些东西，注定是得不到的时候才是最好的。</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2018，你还是来了，不知不觉，而且已经过了半个多月了。然而我一切都还没打算好，我也不知道以后要怎么做的更好了，很迷茫，也会很累。我知道自己改变不了什么，就只是不想浑浑噩噩过日子而已。好吧，我会答应自己，过好每一天，哪怕是最简单的一天，我知道我不要变的那么孤独，要相信，这个世界上的真的有很多人在过着我想要的生活。2017，不再留念，2018，昂首前行。</p><p>相信自己，好好活着。:dog: :punch: :smiley:</p>]]></content>
    
    <summary type="html">
    
      荒废了几个月没更新博客了，时间过得真快，不知不觉已经2018年了，要好好奋斗了。
    
    </summary>
    
      <category term="朝花惜拾" scheme="https://super456.github.io/categories/%E6%9C%9D%E8%8A%B1%E6%83%9C%E6%8B%BE/"/>
    
    
      <category term="生活" scheme="https://super456.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>学生课程评教管理系统</title>
    <link href="https://super456.github.io/2017/12/01/2017-12-01-javaweb-ces/"/>
    <id>https://super456.github.io/2017/12/01/2017-12-01-javaweb-ces/</id>
    <published>2017-12-01T15:55:25.000Z</published>
    <updated>2018-07-12T13:36:51.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学生课程评教管理系统"><a href="#学生课程评教管理系统" class="headerlink" title="学生课程评教管理系统"></a>学生课程评教管理系统</h1><h3 id="（一）系统介绍"><a href="#（一）系统介绍" class="headerlink" title="（一）系统介绍"></a>（一）系统介绍</h3><p>本系统是针对我们学院课程接近期末会用纸质版评教卡对老师本学期的课程评分的不便及效率问题而做的在线学生课程评教管理系统。</p><p>本系统主要包括系统管理员、教师、学生三种类型的用户，以下是主要功能，其他以实际开发为准。</p><ol><li>系统管理员：完成系统管理与维护，例如，维护学生、教师及管理人员的维护。管理课程信息、课程评比、课程评教卡内容等。</li><li>教师：可以查询所教班级的评教情况、查询教师好评榜的评比结果、查询留言。</li><li>学生：可以查询自己的基本信息，可以对自己所选课程的老师进行评教、留言。</li></ol><h3 id="（二）系统技术介绍"><a href="#（二）系统技术介绍" class="headerlink" title="（二）系统技术介绍"></a>（二）系统技术介绍</h3><p>本系统是学习JSP课程而做的练习，欢迎二次开发。</p><ol><li>使用MVC模式开发；</li><li>界面使用HTML5、CSS3、boostrap封装；</li><li>使用jQuery库DOM处理；</li><li>使用一些组件特效（比如选项卡画面、登录背景方块滚动等）；</li><li>使用SQL Server 2008（使用mysql都可以，只要是JDBC驱动的都行，不过修改一下数据库连接接口参数就行了）；</li></ol><h3 id="（三）系统成果"><a href="#（三）系统成果" class="headerlink" title="（三）系统成果"></a>（三）系统成果</h3><ol><li><p>登录界面<br><img src="http://pbr0erxxq.bkt.clouddn.com/CES/login.png" alt="登录界面"></p></li><li><p>学生主页面<br><img src="http://pbr0erxxq.bkt.clouddn.com/CES/student.png" alt="登录界面"></p></li><li><p>教师主页面<br><img src="http://pbr0erxxq.bkt.clouddn.com/CES/teacher.png" alt="登录界面"></p></li><li><p>管理员主页面<br><img src="http://pbr0erxxq.bkt.clouddn.com/CES/admin.png" alt="登录界面"></p></li></ol><h3 id="（四）系统使用说明"><a href="#（四）系统使用说明" class="headerlink" title="（四）系统使用说明"></a>（四）系统使用说明</h3><ol><li><p><a href="https://github.com/super456/CurriculumEvaluationSystem" target="_blank" rel="noopener">下载项目代码</a></p></li><li><p>导入IDE，当时我开发的工具是myeclipse8.5，JDK1.7，tomcat6.0；eclipse其他都行，配置修改系统环境包文件（不同编程工具和系统配置环境都会有影响，按照提示补充或修改、缺失包文件就行了）</p></li><li><p>使用tomcat服务器启动</p></li><li><p>浏览器输入：<a href="http://localhost:8080/CurriculumEvaluationSystem" target="_blank" rel="noopener">http://localhost:8080/CurriculumEvaluationSystem</a></p></li></ol><p>如果遇到什么问题，解决不了的，欢迎留言。</p>]]></content>
    
    <summary type="html">
    
      本系统是针对我们学院课程接近期末会用纸质版评教卡对老师本学期的课程评分的不便及效率问题而做的在线学生课程评教管理系统。
    
    </summary>
    
      <category term="Java" scheme="https://super456.github.io/categories/Java/"/>
    
    
      <category term="后端Java基础" scheme="https://super456.github.io/tags/%E5%90%8E%E7%AB%AFJava%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java与Sql JDBC数据库连接及相关操作</title>
    <link href="https://super456.github.io/2017/11/06/2017-11-06-java-web-sql-jdbc/"/>
    <id>https://super456.github.io/2017/11/06/2017-11-06-java-web-sql-jdbc/</id>
    <published>2017-11-05T16:00:00.000Z</published>
    <updated>2018-03-12T16:05:20.994Z</updated>
    
    <content type="html"><![CDATA[<p>本人第一次使用Java来连接 SQL Server Management Studio ，记录一下自己的连接过程，也是为了方便他人，减少不必要的麻烦。</p><h3 id="（一）、下载安装数据库连接驱动"><a href="#（一）、下载安装数据库连接驱动" class="headerlink" title="（一）、下载安装数据库连接驱动"></a>（一）、下载安装数据库连接驱动</h3><ol><li>下载网址：<a href="https://www.microsoft.com/en-US/download/details.aspx?id=11774" target="_blank" rel="noopener">https://www.microsoft.com/en-US/download/details.aspx?id=11774</a></li></ol><ol><li><p>点击下载</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299225.png" alt="01" border="0"></p></li></ol><ol><li><p>点击运行解压，解压路径默认或自定义，后面要用到</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/15099429926.png" alt="02" border="0"></p></li></ol><ol><li><p>然后将解压好的文件打开到如图所示目录，根据自己安装或配置的JDK选择JRE文件夹打开（本人选择jre7），打开系统环境变量中，在classpath下添加sqljdbc41.jar的路径，如本人的路径是“F:\sqljdbc\sqljdbc_6.0\enu\jre7\sqljdbc41.jar;”(或者可直接复制sqljdbc41.jar到自己安装的jdk目录下)</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299341.png" alt="03" border="0"></p></li><li><p>设置SQL Server配置管理器，（不知道在哪里打开的，可以查询Sql Server Management Studio的文件位置，打开配置工具文件夹就可以找到了），打开MSSQL SERVER的协议，启动TCP/IP服务(打开的话在状态里会显示“已启用”)，重启服务器</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299377.png" alt="04" border="0"></p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299415.png" alt="05" border="0"></p></li></ol><h3 id="（二）、配置myeclipse8-5"><a href="#（二）、配置myeclipse8-5" class="headerlink" title="（二）、配置myeclipse8.5"></a>（二）、配置myeclipse8.5</h3><ol><li><p>打开MyEclipse中的，Window –&gt; Preferences –&gt; Java –&gt; Installed JRES——&gt;选中相应的jdk（本人的是自己添加的）——&gt;edit<br>如图所示：</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299487.png" alt="07" border="0"></p></li><li><p>选择如图的添加：自己之前解压的sqljdbc的jar包，如图本人选择的：</p></li></ol><p>   <img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299517.png" alt="08" border="0"></p><p>   <img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299545.png" alt="09" border="0"></p><ol><li><p>自己新建或选择一个项目右键单击目录窗口中, 选择Build Path –&gt; Configure Build Path…, 添加扩展jar文件，即把sqljdbc.jar添加到其中：</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150994299585.png" alt="10" border="0"></p></li></ol><h3 id="（三）、测试连接数据库"><a href="#（三）、测试连接数据库" class="headerlink" title="（三）、测试连接数据库"></a>（三）、测试连接数据库</h3><ol><li><p>编写java代码来测试连接数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">       <span class="keyword">import</span> java.sql.*;  </span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSqlJDBC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String driverName = <span class="string">"com.microsoft.sqlserver.jdbc.SQLServerDriver"</span>;   <span class="comment">//加载JDBC驱动  </span></span><br><span class="line"><span class="comment">//注意端口号可能会冲突和DatabaseName需要链接的数据库名称</span></span><br><span class="line">   String dbURL = <span class="string">"jdbc:sqlserver://localhost:1433; DatabaseName=curriculumEvaluationSystem"</span>;  </span><br><span class="line">   String userName = <span class="string">"sa"</span>;    </span><br><span class="line">   String userPwd = <span class="string">"123456"</span>;  </span><br><span class="line">   Connection dbConn;  </span><br><span class="line">   <span class="keyword">try</span> &#123;  </span><br><span class="line">   Class.forName(driverName);  </span><br><span class="line">   dbConn = DriverManager.getConnection(dbURL, userName, userPwd);  </span><br><span class="line">   System.out.println(<span class="string">"Connection Successful!"</span>); </span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">   e.printStackTrace();  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>运行会在Console界面提示：Connection Successful!则连接成功啦。</p></li><li><p>可能会遇到的问题及解决方式：（1）端口号冲突，自行修改SSMS的配置。（2）“Exception in thread “main” java.lang.UnsupportedClassVersionError: com/micro”，这个问题确实是由较高版本的JDK编译的java class文件试图在较低版本的JVM上运行产生的错误。需要更改JDK的版本。</p></li></ol>]]></content>
    
    <summary type="html">
    
      Java与Sql JDBC数据库连接及相关操作。
    
    </summary>
    
      <category term="数据库" scheme="https://super456.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Java" scheme="https://super456.github.io/tags/Java/"/>
    
      <category term="Sql JDBC" scheme="https://super456.github.io/tags/Sql-JDBC/"/>
    
  </entry>
  
  <entry>
    <title>关于SQL Server的Exec实现动态查询语句</title>
    <link href="https://super456.github.io/2017/10/16/2017-10-16-sql-server-exec-query/"/>
    <id>https://super456.github.io/2017/10/16/2017-10-16-sql-server-exec-query/</id>
    <published>2017-10-15T16:00:00.000Z</published>
    <updated>2018-03-12T16:04:07.067Z</updated>
    
    <content type="html"><![CDATA[<p>在Sql Server查询语句中使用变量表示表名、列字段名等动态查询方式</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天看了《SQL Server数据库应用技术》的书，遇到的点疑惑也解决了，顺便分享一下。我本来也要想做一个JSP的动态网页，也要用到这个数据库的查询语句的知识点，所以正好实用。<strong>（注：需要点SQL Server基础知识）</strong></p><h3 id="（一）exec与sp-executesql的区别"><a href="#（一）exec与sp-executesql的区别" class="headerlink" title="（一）exec与sp_executesql的区别"></a>（一）exec与sp_executesql的区别</h3><p>EXEC和sp_executesql都是SQL Server提供的两种动态查询语句，各有各的优势,但是比较实用的还是后者，它提供了输入输出的接口，而exec是没有的，最重要的是可以重用执行。一般使用exec语句命令，要么是执行一个存储过程，要么是执行一个动态的查询过程。</p><h3 id="（二）exec的使用"><a href="#（二）exec的使用" class="headerlink" title="（二）exec的使用"></a>（二）exec的使用</h3><ol><li><p>普通使用SQL语句查询可以使用以下3种方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> TableName</span><br><span class="line">exec(<span class="string">'select * from TableName'</span>)</span><br><span class="line">exec sp_executesql N<span class="string">'select * from TableName'</span></span><br></pre></td></tr></table></figure></li><li><p>字段名做变量查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @course <span class="built_in">varchar</span> </span><br><span class="line"><span class="keyword">set</span> @course = <span class="string">'课程名'</span></span><br><span class="line">Exec(<span class="string">'select '</span>+ @course +<span class="string">' from 课程表'</span>)</span><br></pre></td></tr></table></figure><p>执行结果截图是：</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150816519713.png" alt="03表变量动态查询课程名信息" border="0"></p><p><strong>需要注意的是：</strong></p><p>(2-1)要声明数据类型的长度，否则会报错</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/15081651974.png" alt="04坑1没有声明数据类型大小很重要" border="0"></p><p>(2-2)字符串衔接没有使用空格</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150816537825.png" alt="05坑2没有使用空格" border="0"></p></li><li><p>表名做变量查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @tableName <span class="built_in">varchar</span>(<span class="number">50</span>) </span><br><span class="line"><span class="keyword">set</span> @tableName = <span class="string">'课程表'</span></span><br><span class="line">Exec(<span class="string">'select * from '</span>+@TableName)</span><br></pre></td></tr></table></figure><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150816620699.png" alt="06表名做变量查询结果" border="0"></p><p><strong>注意事项跟上面一样</strong></p></li><li><p>批处理查询（多个变量字符串）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @TableName <span class="built_in">varchar</span>(<span class="number">50</span>),@SqlString <span class="built_in">varchar</span>(<span class="number">200</span>),@CourseID <span class="built_in">int</span>;</span><br><span class="line"><span class="keyword">SET</span> @TableName = <span class="string">'课程表'</span>;</span><br><span class="line"><span class="keyword">SET</span> @CourseID =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @SqlString = <span class="string">'select * from '</span>+<span class="keyword">quotename</span>(@TableName) +<span class="string">'where ID = '</span>+<span class="keyword">cast</span>(@CourseID <span class="keyword">as</span> <span class="built_in">varchar</span>(<span class="number">10</span>))</span><br><span class="line">EXEC(@SqlString);</span><br></pre></td></tr></table></figure><p>执行结果截图：</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150816713992.png" alt="08成功结果" border="0"></p><p><strong>需要注意的是：</strong></p><p>(3-1)要将变量不是字符型的转换成字符型，否则会报错，使用cast()转换</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150816713964.png" alt="07注意cast" border="0"></p><p>(3-2)exec()括号内不允许使用多个变量串联的字符串，否则会报错</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/1508168496.png" alt="09变量串联字符串查询" border="0"></p><p>建议使用多个字符串的变量之间串联，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(@SqlString1+@SqlString2+@SqlString3)</span><br></pre></td></tr></table></figure></li><li><p>exec()接口问题</p><p>简单的说就是不支持动态查询输入参数和输出参数，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @TableName <span class="built_in">varchar</span>(<span class="number">50</span>),@XXCourseID <span class="built_in">varchar</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">SET</span> @TableName = <span class="string">'课程表'</span>;</span><br><span class="line"><span class="keyword">SET</span> @XXCourseID =<span class="string">'5'</span>;</span><br><span class="line">exec('<span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">'+quotename(@TableName) +'</span><span class="keyword">where</span> 先修课<span class="keyword">ID</span> = <span class="string">'+@XXCourseID)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="（三）sp-executesql的使用"><a href="#（三）sp-executesql的使用" class="headerlink" title="（三）sp_executesql的使用"></a>（三）sp_executesql的使用</h3><ol><li><p>简单的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @TableName <span class="built_in">varchar</span>(<span class="number">50</span>),@SqlString <span class="keyword">nvarchar</span>(<span class="number">200</span>),@CourseID <span class="built_in">int</span>;</span><br><span class="line"><span class="keyword">SET</span> @TableName = <span class="string">'课程表'</span>;</span><br><span class="line"><span class="keyword">SET</span> @CourseID =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @SqlString = <span class="string">'select * from '</span>+<span class="keyword">quotename</span>(@TableName) +<span class="string">'where ID = '</span>+<span class="keyword">cast</span>(@CourseID <span class="keyword">as</span> <span class="built_in">varchar</span>(<span class="number">10</span>))</span><br><span class="line">EXEC sp_executesql @SqlString</span><br></pre></td></tr></table></figure><p><strong>需要注意的是：</strong></p><p>(1-1)执行的查询语句字符串为三种类型：ntext、nchar、nvarchar，否则会报错</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150816938945.png" alt="10注意查询语句" border="0"></p></li><li><p>使用接口（支持参数的输入输出）</p><blockquote><p><code>@stmt = &lt;statement&gt;</code>,–类似存储过程主体</p><p><code>@params = &lt;params&gt;</code>, –类似存储过程参数部分</p><p><code>&lt;params assignment&gt;</code>–类似存储过程调用</p><p><code>@stmt</code>参数是输入的动态批处理，它可以引入输入参数或输出参数，和存储过程的主体语句一样，只不过它是动态的，而存储过程是静态的，不过你也可以在存储过程中使用sp_executesql;</p><p><code>@params</code>参数与定义输入/输出参数的存储过程头类似，实际上和存储过程头的语法完全一样；</p><p><code>@&lt;params assignment&gt;</code> 与调用存储过程的EXEC部分类似。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @TableName <span class="built_in">varchar</span>(<span class="number">50</span>),@SqlString <span class="keyword">nvarchar</span>(<span class="number">200</span>),@CourseID <span class="built_in">int</span>;</span><br><span class="line"><span class="keyword">SET</span> @TableName = <span class="string">'课程表'</span>;</span><br><span class="line"><span class="keyword">SET</span> @CourseID =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @SqlString = <span class="string">'select * from '</span>+<span class="keyword">quotename</span>(@TableName) +<span class="string">'where ID = @ID'</span></span><br><span class="line">EXEC sp_executesql </span><br><span class="line">    @stmt=@SqlString,</span><br><span class="line">    @params=N<span class="string">'@ID int'</span>,</span><br><span class="line">    @<span class="keyword">ID</span>=@CourseID</span><br></pre></td></tr></table></figure><p>执行结果截图：</p><p><img src="http://bmvjcv.img48.wal8.com/img48/17283365_20170904015317/150817020063.png" alt="12接口查询" border="0"></p></li><li><p>使用输出参数为调用批处理中的变量返回值</p><p>不做说明，目前暂时没有用到</p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://www.cnblogs.com/xbf321/archive/2008/11/02/1325067.html" target="_blank" rel="noopener">返回主页 兴百放’s Blogs</a></li></ul>]]></content>
    
    <summary type="html">
    
      关于SQL Server的Exec实现动态查询语句。
    
    </summary>
    
      <category term="数据库" scheme="https://super456.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL Server" scheme="https://super456.github.io/tags/SQL-Server/"/>
    
  </entry>
  
</feed>
