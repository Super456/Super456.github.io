<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>纵倾童鞋</title>
        <link>https://super456.github.io</link>
        <description>纵倾童鞋的博客，分享前端技术知识、阅读思考、生活心得等内容</description>
        <lastBuildDate>Sun, 21 Apr 2024 04:51:28 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-cn</language>
        <image>
            <title>纵倾童鞋</title>
            <url>https://super456.github.io/logo.jpg</url>
            <link>https://super456.github.io</link>
        </image>
        <copyright>Copyright (c) 2024-present, 纵倾童鞋</copyright>
        <item>
            <title><![CDATA[关于我]]></title>
            <link>https://super456.github.io/posts/about/</link>
            <guid>https://super456.github.io/posts/about/</guid>
            <pubDate>Sun, 21 Apr 2024 02:04:20 GMT</pubDate>
            <description><![CDATA[一个名不见经传的前端小菜鸡，喜欢写点前端代码，偶尔写点博客。]]></description>
            <content:encoded><![CDATA[<h1 id="关于我" tabindex="-1">关于我 <a class="header-anchor" href="#关于我" aria-label="Permalink to &quot;关于我&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">张爱玲 《爱》</p>
<p>于千万人之中遇见你所要遇见的人，<br>
于千万年之中，时间的无涯的荒野里，<br>
没有早一步，也没有晚一步，刚巧赶上了，<br>
那也没有别的话可说，惟有轻轻地问一声：<br>
“噢，你也在这里吗？”</p>
</div>
<h2 id="🙋🏻‍♂️-我与清风共明月-皆是人间一过客" tabindex="-1">🙋🏻‍♂️ 我与清风共明月，皆是人间一过客 <a class="header-anchor" href="#🙋🏻‍♂️-我与清风共明月-皆是人间一过客" aria-label="Permalink to &quot;🙋🏻‍♂️ 我与清风共明月，皆是人间一过客&quot;">&ZeroWidthSpace;</a></h2>
<p>👋 哈喽，很高兴遇见你 🥳，我是<strong>纵倾</strong>，麻烦认识一下 😁<br>
🏡 | 家乡：广东 梅州（客家人）<br>
🏠 | 现居：广东 深圳<br>
💼 | 工作：前端开发工程师<br>
🏫 | 大学：某不知名大学，计算机科学与技术专业<br>
我，一个才疏学浅，文笔拙劣的前端开发程序员。但对于写作和分享的热爱，会坚持创作与分享，哪怕哪一句话或一个词可以帮助到别人，都是没有白费的。</p>
<p>功不唐捐、玉汝于成。道阻且长，行之将至。希望我可以温暖到你，期待你的关注和鼓励。在未来的日子里我们能相互陪伴，一起加油，遇见那个值得自己期待的未来💪🏻</p>
<hr>
<p><strong>关于我的兴趣爱好</strong></p>
<ol>
<li>📷 | 喜欢旅游，最近一直在学摄影相关的知识及拍照技巧，作品会更新在《念念不忘，必有回响》知识库上分享，期待您的关注与互动；</li>
<li>⛳️ | 最多的运动就是跑步 🏃🏻 和羽毛球 🏸，还有就是爬山 🏔；</li>
<li>🎮 | 桌游很少，主要是手游王者荣耀、和平精英、穿越火线等；</li>
<li>🎬 | 喜欢看武侠类、战争类、爱情类、悬疑类、恐怖类电脑，偶尔追追剧（最喜欢《爱情公寓》，古风、穿越剧偏多），最喜欢的综艺《脱口秀大会》和《奇葩说》；</li>
<li>🍺 | 偶尔会约三五好友小聚，烧烤、火锅等，互相倾听、发泄小情绪都有；</li>
<li>🎵 | 最喜爱的歌手 🎤—— 许嵩；</li>
</ol>
<h2 id="💪🏻-编程渐难终不悔-为己赢得成功泪" tabindex="-1">💪🏻 编程渐难终不悔，为己赢得成功泪 <a class="header-anchor" href="#💪🏻-编程渐难终不悔-为己赢得成功泪" aria-label="Permalink to &quot;💪🏻 编程渐难终不悔，为己赢得成功泪&quot;">&ZeroWidthSpace;</a></h2>
<p>我一直坚信学习的技巧是动手，学习的灵魂是坚持，学习的态度是务实，学习的快乐是分享。从学习编程技术开始，一直摸爬滚打，四处碰壁的勇敢前行着，我没有编程的天赋，没有超乎常人的智商，没有前辈指导，一路学习过来，大部分都是心酸的过程，但是我无怨无悔，我知道自己没有别人聪明，也没有别人条件好。只能靠自己拼搏，靠自己无畏的前行。我就想在自己喜欢的领域，创造属于自己的小世界。我不怕辛苦，习惯了一个人的孤独，但有时候，真的会很烦， 没办法，想找到志同道合的人一起奋斗，真的、真的很难。但是，我相信自己，每天不断的学习，一定会成为前端大神，一定会在 IT 行业中有所作为，别忘了，我是有梦想的人！</p>
<p>很喜欢的一句话：</p>
<blockquote>
<p>年轻的时候就能找到自己喜欢并且干一辈子的事情，是多么幸福，多么令人羡慕啊</p>
</blockquote>
<h2 id="🌈-总有人间一两风-填我十万八千梦" tabindex="-1">🌈 总有人间一两风，填我十万八千梦 <a class="header-anchor" href="#🌈-总有人间一两风-填我十万八千梦" aria-label="Permalink to &quot;🌈 总有人间一两风，填我十万八千梦&quot;">&ZeroWidthSpace;</a></h2>
<p>第一次搭建自己的博客网站，是我大三下暑假时候。使用的是 Jekyll + GitHub Pages 搭建的，那个时候只是为了尝鲜及有一个自己博客网站玩玩，并没有持续的投入维护。之后第二版博客也是在 GitHub 上搭建自己的 Hexo Next 博客，因为百度的原因，所以两个博客网站都有更新。目的是记录、总结自己的学习过程，分享、帮助像我一样学习前端及其他编程技术的学习建议参考，互相学习、一起进步，欢迎指正</p>
<p>不管未来怎么样，我想要成为前端高级开发工程师。为了这个梦想，而努力奋斗的少年！
唯愿一路风清，且行且珍惜。我一直在 👨🏻‍💻Coding…</p>
<h2 id="🌹-感君意气无所惜-一为歌行歌主客" tabindex="-1">🌹 感君意气无所惜，一为歌行歌主客 <a class="header-anchor" href="#🌹-感君意气无所惜-一为歌行歌主客" aria-label="Permalink to &quot;🌹 感君意气无所惜，一为歌行歌主客&quot;">&ZeroWidthSpace;</a></h2>
<p>种一棵树，最好的时间是十年前，其次是现在。<strong>那我坚持做一件事——写博客十年，那结果将会怎么样呢？😄</strong></p>
<p>感谢你阅读我的文章，希望你能有所收获</p>
<p><em>愿，我们都在努力，向着光的方向！</em> ☀️</p>
<hr>
<p><strong>注：有些内容是我大三暑假写的一个简短的自我介绍，哈哈哈，有被那个时候的自己感动到，所以想留着，想想曾经那个年少的自己，也想给后来的自己一个参考呢</strong></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React 学习笔记]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/react/react-study.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/react/react-study.html</guid>
            <pubDate>Thu, 18 Apr 2024 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="react-学习笔记" tabindex="-1">React 学习笔记 <a class="header-anchor" href="#react-学习笔记" aria-label="Permalink to &quot;React 学习笔记&quot;">&ZeroWidthSpace;</a></h1>
<p>以中文和英文官方文档学习为主：</p>
<ul>
<li><a href="https://react.docschina.org/" target="_blank" rel="noreferrer">React 官方中文文档</a></li>
<li><a href="https://react.dev/" target="_blank" rel="noreferrer">React</a></li>
<li><a href="https://zh-hans.react.dev/" target="_blank" rel="noreferrer">React 官方中文文档</a></li>
</ul>
<h2 id="笔记📒" tabindex="-1">笔记📒 <a class="header-anchor" href="#笔记📒" aria-label="Permalink to &quot;笔记📒&quot;">&ZeroWidthSpace;</a></h2>
<CustomImage src='/growth-record/frame/react/react-study-01.png' /><h2 id="知识点" tabindex="-1">知识点 <a class="header-anchor" href="#知识点" aria-label="Permalink to &quot;知识点&quot;">&ZeroWidthSpace;</a></h2>
<h4 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">&ZeroWidthSpace;</a></h4>
<ol>
<li>使用一个插槽组件，负责渲染包裹层写法：注意导出的写法，先声明组件函数再默认导出这个函数名</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ReactNode } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  children</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ReactNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> AsideContainer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">aside</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"w-[260px] h-fit hidden lg:block ml-5 flex-none"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      {children}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">aside</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> AsideContainer;</span></span></code></pre>
</div><ol start="2">
<li>组件内部拆分小组件，然后统一导出写法：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'use client'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useState } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'next/image'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> styles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '@/styles/globals.module.scss'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ToolbarItem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">alt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">iconPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">setSrc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(iconPath);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        onMouseEnter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setSrc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(iconPath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '-active'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        onMouseLeave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setSrc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(iconPath)}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"w-9 h-9 bg-white rounded-full flex justify-center items-center mb-4 cursor-pointer"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      ></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">Image</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> alt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{alt} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '.svg'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> CommonToolbar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">styles</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">commonToolbar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">} w-9 mr-6 hidden flex-col pt-16`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">ToolbarItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> alt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"评论"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> iconPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/icons/comment"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">ToolbarItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> alt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"微信"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> iconPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/icons/wechat"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">ToolbarItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> alt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"微博"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> iconPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/icons/weibo"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">ToolbarItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> alt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"沉浸阅读"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> iconPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/icons/read"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> CommonToolbar;</span></span></code></pre>
</div><h4 id="css-处理" tabindex="-1">CSS 处理 <a class="header-anchor" href="#css-处理" aria-label="Permalink to &quot;CSS 处理&quot;">&ZeroWidthSpace;</a></h4>
<ol start="3">
<li>组件文件使用模块化 CSS 处理，避免全局污染：使用 CSS in JS 也是可以的，用法类似</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useNavigate } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react-router-dom'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { Button } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'antd'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ArrowLeftOutlined } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '@ant-design/icons'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> mediaVideo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '@assets/video/wkylin.skyline.mp4'</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 引入 CSS 模块化文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> styles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './index.module.less'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> LandingPage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> navigate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useNavigate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">section</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{styles.landing}></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">video</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> autoPlay</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> loop</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> muted</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{mediaVideo} /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">section</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{styles.overlay} /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">Button</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">          className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{styles.rollback}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">          icon</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">ArrowLeftOutlined</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{{ fontSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }} />}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">          type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">          size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"large"</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">          onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> navigate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        ></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          Roll Back</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">section</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> LandingPage</span></span></code></pre>
</div><CustomImage src='/growth-record/frame/react/react-study-02.webp' /><h4 id="usereducer" tabindex="-1">useReducer <a class="header-anchor" href="#usereducer" aria-label="Permalink to &quot;useReducer&quot;">&ZeroWidthSpace;</a></h4>
<ol start="4">
<li>reducer 使用案例：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* eslint-disable prettier/prettier */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useReducer, useEffect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> initialState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  loading: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  data: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  error: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reducer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (action.type) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'loading'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">initialState, loading: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'success'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">initialState, data: action.data }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'error'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">initialState, error: action.error }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useApiCallOnMount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useReducer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(reducer, initialState)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'loading'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'success'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, data })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'success'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, error })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }, [service])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [state.loading, state.data, state.error]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> useApiCallOnMount</span></span></code></pre>
</div><h4 id="usecontext" tabindex="-1">useContext <a class="header-anchor" href="#usecontext" aria-label="Permalink to &quot;useContext&quot;">&ZeroWidthSpace;</a></h4>
<p>简单一点：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ErrorBoundaryContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> React.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">createContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useErrorHandling</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> React.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">useContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ErrorBoundaryContext)</span></span></code></pre>
</div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* eslint-disable prettier/prettier */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> React, { createContext, useContext, useState, useMemo, useCallback } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useNavigate } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react-router-dom'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Home </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '@src/pages/home'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> defaultValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  activeKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setActiveKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  panes: [],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setPanes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  removeTab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> initialPanes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'首页'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    i18nKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'home'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    key: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    content: &#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">Home</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> />,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    closable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// TabViews 添加与删除； 使用 createContext 创建上下文</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ProTabContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(defaultValue)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useProTabContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ProTabContext)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'useValue must be used within a ValueProvider'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> context</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ProTabProvider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">activeKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">setActiveKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">panes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">setPanes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(initialPanes)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> navigate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useNavigate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> removeTab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">targetKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">callbackFun</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> delIndex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> panes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">findIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> item.key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> targetKey)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> filterPanes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> panes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">pane</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> pane.key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> targetKey)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 删除非当前/当前tab</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (targetKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> activeKey) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        setPanes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(filterPanes)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> nextPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> filterPanes[delIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">].key</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        navigate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(nextPath)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        setActiveKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(nextPath)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        setPanes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(filterPanes)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      callbackFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // eslint-disable-next-line react-hooks/exhaustive-deps</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    [activeKey, panes]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> providerValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useMemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      activeKey,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      setActiveKey,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      panes,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      setPanes,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      removeTab,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    [activeKey, setActiveKey, panes, setPanes, removeTab]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">ProTabContext.Provider</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{providerValue}>{children}&#x3C;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">ProTabContext.Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ProTabProvider, useProTabContext }</span></span></code></pre>
</div><h4 id="自定义-hooks" tabindex="-1">自定义 Hooks <a class="header-anchor" href="#自定义-hooks" aria-label="Permalink to &quot;自定义 Hooks&quot;">&ZeroWidthSpace;</a></h4>
<ol>
<li>防抖</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* eslint-disable prettier/prettier */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useRef, useEffect, useCallback } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 防抖</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 每次触发定时器后，取消上一个定时器，然后重新触发定时器。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 防抖一般用于用户未知行为的优化，比如搜索框输入弹窗提示，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 因为用户接下来要输入的内容都是未知的，所以每次用户输入就弹窗是没有意义的，需要等到用户输入完毕后再进行弹窗提示。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useDebounce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> timerRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> fnRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(fn)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  fnRef.current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> fn</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (timerRef.current) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(timerRef.current)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },[])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> fnDebounced</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (timerRef.current) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(timerRef.current)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      timerRef.current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> that</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        fnRef.current.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(that, args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }, delay)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    [delay]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> fnDebounced</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> useDebounce</span></span></code></pre>
</div><ol start="2">
<li>上传图片：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useRef, useState, useEffect, useCallback } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// ? 上传图片组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useUploadImage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">uploadProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">setUploadProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 设置上传进度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> uploadRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">XMLHttpRequest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (uploadRef.current) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        uploadRef.current.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> uploadImage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      file,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      uploadURL,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      onUploadComplete,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      onUploadError,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      file: File</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      uploadURL: string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // eslint-disable-next-line no-unused-vars</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      onUploadComplete: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // eslint-disable-next-line no-unused-vars</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      onUploadError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> formData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FormData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'file'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, file)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      uploadRef.current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      uploadRef.current.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'PUT'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, uploadURL)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      uploadRef.current.upload.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'progress'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">loaded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">total</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        setUploadProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((loaded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> total)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      uploadRef.current.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(formData)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      uploadRef.current.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> uploadRef.current?.response</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (response) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> jsonResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          uploadRef.current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">          onUploadComplete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(jsonResponse.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> jsonResponse)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      uploadRef.current.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onerror</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> uploadRef.current?.response</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (onUploadError) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">          onUploadError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(error)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    uploadImage,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    uploadProgress,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> useUploadImage</span></span></code></pre>
</div><ol start="3">
<li>定时器：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useEffect, useRef } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useInterval</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> savedCallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    savedCallback.current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> callback</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }, [callback])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> tick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      savedCallback.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (delay </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> delay </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'number'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(tick, delay)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> clearInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }, [delay])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> useInterval</span></span></code></pre>
</div><ol start="4">
<li>判断组件是否挂载：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useEffect, useRef } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useIsMount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> isMountRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    isMountRef.current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }, [])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> isMountRef.current</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> useIsMount</span></span></code></pre>
</div><ol start="5">
<li>本地存储：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useState, useEffect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getStorageValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">defaultValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'undefined'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> saved</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(key)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> saved </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(saved) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> defaultValue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useLocalStorage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">defaultValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getStorageValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(key, defaultValue))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(key, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(value))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }, [key, value])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [value, setValue]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> useLocalStorage</span></span></code></pre>
</div><ol start="6">
<li>监听鼠标位置移动：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useState, useEffect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useMousePosition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">setX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">setY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> updateMouse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'mousemove'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        setX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(e.clientX)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        setY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(e.clientY)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'mousemove'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, updateMouse)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'mousemove'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, updateMouse)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }, [])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { x, y }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="7">
<li>使用存储：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useRef, useEffect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> usePreviousValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (ref.current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ref.current</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> usePreviousValue</span></span></code></pre>
</div><ol start="8">
<li>创建脚本：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useEffect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useScript</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">integrity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">crossOrigin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'anonymous'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'script'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    script.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> url</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    script.async </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> async</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (integrity) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      script.integrity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> integrity</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    script.crossOrigin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> crossOrigin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(script)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">removeChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(script)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }, [url, integrity, async, crossOrigin])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> useScript</span></span></code></pre>
</div><ol start="9">
<li>节流：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useThrottle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">delay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> prev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> now</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> prev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> delay) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      prev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> now</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> useThrottle</span></span></code></pre>
</div><ol start="10">
<li>获取浏览器高度：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useState, useEffect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useViewport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">setWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(window.innerWidth)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">setHeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(window.innerHeight)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> handleResize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      setWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(window.innerWidth)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      setHeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(window.innerHeight)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'resize'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, handleResize)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'resize'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, handleResize)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }, [])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { width, height }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="11">
<li>WebSocket：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useState, useRef, useEffect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'react'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useWebsocket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ws</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">wsData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">setMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">readyState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">setReadyState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ key: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'正在链接中'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> creatWebSocket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> stateArr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      { key: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'正在链接中'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      { key: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'已经链接并且可以通讯'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      { key: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'连接正在关闭'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      { key: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'连接已关闭或者没有链接成功'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      ws.current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> WebSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(url)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // eslint-disable-next-line @typescript-eslint/no-unused-vars</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      ws.current.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onopen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setReadyState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(stateArr[ws.current?.readyState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // eslint-disable-next-line @typescript-eslint/no-unused-vars</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      ws.current.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onclose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        setReadyState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(stateArr[ws.current?.readyState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // eslint-disable-next-line @typescript-eslint/no-unused-vars</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      ws.current.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onerror</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        setReadyState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(stateArr[ws.current?.readyState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      ws.current.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        setMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(e.data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(error)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> webSocketInit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ws.current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ws.current.readyState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      creatWebSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  //  关闭 WebSocket</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> closeWebSocket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ws.current?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reconnect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      closeWebSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      ws.current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      creatWebSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (verify) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">webSocketInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      ws.current?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // eslint-disable-next-line react-hooks/exhaustive-deps</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }, [ws, verify])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    wsData,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    readyState,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    closeWebSocket,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    reconnect,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> useWebsocket</span></span></code></pre>
</div><h2 id="疑问❓" tabindex="-1">疑问❓ <a class="header-anchor" href="#疑问❓" aria-label="Permalink to &quot;疑问❓&quot;">&ZeroWidthSpace;</a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[夜航西飞]]></title>
            <link>https://super456.github.io/posts/random-thought/</link>
            <guid>https://super456.github.io/posts/random-thought/</guid>
            <pubDate>Sun, 14 Apr 2024 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="夜航西飞" tabindex="-1">夜航西飞 <a class="header-anchor" href="#夜航西飞" aria-label="Permalink to &quot;夜航西飞&quot;">&ZeroWidthSpace;</a></h1>
<p>专栏名字来源我很喜欢的《夜航西飞》这本书，希望我能跟作者一样拥有无畏精神和对生活的热爱。“未来藏在迷雾之中，隔着距离，叫人看来胆怯。但当你踏足其中，就会云开雾散”。我热爱我现在的生活，也很愿意去探索新的事物，步履铿锵，吭哧吭哧埋头干，向前冲咯~</p>
<p>主要记录这一路走来，自己生活的真相和工作的心得体会，想着未来某一天回头看，会觉得怎么看待当初的自己，会心一笑，感慨万千呢？还是当时只道是寻常吧？</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CSS]]></title>
            <link>https://super456.github.io/posts/growth-record/base/css/</link>
            <guid>https://super456.github.io/posts/growth-record/base/css/</guid>
            <pubDate>Sun, 14 Apr 2024 15:00:23 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">&ZeroWidthSpace;</a></h1>
<p>待更新🚀...</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[什么是 CSS]]></title>
            <link>https://super456.github.io/posts/growth-record/base/css/what-is-css.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/css/what-is-css.html</guid>
            <pubDate>Sun, 14 Apr 2024 15:00:23 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="什么是-css" tabindex="-1">什么是 CSS <a class="header-anchor" href="#什么是-css" aria-label="Permalink to &quot;什么是 CSS&quot;">&ZeroWidthSpace;</a></h1>
<p>待更新🚀...</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[HTML]]></title>
            <link>https://super456.github.io/posts/growth-record/base/html/</link>
            <guid>https://super456.github.io/posts/growth-record/base/html/</guid>
            <pubDate>Sun, 14 Apr 2024 15:00:23 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">&ZeroWidthSpace;</a></h1>
<p>待更新🚀...</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[语义化标签]]></title>
            <link>https://super456.github.io/posts/growth-record/base/html/semantic-label.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/html/semantic-label.html</guid>
            <pubDate>Sun, 14 Apr 2024 15:00:23 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="语义化标签" tabindex="-1">语义化标签 <a class="header-anchor" href="#语义化标签" aria-label="Permalink to &quot;语义化标签&quot;">&ZeroWidthSpace;</a></h1>
<p>介绍语义化标签及作用等，待更新🚀...</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[什么是 HTML]]></title>
            <link>https://super456.github.io/posts/growth-record/base/html/what-is-html.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/html/what-is-html.html</guid>
            <pubDate>Sun, 14 Apr 2024 15:00:23 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="什么是-html" tabindex="-1">什么是 HTML <a class="header-anchor" href="#什么是-html" aria-label="Permalink to &quot;什么是 HTML&quot;">&ZeroWidthSpace;</a></h1>
<p>介绍 HTML 的前世今生。待更新🚀。。。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[技术复盘]]></title>
            <link>https://super456.github.io/posts/growth-record/other/softSkills/</link>
            <guid>https://super456.github.io/posts/growth-record/other/softSkills/</guid>
            <pubDate>Sun, 14 Apr 2024 15:00:23 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="技术复盘" tabindex="-1">技术复盘 <a class="header-anchor" href="#技术复盘" aria-label="Permalink to &quot;技术复盘&quot;">&ZeroWidthSpace;</a></h1>
<p>总结技术上的一些复盘思考点滴，待更新🚀...</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[工具指南]]></title>
            <link>https://super456.github.io/posts/growth-record/other/toolGuide/</link>
            <guid>https://super456.github.io/posts/growth-record/other/toolGuide/</guid>
            <pubDate>Sun, 14 Apr 2024 15:00:23 GMT</pubDate>
            <description><![CDATA[工具使用及技巧]]></description>
            <content:encoded><![CDATA[<h1 id="工具指南" tabindex="-1">工具指南 <a class="header-anchor" href="#工具指南" aria-label="Permalink to &quot;工具指南&quot;">&ZeroWidthSpace;</a></h1>
<p>总结工具使用及技巧，待更新🚀...</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[我失业了]]></title>
            <link>https://super456.github.io/posts/random-thought/2024/lose-job.html</link>
            <guid>https://super456.github.io/posts/random-thought/2024/lose-job.html</guid>
            <pubDate>Sun, 14 Apr 2024 12:14:53 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="我失业了" tabindex="-1">我失业了 <a class="header-anchor" href="#我失业了" aria-label="Permalink to &quot;我失业了&quot;">&ZeroWidthSpace;</a></h1>
<p>聊聊我失业后的一些经历和感受，待更新🚀...</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 47 本《牧羊少年奇幻之旅》]]></title>
            <link>https://super456.github.io/posts/read-book/2024/muyangshaonianqihuanzhilu.html</link>
            <guid>https://super456.github.io/posts/read-book/2024/muyangshaonianqihuanzhilu.html</guid>
            <pubDate>Sat, 13 Apr 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[《牧羊少年奇幻之旅》是一部少年追求梦想的寓言故事，更是百年一遇的能改变一个人一生的书，每个人都能在其中找到自己追寻梦想的方式。 西班牙牧羊少年圣地亚哥接连做了同一个梦，梦见埃及金字塔附近藏有一批宝藏。少年卖掉羊群，历尽千辛万苦一路向南，跨海来到非洲，穿越撒哈拉大沙漠，其间奇遇不断。 在一位炼金术士的指引下，他终于到达金字塔前，却刚刚悟出宝藏的真正所在……]]></description>
            <content:encoded><![CDATA[<h1 id="第-47-本《牧羊少年奇幻之旅》" tabindex="-1">第 47 本《牧羊少年奇幻之旅》 <a class="header-anchor" href="#第-47-本《牧羊少年奇幻之旅》" aria-label="Permalink to &quot;第 47 本《牧羊少年奇幻之旅》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>《牧羊少年奇幻之旅》是一部少年追求梦想的寓言故事，更是百年一遇的能改变一个人一生的书，每个人都能在其中找到自己追寻梦想的方式。
西班牙牧羊少年圣地亚哥接连做了同一个梦，梦见埃及金字塔附近藏有一批宝藏。少年卖掉羊群，历尽千辛万苦一路向南，跨海来到非洲，穿越撒哈拉大沙漠，其间奇遇不断。
在一位炼金术士的指引下，他终于到达金字塔前，却刚刚悟出宝藏的真正所在……</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《牧羊少年奇幻之旅》
保罗•柯艾略
63个笔记</p>
<p>◆  点评</p>
<p>2024/4/13 认为好看
卖掉现实的“羊群”，追寻心中的“天命”
这是一本关于少年追梦的故事，讲述了一个牧羊少年圣地亚哥因为两次做梦看到金字塔有宝藏，经历了千辛万苦最终到达金字塔，找到心中的那个宝藏。故事不长，一开始看的也有点迷迷糊糊，很多想不明白的地方，可能是文化背景的问题，回顾起来，别有一番风味。也许，生活中，我们都能从牧羊少年找到自己的身影，毕竟我们曾经做过少年逐梦吧</p>
<p>一开始读的时候，我有个疑问：牧羊少年为啥会有这么大的勇气，走出自己的舒适圈，去寻找虚无缥缈所谓的天命——梦里的宝藏呢？我想是一是他内心强烈的渴望或决心，二是周围的环境是一种很强的催化剂，让他一步一步逆天改命，踏出舒适区，敢于做自己吧。本来牧羊少年的全部生活也只有羊群，朝夕相处，羊群教会了他所有的东西，就因为做了个梦，开始审视自己：是安于舒适区，过自己熟悉习惯的生活，还是跳出舒适区，体验充满不确定性，有风险的人生？但还是选择了后者，因为他内心早就想云游四方，看看外面的世界，只是之前不敢做出这样的决定罢了。还有最重要的是遇到了撒冷王，他人生至关重要的贵人，促使他勇敢的走出自己人生的第一步</p>
<p>文中反反复复提到天命，那天命是什么呢？书中回答是“天命就是你一直期望去做的事情。人一旦步入青年时期，就知道什么是自己的天命了。在人生的这个阶段，一切都那么明朗，没有做不到的事情。人们敢于梦想，期待完成他们一生中喜欢做的一切事情。但是，随着时光的流逝，一股神秘的力量开始企图证明，根本不可能实现天命。”牧羊少年追梦路上遇到的人，也给了我不一样的感悟和收获。卖爆米花的老人，不敢踏出舒适区，只能一步步将天命埋没在自己心中；水晶店的老板，把天命作为自己支撑活下去的希望，怕实现后迷失了自己，没有动力活下去，而且太安于现状，不想改变现在的生活；当然，只有他陷于绝境，经历考验的时候，心中还有那一团火——一个人越是接近梦想，天命就越成为他生存下去的真正理由。沙漠绿洲遇到的爱人法蒂玛，没有阻止他实现天命，反而鼓励他继续往前走。赶驼人：人全靠对未来的希望活着，我想我们都是，但又不是，有希望的时候，可以让我们活得更踏实和有追求。没希望的时候，也要创造希望，不要轻易放弃自己吧。跟随神秘的炼金术士，不断丰富自己的内心世界，虽然最后没有找到宝藏，但是找到了心中的宝藏</p>
<p>世界之魂是什么呢？查阅资料可能是英国人口中的一个炼金术语，是一种推动事物发展的基础。英国人说万物皆有灵，而我们也是灵魂的一部分。“世界之魂”第二次出现在圣地亚哥初见法蒂玛时，它被明确指明是爱。这是一种能超越语言文字、地域身份等一切外在条件的表达方式。所以说是爱让我们走到了一起，组成了一个世界之魂的整体吧，又一步步引领我们朝着自己内心的方向前进，也许就是精神世界，正如书中所说：“当你想要某件东西时，整个宇宙会合力助你实现愿望。”</p>
<p>总之，书中印象深刻的一句话是：有三类炼金术士，第一类是说话空洞，是因为他们不了解自己所说的事情；第二类是因为他们了解自己所说的事情，还知道炼金术的语言针对心灵，而不是针对理智；第三类是从未听说过炼金术，却在生活中发现了“点金石”。不自觉的联想到罗曼罗兰说的：“世界上只有一种真正的英雄主义，那就是认清生活的真相之后依然热爱生活。”有异曲同工之妙，也就是炼金术士中的第三类人吧。“夜色之浓，莫过于黎明前的黑暗”，实现梦想之前，会经历千难万阻，没有人可以随随便便成功。希望我们都要相信：生活对追随自己天命的人很慷慨。少年，逐梦去吧，相信我们都能找到自己的宝藏😄</p>
<p>很喜欢书中的这几句话，很有温暖、意味深长，给人力量：</p>
<ul>
<li>幸福的秘密就在于，既要看到世上的奇珍异宝，又要永远不忘记勺里的那两滴油。</li>
<li>当你想要某种东西时，整个宇宙会合力助你实现愿望。</li>
<li>因为我既不生活在过去，也不生活在未来，我只有现在，它才是我感兴趣的。如果你能永远停留在现在，那你将是最幸福的人。你会发现沙漠里有生命，发现天空中有星星，发现士兵们打仗是因为战争是人类生活的一部分。生活就是一个节日，是一场盛大的庆典。因为生活永远是，也仅仅是我们现在经历的这一刻。</li>
<li>你必须热爱沙漠，但是绝不要完全相信沙漠。因为沙漠对所有人都是一个考验：考验你迈出的每一步，杀死心猿意马的人。</li>
<li>但是不要忘记，你的心到哪儿，你的宝藏就在哪儿。你必须找到你的宝藏，否则你在途中发现的一切便全都失去了意义。</li>
<li>“要想学到本事，只有一种方式，”炼金术士回答说，“那就是行动。”</li>
<li>害怕遭受痛苦比遭受痛苦本身还要糟糕，没有一颗心在追求梦想的时候感到痛苦，因为追寻过程的每一刻，都与上帝和永恒同在。</li>
<li>追寻天命的人，知道自己需要掌握的一切。只有一样东西令梦想无法成真，那就是担心失败。</li>
<li>只要你真心渴望一样东西，就放手去做，因为渴望是源自天地之心，因为那就是你来到这个世间的任务。而当你真心渴望某种东西时，整个宇宙都会联合起来帮助你完成。</li>
<li>生活对追随自己天命的人很慷慨。</li>
</ul>
<p>◆  自序</p>
<blockquote>
<blockquote>
<p>“有三类炼金术士。”我师父说道，“有的说话空洞，是因为他们不了解自己所说的事情；有的是因为他们了解自己所说的事情，还知道炼金术的语言针对心灵，而不是针对理智。”
“那么，第三类呢？”我问道。
“他们从未听说过炼金术，却在生活中发现了‘点金石’。”</p>
</blockquote>
</blockquote>
<p>◆  引子</p>
<p>2024/3/9 发表想法
有时候我们总是这样，失去了才知道没有好好珍惜过。在别人眼里关注的是自己</p>
<blockquote>
<blockquote>
<p>我是为水仙少年流泪，可我从来没注意他的容貌。我为他流泪，是因为每次他面对我的时候，我都能从他眼睛深处看到我自己的美丽映像。</p>
</blockquote>
</blockquote>
<p>◆  上部</p>
<p>2024/3/9 发表想法
有一种可能就是男孩👦🏻生活只有羊群，接触的只有羊群，认知里面也觉得羊群是他的全部吧，夸张的一点说法已经融为一体，所以他觉得羊群教会了他东西，也许就是他认知在羊群上的全部体现吧。当然还有另一种可能就是他把羊群当做一本书在读，可以做到心中有书吧</p>
<blockquote>
<blockquote>
<p>“我以前以为牧羊人不会读书。”一个少女的声音在他身旁响起。
是个典型的安达卢西亚少女，一头黑发瀑布般垂下，眼睛使人隐隐约约想起古代的征服者摩尔人。
“那是因为羊群教给人们的东西远比书籍要多。”男孩回答道。</p>
</blockquote>
</blockquote>
<p>2024/3/9 发表想法
就像温水煮青蛙一样，一旦处于一种安逸舒适的环境太久了，都忘记自己的本能了，等到醒过来的时候是不是有点晚了呢，就好像现在工作一样，别忘记提高自己</p>
<blockquote>
<blockquote>
<p>如果我变成魔鬼，决定把它们一只接一只杀死，它们也只在整个羊群几乎被杀光的时候才会有所察觉，男孩想。因为它们相信我，而忘记了它们自己的本能。这只是因为我能引领它们找到食物。</p>
</blockquote>
</blockquote>
<p>2024/3/9 发表想法
因为读书让他对这个世界充满好奇心吧</p>
<blockquote>
<blockquote>
<p>他曾经在一所神学院里待到十六岁。父母希望他成为神甫，成为一个普通农家的骄傲，而他们一生只为吃喝忙碌，就像圣地亚哥的羊群。他学过拉丁文、西班牙文和神学。但是，从孩提时代起，他就梦想着了解世界，这远比了解上帝以及人类的罪孽来得重要。一天下午，回去探望家人的时候，圣地亚哥鼓足勇气告诉父亲，他不想当神甫，他要云游四方。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在人生的某个时候，我们失去了对自己生活的掌控，命运主宰了我们的人生。这就是世上最大的谎言。”</p>
</blockquote>
</blockquote>
<p>2024/3/9 发表想法
天命就是年轻时候的义无反顾、无所畏惧的冲动，我命由我不由天吧</p>
<blockquote>
<blockquote>
<p>“天命就是你一直期望去做的事情。人一旦步入青年时期，就知道什么是自己的天命了。在人生的这个阶段，一切都那么明朗，没有做不到的事情。人们敢于梦想，期待完成他们一生中喜欢做的一切事情。但是，随着时光的流逝，一股神秘的力量开始企图证明，根本不可能实现天命。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“天命就是你一直期望去做的事情。人一旦步入青年时期，就知道什么是自己的天命了。在人生的这个阶段，一切都那么明朗，没有做不到的事情。人们敢于梦想，期待完成他们一生中喜欢做的一切事情。但是，随着时光的流逝，一股神秘的力量开始企图证明，根本不可能实现天命。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在这个星球上，存在一个伟大的真理：不论你是谁，不论你做什么，当你渴望得到某种东西时，最终一定能够得到，因为这愿望来自宇宙的灵魂。那就是你在世间的使命。”</p>
</blockquote>
</blockquote>
<p>2024/3/9 发表想法
子曰：先行其言，而后从之</p>
<blockquote>
<blockquote>
<p>“如果东西还没到手，你就先许诺于人，那你就不会积极去争取了。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“如果东西还没到手，你就先许诺于人，那你就不会积极去争取了。”</p>
</blockquote>
</blockquote>
<p>2024/3/9 发表想法
既要享受路上的风景，也不要忘了出发的目的</p>
<blockquote>
<blockquote>
<p>“‘这正是我要给你的唯一忠告。’智慧大师说，‘幸福的秘密就在于，既要看到世上的奇珍异宝，又要永远不忘记勺里的那两滴油。’”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“‘这正是我要给你的唯一忠告。’智慧大师说，‘幸福的秘密就在于，既要看到世上的奇珍异宝，又要永远不忘记勺里的那两滴油。’”</p>
</blockquote>
</blockquote>
<p>◆  下部</p>
<p>2024/3/9 发表想法
让我想到了前面男孩遇到的卖爆米花的老人，他跟水晶店老板一样的有自己的天命，但都没有实现</p>
<blockquote>
<blockquote>
<p>“麦加比金字塔还要远得多。年轻的时候，我选择了先积攒一点钱，开这个商店。当时我想，等成了富翁，就去麦加朝圣。我赚到了钱，但却不能把店铺交给别人照管，前去朝圣，因为水晶是易碎的。与此同时，我看到许多人从我的店前经过，朝着麦加的方向走去。有些朝圣者是富翁，他们有仆人和骆驼随行，但是，大多数朝圣者比我当年还穷。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“因为麦加是支撑我活下去的希望，使我能够忍受平庸的岁月，忍受橱柜里那些不会说话的水晶，忍受那间糟糕透顶的餐厅里的午饭和晚饭。我害怕实现我的梦想，实现之后，我就没有活下去的动力了。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>就在这一天，水晶店老板同意做陈列架。并非所有的人都以一样的方式对待梦想。</p>
</blockquote>
</blockquote>
<p>2024/3/9 发表想法
安于现状，消磨了内心的棱角和想改变的勇气，剩下的就只是过着每天重复的生活了</p>
<blockquote>
<blockquote>
<p>我已经习惯了这种生活。在你来这儿之前，我曾认为我在同一个地方待的时间太长了。而这期间，我所有的朋友都有了变化，有破产的，也有发财的。这一切使我感到非常难过。现在我明白了，根本不必伤心，店铺的规模正如我期待的那样，恰到好处。我不想再变了，因为我不知道该怎么变。我对自己的一切已经非常习惯了。”</p>
</blockquote>
</blockquote>
<p>2024/3/9 发表想法
果然水晶店老板和卖爆米花🍿的小贩遥相呼应，男孩👦🏻也知道，改变不了别人，他们都有天命（梦想），但是安于现状太久了，早已习惯现在的生活，也不想改变，让他们重新开始实现他们的梦想，只会徒增他们的烦恼。我想，男孩替他们感到可惜，坚定了想要实现自己梦想的决心吧</p>
<blockquote>
<blockquote>
<p>店主又说：“你一度成为我的福音。而今天我明白了一个道理，任何不被接纳的福音，都会变成诅咒。我对生活没有更多的要求。而你正迫使我盯着从未见过的财富和前景。现在，我知道了这些财富和前景，也知道了我完全有可能拥有它们。可是我的感觉却比以前糟糕了。因为我知道自己可以拥有这一切，却不愿拥有它们。”
幸亏当初我没对那卖爆米花的说什么，男孩心想。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>店主又说：“你一度成为我的福音。而今天我明白了一个道理，任何不被接纳的福音，都会变成诅咒。我对生活没有更多的要求。而你正迫使我盯着从未见过的财富和前景。现在，我知道了这些财富和前景，也知道了我完全有可能拥有它们。可是我的感觉却比以前糟糕了。因为我知道自己可以拥有这一切，却不愿拥有它们。”
幸亏当初我没对那卖爆米花的说什么，男孩心想。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>生活的河流是无法阻挡的。</p>
</blockquote>
</blockquote>
<p>2024/3/9 发表想法
第三次出现这句话了，看来对男孩影响很大，也许是他的信念吧</p>
<blockquote>
<blockquote>
<p>“当你想要某种东西时，整个宇宙会合力助你实现愿望。”老迈的撒冷王这样说过。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>但是，我正要奔赴我熟悉的田野，重新去放牧羊群。他不再为自己的决定感到高兴。他为实现梦想整整干了一年，而这个梦想正一分一秒地失去其重要意义。也许那并不是他的梦想。</p>
</blockquote>
</blockquote>
<p>2024/3/9 发表想法
开始审视自己，安于舒适区，过自己熟悉习惯的生活，跳出舒适区，充满不确定性，有风险，但还是选择了后者，因为他想云游四方，看看外面的世界，更何况现在条件成熟了</p>
<blockquote>
<blockquote>
<p>我知道为什么想回去牧羊。我已经熟悉了羊群，它们不会让我费很大力气，并且能讨我喜欢。我不知道沙漠能不能让我喜欢，但是沙漠里却埋藏着我的财宝。如果找不到那些财宝，我随时可以返回家园。但是生活突然给了我足够的金钱，而且又有足够的时间，为什么不去寻宝呢？</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我知道为什么想回去牧羊。我已经熟悉了羊群，它们不会让我费很大力气，并且能讨我喜欢。我不知道沙漠能不能让我喜欢，但是沙漠里却埋藏着我的财宝。如果找不到那些财宝，我随时可以返回家园。但是生活突然给了我足够的金钱，而且又有足够的时间，为什么不去寻宝呢？</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“我总是在那些为实现天命而奋斗的人身边。”撒冷王说过。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“生活中的一切都是预兆。”</p>
</blockquote>
</blockquote>
<p>2024/3/10 发表想法
冥冥之中，好像命中注定一样</p>
<blockquote>
<blockquote>
<p>就是这神秘的纽带，使男孩成了牧羊人，让他重复做同一个梦，并到达了非洲附近的一座城市，接着让他在那个城市的广场上遇见撒冷王，后来他的钱被偷，这使他结识了一位水晶店的老板，而后……</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一个人越是接近梦想，天命就越成为他生存下去的真正理由，男孩心想。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>谁也不必担心未知的事情，因为谁都能得到他期望和需要的一切。</p>
</blockquote>
</blockquote>
<p>2024/3/12 发表想法
想起马尔克斯在《百年孤独》说的一句话：“生活不是我们活过的日子，而是我们记住的日子，我们为了讲述而在记忆中重现的日子。”是的，现在的每一刻都是生活重要的一部分，希望我们都是如此的热爱，有时候把浮在生活上的灰，擦一擦，也许会露出诗</p>
<blockquote>
<blockquote>
<p>“因为我既不生活在过去，也不生活在未来，我只有现在，它才是我感兴趣的。如果你能永远停留在现在，那你将是最幸福的人。你会发现沙漠里有生命，发现天空中有星星，发现士兵们打仗是因为战争是人类生活的一部分。生活就是一个节日，是一场盛大的庆典。因为生活永远是，也仅仅是我们现在经历的这一刻。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“因为我既不生活在过去，也不生活在未来，我只有现在，它才是我感兴趣的。如果你能永远停留在现在，那你将是最幸福的人。你会发现沙漠里有生命，发现天空中有星星，发现士兵们打仗是因为战争是人类生活的一部分。生活就是一个节日，是一场盛大的庆典。因为生活永远是，也仅仅是我们现在经历的这一刻。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>那是一只唤醒爱情的手，一只为那些在天底下工作、休息、寻找宝藏的人们造就相同灵魂的手。假如没有这一切，人类的所有梦想都将失去意义。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“作为沙漠中的女人，我为此而骄傲。希望我的男人像移动沙丘的风一样自由。也希望能在云彩中、动物身上和泉水里看到我的男人。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>当你恋爱的时候，万物都变得更有意义，他想。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>无论用什么方式，都可以找到与所经历的事情之间的某种联系。实际上，并不是事物本身在揭示什么，而是观察事物的人发现了探究世界之魂的方法。</p>
</blockquote>
</blockquote>
<p>2024/3/30 发表想法
人全靠对未来的希望活着吗？每个人理解不一样吧，对，也不一定全对。有希望的时候，可以让我们活得更踏实和有追求。没希望的时候，也要创造希望，不要轻易放弃自己</p>
<blockquote>
<blockquote>
<p>有一天，一位最年长的（也是最令人敬畏的）占卜师问赶驼人，为什么对预知未来那么感兴趣。
“为了采取行动。”赶驼人回答，“避免我不喜欢的事发生。”
“那么，它就不再是你的未来了。”占卜师说道。
“我想知道未来，一部分原因是想为将要发生的事作准备。”
“如果是好事，那将是一个意外的惊喜；如果是坏事，在它发生之前，你就要受很多苦。”
“好吧，之所以想知道未来，因为我是个人。”赶驼人对占卜师说，“而人全靠对未来的希望活着。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>今天死还是明天死全都一样。每一天的开始，都是为了让人活着或者辞世。一切都取决于一个词——“马克图布”。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“我必须试一试你的勇气。”神秘骑士说道，“对于寻求宇宙语言的人，勇气是最重要的素质。”</p>
</blockquote>
</blockquote>
<p>2024/3/30 发表想法
所以我们要热爱生活，但生活对我们也是一种考验，我们会遇到各种各样的困难，经历过了，就会成长，被打败了就倒下了是吗</p>
<blockquote>
<blockquote>
<p>你必须热爱沙漠，但是绝不要完全相信沙漠。因为沙漠对所有人都是一个考验：考验你迈出的每一步，杀死心猿意马的人。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>你必须热爱沙漠，但是绝不要完全相信沙漠。因为沙漠对所有人都是一个考验：考验你迈出的每一步，杀死心猿意马的人。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>那我呢？”
“当你想要某种东西时，整个宇宙会合力助你实现愿望。”炼金术士说道，他重复的是老撒冷王的话。男孩明白了，另一个人出现在他人生的路途上，来引导他达成自己的天命。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“入口的东西并不邪恶。”炼金术士说，“邪恶的是从口里出来的东西。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>但是不要忘记，你的心到哪儿，你的宝藏就在哪儿。你必须找到你的宝藏，否则你在途中发现的一切便全都失去了意义。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“你将永远不明白，爱情从来不会阻止一个男人去追寻天命。如果会阻止，一定因为那不是真正的爱情，不是用宇宙语言表达的爱情。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“要想学到本事，只有一种方式，”炼金术士回答说，“那就是行动。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>他们一门心思追求黄金，寻求天命中的财宝，却不愿履行自己的天命。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>上帝创造世界，是为了让人们通过可见的事物理解他的教诲，以及他智慧的神奇之处。我把这称之为行动。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“怎样才能潜心于沙漠之中呢？”
“倾听你的心声。心了解所有事物，因为心来自世界之魂，并且总有一天会返回那里。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>这很好。”炼金术士回答，“这证明你的心很活跃。为一个梦想而失去已经到手的一切，有点担心也情有可原。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“你告诉它，害怕遭受痛苦比遭受痛苦本身还要糟糕。还要告诉它，没有一颗心在追求梦想的时候感到痛苦，因为追寻过程的每一刻，都与上帝和永恒同在。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>宇宙要耗费亿万年时间才能创造一粒沙子。“世上每个人都有一份等待他去发掘的宝藏。”他的心说道，“而我们心，往往很少提及那些财宝，因为人们已不再想要找到它们。</p>
</blockquote>
</blockquote>
<p>2024/4/13 发表想法
吾之所向，虽万般险阻亦不可</p>
<blockquote>
<blockquote>
<p>在实现一个梦想之前，世界之魂永远都会对寻梦者途中所学到的一切进行检验。这种做法并无恶意，仅仅是为了不让我们远离梦想，并让我们获得寻梦过程中学到的经验教训。这是一个大多数人可能会放弃寻梦的时刻。用沙漠的语言，我们称之为‘渴死在椰枣树出现在地平线上的时刻’。每个人的寻梦过程都是以‘新手的运气’为开端，又总是以‘对远征者的考验’收尾。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在实现一个梦想之前，世界之魂永远都会对寻梦者途中所学到的一切进行检验。这种做法并无恶意，仅仅是为了不让我们远离梦想，并让我们获得寻梦过程中学到的经验教训。这是一个大多数人可能会放弃寻梦的时刻。用沙漠的语言，我们称之为‘渴死在椰枣树出现在地平线上的时刻’。每个人的寻梦过程都是以‘新手的运气’为开端，又总是以‘对远征者的考验’收尾。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>那谚语说，夜色之浓，莫过于黎明前的黑暗。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“当巨大的财富就在我们眼前时，我们却从来都觉察不到。你知道为什么吗？因为人们不相信财宝存在。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>心说话的时候，是为了激励男孩，赋予他力量，因为有时候男孩觉得日复一日的可怕寂静令人厌倦。心第一次向他指出了他具有的优秀品质：比如放弃羊群、追寻天命的勇气，在水晶店打工的热情。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“既然我们很快就要分手了，请您教给我炼金术吧。”男孩说。
“你已经会了。那就是深入世界之魂，去发现它为我们保留的财宝。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“追寻天命的人，知道自己需要掌握的一切。只有一样东西令梦想无法成真，那就是担心失败。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>所有发生过一次的事，可能永远不会再发生；但所有发生过两次的事，肯定还会发生第三次。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“做什么并不重要，世上的每个人都在历史中扮演着重要角色，但通常懵然不知。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果你必死无疑，钱对你又有什么用处呢？钱能用来使人免于一死，这种事并不多见</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>男孩吃力地爬起来，再次朝金字塔望去。金字塔在冲他微笑呢，而他也对金字塔报以微笑，心中无比幸福。
他已经找到财宝了。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2024/muyangshaonianqihuanzhilu.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[React 学习参考]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/react/react-learning-reference.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/react/react-learning-reference.html</guid>
            <pubDate>Sun, 07 Apr 2024 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="react-学习参考" tabindex="-1">React 学习参考 <a class="header-anchor" href="#react-学习参考" aria-label="Permalink to &quot;React 学习参考&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-label="Permalink to &quot;基础知识&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://react.docschina.org/" target="_blank" rel="noreferrer">React – 用于构建用户界面的 JavaScript 库</a></li>
<li><a href="http://www.uml.org.cn/AJAX/202103042.asp" target="_blank" rel="noreferrer">Preact简介-web开发</a></li>
<li><a href="https://react.iamkasong.com/" target="_blank" rel="noreferrer">React技术揭秘</a></li>
<li><a href="https://xiaochen1024.com/" target="_blank" rel="noreferrer">全栈视频教程</a></li>
</ul>
<p>极客时间对应学习课程：</p>
<ul>
<li><a href="https://time.geekbang.org/column/intro/100079901?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">React Hooks 核心原理与实战_王沛_前端_React Hooks_函数组件_面试_实战_原理_开发-极客时间</a></li>
<li><a href="https://time.geekbang.org/column/intro/100119601?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">现代React Web开发实战_前端_React Web开发_Hooks_组件函数_看板应用-极客时间</a></li>
<li><a href="https://time.geekbang.org/course/intro/100009301?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">React实战进阶45讲_React_前端框架-极客时间</a></li>
<li><a href="https://time.geekbang.org/column/intro/100110101?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">React Native 新架构实战课_RN_React_React Native_蒋宏伟_宏伟_跨端_Flutter_RN 新架构_前端_iOS_Android_新架构-极客时间</a></li>
</ul>
<p>掘金小册：</p>
<ul>
<li><a href="https://juejin.cn/book/6844733754326401038?enter_from=course_center&amp;utm_source=course_center" target="_blank" rel="noreferrer">React 实战：设计模式和最佳实践</a></li>
<li><a href="https://juejin.cn/book/6844733816460804104?enter_from=course_center&amp;utm_source=course_center" target="_blank" rel="noreferrer">React Hooks 与 Immutable 数据流实战</a></li>
<li><a href="https://juejin.cn/book/6945998773818490884?enter_from=course_center&amp;utm_source=course_center" target="_blank" rel="noreferrer">React 进阶实践指南</a></li>
<li><a href="https://juejin.cn/book/7311970169411567626?utm_source=course_list" target="_blank" rel="noreferrer">深入浅出 React 状态管理库</a></li>
<li><a href="https://juejin.cn/book/7294082310658326565?utm_source=course_list" target="_blank" rel="noreferrer"> React 通关秘籍</a></li>
<li><a href="https://juejin.cn/book/7230622711905517605?utm_source=course_list" target="_blank" rel="noreferrer">玩转 React Hooks</a></li>
<li><a href="https://juejin.cn/book/6966551262766563328?utm_source=course_list" target="_blank" rel="noreferrer">Node + React 实战：从 0 到 1 实现记账本</a></li>
<li>React 组合式开发实践：打造企业管理系统五大核心模块（本地文件）</li>
<li><a href="https://www.yuque.com/zhuzhu-lr3z5/magic_pinkpiggy/mde9pwmde774gvlx?view=doc_embed" target="_blank" rel="noreferrer">前端文章</a>——猪猪的学习资料</li>
<li><a href="https://www.yuque.com/zhuzhu-lr3z5/magic_pinkpiggy/pz6lott5getzuvvz?view=doc_embed" target="_blank" rel="noreferrer">01-React基础语法</a>——猪猪的学习笔记</li>
<li><a href="https://mp.weixin.qq.com/s/Ol6ry2kePXx7D-xTfgHoqw" target="_blank" rel="noreferrer">10个优秀的Vue、React源码解析开源项目！</a></li>
<li><a href="https://juejin.cn/post/7268844150233219107?utm_source=gold_browser_extension" target="_blank" rel="noreferrer">只会Vue的我，用两天学会了react，这个方法您也可以 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6844903709927800846" target="_blank" rel="noreferrer">30分钟精通React Hooks - 掘金</a></li>
</ul>
<p>useEffect 学习指南：</p>
<ul>
<li><a href="https://github.com/gaearon/overreacted.io/blob/archive/src/pages/a-complete-guide-to-useeffect/index.zh-hans.md" target="_blank" rel="noreferrer">overreacted.io/src/pages/a-complete-guide-to-useeffect/index.zh-hans.md at archive · gaearon/overreacted.io</a></li>
<li><a href="https://www.freecodecamp.org/chinese/news/best-practices-for-react/" target="_blank" rel="noreferrer">React 最佳实践--如何写出更好的 React 代码（2022 年版）</a></li>
<li><a href="https://prinsss.github.io/react-unstable-nested-components/" target="_blank" rel="noreferrer">真的不可以在 React 组件内部嵌套定义子组件吗？</a></li>
<li><a href="https://juejin.cn/post/7251802404877893689" target="_blank" rel="noreferrer">「好文翻译」为什么你可以删除 90% 的 useMemo 和 useCallback ？ - 掘金</a></li>
<li><a href="https://juejin.cn/post/7298160530292457484" target="_blank" rel="noreferrer">译文：React 常见 9 个小陷阱 - 掘金</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 48 本《我想偶尔停一会儿》]]></title>
            <link>https://super456.github.io/posts/read-book/2024/woxiangouertingyihuier.html</link>
            <guid>https://super456.github.io/posts/read-book/2024/woxiangouertingyihuier.html</guid>
            <pubDate>Sat, 06 Apr 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[《我想偶尔停一会儿》是一部治愈系绘本故事集，作者由宾用画笔记录了很多日常的故事和生活的细节。这本书让我们看到了很多城市青年的缩影，他从一个刚走出校园的穷小子慢慢进化成职场精英，然后成为数万网友追捧的绘本作家；他身边有温暖的父母、仗义的老友、幽默的同事，以及，粘人的猫咪；他偶尔摆烂，偶尔精致生活，他经历过失恋的痛苦，也懂得了如何向风中告别...]]></description>
            <content:encoded><![CDATA[<h1 id="第-48-本《我想偶尔停一会儿》" tabindex="-1">第 48 本《我想偶尔停一会儿》 <a class="header-anchor" href="#第-48-本《我想偶尔停一会儿》" aria-label="Permalink to &quot;第 48 本《我想偶尔停一会儿》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>《我想偶尔停一会儿》是一部治愈系绘本故事集，作者由宾用画笔记录了很多日常的故事和生活的细节。
这本书让我们看到了很多城市青年的缩影，他从一个刚走出校园的穷小子慢慢进化成职场精英，然后成为数万网友追捧的绘本作家；他身边有温暖的父母、仗义的老友、幽默的同事，以及，粘人的猫咪；他偶尔摆烂，偶尔精致生活，他经历过失恋的痛苦，也懂得了如何向风中告别……
这些生活里看似最平凡不过的故事和经历，却是我们每一个人在努力生活的证明。由宾用他的画笔记录着属于我们每一个人的日常，酸甜苦辣尽在其中，让大家都能在作品中看到自己。</p>
<p>★ 作者说：“这本书里，画的都是一些日常琐碎的记录。我很珍惜这些灵感碎片，并很庆幸自己把它们捕捉到了。”</p>
<p>☆ 如果你在生活的路上跑累了，不妨偶尔停一会儿，或者画一画，这是由宾积蓄能量的新方式，也是他正在享受的生活的闲暇。这样的日常，同时属于你和我。</p>
<p>★ 64个治愈故事，336页诚意制作，全彩设计，90克艺术纸印刷，裸背锁线装帧，随书附赠猫咪和小玩意儿贴纸各一张。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《我想偶尔停一会儿》
由宾
1个笔记</p>
<p>◆  点评</p>
<p>2024/4/6 认为好看
有被作者感动到，忙忙碌碌，柴米油盐，无论工作还是生活，太累了的话，就停一下吧。我们一直想要成为自己理想中的样子，却一直活成自己讨厌的样子。有时候，停下来看看，休息一会，多欣赏路边的风景，做自己喜欢的事，没有那么多的烦恼。原来我看不懂的不是这个世界，而是自己，你想活出怎样的人生？答案在心里，不虚此生，请尽兴而行😁</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2024/woxiangouertingyihuier.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <link>https://super456.github.io/posts/growth-record/platform/</link>
            <guid>https://super456.github.io/posts/growth-record/platform/</guid>
            <pubDate>Wed, 06 Mar 2024 16:15:51 GMT</pubDate>
        </item>
        <item>
            <link>https://super456.github.io/posts/growth-record/base/javascript/</link>
            <guid>https://super456.github.io/posts/growth-record/base/javascript/</guid>
            <pubDate>Wed, 06 Mar 2024 16:15:51 GMT</pubDate>
        </item>
        <item>
            <link>https://super456.github.io/posts/growth-record/computer/algorithm/</link>
            <guid>https://super456.github.io/posts/growth-record/computer/algorithm/</guid>
            <pubDate>Wed, 06 Mar 2024 16:15:51 GMT</pubDate>
        </item>
        <item>
            <link>https://super456.github.io/posts/growth-record/computer/browser/</link>
            <guid>https://super456.github.io/posts/growth-record/computer/browser/</guid>
            <pubDate>Wed, 06 Mar 2024 16:15:51 GMT</pubDate>
        </item>
        <item>
            <link>https://super456.github.io/posts/growth-record/computer/network/</link>
            <guid>https://super456.github.io/posts/growth-record/computer/network/</guid>
            <pubDate>Wed, 06 Mar 2024 16:15:51 GMT</pubDate>
        </item>
        <item>
            <link>https://super456.github.io/posts/growth-record/engineering/performance/</link>
            <guid>https://super456.github.io/posts/growth-record/engineering/performance/</guid>
            <pubDate>Wed, 06 Mar 2024 16:15:51 GMT</pubDate>
        </item>
        <item>
            <link>https://super456.github.io/posts/growth-record/engineering/tools/</link>
            <guid>https://super456.github.io/posts/growth-record/engineering/tools/</guid>
            <pubDate>Wed, 06 Mar 2024 16:15:51 GMT</pubDate>
        </item>
        <item>
            <link>https://super456.github.io/posts/growth-record/frame/node/</link>
            <guid>https://super456.github.io/posts/growth-record/frame/node/</guid>
            <pubDate>Wed, 06 Mar 2024 16:15:51 GMT</pubDate>
        </item>
        <item>
            <link>https://super456.github.io/posts/growth-record/frame/react/</link>
            <guid>https://super456.github.io/posts/growth-record/frame/react/</guid>
            <pubDate>Wed, 06 Mar 2024 16:15:51 GMT</pubDate>
        </item>
        <item>
            <link>https://super456.github.io/posts/growth-record/frame/vue/</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/</guid>
            <pubDate>Wed, 06 Mar 2024 16:15:51 GMT</pubDate>
        </item>
        <item>
            <link>https://super456.github.io/posts/growth-record/other/design/</link>
            <guid>https://super456.github.io/posts/growth-record/other/design/</guid>
            <pubDate>Wed, 06 Mar 2024 16:15:51 GMT</pubDate>
        </item>
        <item>
            <link>https://super456.github.io/posts/growth-record/other/productBusiness/</link>
            <guid>https://super456.github.io/posts/growth-record/other/productBusiness/</guid>
            <pubDate>Wed, 06 Mar 2024 16:15:51 GMT</pubDate>
        </item>
        <item>
            <link>https://super456.github.io/posts/growth-record/platform/app/</link>
            <guid>https://super456.github.io/posts/growth-record/platform/app/</guid>
            <pubDate>Wed, 06 Mar 2024 16:15:51 GMT</pubDate>
        </item>
        <item>
            <link>https://super456.github.io/posts/growth-record/platform/applet/</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/</guid>
            <pubDate>Wed, 06 Mar 2024 16:15:51 GMT</pubDate>
        </item>
        <item>
            <link>https://super456.github.io/posts/growth-record/platform/h5/</link>
            <guid>https://super456.github.io/posts/growth-record/platform/h5/</guid>
            <pubDate>Wed, 06 Mar 2024 16:15:51 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[第 45 本《不再是一个人吃饭啦》]]></title>
            <link>https://super456.github.io/posts/read-book/2024/buzaishiyigerenchifanla.html</link>
            <guid>https://super456.github.io/posts/read-book/2024/buzaishiyigerenchifanla.html</guid>
            <pubDate>Sat, 02 Mar 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[全家吃饱饱万岁！！ 高木老师41岁的时候结婚啦！开始了和丈夫一起的夫妇饮食。两个人会一起逛超市，一起在厨房忙忙碌碌，美好而又惬意。 后来高木老师怀孕啦！丈夫仿佛一瞬间开启了厨房技能外挂！ 42岁时生下了女儿，父母和孩子三个人的生活终于开始了！ 这是一本充满“美味”的漫画书，记录了从高木与先生两人到一家三口的美食生活变化，一家人探寻、烹饪美食的过程温馨有趣又带一丝感动，让人在美食生活中发现乐趣，找到真切的幸福，给读者带去陪伴与美食的治愈力量。]]></description>
            <content:encoded><![CDATA[<h1 id="第-45-本《不再是一个人吃饭啦》" tabindex="-1">第 45 本《不再是一个人吃饭啦》 <a class="header-anchor" href="#第-45-本《不再是一个人吃饭啦》" aria-label="Permalink to &quot;第 45 本《不再是一个人吃饭啦》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>全家吃饱饱万岁！！
高木老师41岁的时候结婚啦！开始了和丈夫一起的夫妇饮食。两个人会一起逛超市，一起在厨房忙忙碌碌，美好而又惬意。
后来高木老师怀孕啦！丈夫仿佛一瞬间开启了厨房技能外挂！
42岁时生下了女儿，父母和孩子三个人的生活终于开始了！
这是一本充满“美味”的漫画书，记录了从高木与先生两人到一家三口的美食生活变化，一家人探寻、烹饪美食的过程温馨有趣又带一丝感动，让人在美食生活中发现乐趣，找到真切的幸福，给读者带去陪伴与美食的治愈力量。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《不再是一个人吃饭啦》
高木直子
1个笔记</p>
<p>◆  点评</p>
<p>2024/3/2 认为好看
看到了作者40岁谈男朋友到42岁生下女儿👧🏻，一家人👪甜甜美美，充满陪伴和自己做美食的幸福感不言而喻呀。感受到另一半对自己的，对这个家庭的付出是多么重要，特别对于一个男人👨🏻来说，需要更努力的做好经营这个家庭呢</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2024/buzaishiyigerenchifanla.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 46 本《悉达多》]]></title>
            <link>https://super456.github.io/posts/read-book/2024/xidaduo.html</link>
            <guid>https://super456.github.io/posts/read-book/2024/xidaduo.html</guid>
            <pubDate>Sat, 02 Mar 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[《悉达多》并非是佛陀的故事，它讲述了一个人的一生，千万寻常人亦会经历的一生。 意气风发的少年郎，常认为自己是被命运选中的人。抛下过去，随了跌跌撞撞的步伐，找寻心中的声音，追逐名利，经历友情，品尝爱情。不同的是，悉达多一生追求的是生命的圆融统一，看似宏大，确是每个人无法回 避的问题。 黑塞的语言是充满诗性的，正如本书副题“一首印度的诗”，因不得而知的原因，此副题在前人所出版本中都被回避了。为了尽可能表现黑塞的诗意，我们选择从德文直译，尽管我们的译文不能完全实现这种诗意，但其诗的本性与精神显而易见。 本书地位在前人的版本中已被反复强调——亨利·米勒的最爱；影响了包括电台司令在内的许多名人雅士；在六十年代美国掀起过阅读黑塞的热潮，大学生们人手一册等等。 但如书中成为摆渡人的悉达多所述，智慧无法分享，它可以被发现，被体验。 所以倘若你碰巧遇到了这本小书，请细细品味其中的文字。 愿你在读了悉达多的故事后，也能有所感悟，并开始体验属于自己的人生。]]></description>
            <content:encoded><![CDATA[<h1 id="第-46-本《悉达多》" tabindex="-1">第 46 本《悉达多》 <a class="header-anchor" href="#第-46-本《悉达多》" aria-label="Permalink to &quot;第 46 本《悉达多》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>《悉达多》并非是佛陀的故事，它讲述了一个人的一生，千万寻常人亦会经历的一生。
意气风发的少年郎，常认为自己是被命运选中的人。抛下过去，随了跌跌撞撞的步伐，找寻心中的声音，追逐名利，经历友情，品尝爱情。不同的是，悉达多一生追求的是生命的圆融统一，看似宏大，确是每个人无法回 避的问题。</p>
<p>黑塞的语言是充满诗性的，正如本书副题“一首印度的诗”，因不得而知的原因，此副题在前人所出版本中都被回避了。为了尽可能表现黑塞的诗意，我们选择从德文直译，尽管我们的译文不能完全实现这种诗意，但其诗的本性与精神显而易见。</p>
<p>本书地位在前人的版本中已被反复强调——亨利·米勒的最爱；影响了包括电台司令在内的许多名人雅士；在六十年代美国掀起过阅读黑塞的热潮，大学生们人手一册等等。
但如书中成为摆渡人的悉达多所述，智慧无法分享，它可以被发现，被体验。
所以倘若你碰巧遇到了这本小书，请细细品味其中的文字。
愿你在读了悉达多的故事后，也能有所感悟，并开始体验属于自己的人生。</p>
<h2 id="感悟" tabindex="-1">感悟 <a class="header-anchor" href="#感悟" aria-label="Permalink to &quot;感悟&quot;">&ZeroWidthSpace;</a></h2>
<p>《悉达多》
赫尔曼·黑塞
38个笔记</p>
<p>◆  点评</p>
<p>2024/3/3 认为好看
读完感觉对自我是很有触动的一本书，一开始以为是偏佛教哲学理论的一本书，但感受却不一样，更多的是对自我的努力认识到探究内心世界及反思行动的一本书。但可能因为自身原因书中很多观念没有悟懂，需要时间和阅历的消化吸收吧，期待再次读这本书，也就是所谓的“轮回”，可能会有更大的收获呢
这本书主要讲的是主人公悉达多，一个婆罗门之子，本来是典型的贵族青年，为了寻找内心的“阿特慢”（一种称之为心灵或内在自我圆融统一的境界），成为沙门，走上寻找自我之路，经历过出世又入世再出世和人生几个阶段（求知、苦行、迷失、平和），多次觉醒后，终于和心中的那个“乔达摩”相遇和解，成为了一直苦苦追寻的自己，找到智慧与和平吧</p>
<p>所以说，悉达多为了自己一生的思考与追寻，在少年时期违背父亲的意愿，毅然而然从婆罗门之子到沙门（求知阶段）；青年时期悉达多在沙门 3 年多的修行，培养了他斋戒、等待、思考（苦行阶段），在世尊佛陀乔达摩的交谈后并未选择皈依门下，原因是“知识可以分享，智慧无法分享，它可以被发现，被体验。智慧令人安详，智慧创造奇迹，但人们无法言说和传授智慧。这是我年轻时发现，并离开老师们的原因”；中年时期悉达多因为喜欢上迦摩罗堕入尘世，忘记修行，沉迷酒色犬马之中（迷失阶段），还好最终幡然醒悟，继续追寻自我；晚年时期成为摆渡人，后面经历了情人去世、儿子离开、船夫劝解、河水悟道，悉达多终于真正觉悟（平和阶段），成为了那样“这微笑安详、纯洁、微妙，或慈悲，或嘲弄，充满智慧，和乔达摩的微笑一致”的自己。悉达多一路在追寻，一路也都在告别，从一开始告别双亲，告别朋友和老师，告别佛陀，告别挚爱，告别旧我。这也许就是告别后的重生吧。正如本书译者所说：“这些残酷的告别或许是人生真相，或许是获得神性自我，获得对万物、对人、对世界更为广大的宽容与爱的必经之路。我看见佛陀。他光明圆满，神圣温柔。”</p>
<p>总之，让我感受最深的就是“在我们人生的进度条上都会经历一段迷茫又慌乱的时期，认清是一个过程，或早或晚，认清所处的世界不难，认清内心的自己才是一辈子的课题吧。”和“你的心灵就是整个世界，然而，真正的自我究竟在哪里？”所以，我们是否应该努力认识自己，探求自我内心世界的快感呢？
当然，也可以像悉达多说的那样：“我曾质疑很多东西，可现在我只需要用爱来看待世间一切事物。”</p>
<p>◆  第一部</p>
<blockquote>
<blockquote>
<p>“禅定是什么？什么是脱离肉体？斋戒是什么？什么是屏息敛气？那不过是逃避‘我’，是暂时从‘我’的折磨中逃出来，是对生命的虚无和痛苦的暂时麻醉。这种逃避、麻醉，即便是驱牛者也能在客栈中找到。他只消喝上几杯米酒或发酵的椰子奶就能忘掉自己。他将感受不到生活的痛苦，他被暂时麻醉，在米酒的杯盏间昏沉入睡</p>
</blockquote>
</blockquote>
<p>2024/3/2 发表想法
也许这就是修行和悟道同样重要，悟道是修行的结果。就好像我们常说懂得了很多道理，依然过不好这一生，实际上你根本没有懂这个道理（缺少修行） 或者只想不做是前进的最大障碍吧</p>
<blockquote>
<blockquote>
<p>悉达多不是驱牛车夫，沙门也不是酒鬼。酗酒者可以被麻醉，他可以获得短暂的逃避和休憩，但当他从幻觉中醒来时会发现一切依旧。他没有成为智者，没有积累知识，也没有进入更高的境界。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>但是你这勤勉之人，要警惕多谋善断及口舌之辩。无论辩辞美或丑，聪慧或愚蠢，总有人赞许，有人鄙夷。你从我处所听之法义并非我之辩辞。它的宗旨并非为求知好学之人阐释世界。它另有他图；它的宗旨乃是济拔苦难。这就是乔达摩的法义，别无其他。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>佛陀缓步离去。他的目光和神秘的微笑永远镌刻在悉达多的记忆中。“这般目光和微笑我从未见过；如此行走、端坐之人我从未见过。”他想，“惟愿我也有这般目光及微笑，能如此行走及端坐。如此自由、神圣、隐晦，又如此坦率。如孩童，又饱含秘密。只有潜入自己最深处的人才能有这般诚挚的目光和步伐。无疑，我也将潜入自己之最深处探寻。”</p>
</blockquote>
</blockquote>
<p>2024/3/2 发表想法
他开始寻找内心的自我了</p>
<blockquote>
<blockquote>
<p>“佛陀劫掠了我。”悉达多想，“他劫掠了我，但他馈赠得更多。他夺走了我的朋友，那曾经信奉我，如今信奉他的朋友；那曾经是我的影子，如今是乔达摩的影子的朋友。而他所馈赠的，则是悉达多，是我的自我。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“佛陀劫掠了我。”悉达多想，“他劫掠了我，但他馈赠得更多。他夺走了我的朋友，那曾经信奉我，如今信奉他的朋友；那曾经是我的影子，如今是乔达摩的影子的朋友。而他所馈赠的，则是悉达多，是我的自我。”</p>
</blockquote>
</blockquote>
<p>2024/3/2 发表想法
也许这就是“我思故我在”。我们要用一生去诠释自己、完善自己、解读自己、思考自己吧</p>
<blockquote>
<blockquote>
<p>这位漫步的思考者自问：“你原先打算从法义里，从师父处学到什么？你学了很多，却无法真正学到的又是什么？”他最终发现：“答案是‘我’。我要学的即是‘我’的意义及本质。‘我’，是我要摆脱、要制胜的东西。‘我’，却是我无法制胜，只能欺罔、逃遁，只能隐藏的东西。当真！世上再没什么别的，像我的‘我’这样让我费解。是‘我’，这个谜，让我活着，让我有别于他人，让我成为悉达多！在世上，我最一无所知的莫过于‘我’，莫过于悉达多！”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>这位漫步的思考者自问：“你原先打算从法义里，从师父处学到什么？你学了很多，却无法真正学到的又是什么？”他最终发现：“答案是‘我’。我要学的即是‘我’的意义及本质。‘我’，是我要摆脱、要制胜的东西。‘我’，却是我无法制胜，只能欺罔、逃遁，只能隐藏的东西。当真！世上再没什么别的，像我的‘我’这样让我费解。是‘我’，这个谜，让我活着，让我有别于他人，让我成为悉达多！在世上，我最一无所知的莫过于‘我’，莫过于悉达多！”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我不再苦修。我要拜自己为师。我要认识自己，认识神秘的悉达多。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>意义和本质绝非隐藏在事物背后，它们就在事物当中，在一切事物当中。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>他突然清楚：他，一个已切实苏醒和初生之人，必须彻底从头开始生活。在这个清晨，在他离开祗树给孤独园，离开世尊佛陀的清晨，他已完全觉醒。他已走上自我之路</p>
</blockquote>
</blockquote>
<p>◆  第二部</p>
<p>2024/3/2 发表想法
以前他对这个世界不以为意，现在他感觉到自己的渺小，开始审视这个世界和自己</p>
<blockquote>
<blockquote>
<p>所有这自古有之的一切，悉达多一直熟视无睹。他从不在场。而现在，他归属其中。流光魅影在他眼中闪耀，星辰月亮在他心中运行。
在路上</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>所有这自古有之的一切，悉达多一直熟视无睹。他从不在场。而现在，他归属其中。流光魅影在他眼中闪耀，星辰月亮在他心中运行。</p>
</blockquote>
</blockquote>
<p>2024/3/2 发表想法
就好像所谓的成功人士给你讲了很多大道理和方法，不管多么有用，始终不是自己的，这也是因为成功是不能复制的。只有亲身经历，才能刻骨铭心，对于自己来说，这才是最有价值的东西</p>
<blockquote>
<blockquote>
<p>他曾对乔达摩说：佛陀的法义或许并非其最宝贵最神秘的东西。佛陀的彻悟纪事才是无法言说、不可传授的珍宝——这恰恰是他现在要去经验的，他现在才刚刚开始去经验的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>他曾对乔达摩说：佛陀的法义或许并非其最宝贵最神秘的东西。佛陀的彻悟纪事才是无法言说、不可传授的珍宝——这恰恰是他现在要去经验的，他现在才刚刚开始去经验的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果一个人扼杀了感官意义上的偶然之我，却喂养思想意义上博学多能的偶然之我，他是不会寻得自我的。两者，思想和感官，均为美的事物；两者背后均隐藏终极意义；两者都值得倾听，值得参与；两者均不容蔑视亦不必高估。自两者中均可听到内在的秘密之声。</p>
</blockquote>
</blockquote>
<p>2024/3/2 发表想法
人有两个自我，外在的自我可以享受七情六欲，内在的自我可以克制七情六欲吧</p>
<blockquote>
<blockquote>
<p>悉达多感到自己的渴望和涌动的性欲。他至今尚未碰过女人。在准备伸手去握住妇人时，他迟疑片刻。就在这一刻，他听见内心颤抖的声音说“不”。顿时，年轻妇人微笑的脸失去了全部魅力。她在他眼中不过是一只目光迷离的发情母兽。他亲切地抚摸了她的脸颊，随后移步离开这位失望的妇人，健步踏入竹林。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“或许是。”悉达多疲惫地说，“我就像你。你也谁都不爱——否则你怎会将爱当作艺术经营？像你我这类人大概都不会爱。如孩童般的世人才会爱。这是他们的秘密。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>长久以来，悉达多虽不属于尘世，却经历了尘世生色之娱。他在狂热的沙门岁月中被扼杀的感官渐渐苏醒。他品尝了财富、淫乐和权力的滋味。唯有聪明的迦摩罗深知，他内心仍是个沙门。指引他生活的一直是思考、等待和斋戒的技艺。他和孩童般的世人间彼此依旧陌生</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>他走过多少平庸、荒芜的路。多年来，他没有崇高目标，没有渴望，毫无进取。他贪猥无厌，餍足于可怜的嗜好！多年来，他一直在浑然不觉中试图且盼望成为世人。可他的生活却因为他怀着别样的目标和忧虑，远比那些孩童般的世人更加不幸和贫穷。由迦摩施瓦弥一类人构成的世界于他不过是一场游戏，一支供人观赏的舞蹈，一部闹剧。他唯一珍惜的是迦摩罗。他珍惜她——但依然珍惜吗？他还需要她，或她还需要他吗？难道他们不是在无尽的游戏中游戏？为这游戏而活可有必要？不，没有必要！这游戏叫做轮回，一种孩童游戏，一种或许可爱的游戏。一次，两次，十次——难道要不停地游戏下去？</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>他的“我”在他的圣徒气质中、傲慢中、精神性中隐藏起来。在他自以为用斋戒和忏悔能扼杀“我”时，“我”却盘踞生长着。于是他终于清楚，任何学问也不能让他获得救赎，他该听从内心的秘密之音。为此他不得不步入尘世，迷失在欲望和权力、女人和金钱中，成为商人、赌徒、酒鬼和财迷，直至圣徒和沙门在他心中死去。他不得不继续那不堪的岁月，承受厌恶、空虚，承受沉闷而毫无意义的生活，直至他最终陷入苦涩的绝望，直至荒淫且利欲熏心的悉达多死去。他死了。一个新的悉达多从睡眠中苏醒。这个新生的悉达多也将衰老，死去。悉达多将消逝。一切有形之物都将消逝。可今天他还年轻，还是个孩子。今天，他是快乐崭新的悉达多。</p>
</blockquote>
</blockquote>
<p>2024/3/2 发表想法
很多人都有分享欲，但很少有幸有这样的倾听者</p>
<blockquote>
<blockquote>
<p>瓦稣迪瓦专注地倾听。悉达多的出身和童年，苦学与探求，欢乐与困顿。船夫最大的美德是倾听：他乃少数擅长倾听之人。即便默不作声，讲述者也能感知他在安静、坦诚、满怀期待地倾听。他既不褒扬亦不挑剔，只是倾听。悉达多清楚，能向这样一位倾听者倾诉自己的生活、渴望与烦忧是何等幸运</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>瓦稣迪瓦专注地倾听。悉达多的出身和童年，苦学与探求，欢乐与困顿。船夫最大的美德是倾听：他乃少数擅长倾听之人。即便默不作声，讲述者也能感知他在安静、坦诚、满怀期待地倾听。他既不褒扬亦不挑剔，只是倾听。悉达多清楚，能向这样一位倾听者倾诉自己的生活、渴望与烦忧是何等幸运</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我的生活也是一条河。这条河用幻象，而非现实，隔开少年悉达多、成年悉达多和老年悉达多。悉达多的前世并非过去，死亡和重归梵天亦并非未来。没有过去，没有未来。一切都是本质和当下。”</p>
</blockquote>
</blockquote>
<p>2024/3/2 发表想法
作为父母都想成为孩子的保护伞，想让孩子少受罪，以父母过来人的经验，教导孩子各种道理，想让孩子少走弯路。可能很多时候我们只能保护孩子一时，不能保护孩子一辈子。有些路得让孩子自己选让他们自己走下去，他们也有自己的人生活法呢</p>
<blockquote>
<blockquote>
<p>人独自行过生命，蒙受玷污，承担罪过，痛饮苦酒，寻觅出路。难道有人曾被父亲或老师一路庇护？亲爱的，你相信有人能避开这道路？或许小悉达多能，因为你爱他，你愿意保他免于苦难和失望？但是就算你替他舍命十次，恐怕也不能扭转他命运的一丝一毫！</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人独自行过生命，蒙受玷污，承担罪过，痛饮苦酒，寻觅出路。难道有人曾被父亲或老师一路庇护？亲爱的，你相信有人能避开这道路？或许小悉达多能，因为你爱他，你愿意保他免于苦难和失望？但是就算你替他舍命十次，恐怕也不能扭转他命运的一丝一毫！</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>他切实感到，对儿子盲目的爱，是一种极为人性的激情。它或许就是轮回，是浑沌之泉，黑暗之水。同时他也感到，爱并非毫无价值。它源自天性，是一种必需。爱的欲望该得到哺育，痛苦该去品尝，蠢行该去实践</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>悉达多回答：“你知道，亲爱的，年轻时我们和苦行僧一同生活在林中。那时，我就怀疑、背离了种种学说和老师。现在我依然如此。可打那以后，我却有过多位老师。很长时间，一位美艳的名妓做过我的老师。还有一位富商，几个赌徒。一次，一位僧人在朝圣路上见我睡在林中，停下来守候我，他也是我的老师。我向他学习，感激他。但我所学最多的，是跟随这条河和我的前辈，船夫瓦稣迪瓦。他是位质朴的人，并非哲人，但他对运命的深解有如乔达摩。他是完人，圣人。”</p>
</blockquote>
</blockquote>
<p>2024/3/2 发表想法
我们总以为只要向优秀的人学习，就可以学习到别人的智慧。其实不然，我们最多只能学到他们的知识，智慧更多的是需要我们去体验、去尝试、去获取、去领悟得到吧</p>
<blockquote>
<blockquote>
<p>“我并未说笑。我说的是我的认知。知识可以分享，智慧无法分享，它可以被发现，被体验。智慧令人安详，智慧创造奇迹，但人们无法言说和传授智慧。这是我年轻时发现，并离开老师们的原因。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“我并未说笑。我说的是我的认知。知识可以分享，智慧无法分享，它可以被发现，被体验。智慧令人安详，智慧创造奇迹，但人们无法言说和传授智慧。这是我年轻时发现，并离开老师们的原因。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>世界并非不圆满。世界并非徐缓地行进在通向圆满之路：不，世间的每一瞬间皆为圆满。一切罪孽都承载宽赦，所有孩童身上都栖息老人，所有新生儿身上都栖息亡者，所有将死之人都孕育永恒的生命。没人能看清他者的道路。强盗和赌徒的路或许通向佛陀，婆罗门的路或许通往强盗。在最深的禅定中存在这种可能：时间被终结，人视过往、当下和未来的生活为同时。这时，一切皆为善、圆满和梵天。因此在我看来，世间存在的一切皆好。在我看来，死如同生，罪孽犹如神圣，聪明等同愚蠢。一切皆有定数，一切只需我的赞赏、顺从和爱的默许。这样于我有益，只会促进我，从不伤害我。我听便灵魂与肉体的安排，去经历罪孽，追逐肉欲和财富，去贪慕虚荣，以陷入最羞耻的绝望，以学会放弃挣扎，学会热爱世界。我不再将这个世界与我所期待的，塑造的圆满世界比照，而是接受这个世界，爱它，属于它。——哦，乔文达，这就是我的一些思考和感悟。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“悉达多，”他道，“我们老了，恐怕再难相见。亲爱的，我认为你已寻得安宁。而我尚未收获。敬爱的人，为我再讲几句我能领悟的话！送我上路。悉达多，我的路时常艰难，时常昏暗。”
悉达多默默地，以惯常的平静微笑望向他。乔文达注视他的脸，带着畏惧与渴望。他眼中写满痛楚，写满永恒的探求和永恒的失落。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>这微笑安详、纯洁、微妙，或慈悲，或嘲弄，充满智慧，和乔达摩的微笑一致</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>这张脸并未改变。万千幻象从表面退去后，他的微笑平静、轻柔，或慈悲，或嘲讽，正如佛陀的微笑。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>他深深地鞠躬到地，向端坐的悉达多致意。悉达多的微笑让他忆起一生中爱过的一切，忆起一生中宝贵和神圣的一切。
全书完</p>
</blockquote>
</blockquote>
<p>◆  译后记</p>
<blockquote>
<blockquote>
<p>。称之为“诗”的考量是：诗对美的理想，诗的包容性以及该书中广泛的诗意。黑塞的语言是美的——《悉达多》是一部完全是诗的、充满歌咏性、音乐性的，光彩夺目的杰作。尽管我的译文不能完全实现黑塞的诗意，但其诗的本性与精神显而易见。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>伴随黑塞的书写，我也在悉达多的步履中经历他的告别：告别双亲及家园，告别朋友及老师，告别佛陀，告别挚爱，告别旧我。这些残酷的告别或许是人生真相，或许是获得神性自我，获得对万物、对人、对世界更为广大的宽容与爱的必经之路。我看见佛陀。他光明圆满，神圣温柔。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2024/xidaduo.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[前端进击]]></title>
            <link>https://super456.github.io/posts/growth-record/</link>
            <guid>https://super456.github.io/posts/growth-record/</guid>
            <pubDate>Fri, 01 Mar 2024 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="前端进击" tabindex="-1">前端进击 <a class="header-anchor" href="#前端进击" aria-label="Permalink to &quot;前端进击&quot;">&ZeroWidthSpace;</a></h1>
<blockquote>
<p>君子敬其在己者，而不慕其在天者，是以日进也</p>
</blockquote>
<p>2018 年 7 月 24 号，大三暑假开始前端开发上岗实习，一路跌跌撞撞学习前端，收获良多。但始终没有成为自己心中仰慕的前端大神，所以决定继续学习，并记录下来。分享前端之路技术点滴，希望可以给有志者一些帮助和温暖，也给自己一些鼓励，从最简单的开始，慢慢成长。因为我始终相信自己：</p>
<blockquote>
<p>成长永远不是一种结果，而是一种累积效应，更是一种习惯</p>
</blockquote>
<p>加油吧，少年💪🏻🌻</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[前端导航]]></title>
            <link>https://super456.github.io/posts/navigator/</link>
            <guid>https://super456.github.io/posts/navigator/</guid>
            <pubDate>Fri, 01 Mar 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[关于前端开发的导航及工具推荐]]></description>
            <content:encoded><![CDATA[<h1 id="前端导航" tabindex="-1">前端导航 <a class="header-anchor" href="#前端导航" aria-label="Permalink to &quot;前端导航&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>收集我所用过且觉得好用的前端资源，为了方便后续查找使用，特此分类整理</p>
<p>共收录资源：分类<strong> {{ navCountInfo.categoryNum }} </strong>个、内容<strong> {{ navCountInfo.total }} </strong>个</p>
<p>持续更新中🎉🚀...</p>
<p>欢迎给我提 <a href="https://github.com/super456/super456.github.io/issues" target="_blank" rel="noreferrer">ISSUE</a> 添加资源内容🌺</p>
</div>
<MNavLinks v-for="{title, items} in NAV_DATA" :title="title" :items="items"/><hr>
<p><strong>感谢<a href="https://notes.fe-mm.com/nav" target="_blank" rel="noreferrer">茂茂物语</a>提供支持🌹</strong></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 44 本《今天我请客，想请你快乐》]]></title>
            <link>https://super456.github.io/posts/read-book/2024/jintianwoqingke.html</link>
            <guid>https://super456.github.io/posts/read-book/2024/jintianwoqingke.html</guid>
            <pubDate>Sat, 24 Feb 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[本书是一部心理疗愈类漫画作品。 现在人均焦虑，工作、爱情、物质……被生活中的各种压力压得喘不过气，内心焦虑郁闷，却又不知如何消除。本书以橘子、饼干、芋妮、心想事橙兔、切糕五个动物形象为主角，演绎三十四篇可爱、充满智慧的治愈系心理漫画，直击不安的内心，在轻松氛围中引导读者转换角度和思维看问题，摆脱焦虑，重拾快乐。]]></description>
            <content:encoded><![CDATA[<h1 id="第-44-本《今天我请客-想请你快乐》" tabindex="-1">第 44 本《今天我请客，想请你快乐》 <a class="header-anchor" href="#第-44-本《今天我请客-想请你快乐》" aria-label="Permalink to &quot;第 44 本《今天我请客，想请你快乐》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>本书是一部心理疗愈类漫画作品。
现在人均焦虑，工作、爱情、物质……被生活中的各种压力压得喘不过气，内心焦虑郁闷，却又不知如何消除。本书以橘子、饼干、芋妮、心想事橙兔、切糕五个动物形象为主角，演绎三十四篇可爱、充满智慧的治愈系心理漫画，直击不安的内心，在轻松氛围中引导读者转换角度和思维看问题，摆脱焦虑，重拾快乐。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《今天我请客，想请你快乐》
燕七
6个笔记</p>
<p>◆  点评</p>
<p>2024/2/24 认为好看
没有那么多大道理鸡汤，但也会让你积极向上，享受人生，让自己微笑如花灿烂</p>
<p>◆  1 你还能再抢救一下</p>
<p>2024/2/24 发表想法
定期的断舍离，让自己生活回归简单，自己一个干净的空间</p>
<blockquote>
<blockquote>
<p>[插图]</p>
</blockquote>
</blockquote>
<p>◆  2 智慧可以打败烦恼</p>
<p>2024/2/24 发表想法
喜欢那个与世界和解的自己</p>
<blockquote>
<blockquote>
<p>[插图]</p>
</blockquote>
</blockquote>
<p>2024/2/24 发表想法
允许别人在你的世界里指手画脚，说三道四，为所欲为，那是因为别人是别人，自己是自己啊，我不会因为别人成为自己不喜欢的那种人</p>
<blockquote>
<blockquote>
<p>[插图]</p>
</blockquote>
</blockquote>
<p>◆  3 给生活撒点糖</p>
<p>2024/2/24 发表想法
我一直以为别人尊重我，是因为我优秀。后来我才知道，别人尊重我，是因为别人优秀。——鲁迅《论尊重》</p>
<blockquote>
<blockquote>
<p>[插图]</p>
</blockquote>
</blockquote>
<p>◆  4 想开了，是对自己的温柔</p>
<p>2024/2/24 发表想法
也许我们很多人都是思想上的巨人行动上的矮子吧</p>
<blockquote>
<blockquote>
<p>[插图]</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2024/jintianwoqingke.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 43 本《胖虎下山》]]></title>
            <link>https://super456.github.io/posts/read-book/2024/panghuxiashan.html</link>
            <guid>https://super456.github.io/posts/read-book/2024/panghuxiashan.html</guid>
            <pubDate>Mon, 19 Feb 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[虎出没，请注意！“猫铃铛”作者新作，漫画家、玩具设计师@不二马大叔 首部个人画集欢喜参上！ 胖虎是不二马于2017年创作的动物形象，2020年1月底，在微博中上山下山忙个不停的胖虎进入了更多人的视野，自此，“胖且生气”的胖虎和“喊妈”的小虎这对野生父子收获了全网的热爱。 16开尺寸，裸背锁线，可全幅平摊；全新双封，艺术纸内文，臻彩呈现。 全书7大章节，收录2017～2021年胖虎系列画作近300副，更有作者从未发表过的作品和绘制教程在内。从“胖且生气”的胖虎和“喊妈”小虎的野生父子日常，到“万物皆可胖虎”百变立绘，再到节气主题插画，一本囊括海量精彩，值得所有“云吸虎”粉丝的期待！]]></description>
            <content:encoded><![CDATA[<h1 id="第-43-本《胖虎下山》" tabindex="-1">第 43 本《胖虎下山》 <a class="header-anchor" href="#第-43-本《胖虎下山》" aria-label="Permalink to &quot;第 43 本《胖虎下山》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>虎出没，请注意！“猫铃铛”作者新作，漫画家、玩具设计师@不二马大叔 首部个人画集欢喜参上！
胖虎是不二马于2017年创作的动物形象，2020年1月底，在微博中上山下山忙个不停的胖虎进入了更多人的视野，自此，“胖且生气”的胖虎和“喊妈”的小虎这对野生父子收获了全网的热爱。</p>
<p>16开尺寸，裸背锁线，可全幅平摊；全新双封，艺术纸内文，臻彩呈现。</p>
<p>全书7大章节，收录2017～2021年胖虎系列画作近300副，更有作者从未发表过的作品和绘制教程在内。从“胖且生气”的胖虎和“喊妈”小虎的野生父子日常，到“万物皆可胖虎”百变立绘，再到节气主题插画，一本囊括海量精彩，值得所有“云吸虎”粉丝的期待！</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《胖虎下山》
不二马著绘
1个笔记</p>
<p>◆  点评</p>
<p>2024/2/19 认为好看
胖虎萌虎，万物皆可胖虎，可可爱爱的，哈哈哈😁</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2024/panghuxiashan.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 42 本《程序员的 README》]]></title>
            <link>https://super456.github.io/posts/read-book/2024/chengxuyuandeREADME.html</link>
            <guid>https://super456.github.io/posts/read-book/2024/chengxuyuandeREADME.html</guid>
            <pubDate>Sun, 18 Feb 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[对于刚刚成为软件工程师的新手来说，知道如何编写代码只是成功了一半。你可能很快就会发现，学校并没有教授在现实世界中至关重要的技能和工作中必要的流程。本书恰恰填补了这一环节，它是作者十多年来在大型公司指导初级工程师工作的教程，涵盖软件工程的基础知识和最佳实践。 本书第 1～2 章讲解当你在公司开启你的职业生涯时会发生什么；第 3～11 章会扩展你的工作技能，教你如何使用现有代码库、解决和防止技术债、编写生产级软件、管理依赖关系、有效地测试、评审代码、交付软件、处理 On-Call 时的事故和构建可演进的架构等；剩余章节涵盖管理能力和职业阶梯的提升等相关内容，例如敏捷计划、与管理者合作以及成长为资深工程师的必经之路。本书中非常重要的一部分内容是教你如何应对糟糕的管理，以及如何调整自己的节奏。 本书内容不仅浅显易懂，还覆盖整个软件开发周期，是一本技术主管希望每名新入行的工程师在开始工作之前都能阅读的书]]></description>
            <content:encoded><![CDATA[<h1 id="第-42-本《程序员的-readme》" tabindex="-1">第 42 本《程序员的 README》 <a class="header-anchor" href="#第-42-本《程序员的-readme》" aria-label="Permalink to &quot;第 42 本《程序员的 README》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>对于刚刚成为软件工程师的新手来说，知道如何编写代码只是成功了一半。你可能很快就会发现，学校并没有教授在现实世界中至关重要的技能和工作中必要的流程。本书恰恰填补了这一环节，它是作者十多年来在大型公司指导初级工程师工作的教程，涵盖软件工程的基础知识和最佳实践。</p>
<p>本书第 1～2 章讲解当你在公司开启你的职业生涯时会发生什么；第 3～11 章会扩展你的工作技能，教你如何使用现有代码库、解决和防止技术债、编写生产级软件、管理依赖关系、有效地测试、评审代码、交付软件、处理 On-Call 时的事故和构建可演进的架构等；剩余章节涵盖管理能力和职业阶梯的提升等相关内容，例如敏捷计划、与管理者
合作以及成长为资深工程师的必经之路。本书中非常重要的一部分内容是教你如何应对糟糕的管理，以及如何调整自己的节奏。</p>
<p>本书内容不仅浅显易懂，还覆盖整个软件开发周期，是一本技术主管希望每名新入行的工程师在开始工作之前都能阅读的书</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《程序员的README》
克里斯·里科米尼 德米特里·里亚博伊
281个笔记</p>
<p>◆  点评</p>
<p>2024/2/19 认为好看
读完这本书的感觉，也是有点相见恨晚，确实读这本书要趁早，很多知识大学和工作都不会有人教你，都需要你主动去学和请教他人。所以说，它比较全面的介绍成为一名软件工程师的过程内容，可以让你少走很多弯路，比较全面的了解一个软件生命周期的过程，培养你的个人能力和工作全局观吧。特别是对新人刚入行的时候，有一个指导工作各个方面流程及实践的教程，对个人的成长和融入团队有非常大的帮助吧</p>
<p>印象深刻的几个章节中讲到：在进入职业生涯阶段会遇到的一些问题及如何解决，比如自己遇到问题不好意思问同事，死磕琢磨很久浪费了很多时间，还有遇到生产事故自己紧张害怕的要死，慌不择路只会适得其反等等类似的情况，作者建议我们应该“请保持开放的心态，好学深思，渴望提高，不惧破旧习，不惧提问题。”因为优秀的工程师通常会以指导和协助他人为荣，而且当你“向同事提问和学习是快速成长和习得新技能的有效方式”，所以不要吝啬你的主动哈，珍惜这段时间，争取最大努力快速提升自己咯。还有如何克服工作中常见的“冒充者综合征”和邓宁-克鲁格效应、如何阅读开源项目、如何向同事提问方式等等，都有很多讲解帮助</p>
<p>在提升工作技能方面：如何平衡“软件的熵”和“技术债”也有一些讲究和方法。如何代码章节方面介绍了很多注意事项和技巧，包括经常听到的“不要重复自己”(Don’t repeat yourself，DRY)是一个通常被教导的原则。如何晋级需要具备的几个能力有技术知识、执行力、沟通能力、领导力，我是非常认可，毕竟自己也是计算机专业科班出身，对技术要求及作者说到这几个能力都有刻意练习，比如写作水平差就平时多练习写技术调研方案文档、业务相关讲解文档、技术相关讲解或指南文档等等并分享团队阅读，收集改进反馈提升自己</p>
<p>在 On-Call 阶段印象深刻的一句话是：“你最好的能力是随时响应。”这句老话是成功 On-Call 的关键。跟我轮值时候的一些解决问题方式不谋而合，自己平时也有应用类似的方式解决，但不够成体系的、规范的执行，也是自己做的不够好的地方。对于向上管理方面，如何对自己成长负责和工作汇报有更深刻的理解，之前以为自己做好手上的工作就行，还需要站在更高的角度思考问题及思考团队贡献、自身向上成长问题。对于职业规划方面，如何成为 T 型人才，未来发展等，但有些讲解不够全面，蜻蜓点水而已，可以结合《远见：如何规划职业生涯 3 大阶段》一起学习</p>
<p>还有其他方面也是很不错的，比如测试方面相关知识、设计文档撰写、代码评审、软件交付等等章节都非常详细，对于我这个工作几年的人，都还有很多不懂的或者没有遵守相关编写代码规则去做，有点惭愧，哈哈哈</p>
<p>总体来说，还是很不错的程序员指南，新人和老手阅读都会有受益，但可能新人阅读会受益更大吧，还有就是保持持续学习💪🏻</p>
<p>◆  推荐序</p>
<p>2024/2/6 发表想法
工匠精神，好的东西都是精雕细琢过来的，代码也是如此。大佬也是从菜鸡一步一个脚印走过来的，得学会从自身找原因学习，提高自我要求，才能一步步写出好代码</p>
<blockquote>
<blockquote>
<p>一名成熟的软件开发者的标志是打破固有的习惯，批判性地回顾旧代码，发现瑕疵，做到自省，且为没多做些什么而感到羞愧。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一名成熟的软件开发者的标志是打破固有的习惯，批判性地回顾旧代码，发现瑕疵，做到自省，且为没多做些什么而感到羞愧。</p>
</blockquote>
</blockquote>
<p>2024/2/6 发表想法
职场新人总是羞愧于向他人提问，怕会展示自己的能力不足或简单无知，但对于前辈或同事来说，也是乐于将自己过来经验分享给别人，少走些弯路。但也要注重自己提问的方式和请教的态度</p>
<blockquote>
<blockquote>
<p>向同事提问和学习是快速成长和习得新技能的有效方式</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>向同事提问和学习是快速成长和习得新技能的有效方式</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>资深工程师往往在聚精会神工作时会因为被打扰而失去在脑海中已构建的系统的短期记忆，但大多数资深工程师都很愿意提供帮助，优秀的资深工程师更是以指导和协助他人为荣。如果你在寻求帮助时感受到了敌意，大可不必心烦意乱，因为这在每个人身上都可能发生。不要让某一次糟糕的遭遇阻断了你再次寻求帮助的欲望。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>请保持开放的心态，好学深思，渴望提高，不惧破旧习，不惧提问题。</p>
</blockquote>
</blockquote>
<p>◆  译者序</p>
<blockquote>
<blockquote>
<p>变动的需求、阻滞的沟通、糟糕的管理和紧迫的工期，总有些时刻会令人产生倦怠</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在实际的工作中，成功地交付软件并不是只有唯一的路径可走。如何衡量与之匹配的需求、成本和风险才是考验团队的地方。</p>
</blockquote>
</blockquote>
<p>2024/2/6 发表想法
当你学的越多、懂得越多，就会越觉得自己对于世界充满好奇和学习动力，好像万物新生，随时可以重头开始一样</p>
<blockquote>
<blockquote>
<p>翻译完本书的最后一章时，正好是我踏入软件行业的12年整，此时的我却觉得自己的职业生涯好像才刚刚开始。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>翻译完本书的最后一章时，正好是我踏入软件行业的12年整，此时的我却觉得自己的职业生涯好像才刚刚开始。</p>
</blockquote>
</blockquote>
<p>◆  前言</p>
<blockquote>
<blockquote>
<p>然而要成为一名高效的软件工程师，你还需要那些学校里没有教授过的技能。而本书将会教你这些技能。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>诸如如何获得帮助、如何撰写设计文档、如何维护旧代码、如何On-Call（待命）、如何规划你的工作以及如何与你的管理者和团队互动</p>
</blockquote>
</blockquote>
<p>◆  第1章 前面的旅程</p>
<blockquote>
<blockquote>
<p>一名成功的软件工程师究竟是什么样子的呢？以及如何成为一名成功的软件工程师呢？</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>每个人都是从入门级工程师开始做起的。如果想晋级，你就需要具备下面几个核心领域中所需要的能力。
● 技术知识：你知道计算机科学的基础知识。你知道如何使用集成开发环境(IDE)、构建系统、调试代码和测试框架。你熟悉持续集成、系统指标和监控、配置和打包系统。你积极主动地创建和改进测试代码。在做架构决策时，你会考虑到长期运维。
● 执行力：你通过用代码解决问题来创造价值，并且你了解你的工作和业务之间的联系。你已经可以构建并部署中小型的特性。你会编写、测试和评审代码。你分担On-Call的职责，调试运维问题。你是积极主动并且可靠的。你参加技术讲座、阅读小组、面谈和路演。
● 沟通能力：你能同时以书面和口头的形式进行清晰的沟通。你能够有效地给予和接受反馈。在模棱两可的情况下，你会主动寻求帮助并得到明确的结果。你能以建设性的方式提出问题和定义课题。你在可能的情况下可以提供帮助，并开始影响同事。你会文档化你的工作。你撰写清晰的设计文档并征求反馈意见。在与他人打交道时，你富有耐心和同理心。
● 领导力：你能在指定的工作范围内独立地完成工作。你能迅速地从错误中学习。你能很好地处理变动和模糊的问题。你积极参与到项目和季度的规划中。你能帮助新的成员融入团队。你可以向你的管理者提供有意义的反馈。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>这是坎宁安定律的一个应用，该定律认为：“在互联网上获得正确答案的最好方法并不是提出问题，而是发布错误的答案。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>过度集中在细枝末节上的讨论总是会很冗长，这种现象被称为“自行车棚”(bike-shedding)效应</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>多提问，并经常让团队评审你的工作成果。</p>
</blockquote>
</blockquote>
<p>◆  第2章 步入自觉阶段</p>
<blockquote>
<blockquote>
<p>能力的4个阶段：“无意识的无能力”(unconscious incompetence)、“有意识的无能力”(conscious incompetence)，“有意识的有能力”(conscious competence)和“无意识的有能力”(unconscious competence)。具体说来，无意识的无能力意味着你无法胜任某项任务，并且没有意识到这种差距。有意识的无能力意味着你虽然无法胜任某项任务，但其实已经意识到了其中的差距。有意识的有能力意味着你有能力通过努力完成某项任务。最后，无意识的有能力意味着你可以很轻松地胜任某项任务</p>
</blockquote>
</blockquote>
<p>2024/2/14 发表想法
技术领域更新迭代太快了，新旧技术层出不穷，新的事物发展也在不断变化。有些技术方案当初做的时候适合，但现在有更好的方案或有更适合的方案，考虑团队长远发展和业务发展都需要学习跟进的，没有一成不变的东西，与时俱进吧</p>
<blockquote>
<blockquote>
<p>无论你是一名刚毕业的学生还是一名经验丰富的老手，如果你不学习，你就会落后。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>无论你是一名刚毕业的学生还是一名经验丰富的老手，如果你不学习，你就会落后。</p>
</blockquote>
</blockquote>
<p>2024/2/14 发表想法
生活和工作平衡也很重要</p>
<blockquote>
<blockquote>
<p>切记善用个人的时间——虽然说持续进步非常重要，但是把所有清醒的时间都花在工作上是不健康的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>切记善用个人的时间——虽然说持续进步非常重要，但是把所有清醒的时间都花在工作上是不健康的。</p>
</blockquote>
</blockquote>
<p>2024/2/14 发表想法
对于新手来说，一些事故在所难免，但要尽量避免这类事情的发生，谨慎一点。对于自己不太确定但有影响的事最好多问同事确认下，对于新人，大部分同事都会很友好的，但因为自己的个人原因造成的过错，就有点不应该，发生了也不要恐慌，第一时间先解决问题，后续再复盘自己的问题，避免类似情况发生</p>
<blockquote>
<blockquote>
<p>错误难免会发生。每名工程师都有类似的故事。尽你所能，努力理解你在做什么，但要知道这种事情总会发生</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>错误难免会发生。每名工程师都有类似的故事。尽你所能，努力理解你在做什么，但要知道这种事情总会发生</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>降低系统风险并使这些错误不那么致命是你的管理者和团队的工作。如果你失败了，也不要被击垮：写下经验教训，然后继续前行。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>请每周都花一部分时间去阅读。可供阅读的内容有很多：团队文档、设计文档、代码、积压的任务票、书籍、论文和技术网站。不要试图一下子把所有东西都读完。</p>
</blockquote>
</blockquote>
<p>2024/2/15 发表想法
阅读优秀的代码也是提升自己最快的方式之一</p>
<blockquote>
<blockquote>
<p>不要只读你自己的代码库，还要去阅读高质量的开源项目，特别是那些你使用的类库。不要像阅读小说一样从前到后地通读代码：请利用你的IDE来浏览代码。为关键的操作绘制控制流和状态图。仔细研究代码的数据结构和算法。注意那些临界值的处理。留意那些惯用写法和风格，也就是去学习“本地方言”(local dialect)。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不要只读你自己的代码库，还要去阅读高质量的开源项目，特别是那些你使用的类库。不要像阅读小说一样从前到后地通读代码：请利用你的IDE来浏览代码。为关键的操作绘制控制流和状态图。仔细研究代码的数据结构和算法。注意那些临界值的处理。留意那些惯用写法和风格，也就是去学习“本地方言”(local dialect)。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>这种经历让德米特里学会了慢慢来，为了理解而阅读，而且永远都不会相信变量名称。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>你通常可以用1.5倍速甚至2倍速观看视频，以节省时间，但不要被动地观看。你需要做笔记来帮助记忆，并学习任何不熟悉的概念或术语。</p>
</blockquote>
</blockquote>
<p>2024/2/15 发表想法
确实可以少走很多弯路，我刚入行的时候我也希望可以遇到这样的前辈教导、指引我前行，后来没有找到。但现在我也在成为当初那个苦苦追寻的人了，带过新人之后，才懂得如何教学相长，输出是最好的输入吧</p>
<blockquote>
<blockquote>
<p>跟随一名高级工程师是学习新技能的好方法。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>跟随一名高级工程师是学习新技能的好方法。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>结对编程(pair programming)也是一种很好的学习方式。两名工程师一起写代码，轮流打字</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不要根据你认为你需要学习的领域来选择项目。找到你有兴趣去解决的问题，并使用你想学习的工具来解决这些问题。一个可以从内激励你的目标会让你更长时间地参与，你也会学到更多。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>新手工程师会担心打扰队友而试图自己解决所有问题，这样做既慢又没有效果</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>使用这3个步骤：做研究，提出明确的问题，并恰当地安排解决你的问题所需的时间。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>尝试自己寻找答案。即使你的同事知道答案，你也要付出努力，这样你会学到更多。如果你没有找到答案，当你寻求帮助时，你的调查仍然会成为你的起点</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果你找不到任何线索，试着自己通过实验来解决它。记录下你在哪里寻找过，你做了什么，为什么这么做，发生了什么，以及你学到了什么。</p>
</blockquote>
</blockquote>
<p>2024/2/16 发表想法
这是很好的请教提问方式，至少让人感觉提问前你是做了很多努力的，你不是一个遇到问题就靠别人的人。很多新人会直接问问题，没有做任何实际的独立思考和动手解决问题的尝试，一两次别人可以这样帮你，但是次数多了容易让人反感或厌烦，别人没有义务教你、帮你解决问题，每个人都有自己的工作要做呢。主要是你这样做了，别人可以根据你提供有效的问题信息快速定位问题提供解决方案，而不是从头开始排查问题原因，节约彼此时间</p>
<blockquote>
<blockquote>
<p>在提出问题时描述你已经知道的情况。不要只是分享你的原始笔记。简要地描述你所做的尝试和发现，这表明你已经花了很多时间去试图自己解决这个问题。这样做也会给别人一个回答你的起点。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在提出问题时描述你已经知道的情况。不要只是分享你的原始笔记。简要地描述你所做的尝试和发现，这表明你已经花了很多时间去试图自己解决这个问题。这样做也会给别人一个回答你的起点。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果你需要的人很忙，同时你又不想自己的工作进程被卡住，这时候你就需要找到一种异步的沟通方式。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在网络通信中，组播(multicast)是指将消息发送到一个组而不是个人目标；异步(asynchronous)是指可以稍后处理的消息，而不需要立即响应。这些概念也适用于人们之间的通信。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在你设置的会议议程中应包括这个清单，不要只靠脑袋来记问题，也不要事前不做功课就来参加。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一般有两个常见的障碍会影响许多工程师，即“冒充者综合征”和邓宁-克鲁格效应。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>尽管有着杰出的学术和职业成就，经历着冒充者现象的女性仍然坚持认为她们真的不聪明，而且还愚弄了任何不这么想的人。众多的成就似乎并不影响冒充者的信念，而这些成就本身就是能充分证明智力水平卓越的客观证据。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>冒充者综合征会自我强化。每一个错误都会被看作能力匮乏的证明，而每一项成功都是优秀“冒充者”冒充的证据。一旦某个人进入了这个循环，就很难摆脱它。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>当你取得一些成就的时候，那是因为你真真切切地做到了，你并不只是运气好。</p>
</blockquote>
</blockquote>
<p>2024/2/16 发表想法
有时候自己突破技术难关或者解决难题方案时候，一开始觉得好难做，以自己的能力根本不可能完成，最后还是硬着头皮死磕解决、做出来了，那一刻的喜悦、成就感无与伦比。但后来又会想这只不过是简单的问题而已，解决了没什么大不了的，反而觉得自己要学习的东西更多😓是这样子的，当我们做超出自己能力的事情的时候，多少是有点恐惧的，甚至是有点不想去完成。但我们下定决心去做的时候，不管过程多么困难，只要最终能够完成。一开始会很开心，后面又会觉得理所应当，甚至自己的能力还需要多学习提高，其实是缺少自我肯定去建立信心和缺少他人的鼓励、认可。所以当你觉得自己做一件很困难的事情，最终做成了你可以把这件事情的过程及结果记录下来，适当的去分享给你信任的人，从他人中获得改善建议及鼓励认可的能量</p>
<blockquote>
<blockquote>
<p>请你尊敬的人来告诉你，你做得怎么样。这个人可以是你的管理者、导师，或者只是你仰慕的工程师。重要的是你要信任他们，并觉得与他们谈论自我怀疑是安全的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>请你尊敬的人来告诉你，你做得怎么样。这个人可以是你的管理者、导师，或者只是你仰慕的工程师。重要的是你要信任他们，并觉得与他们谈论自我怀疑是安全的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>与冒充者综合征相反的是邓宁-克鲁格效应。这是一种认知偏见，人们认为自己比实际情况更有能力</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>无意识的无能力”阶段的工程师不知道自己不知道什么，所以他们不能准确地评估自己和他人的表现。他们太自信了。他们总是到处批判公司的技术栈，抱怨代码的质量，贬低设计。他们确信自己的想法是正确的。他们的默认模式是直接回绝或无视反馈。拒绝所有的建议会亮起一盏巨大的红灯：完全自信标志着盲点</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>幸运的是，邓宁-克鲁格效应在新手工程师中并不常见。有许多方法可以对抗它：有意识地培养好奇心；对犯错持开放态度；找到一位受人尊敬的工程师，询问他你做得怎么样，并真正地倾听；讨论设计决策，尤其是那些你不同意的决策，问问为什么会做出这样的决策；培养一种权衡利弊的心态，而不是非黑即白的心态</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>行为准则
￼</p>
</blockquote>
</blockquote>
<p>◆  第3章 玩转代码</p>
<blockquote>
<blockquote>
<p>混乱的根源，即“软件的熵”和“技术债”</p>
</blockquote>
</blockquote>
<p>2024/2/16 发表想法
随着对应负责人员调整和业务的发展，对于不熟悉的代码和为了快速业务上线，很多人的做法都是“能跑就行”，不需要花费太多时间去了解原来的业务代码逻辑和适当代码优化、重构维护，当然也很大程度上取决于对应开发负责人的自我要求和专业能力</p>
<blockquote>
<blockquote>
<p>混乱的代码是变化的自然副作用，不要把代码的不整洁归咎于开发者。这种走向无序的趋势被称为软件的熵(software entropy)。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>混乱的代码是变化的自然副作用，不要把代码的不整洁归咎于开发者。这种走向无序的趋势被称为软件的熵(software entropy)。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>幸运的是，软件的熵可以被管理</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>技术债(technical debt)是造成软件的熵的一个主要原因。技术债是为了修复现有的代码不足而欠下的未来工作</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>要成为技术债，这个问题必须迫使团队“支付利息”，或者代码必须冒着触发严重问题的风险，因为严重问题需要紧急支付。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>￼
谨慎的、有意的技术债（右上）是技术债的典型形式：在代码的已知不足和交付速度之间进行务实的取舍。只要团队有规划地解决这个问题，这就是好的债务。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>从这个矩阵中得到的一个重要启示是，技术债总是不可避免的，因为你无法防止无意中的错误。技术债甚至可能是成功的标志：项目只有存活了足够长的时间，才会变得无序</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>要边做边解决，着手去做小幅的重构。在小幅的、独立的提交(commit)和拉动请求(pull request)中推动问题的修改。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>下面是讨论技术债的一个优秀的模板：
1.按事实陈述情况；
2.描述技术债的风险和成本；
3.提出解决方案；
4.讨论备选方案（不采取行动也是备选方案）；
5.权衡利弊。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>以书面形式提出你的建议。不要把你的呼吁建立在价值判断上（“这代码又老又难看”），将重点放在技术债的成本和修复它带来的好处上。要具体，如果有人要求你证明这种改动会带来哪些好处，不要感到惊讶。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>所谓重构，是指在不改变软件行为的情况下改进内部代码结构。它经常发生在添加新特性的时候，因为它使新特性可以更容易地被添加。而在修复bug的过程中，则经常删除代码。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>改变现有的大型代码库是一项需要经过多年甚至几十年锤炼的专业技能</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>对如何安全地在现有代码库中修改代码提出了以下步骤：
1.定义变更点；
2.寻找测试点；
3.打破依赖关系；
4.编写测试；
5.进行修改和重构。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>使用重构以打破依赖关系是工作中风险最大的部分。它甚至可能涉及改变预先设定好的测试用例，这使得它更难以检测到原有的行为是否改变。采取小步前进的方式，在这个阶段不要引入任何新特性。确保你能快速地运行测试用例，这样你就能频繁地测试。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>有各种各样的技术手段可以打破依赖关系，包括以下几种：
● 将一个大的、复杂的方法拆分成多个小的方法，这样就可以分别去测试独立的特性片段；
● 引入一个接口（或其他中介），为测试提供一个复杂对象的简单实现——不完整，但要满足测试需要；
● 注入明确的控制点，允许你模拟难以控制的执行的切片，如时间的推移。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>互联网上的编程传说经常引用童子军的原则：“住过的营地要比住之前更干净”。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在不影响整个项目持续运转的情况下￼要持续地重构工程，这样重构的成本就会平摊在多次的版本更迭中。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>尽量将清理代码的提交和改变行为的提交各自分开。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>代码异味(code smell)是一个术语，专指那些不一定是bug，但采用了已知会导致问题的代码模式，通常“闻起来很怪”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>保持你每次重构代码的体量很小。为代码变更算法中的每个步骤提交单独的拉动请求</p>
</blockquote>
</blockquote>
<p>2024/2/16 发表想法
不要为了重构而重构，可以参考投入产出比来衡量结果值不值得去做</p>
<blockquote>
<blockquote>
<p>重构的成本也可能超过其价值。正在被替换的旧的、废弃的代码不需要被重构，同理，低风险或很少被触及的代码也不需要。在重构的时候要务实。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>重构的成本也可能超过其价值。正在被替换的旧的、废弃的代码不需要被重构，同理，低风险或很少被触及的代码也不需要。在重构的时候要务实。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>重置你的分支，压缩你的提交，并在提交代码修改供评审之前写一份清晰的提交信息。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>。想用干净的代码和现代技术栈来工作是很自然的想法，但重构代码或忽视标准的诱惑是危险的。重构代码如果做得不好，会破坏代码库的稳定性，而且重构会以牺牲发布新特性为代价</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>任何技术创业公司必须做的主要的事情是建立一个产品，这个产品在做某件事情时至少要比目前流行的方式好十倍。两倍或三倍的改进不足以让人们快速或大量地转向新事物。</p>
</blockquote>
</blockquote>
<p>2024/2/16 发表想法
有时候适合公司业务发展的技术栈就是最好的，不管新旧技术栈，不要为了与时俱进盲目更新，毕竟是已经经过时间的证明了</p>
<blockquote>
<blockquote>
<p>软件是一个快速发展的领域。新的工具、语言和框架不断地出现。与网上“大火”的东西相比，现有的代码看起来有些过时。然而，成功的公司留用旧的代码——比如旧的类库和旧的模式——是有原因的：成功需要时间，而在技术上大动干戈会让人分心</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>软件是一个快速发展的领域。新的工具、语言和框架不断地出现。与网上“大火”的东西相比，现有的代码看起来有些过时。然而，成功的公司留用旧的代码——比如旧的类库和旧的模式——是有原因的：成功需要时间，而在技术上大动干戈会让人分心</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>所有的技术都会发生故障，但旧的东西以可预测的方式发生故障，新东西往往会以令人惊讶的方式发生故障。缺乏成熟度意味着更小的社区、更低的稳定性、更少的文档，以及更差的兼容性。新技术甚至在Stack Overflow￼上有更少的答案。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>为了平衡成本和收益，应该把代币花在服务于公司高价值领域（即核心竞争力）的技术上，以解决广泛的难题，并能被多个团队复用。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>有些重构值得去做，但许多重构不值得。对你的重构欲望要诚实，那些代码使用了你不喜欢的语言或框架并不是一个好理由，只有在收益大于成本的情况下才应该进行重构。重构是有风险的，成本也很高。工程师们总是会低估重构花费的时间，尤其是迁移花费的时间往往很可怕。数据需要被转移，上游和下游的系统都需要同步更新，这可能需要几年甚至几十年</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不要以为重构工作会很轻松，这将是一个艰难的过程。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>行为准则
￼</p>
</blockquote>
</blockquote>
<p>◆  第4章 编写可维护的代码</p>
<blockquote>
<blockquote>
<p>编写拥有良好防御性的代码是一种对那些运行你的代码的人（包括你自己！）富有同情心的表现</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>使用不可变的变量可以使并发编程变得更简单，而且当编译器或运行环境知道变量不会改变时就可以运转得更有效率。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>永远不要相信你的代码接收的输入，开发人员、有问题的硬件和人为的错误都会破坏输入的数据。通过校验输入的正确性去保护你的代码，可以使用先决条件、校验和￼(checksum)以及校验数据合法性，套用安全领域中的最佳实践以及使用工具等方法来发现常见的错误。尽可能地提早拒绝不良输入。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>也不要忽视安全问题，外部输入是危险的。恶意用户可能试图在输入中注入代码或SQL，或撑爆缓冲区以获得对你的应用程序的控制权限。使用成熟的类库和框架来防止跨站脚本攻击，总是强制转义输入的字符来防止SQL注入攻击。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>熟悉开放式Web应用程序安全项目(open Web application security project，OWASP)的十大安全报告以快速建立你的安全知识体系。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>精确的异常使代码更容易使用。尽可能地使用内置的异常，避免创建通用的异常。使用异常处理来应对故障，而不是控制应用程序的运行逻辑。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>当你创建自己的异常时，不要把它们弄得太通用。通用的异常很难处理，因为开发人员并不知道他们正面临什么样的具体问题。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不要在应用程序的运行逻辑中使用异常。你应该希望你的代码是不出人意料的，而不是聪明的。使用异常来跳出方法常常令人困惑，并且使代码难以调试。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>遵循“早抛晚捕”的原则来处理异常。“早抛”意味着在尽可能接近错误的地方引发异常，这样开发人员就能迅速地定位相关的代码。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>当调用可能抛出异常的代码时，要么完全地处理它们，要么将它们在堆栈中进行传播。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>有3种常见的系统指标类型：计数器、仪表盘和直方图。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>系统性能通常以阈值百分比的形式来衡量，例如，从0%到99%，被称为P99。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>监测以下所有的数据结构、操作和行为：
● 资源池；
● 缓存；
● 数据结构；
● CPU密集型操作；
● I/O密集型操作；
● 数据大小；
● 异常和错误；
● 远程请求和响应。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>配置可以用许多方式来表达：
● 普通的、对人友好的格式的文件，如INI、JSON或YAML；
● 环境变量；
● 命令行参数；
● 定制的领域特定语言(DSL)；
● 应用程序所使用的语言。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>配置即代码(configuration as code，CAC)的哲学认为，配置应该受到与代码同样严格的要求。配置错误可能是灾难性的，一个错误的整数或缺失的参数就可以毁掉一个应用程序。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>行为准则
￼</p>
</blockquote>
</blockquote>
<p>◆  第5章 依赖管理</p>
<blockquote>
<blockquote>
<p>在现有的代码上增加一个依赖似乎是一个简单的决定。“不要重复自己”(Don’t repeat yourself，DRY)是一个通常被教导的原则。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>相依性是指你的代码所依赖的代码。在编译、测试或运行期间，所有需要依赖关系的时间周期被称为依赖范围。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>依赖关系是在软件包管理或构建文件中声明的：Java的Gradle或Maven配置，Python的setup.py或requirements.txt，以及JavaScript的NPM所使用的package.json。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一个好的版本管理方案，其版本都具有以下特点。
● 唯一性(unique)：版本不应该被重复使用。构件会被分发、缓存，并被自动化工作流拉取。永远不要在现有版本下重新发布更改的代码。
● 可比性(comparable)：版本应该帮助人们和工具对版本的优先顺序进行推断。当一个构建依赖于同一构件的多个版本时，可以使用优先顺序来解决冲突。
● 信息性(informative)：版本信息区分了预先发布的代码和已发布的代码，将构建流水号与构件相关联，并设置了稳定性和兼容性的合理预期。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>主版本号为0被认为是“预发布”，是为了快速迭代，不做任何兼容性保证。开发者可以用破坏旧代码的方式修改API，如新添加一个必要参数或删除一个公共方法。但是主版本号从1开始后，一个项目应该保证以下内容。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>● 补丁版本号是递增的，用于修复bug，并且可以向下兼容。
● 对于向下兼容的特性，次版本号是递增的。
● 对于无法向下兼容的变化，主版本号会被递增。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>SemVer还通过在补丁版本号后添加一个“-”来定义预发布版本。小数点分隔的字母和数字的序列被用作预发布版本的标识符(2.13.7-alpha.2)。预发布版本可以在不影响主版本的情况下进行突破性的修改。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>许多项目使用候选发布版(release candidate，RC)构建。早期采用者可以在正式版本发布之前发现RC中的错误。RC预发布版本有递增的标识符，如3.0.0-rc.1。然后，最终的RC被提升为正式发布版，重新发布的版本没有RC的后缀。所有的预发布版本都会被最终版本（在我们的例子中是3.0.0）所取代</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>SemVer的方案还允许使用通配符来标记版本范围(2.13.*)。由于SemVer承诺跨小版本和补丁版本的兼容性，</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>比较常见的相依性地狱的罪魁祸首是循环依赖、钻石依赖和版本冲突。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一个项目不能同时使用同一个类库的两个不同的版本，所以构建系统必须从中选择其一。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在现实中，兼容性是一个“美丽的愿望”。项目经常在没有检查兼容性的情况下就发放版本，即使是自动化也不能完全保证其兼容性。那些无法向下兼容的变化会被不经意地发版成次版本或补丁版本，给你的代码库带来巨大的破坏</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>添加一个依赖项的价值是否超过了它的成本？
● 你真的需要这些特性吗？
● 依赖关系的维护情况如何？
● 如果出了问题，你修复这个依赖有多容易？
● 依赖项的成熟度如何？
● 引用依赖后向下兼容的变化频率如何？
● 你自己、你的团队和你的组织对该依赖的理解程度如何？
● 自己写代码有多容易？
● 代码采用什么样的许可协议？
● 在依赖中，你使用的代码与你不使用的代码的比例是多少？</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>要务实，不要害怕复制代码，如果它能帮助你避免一个庞大的或不稳定的依赖关系（并且软件许可协议容许这么做）。
直接复制代码在简短的、稳定的代码片段上效果最好</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>将你使用的所有类库显式声明为依赖项。不要使用来自横向依赖的方法和类，即使它看起来很有效。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>任何未指定版本的依赖项不仅会拉取对bug的最新修复，还会拉取更多的东西，比如它们会拉取最新的bug、软件行为，甚至是不兼容的变化。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>精确的依赖范围将有助于避免冲突并减小运行时的二进制包或者文件的大小。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>行为准则
￼</p>
</blockquote>
</blockquote>
<p>◆  第6章 测试</p>
<blockquote>
<blockquote>
<p>糟糕的测试会增加开发人员的开销而不提供价值，并且还会增加测试套件的不稳定性。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>测试也可以暴露出混乱的实现过程，“意面式”的代码，或有太多依赖项的代码，都很难进行测试。编写测试也可以迫使开发人员分别通过改进关注点分离和降低紧耦合的方式来确保他们的代码拥有良好的构造。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>TDD是指在写代码之前先编写测试的实践，如果测试写好之后运行测试失败了，那么就去编写代码使其通过。TDD迫使开发人员在写出一堆代码之前思考软件的行为、接口设计和集成。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>测试其实是另一种形式的文档，它说明了代码是如何被交互的。它是一名有经验的程序员开始阅读并了解一个新的代码库的首选入口</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>单元测试、集成测试、系统测试、性能测试和验收测试</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>单元测试是验证代码的“单元”，这通常指某个单一的方法或行为</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>集成测试验证多个组件集成在一起之后是否还能正常工作。如果你发现自己在测试中实例化了多个相互作用的对象，那么你正在写的可能就是集成测试。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>系统测试是验证整个系统的整体运行情况。端到端(end-to- end，e2e)的工作流程是为了模拟在预生产环境中系统与真实用户的互动。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>性能测试（如负载测试和压力测试）监控不同配置下的系统性能。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>验收测试是指由客户或其代理人进行的，以验证交付的软件是否符合验收标准的测试。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>模拟库用模仿真实系统提供的接口来代替外部依赖性。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>测试框架可以帮助你编写和执行测试。你会发现一些框架可以帮助你统筹执行单元测试、集成测试、性能测试，甚至是UI测试。下面是框架的作用。
● 管理测试的setup和teardown。
● 管理测试执行和编排。
● 生成测试结果报告。
● 提供工具，如扩展的断言方法。
● 与代码覆盖率工具集成</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>测试框架可以通过编排测试流程来帮助控制测试的速度和隔离度。测试可以串行或并行地执行。串行测试是一个接一个地执行，一次执行一个测试会更安全，因为测试之间相互影响的机会比较少；并行执行更快捷，但由于共享的状态、资源或其他污染，因而更容易出错</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>强制执行代码质量规则的工具被称为linter，linter可以运行静态分析并执行代码风格检查。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>质量保证(QA)团队，尽管其职责各不相同，但都包括以下内容。
● 编写黑盒或白盒测试。
● 编写性能测试。
● 进行集成测试、用户验收测试或系统测试。
● 提供和维护测试工具。
● 维护测试环境和基础设施。
● 定义正式的测试认证和发布流程</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>￼
图6-1 风险矩阵
测试可以将代码风险向左下方转移，因为测试越多，失败发生的可能性就越低。首先应该关注代码中的高风险的区域；而那些低风险或被废弃的代码，诚如其概念所言，并不值得测试。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>确定性的代码对于相同的输入总是给予相同的输出。相比之下，非确定性的代码对于相同的输入可以返回不同的结果。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>测试不应该依赖于特定的执行顺序。顺序依赖通常发生在某项测试会先行写入数据，而随后的测试会假设数据已经写入的场景。这种模式很糟糕，原因有很多。
● 如果第一个测试失败了，第二个也会失败。
● 这使得并行测试更加困难，因为在第一个测试完成之前，你不能执行第二个测试。
● 对第一个测试的修改可能会意外地破坏第二个测试。
● 对测试运行器的修改可能会导致你的测试以不同的顺序运行</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>行为准则
￼</p>
</blockquote>
</blockquote>
<p>◆  第7章 代码评审</p>
<blockquote>
<blockquote>
<p>大多数团队会在合并代码的修改之前进行代码评审。高质量的代码评审文化有助于所有具有不同经验水平的工程师的成长，并促进他们对代码库的共同理解。糟糕的代码评审文化会抑制创新，减慢开发速度，并且导致滋生怨恨情绪。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>优秀的代码评审可以作为一个教学工具，传播认识，记录实现的决策，并提供代码的更改记录以确保安全性与合规性。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>评审整个代码库的变更可以确保不止一个人熟悉生产环境中代码的每一行，对代码库的共同理解有助于团队更有凝聚力地扩展代码。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>评审不是一个证明你有多聪明的机会，也不是一个橡皮图章式的官僚主义障碍。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>代码修改由准备、提交、评审、最后批准和合并这几个环节组成。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不要执着于那些你提交评审的代码，要期待它在评审过程中发生变化，有时甚至是重大的变化</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>代码清单7-1
评审者: agupta, csmith, jshu, UI/UX团队。￼ 标题: [UI-1343] 修复了在目录Header上缺失链接的问题。￼ 描述:￼ 　￼ # 概述￼ 主页目录Header上缺失“关于我们”的链接。￼ 现状是单击目录按钮没有反应，通过追加一个正确的链接来修正这个￼ 问题。￼ 　￼ 追加了一项Selenium测试来验证本次修改。￼ 　￼ # 检查列表￼ 本次拉取请求：￼ 　￼ - [x] 添加新的测试代码；￼ - [ ] 修改面向公众的API；￼ - [ ] 把设计文档涵盖在内。
这个评审请求的样例遵循了几项最佳实践</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>你可以通过提交评审草案来检查你正在做的事情：一项非正式的评审请求，旨在从队友那里获得快速和低成本的反馈，这可大大降低你在错误道路上走得太远的风险。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一些开发者通过提交代码评审的方式来触发持续集成(continuous integration，CI)系统来绕过这个问题，这是一种糟糕的做法。
通过提交代码评审来触发执行测试的方式是一种浪费。</p>
</blockquote>
</blockquote>
<p>2024/2/17 发表想法
就事论事而已，不要上升到吵架或者人身攻击。有人能够指出你的不足，教你怎么改正，最好可以虚心接受，当然自己有疑问或者不接受建议可以多讨论一下的，择其善者而从之</p>
<blockquote>
<blockquote>
<p>从你的代码上得到的那些批评性的评论可能让你很难接受。切记应该保持一些情感上的距离——这些评审意见是针对代码的，而不是针对你个人的，而且这甚至都不算是你的代码，将来整个团队会拥有这些代码。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>从你的代码上得到的那些批评性的评论可能让你很难接受。切记应该保持一些情感上的距离——这些评审意见是针对代码的，而不是针对你个人的，而且这甚至都不算是你的代码，将来整个团队会拥有这些代码。</p>
</blockquote>
</blockquote>
<p>2024/2/17 发表想法
意见分歧很正常，人都会有认知局限的，我们觉得好的实现方式在别人眼里是不好的，或者两种方式都差不多，差异不明显都有可能。如果都说服不了对方，那就应该让团队来决定，避免个人之间的冲突，友好对待，切勿情绪上头</p>
<blockquote>
<blockquote>
<p>首先审视你自己的反应，你本能地保护你的代码只是因为你编写了它们，还是因为你的方式事实上更好？清楚地解释你的观点，如果你们还是不能达成一致，咨询一下你的管理者下一步该怎么做。团队处理代码评审冲突的方式各不相同，有的服从提交者，有的服从技术负责人，还有的服从小组的法定人数。应该遵循团队惯例。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>首先审视你自己的反应，你本能地保护你的代码只是因为你编写了它们，还是因为你的方式事实上更好？清楚地解释你的观点，如果你们还是不能达成一致，咨询一下你的管理者下一步该怎么做。团队处理代码评审冲突的方式各不相同，有的服从提交者，有的服从技术负责人，还有的服从小组的法定人数。应该遵循团队惯例。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>要专注于那些你可以从中学习的修改和你熟悉的代码。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在你的日历上划出代码评审时间。预定的评审时间会使你很容易继续你的其他任务，因为你知道你以后会有集中的时间段进行代码评审。这也会使你的评审保持高质量——当你有专门的时间时，你就不会对需要切换回其他任务而感到有那么大的压力。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>了解修改的动机将解释具体实现的决策，你可能会发现某些修改甚至是不需要的。比较修改前后的代码也会帮助你检查正确性，并启发其他的实现想法</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>你需要对代码修改的正确性、可实施性、可维护性、可读性和安全性提供反馈，指出那些违反代码风格手册、难以阅读或令人困惑的代码，阅读测试用例并寻找bug以验证代码的正确性。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在评审代码时，会很自然地把注意力集中在发现问题上，但代码评审不一定全都是负面的评论。对好的东西也要进行赞扬。如果你从阅读代码中学到了一些新的东西，请明确地传达给作者。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>即使是一项令你讨厌的修改，你也可以对它说些好话——如果没有别的原因，就承认它的意图和努力。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果同样的代码风格类的问题反复出现，不要一直喋喋不休。指出第一个例子，并指出这是需要全面展开的问题。没有人喜欢被反复告知同样的事情，而且也没有必要这样做</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>代码评审通常在一个专门的UI中处理，比如GitHub中的拉取请求界面。不要忘记，代码评审本身也只是代码而已。你仍然可以迁出或下载那些拟议的修改，并在本地处理它们。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不要坚持要求完美，不要扩大修改的范围，要清楚地描述哪些评审意见是关键的，不要让分歧发酵。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一般来说，评审者应该倾向于批准CL，只要它处于肯定能改善正在运行的系统的整体代码运行的状况，即使CL并不完美。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>尊重正在进行的修改的范围。在你阅读的过程中，你会发现改进相邻代码的方法，并产生一些关于新特性的想法，不要坚持将这些修改作为现有评审的一部分来进行。另开一张任务票来改进代码，把工作留到以后。确定严格的范围将提高速度并保持增量更改。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果对代码修改有重大分歧，而你和作者又不能解决分歧的话，请主动提出把这个问题移交给其他专家，他们可以帮助解决相关分歧。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>行为准则
￼</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>谷歌公司的《开发者代码评审指南》</p>
</blockquote>
</blockquote>
<p>◆  第8章 软件交付</p>
<blockquote>
<blockquote>
<p>你的团队可能把整个流程——从打包到展开，统称为发布(release)。他们可能把打包一个构件称为发布，而把构件交付下载的过程称为发行(publishing)。直到一个特性在生产环境中被打开时才能称其为被“发布”了，而在这之前的一切行动都是部署(deploy)</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>￼
图8-1 软件交付流程</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Gitflow使用开发分支、热修复分支和发布分支。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>￼
图8-3 Gitflow基于特性分支的开发模式</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>构建软件包需要很多步骤：解决和连接依赖项、运行linter￼、编译、测试，最后是打包软件</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>高度发展的自动化催生了持续交付。通过持续交付，人力被完全从部署环节中移除。打包、测试、发布、部署，甚至展开环节都是自动化的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在展开环节有许多策略：特性开关、熔断器、“摸黑启动”、“金丝雀部署”和“蓝绿部署”。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>特性开关有时被用于A/B测试，这是一种测试用户对新特性反应的技术。如果以具有统计意义的方式对用户进行分组，用特性开关进行A/B测试是可行的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>熔断器有几个特点：它是二进制的（开/关）、永久性的，而且是自动化的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>金丝雀部署和蓝绿部署是两种非常常见的并行部署策略。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>金丝雀部署用于处理高流量并会部署到大量实例的服务。一个新的应用程序版本被首先部署到一组受限的计算机上，全部用户中的一个小的子集会被路由到这个金丝雀版本</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>蓝绿部署指的是运行两个不同版本的应用程序：一个是主动的，一个是被动的</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>￼
图8-6 在金丝雀部署中，负载均衡器将一部分入站流量路由到新的部署中
￼
图8-7 在一个蓝绿部署中，服务1.0被保留下来， 作为服务1.1发生故障时的备用</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在灾难场景中，所有的用户都需要从一个有问题的系统中迁移出来，有能力快速启动并运行一个并行的环境善莫大焉。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>摸黑启动（有时被称为影子流量）将新的代码暴露在真实的流量中，而不使其对终端用户可见，即使代码是坏的，也没有用户受到影响。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>摸黑启动的软件其实仍然启用了，代码也被调用了，只是结果被丢掉了。摸黑启动可帮助开发者和运维人员在生产环境中了解他们的软件，对用户的影响最小。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>￼
图8-8 暗中读取和暗中写入</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>行为准则
￼</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>艾玛·简·霍格宾·韦斯特比的《Git团队协作：掌握Git精髓，解决版本控制、工作流问题，实现高效开发》</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>亚马逊的构建者库也是一个伟大的免费资源，可用于交付最佳实践。该库位于亚马逊构建者的主页，那上面有关于持续交付、自动部署和回滚的帖子。</p>
</blockquote>
</blockquote>
<p>◆  第9章 On-Call</p>
<blockquote>
<blockquote>
<p>新加入团队的或缺乏必要技能的开发人员通常被要求“跟随”几名主要的On-Call轮值人员，以了解情况。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“你最好的能力是随时响应。”这句老话是成功On-Call的关键。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一般来说，人们希望On-Call工程师能做出快速反应，但不一定需要快速解决问题。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>创建一个你在紧急情况下可以依赖的资源清单：可以直接链接到你的服务的关键仪表盘和运行手册、访问日志的说明、重要的聊天室，以及故障排除指南。创建一个单独的“On-Call”书签文件夹，并保持更新，这会很方便。与团队分享你的清单，以便其他人可以使用和改进它。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>有些支持请求异常紧急，而有些请求则在一周内完成就可以。如果你无法判断一个请求的紧急程度，请询问该请求的影响是什么。影响范围将决定优先级。如果你不认可请求者对于某个问题的优先级次序的看法，请与你的管理者讨论一下。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>谷歌云的支持优先级梯队提供了一个如何定义优先级的例子（你可以在谷歌云的技术支持页面找到相关说明）。
● P1：严重影响(critical impact)——服务在生产环境中无法使用。
● P2：高影响(high impact)——服务的使用受到严重损害。
● P3：中等影响(medium impact)——服务的使用部分受损。
● P4：低影响(low impact)——服务完全可用。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>为了可以清晰地进行沟通，要有礼貌、直接、反应迅速，并且彻底。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在一连串的运维任务和干扰之下，开发人员会感到压力和变得暴躁——这是人的本性。在对支持任务进行回应时要有耐心和礼貌，虽然这可能是你一天中的第十次被迫中断，但这可能是请求者与你的第一次互动。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>简洁确保你的沟通容易被阅读和理解。如果你并不知道答案，就说出来；如果你知道答案，就大声说出来。
回应请求要迅速。回应不一定代表解决方案。告诉请求者你已经看到了他们的请求，并确保你理解问题所在。</p>
</blockquote>
</blockquote>
<p>2024/2/17 发表想法
之前也有写过这个解决方案手册，把所有遇到的问题及解决方法沉淀下来，方便自己成体系的思考问题，反思自己，避免类似的问题发生或举一反三吧，也可以给他人提供资料参考。就好像读书时候的错题本一样，但可惜没有坚持到现在😓</p>
<blockquote>
<blockquote>
<p>在工作过程中，通过在每个任务票中写下更新内容来跟踪进度。在任务票中包含缓解或解决该问题的最后步骤，这样，如果该问题再次出现，你就会有解决方案的记录。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在工作过程中，通过在每个任务票中写下更新内容来跟踪进度。在任务票中包含缓解或解决该问题的最后步骤，这样，如果该问题再次出现，你就会有解决方案的记录。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>始终在你的笔记中包含时间戳。时间戳有助于操作人员在调试问题时将整个系统的事故联系起来。当用户在下午1:05开始报告延迟时，知道某项服务在下午1点被重新启动了是很有价值的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>事故响应分为以下5个阶段。
● 分流(triage)：工程师必须找到问题，确定其严重性，并确定谁能修复它。
● 协同(coordination)：团队（以及潜在的用户）必须得到这个问题的通知。如果On-Call人员自己不能解决这个问题，他们必须提醒那些能解决的人。
● 应急方案(mitigation)：工程师必须尽快让事情稳定下来。缓解并不是长期的修复，你只是在试图“止血”。问题可以通过回滚一个版本、将故障转移到另一个环境、关闭有问题的特性或增加硬件资源来缓解。
● 解决方案(resolution)：在问题得到缓解后，工程师有一些时间来喘口气、深入思考，并为解决问题而努力。工程师将继续调查问题，以确定和解决潜在的问题。一旦眼前的问题得到解决，事故也就得到了解决。
● 后续行动(follow-up)：对事故的根本原因——为什么会发生，进行调查。如果事故很严重，就会进行正式的事后调查，或进行回顾性调查。建立后续任务，以防止那个（或那些）根本原因的再次出现。团队要寻找流程、工具或文档中的任何漏洞。在所有的后续任务完成之前，相应事故的处理不应该被认为已经结束了。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>你在应急方案的阶段目标是降低问题的影响。应急方案并不是要彻底地解决这个问题，而是要降低其严重性。修复一个问题可能需要很多时间，而应急方案通常可以很快完成。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>对于小问题，线性搜索即从前到后检查组件是可行的。在更大的系统上使用分片检索或二分法搜索（也称为半分法），即在调用堆栈的一半的位置上设置一个断点，看看问题是在上游还是在下游。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>处理事故的On-Call工程师会负责起草一份回顾总结的文档，其中应记录发生了什么、学到了什么，以及需要做什么来防止事故再次发生。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>任何回顾总结文档的关键部分是根本原因分析(root-cause analysis，RCA)。根本原因分析是利用5个“Why”进行的。这种技巧非常简单：不断地追问为什么。</p>
</blockquote>
</blockquote>
<p>2024/2/17 发表想法
一个好的团队氛围不应该是出了问题互相甩锅指责的，特别是别让会议变得批斗大会一样。有问题大家一起讨论解决，别人做的不够好的地方说出来，一起怎么更好的处理问题避免类似情况发生，一起互相学习共同进步才是</p>
<blockquote>
<blockquote>
<p>在面临高压的情况下，人们很容易生气和互相指责。尽你所能提供建设性的反馈，指出需要改进的地方，但避免指责个人或团队的问题。“彼得没有禁用消息头”是一种指责，而“消息头配置的改变没有经过代码评审”是一个需要改进的问题。不要让事后的总结会变成不健康的发泄会。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在面临高压的情况下，人们很容易生气和互相指责。尽你所能提供建设性的反馈，指出需要改进的地方，但避免指责个人或团队的问题。“彼得没有禁用消息头”是一种指责，而“消息头配置的改变没有经过代码评审”是一个需要改进的问题。不要让事后的总结会变成不健康的发泄会。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>由于你“真正的”工作是编程，参与到支持工作中可能会让你分心。把支持工作看成一次学习的机会，你会看到你团队的软件是如何在现实世界中被使用的，以及它失败或使用户感到困惑的方式。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>而依赖“救火队员”的团队不会拓展自己的专业知识和提高排除故障的能力。“救火队员”的英雄主义也会导致那种修复严重的潜在问题的工作被置于次要地位，因为“救火队员”总在旁边修修补补。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>行为准则
￼</p>
</blockquote>
</blockquote>
<p>◆  第10章 技术设计流程</p>
<blockquote>
<blockquote>
<p>设计工作被分成两种活动：单独的深入思考和协作的小组讨论。研究、头脑风暴和写作构成了深度工作。设计讨论和对设计文件的评论构成了合作的部分。这个过程的有形产出是一份设计文档。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>￼
图10-1 设计过程的螺旋式上升</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>你现在处于圆锥体的顶部。你在你的设计中已经投入了大量的工作，而且对你的方案充满信心。你将设计方案在整个组织内传阅。安全、运维、相关的团队和架构师都需要了解你所承诺的变更，这不仅仅是为了提供反馈，也是为了更新他们对整个系统工作方式的心理模型。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>你的首要任务是定义和理解你要解决的那个（或那些）问题。你需要了解问题的边界，以便知道如何解决它，并避免构建错误的东西。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>你提出的设计不应该是你的第一个想法，而应该是你若干想法中最好的那个。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>最后，你应该批判性地思考。不是所有你在网上读到的东西都是好主意，一个特别常见的错误做法是将一个与你的问题相似但不完全相同的解决方案全盘复制。你的问题不是谷歌的问题（即使你在为谷歌工作），尽管它们看起来很相似。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不要迷恋你的实验性代码。概念验证类的代码是为了说明一个想法，然后被扔掉或重构，把你的精力集中在说明或测试你的想法上。不要写测试，也不要花时间打磨代码。你要尽可能快地学习到更多的东西。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>你不会在你锁定的整段时间内进行“设计”。你的大脑需要时间来放松：休息一下，给自己一个呼吸的空间；允许你的思想放松和游荡；去散步、泡茶、阅读、写作、画画。
设计是一种每天24小时都在进行的工作，所以要有耐心。你的大脑总在酝酿着各种想法，创意想法会在一天内随机出现（甚至在你睡觉的时候）。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果没有指导方针，就用这3个标准来决定是否需要设计文档。
● 该项目将需要至少一个月的工程时间。
● 这一变更将对软件的扩展和维护产生长期的影响。
● 该变更将显著影响其他团队。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>设计文档是一种工具，可以帮助你思考、获得反馈、让你的团队了解情况、培养新的工程师，并推动项目规划。</p>
</blockquote>
</blockquote>
<p>2024/2/17 发表想法
写作的好处非常多，三言两语说不清楚。但却很少人意识到这一点，也许写作需要花费更多的时间和精力吧，还好我能坚持写工作相关文档和自己的技术博客，回过头看确实受益良多</p>
<blockquote>
<blockquote>
<p>写作拥有一种暴露你不知道的东西的能力（在这一点上请相信我们）。迫使你自己写下你的设计，迫使你去探索问题空间，并使你的想法具体化。你将不得不面对其他的方法和理解上的差异。这是一个动荡的过程，但是经历了这个过程，你会对你的设计和它的权衡有更好的理解。通过写下你的设计，你会得到清晰的思路，也会使设计讨论更有成效。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>写作拥有一种暴露你不知道的东西的能力（在这一点上请相信我们）。迫使你自己写下你的设计，迫使你去探索问题空间，并使你的想法具体化。你将不得不面对其他的方法和理解上的差异。这是一个动荡的过程，但是经历了这个过程，你会对你的设计和它的权衡有更好的理解。通过写下你的设计，你会得到清晰的思路，也会使设计讨论更有成效。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>写作作为一项技能，就像其他技能一样，是通过实践来进步的。充分利用写作的机会——设计文档、电子邮件、代码评审意见——努力写得清晰。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>设计文档应该描述当前的代码设计、变更的动机、潜在的解决方案，以及建议的解决方案。该文档应该包括建议的解决方案的细节：架构图、重要的算法细节、公共API、模式、与替代方案的利弊比较、假设和依赖项</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果你的团队有模板，请使用他们的模板；如果没有，请尝试下面这种结构，我们将详细介绍：
● 概要；
● 现状与背景；
● 变更的目的；
● 需求；
● 潜在的解决方案；
● 建议的解决方案；
● 设计与架构；
♦ 系统构成图；
♦ UI/UX变更点；
♦ 代码变更点；
♦ API变更点；
♦ 持久层变更点；
● 测试计划；
● 发布计划；
● 遗留的问题；
● 附录。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>设计与架构应该包括组件的示意图、调用流和数据流、用户界面、代码、API和模式模拟。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不要让人惊讶
你需要有礼貌地并且渐进地让人们了解你的设计方案。如果正式的设计文档是其他团队和技术负责人第一次了解你的工作，你就是在为自己的失败埋下伏笔。每一方都有不同的视角和不同的利益诉求，他们可能会对一份突然出现的、他们没有发言权的设计文档做出强烈的反应。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>反馈会议不需要是正式的，也不需要专门来安排。在午餐时、在走廊上，或在会议开始前的随意交谈都可以，甚至这都是应优先选择的方式。你的目标只是让人们意识到你在做什么、提供一个反馈的机会，并让他们思考你的工作。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>设计讨论可帮助你理解问题空间、分享知识、讨论利弊，并巩固设计</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>行为准则
￼</p>
</blockquote>
</blockquote>
<p>◆  第11章 构建可演进的架构</p>
<blockquote>
<blockquote>
<p>。你可以通过构建可演进的架构来适应不断变化的需求。可演进的架构可避免复杂性，复杂性是演进性的敌人。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>复杂系统有两个特点：高依赖性和高隐蔽性。我们要再加上第三个：高惯性。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>高依赖性导致软件依赖于其他的API或代码行为。依赖性显然不可避免，甚至是可取的，但必须取得平衡</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>高隐蔽性使得程序员很难预测某项变更的副作用、代码的行为方式，以及需要修改的地方。晦涩的代码需要更长的时间来学习，开发人员更有可能在无意中破坏某些东西</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>高惯性是我们在奥斯特霍特的列表中加入的新特点，是指软件保持之前的使用习惯。用于快速实验且很容易被丢弃的代码具有低惯性，一项为十几个关键业务应用提供驱动力的服务具有高惯性</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>面对未来未知的需求，工程师们通常会选择下面两种策略中的一种：试图预判未来的需求，或者建立抽象模型作为逃生舱门，使后续的代码修改更容易。不要玩这种把戏，两种策略都会导致复杂性提高。要保持事情简单一些（被称为KISS的原则——保持简单、愚蠢）。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>YAGNI是一种看似简单的设计实践：不要构建你不需要的东西。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>避免过早优化，避免不必要的灵活抽象模型，以及避免最小可行产品(minimum viable product，MVP)所不需要的产品特性——你需要那些可以获得用户反馈的最低限度的功能集。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>过早优化是指开发人员在证明需要优化之前就对代码进行性能优化。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>保持代码灵活性的最佳方法之一是减少代码的总量。对于你所构建的一切，问问自己哪些是绝对必要的，其余的就舍弃掉。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>随着经验的增长，你会更善于预测何时需要灵活性和优化。同时，在你怀疑可以插入优化的地方放置接口填充程序，但不要真正实现它们。例如，如果你正在创建一个新的文件格式，并且怀疑你以后会需要压缩或加密，那么就提供一个指定编码的头信息，但是只实现未压缩的编码。这样你可以在未来添加压缩算法的实现代码，而头文件将使新代码很容易读取旧文件。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>识别领域边界和封装领域知识既是一门科学又是一门艺术。有一种完整的架构方法叫作领域驱动设计(domain-driven design，DDD)，它定义了一套广泛的概念和实践，将商业概念映射到软件上。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>完全向后兼容和向前兼容的变更意味着API的所有的历史版本和未来版本都可以相互操作。这可能很难维护，会产生像处理废弃字段逻辑这样的棘手问题</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>行为准则
￼</p>
</blockquote>
</blockquote>
<p>◆  第12章 敏捷计划</p>
<blockquote>
<blockquote>
<p>个人和互动高于流程和工具
工作的软件高于详尽的文档
客户合作高于合同谈判
响应变化高于遵循计划</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>看板不像Scrum那样使用固定周期冲刺。相反，看板定义了工作流程中的各个阶段，所有的工作条目都要经历这些阶段（例如，待着手、计划中、实施中、测试中、部署、展开）。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>用户故事是一种特殊的任务票，它从用户的角度定义了特性的需求，格式是“作为一名&lt;用户&gt;，我&lt;想&gt;&lt;这样&gt;”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>站会通常是在每天早上安排15分钟的会议（快到可以站着完成，不过实际上可以选择是否一定要站着）。在会议上，队友们围成一圈，介绍自上一次站会以来他们所做的工作，他们计划在未来做什么，以及他们是否发现了任何可能拖延或破坏冲刺进程的问题</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>状态应该被快速更新，这并不是一个排除故障的地方。尽量将你对进展的评论限制在最基本的范围内，并提出你有的任何问题。也要宣布你的发现：你发现的bug、软件的意外行为等。可以在稍后的停车场讨论中谈谈你的发现（当然不是在真正的停车场）。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>评审是为了庆祝团队的胜利、创造团结、提供反馈的机会，并使团队对进展保持诚实。在一个团队中，并不是所有的开发人员都在做同样的项目，所以评审可以帮助团队成员了解其他人正在做的事情。评审让队友保持同步，让每个人都有机会提供反馈，并认可杰出的工作，可创造凝聚力。项目状态评审也可以帮助团队就什么是真正的“完成”以及他们如何朝着目标前进达成一致，发现的问题可以在冲刺回顾会上讨论</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在回顾会中，团队聚在一起讨论自上次回顾会以来有哪些进展，哪些不足。会议通常分为3个阶段：分享、确定优先级和解决问题</p>
</blockquote>
</blockquote>
<p>2024/2/17 发表想法
虽然说计划赶不上变化，但有计划和无计划会导致两种截然不同的结果</p>
<blockquote>
<blockquote>
<p>路线图应该鼓励每个人对团队正在构建的东西进行长期思考，它并不是要成为关于团队9个月后将构建的东西的静态和不可变的文档。更远的地方应该更模糊，而更近的地方应该更准确</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>路线图应该鼓励每个人对团队正在构建的东西进行长期思考，它并不是要成为关于团队9个月后将构建的东西的静态和不可变的文档。更远的地方应该更模糊，而更近的地方应该更准确</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>行为准则
￼</p>
</blockquote>
</blockquote>
<p>◆  第13章 与管理者合作</p>
<blockquote>
<blockquote>
<p>与你的管理者构建工作关系将有助于你发展你的职业生涯、减少压力，甚至交付可靠的软件。与你的管理者合作需要相互了解。你必须了解你的管理者需要什么，这样你才能帮助他们。同样地，你的管理者也必须了解你的需求，这样他们才能帮助你。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>管理者们通过与高管或董事（“向上”）合作、与其他管理者（“横向”）合作以及与他们的团队（“向下”）合作来“管理”所有的这些事务</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一对一面谈(1∶1)和进展、计划与问题(progress-plans- problems，PPP)报告用于沟通和更新项目状态，而目标和关键结果(OKR)以及绩效评估则管理目标和成长</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>你应该制定议程，并在一对一面谈中承担大部分的谈话。在面谈之前，与你的管理者分享一份议程摘要。保存一份包含过去议程和笔记的面谈文档，与你的管理者分享你的文档，并在每次一对一面谈之前和之后更新它。如果你的管理者有某些话题要讨论，他们也可以添加自己的条目，但管理者的议程应该排在你的议程之后。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一对一面谈创造相互理解和联系。谈论一些看似无关紧要的话题很正常——你的猫、你的管理者对彩色运动鞋的喜爱或者天气。你正在努力建立一种关系，这种关系比用代码换取薪水更深入。个人和非主题的谈话很重要，但不要让每次一对一面谈都成为一次社交拜访。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>PPP中的每个P（进展、计划与问题）都有自己的小节。每个小节应该有3到5个要点，每个要点应该很简短，只有1到3个句子。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>OKR框架是公司定义目标和衡量其是否成功的一种方式。在OKR框架中，公司、团队和个人都定义了目标（目的），并为每个目标附上衡量标准（关键结果）。每个目标都附有3到5个关键结果，它们是标志着目标达成的具体指标。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>OKR从公司的高层通过团队一直流向每个人。每个人的OKR都有助于实现其团队的目标，而每个团队的OKR都有助于实现公司的目标。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不要把关键结果变成待办事项清单。它们不应该说明如何做某件事，而应该说明你知道如何衡量某件事已经完成。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一个良好的OKR可以让我们在需要做出选择的时候自由地选择正确的方法，而不是在我们设定OKR的时候就提前做好选择。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>OKR通常是按季度设定和评估的。与你的管理者合作，了解公司和团队的目标，使用更高阶的目标来定义你的OKR。尽量减少OKR的数量，这将使你保持专注。每个季度有1到3个OKR是一个合理的数值。如果超过5个，你就会把自己搞得过于疲惫。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>绩效考核会使用一个工具或像下面这样的模板来进行。
● 你今年做了什么？
● 今年有什么事情进展顺利？
● 今年有什么事情可以做得更好？
● 你在职业生涯中想得到什么？你认为自己在3到5年内会到达什么样的高度？</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>试着把考核看作一次机会：回顾你所取得的成果、谈论你接下来要做的事情、公开承认错失、制定下一年的成长计划，并向你的管理者提供反馈。你不应该对你的绩效考核的反馈感到惊讶，如果你感到惊讶，请与你的管理者讨论沟通上的偏差。一份成功的绩效考核应该给你具体的行动来实现你的目标。</p>
</blockquote>
</blockquote>
<p>2024/2/18 发表想法
辩证性思维看待，得有自己的判断力，选择对自己有改善的接受</p>
<blockquote>
<blockquote>
<p>不要听信表面上的反馈。你的管理者仅仅是视角之一（尽管是一个重要的视角），试着把管理者的反馈纳入你的观点，而不是直接采用管理者的反馈</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>好的管理者希望从他们的团队中获得反馈。管理者们需要了解事情的进展——哪些是有效的，哪些是无效的。团队中的每个人都会有独特的观点，反馈可消除盲点</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在提供反馈时，使用情况、行为和影响(situation-behavior- impact，SBI)框架。首先，描述情况。然后，描述行为：你认为值得表扬的或有问题的具体行为。最后，解释影响：该行为的影响以及它的重要性</p>
</blockquote>
</blockquote>
<p>2024/2/18 发表想法
机会一直都有，但如何发现机会、争取机会、利用机会为自己成长添砖加瓦，每个人都有自己的选择吧</p>
<blockquote>
<blockquote>
<p>请认识到机会以多种形式而存在：新项目、新挑战、要指导的实习生、演讲机会、要写的博客文章、培训，或要合作的团队。在正确的视角下，你做的每件事都是成长的机会。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>请认识到机会以多种形式而存在：新项目、新挑战、要指导的实习生、演讲机会、要写的博客文章、培训，或要合作的团队。在正确的视角下，你做的每件事都是成长的机会。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果你已经给出了反馈意见，并保持了耐心，但事情仍然没有进展，那就起身离开。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>行为准则
￼</p>
</blockquote>
</blockquote>
<p>◆  第14章 职业生涯规划</p>
<blockquote>
<blockquote>
<p>资深工程师所应具备的技术能力、执行能力、沟通力和领导力。重要的是，资深工程师的工作范围和重点也会发生变化。初级工程师实现特性和完成任务，而资深工程师要处理更多的不确定性和模糊性。他们帮助确定工作内容、应对更大或更关键的项目，并且需要更少的指导。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>T型人才描述为：
……这些人既是通才（在一系列广泛的有价值的事情上有很高的技能——T的顶端横线），也是专家（在某个垂直领域中成为佼佼者——T的竖线）</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一个好的团队会有一个坚实的T型人才的组合。产品开发团队的成员有可能拥有不同的深度领域，而基础设施团队的成员则更有可能拥有共同的专长。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>了解晋升的流程，确保你的工作是有价值的和可见的，当你认为自己接近下一个级别时，要大声说出来。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>说到晋升谈话，时机很重要。在你认为你已经准备好晋升之前，大约在你达到一半的时候，就开始这些谈话。尽早参与，使你和你的管理者都有时间进行协调并解决差距问题。如果你已经拖到了你认为你应该得到晋升，但你的管理者并不同意的时候，晋升谈话就会变成如何解决冲突，而不是提出一个计划。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>塔尼娅·赖利的演讲和博文建议，如果你的管理者不认为你贡献的价值是晋升的途径，你就不要再做胶水工作了——即使它会在短期内伤害团队。这让人如鲠在喉，而且可能看起来不公平，但是让事情公平的责任在管理层，而不在你。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“邻家芳草绿，隔岸风景好”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果你仍然有适当的薪酬、成长和学习，就请坚持你现在的工作。看到团队、公司和软件随着时间的推移而不断发展是非常有价值的。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2024/chengxuyuandeREADME.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 41 本《没事，一起都会好起来的》]]></title>
            <link>https://super456.github.io/posts/read-book/2024/meishiyiqidouhuihaoqilaide.html</link>
            <guid>https://super456.github.io/posts/read-book/2024/meishiyiqidouhuihaoqilaide.html</guid>
            <pubDate>Sun, 04 Feb 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[韩国人气插画师 Jedit 在网络上发起了 365 白日梦计划，在 356 天内，每天发表一幅梦幻、如白日梦场景的插画，本书收录了其中最受好评的 115 幅插画。在 Jedit 的画作中，经常出现如上弦月、飞天鲸鱼，像精灵般的小人等神奇元素，也有街头午后、美丽花园、公园等寻常场景，融合了现实与非现实的不可思议感。 Jedit 并不总是只描绘幻想中的世界。我们日常生活中的碎片也在其笔下像神秘的场面一样诞生。在向路边的猫打招呼的瞬间，进入胡同拐角的瞬间，在河的桥上散步的瞬间等谁都经历过的瞬间，在其笔下就像拥有魔法一般，使得我们的日常生活也通过绘作变得特别。 他还为每幅画作配上几句短短的花絮，这些彷佛摘录于长篇故事的话语片段，让每一幅画作都充满了故事感！适合在睡前、想要安慰或感到沮丧时，或者心里感到疲惫、不安的时候阅读]]></description>
            <content:encoded><![CDATA[<h1 id="第-41-本《没事-一起都会好起来的》" tabindex="-1">第 41 本《没事，一起都会好起来的》 <a class="header-anchor" href="#第-41-本《没事-一起都会好起来的》" aria-label="Permalink to &quot;第 41 本《没事，一起都会好起来的》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>韩国人气插画师 Jedit 在网络上发起了 365 白日梦计划，在 356 天内，每天发表一幅梦幻、如白日梦场景的插画，本书收录了其中最受好评的 115 幅插画。在 Jedit 的画作中，经常出现如上弦月、飞天鲸鱼，像精灵般的小人等神奇元素，也有街头午后、美丽花园、公园等寻常场景，融合了现实与非现实的不可思议感。</p>
<p>Jedit 并不总是只描绘幻想中的世界。我们日常生活中的碎片也在其笔下像神秘的场面一样诞生。在向路边的猫打招呼的瞬间，进入胡同拐角的瞬间，在河的桥上散步的瞬间等谁都经历过的瞬间，在其笔下就像拥有魔法一般，使得我们的日常生活也通过绘作变得特别。</p>
<p>他还为每幅画作配上几句短短的花絮，这些彷佛摘录于长篇故事的话语片段，让每一幅画作都充满了故事感！适合在睡前、想要安慰或感到沮丧时，或者心里感到疲惫、不安的时候阅读</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《没事，一切都会好起来的》
Jedit著绘
8个笔记</p>
<p>◆  点评</p>
<p>2024/2/5 认为好看
好美的插画，感觉就是自己另一个世界的映射，可以保存下来欣赏。配上柔暖的文案，画面感像让你躺在云朵上一样舒服、轻松、享受当下。适合疲惫、心情不悦、不如意的时候阅读。也许这就是不开心只是让你活着，开心可以让你活得更好吧😁</p>
<p>◆  想与你一同漫步</p>
<blockquote>
<blockquote>
<p>想与你一同漫步</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>但清晨一定会如约而至。当阳光发出耀眼的光芒，当万物都在闪闪发光，这瞬间，将是多么动人心魄。只有在最深邃的夜空中，我们才会发现，星光是多么灿烂。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>打起精神来，再往前迈出一步吧。也许到了某一天回头看，一路走来的脚印已经蜿蜒成了一条小路，想想那幅景色，该是多么美丽啊。</p>
</blockquote>
</blockquote>
<p>◆  一些安慰</p>
<blockquote>
<blockquote>
<p>就算有时候，我们觉得一切都糟透了，
美好的瞬间也一定会不期而遇的。
憧憬吧。</p>
</blockquote>
</blockquote>
<p>◆  希望</p>
<blockquote>
<blockquote>
<p>一打开门，光便透了进来。
虽然只是一点点、一点点微小的光。
很快就会豁然开朗的。
希望，就是从这里出发的。</p>
</blockquote>
</blockquote>
<p>◆  已遗忘的梦</p>
<blockquote>
<blockquote>
<p>但有的梦，正因为被遗忘才更美丽，
有的回忆，正因为被遗忘才更动人。</p>
</blockquote>
</blockquote>
<p>◆  离别</p>
<blockquote>
<blockquote>
<p>如果把每一天都算作是一场离别，
我会将这离别变成最唯美的过程。
待到下一个清晨来临，
再带着全新的怦然心动向它问好。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2024/meishiyiqidouhuihaoqilaide.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 40 本《雪中悍刀行》]]></title>
            <link>https://super456.github.io/posts/read-book/2024/xuezhonghandaoxing.html</link>
            <guid>https://super456.github.io/posts/read-book/2024/xuezhonghandaoxing.html</guid>
            <pubDate>Fri, 26 Jan 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[该小说讲述一个关于庙堂权争与刀剑交错的时代，一个暗潮涌动粉墨登场的江湖。]]></description>
            <content:encoded><![CDATA[<h1 id="第-40-本《雪中悍刀行》" tabindex="-1">第 40 本《雪中悍刀行》 <a class="header-anchor" href="#第-40-本《雪中悍刀行》" aria-label="Permalink to &quot;第 40 本《雪中悍刀行》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>该小说讲述一个关于庙堂权争与刀剑交错的时代，一个暗潮涌动粉墨登场的江湖。</p>
<h2 id="感悟" tabindex="-1">感悟 <a class="header-anchor" href="#感悟" aria-label="Permalink to &quot;感悟&quot;">&ZeroWidthSpace;</a></h2>
<p>24 年 1 月 26 日开始阅读...，最喜欢的武侠小说，持续阅读中🚀。432 万字，会有读完那一天的😎</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2024/xuezhonghandaoxing.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 39 本《小王子》]]></title>
            <link>https://super456.github.io/posts/read-book/2024/xiaowangzi.html</link>
            <guid>https://super456.github.io/posts/read-book/2024/xiaowangzi.html</guid>
            <pubDate>Thu, 25 Jan 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[《小王子》是一本足以让人永葆童心的不朽经典，被全球亿万读者誉为非常值得收藏的书。 遥远星球上的小王子，与美丽而骄傲的玫瑰吵架负气出走，在各星球漫游中，小王子遇到了傲慢的国王、酒鬼、惟利是图的商人，死守教条的地理学家，最后来到地球上，试图找到治愈孤独和痛苦的良方。 这时，他遇到一只奇怪的狐狸，于是奇妙而令人惊叹的事情发生了…… 《小王子》犹如透亮的镜子，照出了荒唐的成人世界。她在提醒我们，只有爱，才是最高的哲学，才是我们活下去的唯一理由。” ]]></description>
            <content:encoded><![CDATA[<h1 id="第-39-本《小王子》" tabindex="-1">第 39 本《小王子》 <a class="header-anchor" href="#第-39-本《小王子》" aria-label="Permalink to &quot;第 39 本《小王子》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>《小王子》是一本足以让人永葆童心的不朽经典，被全球亿万读者誉为非常值得收藏的书。
遥远星球上的小王子，与美丽而骄傲的玫瑰吵架负气出走，在各星球漫游中，小王子遇到了傲慢的国王、酒鬼、惟利是图的商人，死守教条的地理学家，最后来到地球上，试图找到治愈孤独和痛苦的良方。
这时，他遇到一只奇怪的狐狸，于是奇妙而令人惊叹的事情发生了……</p>
<p>《小王子》犹如透亮的镜子，照出了荒唐的成人世界。她在提醒我们，只有爱，才是最高的哲学，才是我们活下去的唯一理由。”</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>待写感悟📒...</p>
<p>《小王子》
[法]安托万·德·圣埃克苏佩里著
22个笔记</p>
<p>◆  导读</p>
<blockquote>
<blockquote>
<p>最令人钦佩的是，安托万·圣埃克苏佩里在《小王子》中隐藏了如此丰富的信息和如此深刻的思想，但他所用的文字竟然极其朴素和纯净</p>
</blockquote>
</blockquote>
<p>◆  献词</p>
<p>2024/1/21 发表想法
虽然我们现在不是个小孩👶🏻，但有时候我们也可以成为个小孩。只不过我们长大了，该承担应有的责任和义务，做一些我们不得不做的事。然而在内心深处依然藏着一个长不大的孩子，随时等你唤醒，陪你玩陪你闹😊。所以呀，有时候，别忘了这个小孩的存在呢</p>
<blockquote>
<blockquote>
<p>所有大人最初都是孩子（但这很少有人记得）。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>所有大人最初都是孩子（但这很少有人记得）。</p>
</blockquote>
</blockquote>
<p>◆  Chapter 06</p>
<p>2024/1/21 发表想法
落日归山海，烟花向星辰。也许我们喜欢的并不是落日烟花，而是美的一种存在形式</p>
<blockquote>
<blockquote>
<p>原来在很长的时间里，你唯一的消遣是默默地欣赏日落。</p>
</blockquote>
</blockquote>
<p>2024/1/21 发表想法
日出东方催人醒，不及晚霞懂我心。也许难过的时候，心情会特别低沉，刚好落日余晖的照耀和氛围烘托下，让人心情舒畅愉悦，在美好的事物面前，好像豁然开朗的感觉。这也有很多写日落晚霞的古诗词描绘了很美的画境，让人无限遐想，热爱喜欢吧</p>
<blockquote>
<blockquote>
<p>“你知道吗，人在难过的时候就会爱上日落。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“你知道吗，人在难过的时候就会爱上日落。”</p>
</blockquote>
</blockquote>
<p>◆  Chapter 07</p>
<p>2024/1/21 发表想法
我见众生皆草木，唯有见你是青山。因为爱，你总是让人看起来很特别，独一无二的</p>
<blockquote>
<blockquote>
<p>如果有人爱上一朵花，天上的星星有亿万颗，而这朵花只长在其中一颗上，这足以让他在仰望夜空时感到很快乐。他会告诉自己：‘在星空的某处有我的花。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果有人爱上一朵花，天上的星星有亿万颗，而这朵花只长在其中一颗上，这足以让他在仰望夜空时感到很快乐。他会告诉自己：‘在星空的某处有我的花。</p>
</blockquote>
</blockquote>
<p>◆  Chapter 08</p>
<p>2024/1/21 发表想法
总有些人的出现，就是为了教会你成长。有些事，不经一堑不长一智，人生总会有遗憾，但我们还是要向前看，说不定最美好的就在眼前呢</p>
<blockquote>
<blockquote>
<p>“可惜从前我什么都不懂！我应该看她的行动，而不是听她的言语！她为我散发芬芳，点亮我的生活。我不应该离开她的，我应该看出藏在她那些小把戏后面的柔情。花儿的心事好难捉摸的！当时我太小了，不懂得爱是什么。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“可惜从前我什么都不懂！我应该看她的行动，而不是听她的言语！她为我散发芬芳，点亮我的生活。我不应该离开她的，我应该看出藏在她那些小把戏后面的柔情。花儿的心事好难捉摸的！当时我太小了，不懂得爱是什么。”</p>
</blockquote>
</blockquote>
<p>◆  Chapter 11</p>
<p>2024/1/21 发表想法
我所遇到的人中，越厉害的人越谦虚。虚荣的人就像井底之蛙，“不见庐山真面目，只缘身在此山中”。或者存在某一种偏见，总以为自己比别人厉害，容易以自我为中心，只会显得自己很无知吧。放低身段，以不同的角度看待问题，多了解这个复杂的世界，也许你会得到不一样的答案</p>
<blockquote>
<blockquote>
<p>因为在虚荣的人看来，所有人都是他的崇拜者。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>因为在虚荣的人看来，所有人都是他的崇拜者。</p>
</blockquote>
</blockquote>
<p>◆  Chapter 14</p>
<blockquote>
<blockquote>
<p>可是在我看来，他是唯一不荒唐的人。也许这是因为他那么忙碌却不是为了他自己。</p>
</blockquote>
</blockquote>
<p>◆  Chapter 20</p>
<p>2024/1/23 发表想法
想起路遥《平凡的世界》中，出现过这样一段对孙少平的描写：“谁让你读了这么多书，又知道了双水村以外还有个大世界，如果从小你就在田地里日出而作，日落而息，那你现在就会和众乡亲抱同一个理想。经过几年的辛苦，像大哥一样娶个满意的媳妇，生个胖儿子，加上你的体魄，会成为一名出色的庄家人。不幸的是，你知道太多了，思考的太多了，因此才有了这种不为周围人所理解的苦恼。”随着我们的阅历增长和认知提高，对这个世界及自己有了更多的认识和了解，但不要妨碍我们，先成为自己的山，再去找寻心中的海😊</p>
<blockquote>
<blockquote>
<p>然后他又想：“我原来以为我很富裕，拥有一朵独特的花，但她其实只是一朵玫瑰。这朵花，再加上三座只有我的膝盖那么高的火山，而且其中一座很可能永远不会再喷发，这些并不足以让我成为非常伟大的王子……”他趴在草地上哭了起来。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>然后他又想：“我原来以为我很富裕，拥有一朵独特的花，但她其实只是一朵玫瑰。这朵花，再加上三座只有我的膝盖那么高的火山，而且其中一座很可能永远不会再喷发，这些并不足以让我成为非常伟大的王子……”他趴在草地上哭了起来。</p>
</blockquote>
</blockquote>
<p>◆  Chapter 21</p>
<blockquote>
<blockquote>
<p>看东西只有用心才能看得清楚。重要的东西用眼睛是看不见的。</p>
</blockquote>
</blockquote>
<p>◆  Chapter 24</p>
<blockquote>
<blockquote>
<p>小王子睡着了，于是我抱着他，再次走了起来。我很感动。我觉得我抱着的是一件脆弱的宝贝。我觉得地球上没有比他更脆弱的东西。在月光中，看着他苍白的前额、紧闭的双眼和在风中飘扬的卷发，我心里想：“我看见的只是个躯壳。最重要的东西是看不见的……”</p>
</blockquote>
</blockquote>
<p>◆  Chapter 25</p>
<blockquote>
<blockquote>
<p>如果让自己被驯化，就难免会流泪……</p>
</blockquote>
</blockquote>
<p>◆  Chapter 26</p>
<blockquote>
<blockquote>
<p>“就像那朵花，如果你爱上一朵生长在某颗星球上的花，当你抬头望着夜空时，你会感到很甜蜜。仿佛所有的星星都开满了鲜花。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“好像我给你的不是星星，而是许多会笑的铃铛……”</p>
</blockquote>
</blockquote>
<p>◆  Chapter 27</p>
<blockquote>
<blockquote>
<p>望望夜空吧。问你自己：绵羊是否已经把那朵花吃掉？你会发现一切都将变得不同……</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在我看来，这是全世界最美丽、最悲伤的景色。它和前一页的景色相同，但我再次把它画出来，是为了给你留下深刻的印象。这就是小王子在地球上出现又消失的地方。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2024/xiaowangzi.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 37 本《半小时漫画中国史 0》]]></title>
            <link>https://super456.github.io/posts/read-book/2024/banxiaoshimanhuazhongguoshi0.html</link>
            <guid>https://super456.github.io/posts/read-book/2024/banxiaoshimanhuazhongguoshi0.html</guid>
            <pubDate>Sun, 21 Jan 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[看半小时漫画，通五千年历史，用漫画解读历史，开启读史新潮流。 仅仅通过手绘和段子，陈磊（笔名：混子哥）就清晰地捋出了从中国人起源到西周的历史脉络：没想到我们的祖先可能来自非洲；大禹治水的神话传说；夏朝就是一本人肉错题集；西周分封制其实就是在玩斗地主……掀开纷繁复杂的历史表象，略去无关紧要的细枝末节，每一页都有历史段子，每三秒让你笑翻一次。而手绘的传说人物则是呆萌又可爱：燧人氏、伏羲、神农氏、黄帝、尧、舜、禹……这些人物全都和你我一样，有优点和缺点，有朋友和敌人。他们在历史关键节点迸发出的惊人能量铸就了五千年的精彩中国史。 翻开本书，半小时搞懂中华文明从何起源！]]></description>
            <content:encoded><![CDATA[<h1 id="第-37-本《半小时漫画中国史-0》" tabindex="-1">第 37 本《半小时漫画中国史 0》 <a class="header-anchor" href="#第-37-本《半小时漫画中国史-0》" aria-label="Permalink to &quot;第 37 本《半小时漫画中国史 0》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>看半小时漫画，通五千年历史，用漫画解读历史，开启读史新潮流。 仅仅通过手绘和段子，陈磊（笔名：混子哥）就清晰地捋出了从中国人起源到西周的历史脉络：没想到我们的祖先可能来自非洲；大禹治水的神话传说；夏朝就是一本人肉错题集；西周分封制其实就是在玩斗地主……掀开纷繁复杂的历史表象，略去无关紧要的细枝末节，每一页都有历史段子，每三秒让你笑翻一次。而手绘的传说人物则是呆萌又可爱：燧人氏、伏羲、神农氏、黄帝、尧、舜、禹……这些人物全都和你我一样，有优点和缺点，有朋友和敌人。他们在历史关键节点迸发出的惊人能量铸就了五千年的精彩中国史。 翻开本书，半小时搞懂中华文明从何起源！</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《半小时漫画中国史0》
陈磊·半小时漫画团队
2个笔记</p>
<p>◆  点评</p>
<p>2024/1/21 认为好看
了解三皇五帝夏商周历史</p>
<p>◆  一 中国人类起源：没想到我们的祖先可能来自非洲</p>
<blockquote>
<blockquote>
<p>中国人类起源：没想到我们的祖先可能来自非洲</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2024/banxiaoshimanhuazhongguoshi0.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 38 本《憋说话，吻我》]]></title>
            <link>https://super456.github.io/posts/read-book/2024/bieshuohuawenwo.html</link>
            <guid>https://super456.github.io/posts/read-book/2024/bieshuohuawenwo.html</guid>
            <pubDate>Sun, 21 Jan 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[《憋说话，吻我》是一本治愈暖萌、逗比毒舌的漫画集，收录了兰迪诗（Landysh）170 多张漫画，每一页都有一个让你捧腹大笑的主人公，他们患有单身癌、恋爱病、自恋症、吃货病、恋床癖……但他们善于发现生活中的乐趣，他们专门拯救不开心的你。笑是人生最好的药，不要放弃治疗啊！ 大家总说，你的真命天子早晚都回来，我在想，我的真命天子是不是再来的路上被车撞了。 如何让女人发狂？只需要两个步骤：1. 给她拍张照片。2. 不给她看。 女王从不会迟到，只是其他人早到了而已。 我一年只想放两次假，每次放六个月就够了。 我费了那么大劲儿爬到食物链顶端，不是为了吃素的！ …………………………………………………………… 170 多幅漫画，你中了几条？]]></description>
            <content:encoded><![CDATA[<h1 id="第-38-本《憋说话-吻我》" tabindex="-1">第 38 本《憋说话，吻我》 <a class="header-anchor" href="#第-38-本《憋说话-吻我》" aria-label="Permalink to &quot;第 38 本《憋说话，吻我》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>《憋说话，吻我》是一本治愈暖萌、逗比毒舌的漫画集，收录了兰迪诗（Landysh）170 多张漫画，每一页都有一个让你捧腹大笑的主人公，他们患有单身癌、恋爱病、自恋症、吃货病、恋床癖……但他们善于发现生活中的乐趣，他们专门拯救不开心的你。笑是人生最好的药，不要放弃治疗啊！
大家总说，你的真命天子早晚都回来，我在想，我的真命天子是不是再来的路上被车撞了。
如何让女人发狂？只需要两个步骤：1. 给她拍张照片。2. 不给她看。</p>
<p>女王从不会迟到，只是其他人早到了而已。</p>
<p>我一年只想放两次假，每次放六个月就够了。</p>
<p>我费了那么大劲儿爬到食物链顶端，不是为了吃素的！</p>
<p>……………………………………………………………</p>
<p>170 多幅漫画，你中了几条？</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《憋说话，吻我》
兰迪诗著绘
1个笔记</p>
<p>◆  点评</p>
<p>2024/1/21 认为好看
正如本书介绍所说是一本治愈暖萌、逗比毒舌的漫画集。一幅幅漫画揭露生活真实自己的想法和乐趣，生活不需要你活得那么累，需要一点能量告诉你，想要什么样的生活方式，取决于你内心怎么想的呢</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2024/bieshuohuawenwo.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 36 本《第一次活，请多指教》]]></title>
            <link>https://super456.github.io/posts/read-book/2024/diyicihuoqingduozhijiao.html</link>
            <guid>https://super456.github.io/posts/read-book/2024/diyicihuoqingduozhijiao.html</guid>
            <pubDate>Sun, 14 Jan 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[没有彩排的人生，对小失误，宽容一点也无妨。]]></description>
            <content:encoded><![CDATA[<h1 id="第-36-本《第一次活-请多指教》" tabindex="-1">第 36 本《第一次活，请多指教》 <a class="header-anchor" href="#第-36-本《第一次活-请多指教》" aria-label="Permalink to &quot;第 36 本《第一次活，请多指教》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>没有彩排的人生，对小失误，宽容一点也无妨。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《第一次活，请多指教》
寂寥
8个笔记</p>
<p>◆  点评</p>
<p>2024/1/14 认为好看
这是一本关于小企鹅在旅行中遇到人生百态小动物，从中领悟社会和人生理解感悟的书。想给我们这些打工人在生活中能找到一丝的宽慰吧。因为我们都在努力的活着，生活已经很累了，总要找到一些乐趣去感受这个世界的美好吧。书中有很多节片段漫画我都很喜欢，给了我不一样的感觉，就好像阳光一样，一次又一次照进我的内心温暖我。令我印象深刻的这几个片段漫画：</p>
<ol>
<li>“即便良辰美景在前，我还是会想念烦闷无聊的日常生活。无论深处何方，我都无法忘怀深厚走过的路和过去遇到的人。”那些我们曾想逃离的时光，回头看，确是令人无法忘记且想要回到过去的美好记忆。比如校园时代。日常生活才是人间常态，良辰美景本就是人间稀客。偶尔感动，常常自愈吧</li>
<li>小企鹅旅行的目的是找回心动的感觉，因为被生活窄干到索然无味，所以想要逃离，找回一种新鲜蓬勃的，让心脏重新跳动的感觉。把自己打死在了“想当然”的框框里，忘记了好奇心，忘记了心动，甚至忘记了心跳，希望通过旅行治好这些，我想我们也一样，出发寻找自己，体验自己不一样的人生</li>
<li>“我只是按照自己的速度生活着。”在这个日新月异的时代，为了适应这个社会，我们不得不快速学习掌握技能，去适应工作，去适应快节奏的生活等等。好像我们被无形的手推着往前走，又不得不走，变成赶时间的人。逐渐变得功利浮躁，都忘了曾经心动的自己。也许可以的话，“过尽千帆仍有梦，眉目清扬是少年”</li>
<li>“把烦恼折成纸飞机，然后飞出去。为什么要这样做呢，因为没有小动物愿意听它那些悲伤的故事，它也不能对着石头说，也不能对着一棵树去诉说，感觉好丢人吧。这样，如果某个跟它同病相怜的人看到它的故事，应该也许能得到一些宽慰吧。”是的，有些事，也许真的不是别人不懂，也不知道怎么安慰你，只是没经历过，不知道跟你怎么感同身受而已</li>
<li>“怎么找到自己喜欢做的事呢，那就是多尝试，因为我们没办法喜欢一道没有吃过的菜，也没办法喜欢一个没去过的地方。”人生很多事都是迷茫的，多尝试，多体验不一样的事情，慢慢的自然而然就知道要什么，喜欢什么，这都是在尝试之后才知道的，而不是啥都不干就能想明白的事情</li>
<li>“我想要画画是因为在想要画画的时候可以随心所欲地画。所以呀，我想把喜欢的事情留作单纯喜欢的事情。”如果把喜欢的事夹杂其他功利或目的，再怎么喜欢，也会日渐式微，把纯粹的喜欢一点一点磨灭掉吧。确实梦想跟现实是有很大差距的，如果可以的话，但也不要为了现实跟梦想妥协，能坚持实现自己的梦想也不容易</li>
<li>“但是所谓梦想，单单存在就已经很闪亮了呢，让人心暖。”我们都以为，一定要实现自己的梦想，才能让自己的人生变得更好更幸福。在实现梦想的过程，梦想驱动自己的过程，梦想一点一点改变自己的过程，不都是美好的吗？就算最终结局不如意，这个过程就让人心暖了，至少你有梦想，你在为梦想奋斗了呢</li>
<li>“如果因为害怕失败而不敢尝试，那这一辈子我就再也看不到新的世界了。”我有时也在想，是不是工作久了，变得心性沉稳，做事情喜欢权衡利弊了。总少了那种热情和闯劲，可能也因为害怕失败，害怕影响自己的工作和生活，这样会让自己过得畏畏缩缩，失去人生很多体验乐趣，也失去那个“儿时竟觉星可摘，抬头不见少年郎。”我应该努力找回自己，想做的事就去做呗，想去的地方就去呗，让自己的人生过得更好就对了
还有很多“自尊感，就是不让我创造出来的恐惧和不安侵蚀我，一直守护我。”、“有时候很有必要以旁观者的角度，去观察，去感受自己的生活和所在的处境。”等等...
这些漫画片段正如作者所说就像创口贴一样，给我们的受伤的人生贴满一个又一个的补丁，让我们可以恢复健康的状态，更多的是治愈好我们的伤痛和给我们带来希冀，然后重新出发。我们都是第一次活着，都是自己人生剧本的主角，没必要想太多，多尝试，多体验，一切美好的事情都在路上</li>
</ol>
<p>◆  前言</p>
<blockquote>
<blockquote>
<p>希望这本书能够成为一枚小小的创可贴，
能为你的伤口，打个补丁。</p>
</blockquote>
</blockquote>
<p>◆  1 我的人生</p>
<p>2024/1/14 发表想法
孤单确实不能消失，但可以转移，让你暂时忽略孤单。比如一个人时候总感觉很无聊很孤单，被世界冷落一样。这个时候给自己找点事做，做自己喜欢的事，可以看部电影，可以看书，听音乐，做家务等等，让自己忙起来就好，自己的注意力转移了就不会感觉孤单了</p>
<blockquote>
<blockquote>
<p>[插图]</p>
</blockquote>
</blockquote>
<p>2024/1/14 发表想法
被这句话暖到了：即便良辰美景在前，我还是会想念烦闷无聊的日常生活。无论深处何方，我都无法忘怀深厚走过的路和过去遇到的人。那些我们曾想逃离的时光，回头看，确是令人无法忘记且想要回到过去的美好记忆。比如校园时代。日常生活才是人间常态，良辰美景本就是人间稀客。偶尔感动，常常自愈</p>
<blockquote>
<blockquote>
<p>[插图]</p>
</blockquote>
</blockquote>
<p>2024/1/14 发表想法
在这个日新月异的时代，为了适应这个社会，我们不得不快速学习掌握技能，去适应工作，去适应快节奏的生活等等。好像我们被无形的手推着往前走，又不得不走，变成赶时间的人。逐渐变得功利浮躁，都忘了曾经心动的自己。也许可以的话，“过尽千帆仍有梦，眉目清扬是少年”</p>
<p>◆  2 世上没有一模一样的关系</p>
<p>2024/1/14 发表想法
如果把喜欢的事夹杂其他功利或目的，再怎么喜欢，也会日渐式微，把纯粹的喜欢一点一点磨灭掉吧。确实梦想跟现实是有很大差距的，如果可以的话，但也不要为了现实跟梦想妥协，能坚持实现自己的梦想也不容易</p>
<p>◆  3 请回答，爱情</p>
<p>2024/1/14 发表想法
我们都以为，一定要实现自己的梦想，才能让自己的人生变得更好更幸福。在实现梦想的过程，梦想驱动自己的过程，梦想一点一点改变自己的过程，不都是美好的吗？就算最终结局不如意，这个过程就让人心暖了，至少你有梦想，你在为梦想奋斗了呢</p>
<p>2024/1/14 发表想法
我有时也在想，是不是工作久了，变得心性沉稳，做事情喜欢权衡利弊了。总少了那种热情和闯劲，可能也因为害怕失败，害怕影响自己的工作和生活，这样会让自己过得畏畏缩缩，失去人生很多体验乐趣，也失去那个“儿时竟觉星可摘，抬头不见少年郎。”我应该努力找回自己，想做的事就去做呗，想去的地方就去呗，让自己的人生过得更好就对了</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2024/diyicihuoqingduozhijiao.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 35 本《我在北京送快递》]]></title>
            <link>https://super456.github.io/posts/read-book/2024/wozaibeijingsongkuaidi.html</link>
            <guid>https://super456.github.io/posts/read-book/2024/wozaibeijingsongkuaidi.html</guid>
            <pubDate>Sat, 13 Jan 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[进入社会工作至今的二十年间，胡安焉走南闯北，辗转于广东、广西、云南、上海、北京等地，做过快递员、夜班拣货工人、便利店店员、保安、自行车店销售、服装店导购、加油站加油工……他将日常的点滴和工作的甘苦化作真诚的自述，记录了一个平凡人在生活中的辛劳、私心、温情、正气。 在物流公司夜间拣货的一年，给他留下了深刻的生理印记：“这份工作还会令人脾气变坏，因为长期熬夜以及过度劳累，人的情绪控制力会明显下降……我已经感到脑子不好使了，主要是反应变得迟钝，记忆力开始衰退。”在北京送快递的两年，他“把自己看作一个时薪30元的送货机器，达不到额定产出值就恼羞成怒、气急败坏”…… 但他最终认识到，怀着怨恨的人生是不值得过的。这些在事后追忆中写成的工作经历，渗透着他看待生活和世界的态度与反思，旨在表达个人在有限的选择和局促的现实中，对生活意义的直面和肯定：生活中许多平凡隽永的时刻，要比现实困扰的方方面面对人生更具有决定意义]]></description>
            <content:encoded><![CDATA[<h1 id="第-35-本《我在北京送快递》" tabindex="-1">第 35 本《我在北京送快递》 <a class="header-anchor" href="#第-35-本《我在北京送快递》" aria-label="Permalink to &quot;第 35 本《我在北京送快递》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>进入社会工作至今的二十年间，胡安焉走南闯北，辗转于广东、广西、云南、上海、北京等地，做过快递员、夜班拣货工人、便利店店员、保安、自行车店销售、服装店导购、加油站加油工……他将日常的点滴和工作的甘苦化作真诚的自述，记录了一个平凡人在生活中的辛劳、私心、温情、正气。</p>
<p>在物流公司夜间拣货的一年，给他留下了深刻的生理印记：“这份工作还会令人脾气变坏，因为长期熬夜以及过度劳累，人的情绪控制力会明显下降……我已经感到脑子不好使了，主要是反应变得迟钝，记忆力开始衰退。”在北京送快递的两年，他“把自己看作一个时薪30元的送货机器，达不到额定产出值就恼羞成怒、气急败坏”……</p>
<p>但他最终认识到，怀着怨恨的人生是不值得过的。这些在事后追忆中写成的工作经历，渗透着他看待生活和世界的态度与反思，旨在表达个人在有限的选择和局促的现实中，对生活意义的直面和肯定：生活中许多平凡隽永的时刻，要比现实困扰的方方面面对人生更具有决定意义</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《我在北京送快递》
胡安焉
57个笔记</p>
<p>◆  点评</p>
<p>2024/1/13 认为好看
这是一个很普通人的生活经历，没有什么特别之处，但却能让我感悟收获良多。读完第一感受就是作者文笔朴实无华，让人感觉特别真诚，有种莫名的亲近感，就像身边朋友在给你讲述他的 20 年里 19 份工作经历、思考、感悟这些，我想这也是容易让人产生共鸣的地方吧
这本书让我了解这个社会 19 种不同身份职业的工作形式以及心酸苦楚，也许只有经历过的人才懂吧。难能可贵的是从书中感受到作者的个人成长过程，以及对自己精神世界的剖析、思考、重塑。我也从中学到了作者给的几点启示思考：</p>
<ol>
<li>从生活工作中多学习、反思自己，写作是很好的记录方式。作者将自己每一份工作和生活中的思考都真实的表达出来，让我们可以体会到作者当时的场景和感受，虽然有时候会有情绪过激或做的不够好的地方，都有及时的总结反思记录下来，对他自己精神世界上的成长是非常大的。正如作者所说：“通过写作我在一定程度上超越了打工和自由的对立：在有限的选择和局促的现实中，我越来越感觉到生活中许多平凡隽永的时刻，要比现实困扰的方方面面对人生更具决定意义。”因为写作，改变了他很多，让他看到不一样的世界吧</li>
<li>在忙碌的生活工作中，依然可以坚守自己的爱好，因为你真的喜欢。对于作者来说，一直坚持的就是读书写作。工作在忙也在抽空去做，有在送快递时候读完乔伊斯的《尤利西斯》等书，有在云南开女装店时候读书写作，有在广州开网店时候读书写作，也有中途 3 年在家就是为了读书写作等等。也正是因为他热爱写作，哪怕写作不能够养活自己，但还依然还在坚持。就因为“读书和写作在一定程度上实现了精神自由。”和“现实世界有多贫瘠，精神世界就有多丰饶。”我想他应该找到了自己内心那一份自由与热爱吧。希望我们也一样，低头赶路的同时也别忘了抬头看看天空呢</li>
<li>无论生活工作有多么糟糕，也要报之以歌，笑对生活。人生哪有那么一帆风顺啊！作者生活工作遇到很多不顺心的事情，比如处理不好同事之间的关系，遇到麻烦的客户解决不了，跟别人合伙做生意有矛盾等等，有时也会焦虑、自卑，低不成高不就。生活是自己的，人生是自己的，你要成为你自己。开心的过好当下生活。“在我看来，只要是认真度过的日子，最后都不会没有意义。这个时候假如亚历山大大帝来问我需要什么，我也会说，别挡我的光线就好。”哈哈哈，人生就是这样，当我们苦苦追寻的人生意义，只不过就是“人生的意义，我越来越发现生活中许多隽永的时刻，要比显示困扰的方方面面对人生更具决定意义。”这样而已。更重要的是“工作是生存的手段，而不是人生的目的。”在我们生活中会遇到形形色色的打工人，如果可以的话，可以真诚的道谢和关心，因为彼此都不容易。如果可以的话，我们也可以做到“今天我对自己所有的打工经历，只怀有感激和怀念，没有丝毫的不满和怨忿——我承认曾经有过，但已经全部放下了。因为从更多的生活经验中，我逐渐认识到，怀着怨恨的人生是不值得过的。”让我们笑对人生，报之以歌吧
还有很多...
总而言之，言而总之，如果可以的话，我们都要按照自己喜欢的方式度过一生，都可以坚定自己选择的道路上前行，在各自的领域里，平凡一样也可以熠熠生辉，难道不是嘛。无人能敌岁月，但热爱可抵万物。加油！共勉~😄</li>
</ol>
<p>◆  第一章 我在物流公司上夜班的一年</p>
<p>2024/1/6 发表想法
我也有过一段时间这样，工作太忙，经常加班，996，因为工作透支了我的精力，导致我回家只想躺平，哪怕去做自己想做的事情精力欲望都没有。就像天平两端，一端重了，另一端自然就变轻了，但是千万别让这样的生活毁了你</p>
<blockquote>
<blockquote>
<p>我们也各有各的压力，各有各家里不顺心的事，谁也没有余力顾别人。在那种工作场所里，每个人都被生活压榨着，同情心因此透支，然后不知不觉地变得麻木、冷漠。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我们也各有各的压力，各有各家里不顺心的事，谁也没有余力顾别人。在那种工作场所里，每个人都被生活压榨着，同情心因此透支，然后不知不觉地变得麻木、冷漠。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>这份工作还会令人脾气变坏，因为长期熬夜以及过度劳累，人的情绪控制力会明显下降</p>
</blockquote>
</blockquote>
<p>◆  第二章 我在北京送快递</p>
<p>2024/1/6 发表想法
有些工作确实不太需要太明显的自尊心，皮实一点挺好的</p>
<blockquote>
<blockquote>
<p>显然他在担心，假如我在工作中遇到不愉快的情况，可能不会选择忍辱负重，而是会因一时冲动而辞职，因为我身上没有足够沉重的负担。除此以外，和其他应聘者相比，我说话可能过于文雅。虽然L经理也是个斯文人，但我后来察觉，他其实更喜欢性格“粗”点儿的快递员，因为“粗人”身上没有多余的自尊心。后来在工作中我亲身体会到，自尊心确实是一种妨碍。</p>
</blockquote>
</blockquote>
<p>2024/1/6 发表想法
孟子说过：君子可内敛不可懦弱，面不公可起而论之。就是我们大部分人逆来顺受习惯了，所以才会有很少的人站出来。该争取的时候就应该给自己争取</p>
<blockquote>
<blockquote>
<p>假如我每天下班比别人晚、挣钱比别人少，我就会烦躁和不满，然后变得不太在乎这份工作了。就像深海里的鱼都是瞎子、沙漠里的动物都很耐渴一样，我是一个怎样的人，很大程度上是由我所处的环境，而不是由我的所谓本性决定的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一个快递员在把快件塞进消防栓时，水管或接头被他弄坏了，水喷出来灌进电梯井里，导致电机损坏，最后赔了三万块钱。</p>
</blockquote>
</blockquote>
<p>2024/1/6 发表想法
如果我遇到这种人都懒得搭理，浪费时间和精力，自己的问题自己负责解决，凭什么让别人替你买单</p>
<blockquote>
<blockquote>
<p>从头到尾我都没见到她，却被她讹了几十块钱，而她还觉得门外都是坏人，要想方设法保护自己。对于这种人，我不知道该说些什么了。</p>
</blockquote>
</blockquote>
<p>2024/1/6 发表想法
有些领导就是控制欲太强，喜欢顺从自己的下属，但凡有点忤逆的行为，就会误以为跟自己对抗，特别是喜欢惩罚下属的领导</p>
<blockquote>
<blockquote>
<p>我看见Z主管正对着大家破口大骂，他把几个同事揪出来罚做俯卧撑。其中一个同事受不了这种管理方式，跟他吵了起来，几乎就要动手。</p>
</blockquote>
</blockquote>
<p>2024/1/6 发表想法
真的，如果一个人短时间内遭遇不如意的事情太多，会影响这个人很多情绪和思考，比如变得冷漠、麻木，对生活失去信心，严重可能会走向极端</p>
<blockquote>
<blockquote>
<p>而我这时已经是满腹牢骚，不像刚来时那么兢兢业业了。我在S公司遭遇了太多倒霉事：办入职耽误了大半个月时间，最初没三轮令我干活儿既累又挣不到钱，加入小组晚又导致分到难送的地盘，小时工没给买医保害我看病多花了很多钱……这些不如意的经历已经损害了我的好心肠，使我没法再认同小马的看法。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我当然知道这只是话术，不过这条短信的措辞很得体——当时我应该保存下来——让人感觉S公司是一个非常重视和关怀员工的企业。我有点儿好奇，不知道编辑这条短信的人，今天还在不在S公司任职，以及他撰写这条短信时，自己相不相信。</p>
</blockquote>
</blockquote>
<p>2024/1/7 发表想法
因为很多被服务者都会以为自己就是那个“顾客就是上帝”，却忽略了服务者有太多的上帝了</p>
<blockquote>
<blockquote>
<p>在稍大一点儿的商场里我经常分不清东南西北。以上这些她都不难在一定程度上想象得到，假如她愿意换位思考的话。那么她想象不到的就只有我送一个快件只有2块钱这件事了——我尝试带着善意这么理解。因为我不愿意相信，她在知道我的报酬的情况下，仍然会心安理得地要求我单独为她跑一趟。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我不会惯着他那从这么一丁点儿职权中滋生的虚荣心。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我发现同时有两种心理在我身上发生作用：一种是对促销活动带来的高回报的渴望，一种是对犯错的恐惧——事实证明在“大促”时谁也免不了忙中出错——而后一种心理对我的影响力要远远强于前一种。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我的身体会自觉地调整内分泌水平，就像逆来顺受的劳工在发现雇主并不打算满足自己的需求后，默默地放弃了自己的权益。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>害我被罚50块。但这个投诉我可以申诉掉，只要客服回访的时候，她说明情况就行了，所以我没要她的钱。我的实际损失：我把快件送到她错写的地址，又上门取了回来，再送到正确的地址，这相当于为她这个快件跑了三趟。我生气不是因为钱，而是因为被冤枉，以及平白增添的麻烦。或许还有对所有我不认同但不得不接受的不公平、不友好、非人性的规则和条件的不满。但我不能把气撒到她身上，否则我对她也是不公平、不友好、非人性的。</p>
</blockquote>
</blockquote>
<p>2024/1/7 发表想法
这个世界不完美，但我们都在追求完美。只要人人献出一点爱，就能让这个世界充满爱，难道不是嘛</p>
<blockquote>
<blockquote>
<p>事实证明只要我不在乎自己的工作效率，也就是说不计较付出回报比的话，那么几乎所有客户都很好相处，都懂得对我绽放真心的笑容。这证明了假如没有利害得失，这个世界确实可以变得和谐融洽。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>事实证明只要我不在乎自己的工作效率，也就是说不计较付出回报比的话，那么几乎所有客户都很好相处，都懂得对我绽放真心的笑容。这证明了假如没有利害得失，这个世界确实可以变得和谐融洽。</p>
</blockquote>
</blockquote>
<p>◆  第三章 在上海打工的回忆</p>
<blockquote>
<blockquote>
<p>Y有一种过度行为的倾向：一边过度地索取，一边过度地施予；一边过度地伤害，一边过度地补偿……总之，她很难心平气和，她活在一种持续的激动中——她是个天生的斗士。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>就我所知，外行管内行，大多都会出问题——在这个最重要的方面，我和她没有互补性。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“人生是螺旋上升的”这句话，不知道是谁最先说的，确实是很形象，只是没有提到上升的幅度很小、速度很慢。过往的人生总是重重复复，交往过的人也重重复复，只是每次换了名字和样子而已。实际上人们没有个性这种东西，只有和你的关系。比如你交了一个女友，然后渐渐发现，她竟然越来越像你的上一个女友。当你为此震惊的时候，你可能只是误会了：你的两个女友并不相似，只不过她们都扮演了“你的女友”，而这个角色塑造了她们，把她们共同的方面呈现给你，就像不同的演员在不同的影视作品里扮演同一个人物时，他们的表现肯定有很大的共同之处。当你意识到这点之后，你就可以蛮有把握地声称，你的下一个女友也将和现在的女友相差无几。从你交上第一个女友时起，你其实已经在和最后一个女友交往。你到了一个新公司上班，看到新的上司和同事，不用说，他们很快会变成你以前的上司和同事。你已经可以预料会被怎样对待，你可以预言将经历些什么，因为他们只是你的人生的演员们。你终于领悟到这个世界的结构：这些人都是以你为圆心的圆，他们的半径就是和你的关系。自然了，同样的半径上可能重叠着很多个圆，这不是一组平面的图形，而是你螺旋上升的人生的一个切片。难怪人们羡慕那些头脑简单的人，因为他们的目光不穿过表象，他们的思想不抵达实质。他们度过的每一天都是全新的一天，他们认识的每个人都是陌生人。他们把同样的痛苦和快乐经历了无数遍，每一遍都像是初次经历。</p>
</blockquote>
</blockquote>
<p>◆  第四章 我做过的其他工作</p>
<blockquote>
<blockquote>
<p>甚至故意去吃亏，生怕别人怀疑我表里不一。因为我意识到自己想讨好所有人的冲动是盲目和徒劳的。每个人都会以己度人，你永远无法让一个不真诚的人相信你的真诚。反之，你根本没必要向一个真诚的人证明你的真诚。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我在二十岁左右的时候，不像后来对人际相处的细枝末节那么敏感。这么多年过去了，我还记得这一幕，是因为在那次之后，我还有过很多类似的经历。这些经历层层叠叠地积累在我身上，渐渐还是产生了作用，影响和改变了我，令我越来越觉得和人打交道是件困难的事情。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>另一方面，个人的认知水平也和社会整体的认知水平挂钩。假如社会上普遍地关心和讨论某些问题，那么个人就会从中得到启发，促进思考，然后增加认识。而在那个信息相对闭塞的年代，互联网还没有普及，对于很多切身的问题，我们的讨论对象仅限于身边的熟人。</p>
</blockquote>
</blockquote>
<p>2024/1/9 发表想法
成年人的成长，往往就在一瞬间，很有感触</p>
<blockquote>
<blockquote>
<p>因为我意识到自己想讨好所有人的冲动是盲目和徒劳的。每个人都会以己度人，你永远无法让一个不真诚的人相信你的真诚。反之，你根本没必要向一个真诚的人证明你的真诚。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>因为我意识到自己想讨好所有人的冲动是盲目和徒劳的。每个人都会以己度人，你永远无法让一个不真诚的人相信你的真诚。反之，你根本没必要向一个真诚的人证明你的真诚。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>总之，卑贱的人如果心怀不满，就只会欺负别的卑贱的人，因为反抗权势是要吃苦头的。</p>
</blockquote>
</blockquote>
<p>2024/1/9 发表想法
这是经不住诱惑被同化了🐴，其实也没必要太较真和死板，搞得不解风情一样，反正自己问心无愧就好</p>
<blockquote>
<blockquote>
<p>前面我说自己并不无辜，不仅是因为我没有揭发这件事，而且我还在知情的前提下，和她们一起用这笔钱去喝了几次早茶。可见一个人要腐化是多么容易。</p>
</blockquote>
</blockquote>
<p>2024/1/9 发表想法
认认真真对待工作，有时候在同事面前他们会觉得很傻很天真，怕吃亏吃苦。但在领导面前就不一样了，踏实肯干，说不定机会就来了</p>
<blockquote>
<blockquote>
<p>而我因为一丝不苟的表现，被领导们相中了。</p>
</blockquote>
</blockquote>
<p>2024/1/10 发表想法
人性本来就是贪婪的，我觉得没必要受部分人影响自己，坚持自己认为正确的事情去做。总有些人因为你变得更好。罗翔老师说过，正是因为世界并不美好，所以美好是存在的，美好是值得期待的。有时治愈，常常帮助，总是安慰。</p>
<blockquote>
<blockquote>
<p>我发现当一个人表现得无私时，别人回报他的往往不是友善，而是加倍的贪婪。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我发现当一个人表现得无私时，别人回报他的往往不是友善，而是加倍的贪婪。</p>
</blockquote>
</blockquote>
<p>2024/1/11 发表想法
人生没有白走的路，每一步都算数。看到作者从阅历中不断学习成长，反思自己，一步步成为你自己</p>
<blockquote>
<blockquote>
<p>如果说脱胎换骨有点儿夸张的话，那么这段经历起码塑造了最初的我，就像给了我一个起点。如今我不会再为自己和别人的差异感到惶恐不安，相反，我珍视自己的个性。虽然我仍然很无知和胆怯，但在这之下多了一份坚持和信心。此后无论我打工或写作，那对我来说都是一种自我精神的建设。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果说脱胎换骨有点儿夸张的话，那么这段经历起码塑造了最初的我，就像给了我一个起点。如今我不会再为自己和别人的差异感到惶恐不安，相反，我珍视自己的个性。虽然我仍然很无知和胆怯，但在这之下多了一份坚持和信心。此后无论我打工或写作，那对我来说都是一种自我精神的建设。</p>
</blockquote>
</blockquote>
<p>2024/1/11 发表想法
还是要彼此坦诚沟通解决好一点吧，哪怕和平分手也好</p>
<blockquote>
<blockquote>
<p>之前她妈妈一直在撺掇她出国，但她在我和出国之间犹豫不决。也因为她的犹豫不决，我承受了不少她的负面情绪，她对我恨铁不成钢。事实上，我已经委婉地暗示过她，我会尊重她的决定。也就是说，无论她怎么做，我都支持。但我不敢主动提分手，因为只要我提分手，她就会骂我没出息、不上进、不负责任，等等。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我生在和平年代，从没经受过真正的苦难，说什么万念俱灰未免贻笑大方。但我确切地记得那个下午——或者说那个下午之所以镌刻在我的记忆里，就是因为我当时产生的强烈感受：人来到这世上，并不一定是件幸事。</p>
</blockquote>
</blockquote>
<p>2024/1/12 发表想法
想到了斯蒂芬·茨威格在《人类的群星闪耀时》中的一句话：一个人生命中的最大幸运，莫过于在他的人生中途，即在他年富力强时发现了自己的人生使命。是呀，在这个错综复杂的世界里，有多少人在做的事情是自己喜欢的或擅长的呢，我有时候也在想有没有什么，让我坚持在做，就能感觉到幸福的事情，寻找我人生的使命感。但我似乎还没有找到，我也不知道为什么，人生就是这么奇怪吧</p>
<blockquote>
<blockquote>
<p>我的生活中，无论是工作、生意还是感情方面，都充满了挫折和痛苦。我在一套我不适应的价值系统里寻求肯定，然后不断地失望和失败。当然，我不能把失败的原因都推到外部环境上。只是我也没必要寻求别人的认同。我应该做我喜欢和擅长的事，比如说写作。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我的生活中，无论是工作、生意还是感情方面，都充满了挫折和痛苦。我在一套我不适应的价值系统里寻求肯定，然后不断地失望和失败。当然，我不能把失败的原因都推到外部环境上。只是我也没必要寻求别人的认同。我应该做我喜欢和擅长的事，比如说写作。</p>
</blockquote>
</blockquote>
<p>2024/1/12 发表想法
是因为现实世界得不到的，精神世界却可以拥有的原因🐴</p>
<blockquote>
<blockquote>
<p>现实世界有多贫瘠，精神世界就有多丰饶。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>现实世界有多贫瘠，精神世界就有多丰饶。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我在这里会直接向读者概括我做每个决定的原因和动机，分析我当时的内心感受和精神状态，介绍我置身的环境和更多背景……我不敢说这些内容全是客观的，因为不存在客观的写作</p>
</blockquote>
</blockquote>
<p>2024/1/12 发表想法
看得出来，如果不是对写作这一件事真心喜欢，很难会付出比主业还多的时间和精力去做的，毕竟写作还不能养活自己</p>
<blockquote>
<blockquote>
<p>我这段写作的日子维持了两年多，它当然不是一份工作，但我对待它的认真和投入，要超过我做过的所有工作。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我这段写作的日子维持了两年多，它当然不是一份工作，但我对待它的认真和投入，要超过我做过的所有工作。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>自从开始写作后，我养成了记笔记的习惯，把自己平常的一些碎片式的想法和感悟记下来</p>
</blockquote>
</blockquote>
<p>2024/1/12 发表想法
人的成长就是战胜自己不成熟的过去吧。记录当时的所思所想，所作所为，真实的自己。回头看，说不定轻舟已过万重山，会心一笑，感动自己</p>
<blockquote>
<blockquote>
<p>。这两段笔记都是多年前记下的，如今看来可能偏激和幼稚，但这些是我思想曾经的漫游轨迹，间接或直接地阐明了后来我对待“工作”这件事的态度转变。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在我看来，只要是认真度过的日子，最后都不会没有意义。这个时候假如亚历山大大帝来问我需要什么，我也会说，别挡我的光线就好。</p>
</blockquote>
</blockquote>
<p>2024/1/13 发表想法
有些人他就不太乐意分享自己的东西，没啥的，靠自己一样可以，就是需要多走一些弯路</p>
<blockquote>
<blockquote>
<p>他们会夸张地笑着反问：“哎呀原来你连这个都不知道呀？”这句话会反复说好多遍，可就是不直接回答问题。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>无私是一种高尚情操，但或许并不是做人的基本原则。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果我被石头绊了一跤，就爬起来自己再摔一跤，然后拍拍屁股继续走路。这样一来就显出了石头的可笑。在接下来的几十万年里，它将孤独地反省到自己施与人的痛苦是那么地毫无必要和微不足道。最后它会成佛，学会善待这个世界。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>看到他们这种积极的生活态度，我不由得在心里感慨，看来少懂一些道理，对大多数人来说是有益的。不过我知道还有一些更优秀的人，他们懂得很多的道理，可又从不把那些道理放在眼里。他们熟悉道理就像老练的舵手熟悉水下的暗礁一样，他们掌握这些道理是为了提防它们有天猝不及防地露出水面挡住他们的去路，妨碍他们获得生活中那些原本唾手可得的快乐。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>他都觉得可以信任我，不必提防我。实际上他要提防的人，是那些价值观和他相近的人。</p>
</blockquote>
</blockquote>
<p>◆  后记 生活的另外部分</p>
<p>2024/1/13 发表想法
所以说一个普通人干着最底层的职业，但能写出书来，难能可贵的同时，也是真的喜欢写作坚持过来的</p>
<blockquote>
<blockquote>
<p>说说我打工以外的经历。我在写作上并非新人，从2009年到2011年，曾经有接近三年的时间我没去工作，每天就在家读书和写作</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>说说我打工以外的经历。我在写作上并非新人，从2009年到2011年，曾经有接近三年的时间我没去工作，每天就在家读书和写作</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在一半的时间里我不打工并自由，而在另一半的时间里我打工并不自由。</p>
</blockquote>
</blockquote>
<p>2024/1/13 发表想法
看得出来写作对作者人生影响挺大的，而且也是坚持了这么久。写作的意义对于每个人定义和收获都不一样。我反而觉得写作和阅读都在给未来的自己储蓄能量。正所谓，不用期待命运在某个瞬间被突然扭转，那些改变我们人生的能量，就在普普通通的每一天</p>
<blockquote>
<blockquote>
<p>实际上，通过写作我在一定程度上超越了打工和自由的对立：在有限的选择和局促的现实中，我越来越感觉到生活中许多平凡隽永的时刻，要比现实困扰的方方面面对人生更具决定意义。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>实际上，通过写作我在一定程度上超越了打工和自由的对立：在有限的选择和局促的现实中，我越来越感觉到生活中许多平凡隽永的时刻，要比现实困扰的方方面面对人生更具决定意义。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>今天我对自己所有的打工经历，只怀有感激和怀念，没有丝毫的不满和怨忿——我承认曾经有过，但已经全部放下了。因为从更多的生活经验中，我逐渐认识到，怀着怨恨的人生是不值得过的</p>
</blockquote>
</blockquote>
<p>2024/1/13 发表想法
也许回头看，轻舟已过万重山。人生是向前看的，过好自己每一天的生活，才能过好整个人生呢</p>
<blockquote>
<blockquote>
<p>怀有感激和怀念，没有丝毫的不满和怨忿——我承认曾经有过，但已经全部放下了。因为从更多的</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2024/wozaibeijingsongkuaidi.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 34 本《人间值得》]]></title>
            <link>https://super456.github.io/posts/read-book/2024/renjianzhide.html</link>
            <guid>https://super456.github.io/posts/read-book/2024/renjianzhide.html</guid>
            <pubDate>Wed, 03 Jan 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[未来岁月漫长，依旧值得期待。 人如何度过一生，才不会辜负生命？面对人生的终极问题，当了 70 年心理医生的作者中村恒子，将其 90 年的人生智慧，化为本书六大篇章关于工作、爱、人际关系、幸福、死亡等课题的诚挚箴言，陪同数不清的人走过人生泥泞的时期，让他们在认清生活真相后，仍然有 热爱生活的勇气。作者娓娓道来的讲述，总有一句令你豁然开朗，消解心头烦忧，感受生命的力量，让你意识到“这是你自己的人生”，只要活出自己，就会发现“人间值得” 恒子奶奶的一生波澜壮阔，经历战争、经济大萧条，跌宕坎坷。拥有70年心理咨询经验，她一直是患者最信赖、愿意倾诉心声的心理医生，本书是她用一辈子的时间书写，凝聚了她一生的智慧，人生不必太用力，坦率地接受每一天！]]></description>
            <content:encoded><![CDATA[<h1 id="第-34-本《人间值得》" tabindex="-1">第 34 本《人间值得》 <a class="header-anchor" href="#第-34-本《人间值得》" aria-label="Permalink to &quot;第 34 本《人间值得》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>未来岁月漫长，依旧值得期待。</p>
<p>人如何度过一生，才不会辜负生命？面对人生的终极问题，当了 70 年心理医生的作者中村恒子，将其 90 年的人生智慧，化为本书六大篇章关于工作、爱、人际关系、幸福、死亡等课题的诚挚箴言，陪同数不清的人走过人生泥泞的时期，让他们在认清生活真相后，仍然有 热爱生活的勇气。作者娓娓道来的讲述，总有一句令你豁然开朗，消解心头烦忧，感受生命的力量，让你意识到“这是你自己的人生”，只要活出自己，就会发现“人间值得”</p>
<p>恒子奶奶的一生波澜壮阔，经历战争、经济大萧条，跌宕坎坷。拥有70年心理咨询经验，她一直是患者最信赖、愿意倾诉心声的心理医生，本书是她用一辈子的时间书写，凝聚了她一生的智慧，人生不必太用力，坦率地接受每一天！</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《人间值得》
中村恒子 奥田弘美
63个笔记</p>
<p>◆  点评</p>
<p>2024/1/3 认为好看
刚开始看到书名的时候，有点鸡汤味十足的感觉，但还是忍不住翻开来看，毕竟我是对人生充满希望的人😄。看了简介和目录，确实挺吸引我的。讲述了恒子奶奶作为精神科医生 70 年人生心得和经验分享，语言很朴素，让你感觉平易近人，不像条条框框的大道理。也没有那么多的患者案例，大多是自己的人生家庭事迹讲解。这本书我看的很慢，因为我知道这本书本身字数不多，可以很快读完，但我很享受这些文字的温暖和像一位循循善诱的老师在教导你一样的感觉。我想读完这本书，正如恒子奶奶希望那样：你的生活中多一些明朗温暖的日子。摘录了太多金玉良言了，但我格外喜欢恒子奶奶说的：“能照亮某个角落就足够了。”也就是说，无须功成名就，只要在自己所在的环境中释放自己的力量就可以了。是的，人生嘛，都说是来体验的，何必太较真了呢，当然也不要自暴自弃，做好自己该发的每一份光每一份热不就好了嘛，共勉</p>
<p>◆  引言</p>
<p>2023/12/7 发表想法
其实人生这样也挺好，不需要条条框框，不需要强迫自己，不需要完美。顺其本心做自己的一道光，说不定也可以照亮别人的人生呢，哪怕一点点而已</p>
<blockquote>
<blockquote>
<p>人生，
只要能照亮某个角落就够了。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人生，
只要能照亮某个角落就够了。</p>
</blockquote>
</blockquote>
<p>◆  前言</p>
<blockquote>
<blockquote>
<p>我觉得解决的关键在于，在现实和自己的心情之间找到平衡点。简单来说，就是如何把人生过得值得，过得欢喜。</p>
</blockquote>
</blockquote>
<p>◆  第1章 工作是为了什么</p>
<p>2023/12/18 发表想法
大部分人工作是最直接可以赚钱养活自己的方式。如果可以的话，努力工作，提高自己，让自己有更多的选择最好</p>
<blockquote>
<blockquote>
<p>当你面对“为了什么而工作”感到迷茫时，你就干脆而果断地告诉自己“工作只是为了赚钱养活自己而已”。这就是人为何要工作的根本。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>当你面对“为了什么而工作”感到迷茫时，你就干脆而果断地告诉自己“工作只是为了赚钱养活自己而已”。这就是人为何要工作的根本。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>为了钱而工作，并不是可耻的事情，这是理所当然的事，我认为是非常了不起的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不要把自我价值全部建立在工作上，带着“为身边的人略尽绵力”的想法去工作，或许会更好。
饮食足以温饱，有工作需要自己，其实这样的生活刚刚好。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果工作让你一直做出巨大的牺牲，那一定要果断离开，毫不犹豫。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>习惯遇事不抱怨，依靠自己解决，无论发生什么事情，你都能想办法解决。</p>
</blockquote>
</blockquote>
<p>◆  第2章 不要期待过多，对生活中的小事心存感激</p>
<blockquote>
<blockquote>
<p>幸福本是一种感觉，它是不稳定、不可靠的，甚至很少会持续很长时间。
不需要夸张幸福的价值，欢喜来临时就满心欢喜，如果头脑中出现一些所谓“必须”要做的事，不妨毫不犹豫地说：“不要做”。人生，就是这样周而复始</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我听到过很多人的烦恼，他们的烦恼似乎无穷无尽。
如果有人让你觉得十分讨厌，或者原本与你性格不和，那么远离他会让你轻松很多。
如果有人特别讨厌，让你心生痛苦，甚至产生心理障碍，那么果断分开就好了。如今，辞职轻而易举，离婚也不是稀奇的事。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不要试图通过改变他人来获得快乐，而是想“自己如何做才会快乐”或“怎么努力让自己在这里心情愉快地度过”，我觉得这才是应该考虑的关键。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>总之，想改变别人的性格或行为，都是非常困难的，所以还是自己想方设法地创造快乐比较重要。
至于对方，不要让他们成为你思想上的负担就好。
与合不来的人交往尽量简单，尽可能不去互相麻烦，与有共同话题或合得来的人，则可以保持亲密的交往。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“来则欢喜，去则放手”，这对彼此来说是最轻松的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>生活中我也有过孤独和不安的时候。但不管怎样，我只能活下去。</p>
</blockquote>
</blockquote>
<p>2023/12/24 发表想法
我们有时候会过度解读自己的想法，总以为别人应该怎么做，不应该怎么做这些合乎情理的事情。而感觉理所当然，看到别人的不作为就感觉生气抱怨之类的，也许这都是自己有太多的预期与现实反差太大了吧</p>
<blockquote>
<blockquote>
<p>无论在职场还是家庭，“只要是别人给予的东西，自己就应该感谢对方”。如果以这样的心态和别人相处，人际关系就不可能出现大的问题。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>无论在职场还是家庭，“只要是别人给予的东西，自己就应该感谢对方”。如果以这样的心态和别人相处，人际关系就不可能出现大的问题。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>机会源于偶然，如果有人助力，就顺势而为</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>总想着得失，那么就会觉得勉强自己，甚至产生心结。与其如此，还不如率性而为，跟随心的决定。</p>
</blockquote>
</blockquote>
<p>◆  第3章 恰到好处的人际关系</p>
<blockquote>
<blockquote>
<p>在我看来，心灵的沟通，其实就是把自己放到与对方平等的位置上，倾听对方的内心世界。</p>
</blockquote>
</blockquote>
<p>2023/12/26 发表想法
闻道有先后，术业有专攻，如是而已。罗翔老师说过不要有知识的优越感，确实这样只会显得你无知。择其善者而从之，做一个谦卑的人吧</p>
<blockquote>
<blockquote>
<p>此外，我还会平心静气地让年轻人“教教我这个”“帮帮我那个”。
我能用手机发邮件，也会用电脑边开电子病历边接诊，这些技能都是拜托年轻同事教给我的。</p>
</blockquote>
</blockquote>
<p>2023/12/26 发表想法
交朋友最重要就是真诚相待，不然很难玩的好</p>
<blockquote>
<blockquote>
<p>如果欲望过多，与人交往就会计算得失。也就是说，与人交往不再依靠“合得来、合不来”或者“喜欢、讨厌”这种单纯的感情判断，而是多方考虑“这个人是否对自己有帮助”“对方能否增加自己的利益”，等等。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>实际上，人太过关注别人或心生怒气，大体上都是自私的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不可能存在100分的人际关系，只要能对自己信任的人说说真心话，倾诉心事就好了。</p>
</blockquote>
</blockquote>
<p>◆  第4章 让心归于平静</p>
<blockquote>
<blockquote>
<p>无论如何，不要忽视你面前的事情，这是最重要的事情。自己的工作也好，孩子也好，家务也好，不管怎样都不能让眼前的生活过得凌乱落魄。</p>
</blockquote>
</blockquote>
<p>2023/12/29 发表想法
以前觉得自己：我本桀骜少年臣，不信鬼神不信人。现在觉得自己：行到水穷处，坐看云起时。这就是人生吧</p>
<blockquote>
<blockquote>
<p>人毕竟是伟大的，无论遇到什么样的环境，都有可能坚定地认为“这就是自己的人生”，然后顺其自然地走下去。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人毕竟是伟大的，无论遇到什么样的环境，都有可能坚定地认为“这就是自己的人生”，然后顺其自然地走下去。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不管怎么说，大多数事情都会得到解决，人生只能笑着走下去。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>即使遇到困难，只要该吃就吃，该睡就睡，保持身体健康，坚持努力，很多问题就会迎刃而解。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>19 接连发生不顺的时候，也不要停下脚步，停下来就无法前进
世间之事是无常的，人生自然有起有落。
对任何人来说，可能都会碰上“总也不顺利的阶段”。</p>
</blockquote>
</blockquote>
<p>2023/12/29 发表想法
承蒙岁月不弃，赐我一路荆棘，感谢时光厚爱，赏我颠沛流离。但我热爱自己，因为精神的富足可以抵御万难</p>
<blockquote>
<blockquote>
<p>如果总也不顺利，那么你就要意识到，“人生本来就是这样”。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果总也不顺利，那么你就要意识到，“人生本来就是这样”。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>保持心平气和的另一个有效方法，就是“工作时间以外，不考虑工作上的事”。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人毕竟不是夜猫子，只有用清晰的头脑思考，才会有新的、积极的想法出现，看待问题的角度也会发生改变。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>饮酒过多会导致酒精中毒，但是一两杯会帮你放松神经。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在我看来，“拥有自信，就能没有烦恼”并不符合逻辑。
人的一生都处在变化之中。一段时间内可能顺风顺水自信满满，但几年后也许会遭遇一些困难，让你觉得“为什么这么不顺利”。人生就是这样。
自信绝非一成不变的，我们只能在某一段时间或某一领域经历它。</p>
</blockquote>
</blockquote>
<p>2023/12/30 发表想法
工作中经常会遇到很多困难，有时候花费点时间可以解决，但有些问题确实可能会超出你的能力范围，就像考试题超纲一样。我们能做的不是直接放弃，而是尽力而为后的顺其自然，不要强迫自己一定要做出来，但也不是直接放弃。因为一旦你做成一件很难的事，会慢慢积累你的自信，下次遇到类似或更难一点的也会不畏惧，会去挑战自己，这种自信需要慢慢建立的，一蹴而就不了</p>
<blockquote>
<blockquote>
<p>对于擅长的事情努力去做，对于自己不擅长的事情也不要勉强。
对于一些必须要做的事情，你也许不擅长，那掌握到最低程度就可以</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>对于擅长的事情努力去做，对于自己不擅长的事情也不要勉强。
对于一些必须要做的事情，你也许不擅长，那掌握到最低程度就可以</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>面对没有自信的事情，一定要真诚坦率。这对于获得平静的生活是很重要的事情。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人生中精神饱满的时光非常有限，不要过多地停留在过去的阴影中。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>痛苦与伤心，其实也是与生俱来的东西。人活着，肯定会经历苦难</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人很难不与他人比较，即便健康有活力的人，未必没有烦恼
“比较”既有好处，也有不好的地方。与人相比，为了不输可能会更努力。另一方面，比较可能会让自己羡慕别人，同时会产生为什么自己如此不幸的想法。</p>
</blockquote>
</blockquote>
<p>2023/12/30 发表想法
不以物喜，不以己悲</p>
<blockquote>
<blockquote>
<p>也就是说，不管去哪，不管变成什么样的人，你都会遇到烦恼。无论处于什么地位，生命中的苦难和烦恼都会随之而来，不管你是谁。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>也就是说，不管去哪，不管变成什么样的人，你都会遇到烦恼。无论处于什么地位，生命中的苦难和烦恼都会随之而来，不管你是谁。</p>
</blockquote>
</blockquote>
<p>2023/12/30 发表想法
我们很多的烦恼都来自于想太多，没有看到自己拥有的，反而对没有拥有的东西耿耿于怀，徒增烦恼</p>
<blockquote>
<blockquote>
<p>如果你没有认识到“某些问题原本就是与生俱来的，是没有办法解决的”，那么你的烦恼会接连不断；如果能客观地处理好“眼前的问题”，那么花在烦恼上的精力就会向其他方面转移。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果你没有认识到“某些问题原本就是与生俱来的，是没有办法解决的”，那么你的烦恼会接连不断；如果能客观地处理好“眼前的问题”，那么花在烦恼上的精力就会向其他方面转移。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不得不努力的时刻，一定会到来。所以，如果不是这样的时候，就无须太过努力</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在我看来，人在身体健康、精神饱满的状态下，接受具有一定挑战性的工作，成功的可能性更大；反之亦然。所以，在身心疲惫时，尽量不要给自己增加额外的负担</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不要事事都想咬紧牙关挺过去，只要抱着“今天这样做基本就可以了”的态度，日复一日地坚持积累。</p>
</blockquote>
</blockquote>
<p>◆  第5章 生活和工作的平衡之道</p>
<blockquote>
<blockquote>
<p>做自己力所能及的事情。当我决定这么做时，也是一种自我解脱。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在我看来，与其追求完美而挫折不断，不如以笨拙的方式坚持下去。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>当你为“我如此拼命，为什么事情偏偏不顺利”而烦恼不已时，该放弃的时候，果断放弃就好啦。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>父母的心情会扰乱孩子的内心，孩子的波动反过来又会反弹给父母。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>生活如果没有目标，就会变得懒散。一旦决定“今天这样做”，生活一下子就会张弛有度</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>孩子能够感受到父母是真的为自己着想，而不是只停留在形式上的关爱</p>
</blockquote>
</blockquote>
<p>◆  第6章 简单生活每一天</p>
<blockquote>
<blockquote>
<p>34 人际关系的秘密在于“距离感”，不可逾越的界限，一定要保持住</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>越是对别人讨厌、反感，这些情绪就越容易在自己的表情和态度上反映出来，进而传达给对方。久而久之，你和对方的关系会越发紧张，甚至到一触即发的状态。在这种情况下，哪怕只是一点小事，也很容易激化矛盾。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“人总是想找到能分担其痛苦和悲伤的人”。
从根本上讲，人的一生其实是一个人独自生活。
没有人100%为你提供帮助，也不会有人整天都关注你。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“能照亮某个角落就足够了。”
也就是说，无须功成名就，只要在自己所在的环境中释放自己的力量就可以了</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人生的满足感并非由别人决定，也绝不应该追求和别人同样的生活。
因此，请务必意识到“这是你自己的人生”。</p>
</blockquote>
</blockquote>
<p>◆  后记：莲花微动</p>
<blockquote>
<blockquote>
<p>“化解苦难”“温暖心田”是莲花的花语。</p>
</blockquote>
</blockquote>
<p>◆  作者照片</p>
<blockquote>
<blockquote>
<p>当了一辈子心理医生，中村恒子希望
你的生活中多一些明朗温暖的日子。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2024/renjianzhide.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[朝花夕拾]]></title>
            <link>https://super456.github.io/posts/read-book/</link>
            <guid>https://super456.github.io/posts/read-book/</guid>
            <pubDate>Mon, 01 Jan 2024 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="朝花夕拾" tabindex="-1">朝花夕拾 <a class="header-anchor" href="#朝花夕拾" aria-label="Permalink to &quot;朝花夕拾&quot;">&ZeroWidthSpace;</a></h1>
<p>为啥专栏名字取自鲁迅先生散文集「朝花夕拾」呢？我想是因为这是很有诗意的名字，像早晨的花儿，在傍晚拾起、像春天播种，秋天收获一样，这一切都在“朝”和“夕”之间的距离吧。所有阅读过的书📚，输出的思考🤔，不会随时岁月而流逝，因为在未来某个时刻，将会给我意外的惊喜，让时间为我证明😄</p>
<ol>
<li>记录自己所看过的书 📖</li>
<li>记录阅读思考的点滴 💡</li>
<li>记录漫长岁月的乐趣 🌈</li>
</ol>
<p>关于读书<br />
胡适有一段著名的的三点论：<br />
第一，因为书是过去已经知道的知识学问和经验的一种记录，我们读书便是要接受这人类的遗产；<br />
第二，为要读书而读书，读了书便可以多读书；<br />
第三，读书可以帮助我们解决困难，应付环境，并可获得思想材料的来源。”</p>
<p>这也是我喜欢读书的原因之一：</p>
<ul>
<li>喜欢阅读，因为阅读可以让我们不断超越自己的偏见，走出自己的狭隘；</li>
<li>喜欢阅读，因为可以见天地、观众生、寻吾身；</li>
</ul>
<p>目标🎯：先读完 100 本书，并输出阅读思考</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 24 本《带壳的牡蛎是大人的心脏》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/daikedemulishidarendexinzang.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/daikedemulishidarendexinzang.html</guid>
            <pubDate>Sat, 30 Dec 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[超人气漫画家拟泥nini首部作品集结，温暖来袭！刷屏微博、公众号、小红书等社交媒体，全网阅读量超500万+！ ◆当你脆弱的时候，就看拟泥nini吧！用糖果色的漫画诠释现实世界的烦恼与丧，给正在经历着阴雨天的大人，一个安慰的拥抱。卸下所有的面具和重担，把脆弱的权利还给大人。 ◆有时候，上一秒还是小孩，下一秒就已经是大人了。当我们发现有天在世界面前，只能礼貌地笑着，不能哭也不能发脾气的时候，才明白这种打了镇定剂一般的感觉，是被叫做“成为大人”。 ◆太奇怪也没关系，不够完美也值得被爱！在循环往复的混沌和疲劳之中，不要忘了生活本身的意义，做一个闪光的人，去守护你所爱的人与事。 ◆人生很难，祝你快乐！累的时候睡一觉，心情不好吃甜的，脆弱的时候就去看看花。所谓的大人，都是披着坚硬外壳的柔软牡蛎。Nini的漫画就像是贴在伤口上的OK绷。是你自己的人生，按你喜欢的方式去选择吧！ ◆我们和时间一起做的事情，时间也会尊重它。成长是一个漫长的过程，要允许脆弱，更需要耐心和勇气！给总是隐藏情绪、被迫长大的大人们一丝勇气，脱掉坚硬的外壳，短暂“逃离现实”，回到我们出发的原点。 ◆312页暖心故事，篇篇治愈！集结长篇代表作《带壳的牡蛎是大人的心脏》、人气连载《向日葵花园》系列并附特别结局，更收录17个暖萌短篇，其中4篇为全新创作首发。从可爱温暖的故事到疲惫无奈的现实，收录了一些对爱与梦的记录，是一些破碎后的自愈，一些对命运和希望的小小思考，更是对日常生活颇具勇气的复盘。 ◆小开本&高颜值！全彩印刷，可180度平摊阅读，臻彩呈现。可随手携带翻读，暖心又催泪！]]></description>
            <content:encoded><![CDATA[<h1 id="第-24-本《带壳的牡蛎是大人的心脏》" tabindex="-1">第 24 本《带壳的牡蛎是大人的心脏》 <a class="header-anchor" href="#第-24-本《带壳的牡蛎是大人的心脏》" aria-label="Permalink to &quot;第 24 本《带壳的牡蛎是大人的心脏》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>超人气漫画家拟泥nini首部作品集结，温暖来袭！刷屏微博、公众号、小红书等社交媒体，全网阅读量超500万+！</p>
<p>◆当你脆弱的时候，就看拟泥nini吧！用糖果色的漫画诠释现实世界的烦恼与丧，给正在经历着阴雨天的大人，一个安慰的拥抱。卸下所有的面具和重担，把脆弱的权利还给大人。</p>
<p>◆有时候，上一秒还是小孩，下一秒就已经是大人了。当我们发现有天在世界面前，只能礼貌地笑着，不能哭也不能发脾气的时候，才明白这种打了镇定剂一般的感觉，是被叫做“成为大人”。</p>
<p>◆太奇怪也没关系，不够完美也值得被爱！在循环往复的混沌和疲劳之中，不要忘了生活本身的意义，做一个闪光的人，去守护你所爱的人与事。</p>
<p>◆人生很难，祝你快乐！累的时候睡一觉，心情不好吃甜的，脆弱的时候就去看看花。所谓的大人，都是披着坚硬外壳的柔软牡蛎。Nini的漫画就像是贴在伤口上的OK绷。是你自己的人生，按你喜欢的方式去选择吧！</p>
<p>◆我们和时间一起做的事情，时间也会尊重它。成长是一个漫长的过程，要允许脆弱，更需要耐心和勇气！给总是隐藏情绪、被迫长大的大人们一丝勇气，脱掉坚硬的外壳，短暂“逃离现实”，回到我们出发的原点。</p>
<p>◆312页暖心故事，篇篇治愈！集结长篇代表作《带壳的牡蛎是大人的心脏》、人气连载《向日葵花园》系列并附特别结局，更收录17个暖萌短篇，其中4篇为全新创作首发。从可爱温暖的故事到疲惫无奈的现实，收录了一些对爱与梦的记录，是一些破碎后的自愈，一些对命运和希望的小小思考，更是对日常生活颇具勇气的复盘。</p>
<p>◆小开本&amp;高颜值！全彩印刷，可180度平摊阅读，臻彩呈现。可随手携带翻读，暖心又催泪！</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《带壳的牡蛎是大人的心脏》
拟泥nini
1个笔记</p>
<p>◆  点评</p>
<p>2023/12/30 认为好看
好好爱你自己，做你自己，成为你想要的样子吧</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/daikedemulishidarendexinzang.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 33 本《快乐一天是一天》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/kuaileyitianshiyitian.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/kuaileyitianshiyitian.html</guid>
            <pubDate>Sat, 30 Dec 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[超人气原创动漫博主“小蓝和他的朋友”重磅新作，爆笑生活冷知识漫画合辑，在哈哈大笑中收获健康快乐生活小秘诀！ 熬夜的时候，“僵尸”竟然吃掉了小蓝的脑子？！聪慧机智的小紫，学习时学着学着突然就“不识字”了，甚至怀疑自己痴呆了！热爱美食的G胖为了神不知鬼不觉地大吃特吃，花光所有私房钱购入了一件超级隐身衣…… 围观小蓝、G胖、小红、小紫的爆笑生活日常，和宠物猫小花一起快乐“吃瓜”，“解锁”平凡生活中的趣味冷知识]]></description>
            <content:encoded><![CDATA[<h1 id="第-33-本《快乐一天是一天》" tabindex="-1">第 33 本《快乐一天是一天》 <a class="header-anchor" href="#第-33-本《快乐一天是一天》" aria-label="Permalink to &quot;第 33 本《快乐一天是一天》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>超人气原创动漫博主“小蓝和他的朋友”重磅新作，爆笑生活冷知识漫画合辑，在哈哈大笑中收获健康快乐生活小秘诀！</p>
<p>熬夜的时候，“僵尸”竟然吃掉了小蓝的脑子？！聪慧机智的小紫，学习时学着学着突然就“不识字”了，甚至怀疑自己痴呆了！热爱美食的G胖为了神不知鬼不觉地大吃特吃，花光所有私房钱购入了一件超级隐身衣……</p>
<p>围观小蓝、G胖、小红、小紫的爆笑生活日常，和宠物猫小花一起快乐“吃瓜”，“解锁”平凡生活中的趣味冷知识</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《快乐一天是一天》
小蓝和他的朋友
1个笔记</p>
<p>◆  点评</p>
<p>2023/12/30 认为好看
很不错的生活冷知识，愉快阅读的同时，学习生活知识，何乐而不为呢</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/kuaileyitianshiyitian.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 31 本《就是想看你笑的样子》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/jiushixiangkannixiaodeyangzi.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/jiushixiangkannixiaodeyangzi.html</guid>
            <pubDate>Sun, 24 Dec 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[“如果生活不能让你笑，你就笑笑生活。”这是一本纯手绘漫画书，故事来源于懒兔子与身边亲友的真实生活，充满了浓浓的爱与真情，温馨治愈。在诙谐、幽默的对话中，治愈我们心中的烦闷、压抑，安慰身处焦虑中的你我。每一个看过这本书的人，都会露出最真挚的笑容。]]></description>
            <content:encoded><![CDATA[<h1 id="第-31-本《就是想看你笑的样子》" tabindex="-1">第 31 本《就是想看你笑的样子》 <a class="header-anchor" href="#第-31-本《就是想看你笑的样子》" aria-label="Permalink to &quot;第 31 本《就是想看你笑的样子》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>“如果生活不能让你笑，你就笑笑生活。”这是一本纯手绘漫画书，故事来源于懒兔子与身边亲友的真实生活，充满了浓浓的爱与真情，温馨治愈。在诙谐、幽默的对话中，治愈我们心中的烦闷、压抑，安慰身处焦虑中的你我。每一个看过这本书的人，都会露出最真挚的笑容。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《就是想看你笑的样子》
懒兔子著绘
4个笔记</p>
<p>◆  点评</p>
<p>2023/12/24 认为好看
很治愈，很温暖。峰回路转，只为逗你一笑。你笑起来真好看吧</p>
<p>◆  序言 每个人心中都有一本漫画书</p>
<p>2023/12/24 发表想法
我们一直在找寻的东西，最后还是我们自己</p>
<blockquote>
<blockquote>
<p>每个人心中都有一本漫画书
在我步入中年之后，我就一直很想要一本漫画书——当我每次翻看它的时候，都能会心地笑一笑。可是，找一本这样的书很难，于是我决定自己画一本。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>每个人心中都有一本漫画书
在我步入中年之后，我就一直很想要一本漫画书——当我每次翻看它的时候，都能会心地笑一笑。可是，找一本这样的书很难，于是我决定自己画一本。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>生活很难，如果生活不能让你笑，你就笑笑生活。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/jiushixiangkannixiaodeyangzi.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 30 本《成功的聪明人太多了，我必须为笨蛋争口气》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/chenggongdecongmingrentaiduole.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/chenggongdecongmingrentaiduole.html</guid>
            <pubDate>Sat, 23 Dec 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[这是一本比作者还好看的漫画书！ 书单狗用一张张精美的漫画向我们展示了它的生活瞬间。生活、工作，爱情，和那些脑洞大到飞起的白日梦……这些瞬间，让你或爆笑或有所感悟。 因为书单狗这只骨子里充满鸡血的混血狗，总是用它特有的乐观心态化解一切不如意！“这世界成功的聪明人太多了，我必须为笨蛋争口气！”]]></description>
            <content:encoded><![CDATA[<h1 id="第-30-本《成功的聪明人太多了-我必须为笨蛋争口气》" tabindex="-1">第 30 本《成功的聪明人太多了，我必须为笨蛋争口气》 <a class="header-anchor" href="#第-30-本《成功的聪明人太多了-我必须为笨蛋争口气》" aria-label="Permalink to &quot;第 30 本《成功的聪明人太多了，我必须为笨蛋争口气》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《成功的聪明人太多了，我必须为笨蛋争口气！》
书单狗
1个笔记</p>
<p>◆  点评</p>
<p>2023/12/23 认为好看
很治愈很好笑的漫画书📖，生活需要这种笨蛋🥚才快乐呢</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/chenggongdecongmingrentaiduole.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 26 本《给青年的十二封信》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/geiqingniandeshierfengxin.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/geiqingniandeshierfengxin.html</guid>
            <pubDate>Sat, 23 Dec 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[本书是美学大家朱光潜先生的成名作。二十世纪二十年代后期，朱光潜先生求学于欧洲，从海外寄回了这十二封写给青年朋友的信，最初登载在《一般》杂志上，后集结成册出版，多次重印。 信中所谈皆是青少年们所正在关心或应该关心的话题，如读书、作文、爱恋、情理、修身、做人，凡此种种。作者劝年轻的朋友们，眼光要深沉，戒骄戒躁，不贪容易，更不能随了世俗、急于近利。这些信件正是朱光潜先生提供给现代青少年的成长指南，是充满了人生智慧的必读经典]]></description>
            <content:encoded><![CDATA[<h1 id="第-26-本《给青年的十二封信》" tabindex="-1">第 26 本《给青年的十二封信》 <a class="header-anchor" href="#第-26-本《给青年的十二封信》" aria-label="Permalink to &quot;第 26 本《给青年的十二封信》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>本书是美学大家朱光潜先生的成名作。二十世纪二十年代后期，朱光潜先生求学于欧洲，从海外寄回了这十二封写给青年朋友的信，最初登载在《一般》杂志上，后集结成册出版，多次重印。</p>
<p>信中所谈皆是青少年们所正在关心或应该关心的话题，如读书、作文、爱恋、情理、修身、做人，凡此种种。作者劝年轻的朋友们，眼光要深沉，戒骄戒躁，不贪容易，更不能随了世俗、急于近利。这些信件正是朱光潜先生提供给现代青少年的成长指南，是充满了人生智慧的必读经典</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>语雀笔记：</p>
<ul>
<li><a href="https://www.yuque.com/super456/qoriag/atm0qilxyqx6vnst" target="_blank" rel="noreferrer">第一封：谈读书</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/gdghsqqa2xayt4fh" target="_blank" rel="noreferrer">第二封：谈动</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/ln7bzc9nsrbfmqi7" target="_blank" rel="noreferrer">第三封：谈静</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/fx6oze5tbkaigt4x" target="_blank" rel="noreferrer">第四封：谈中学生与社会运动</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/ygdkmhgyv2kiwnm4" target="_blank" rel="noreferrer">第五封：谈十字街头</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/dofdufh2lzmmp0u9" target="_blank" rel="noreferrer">第六封：谈多元宇宙</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/eqe3mbvy3sygd876" target="_blank" rel="noreferrer">第七封：谈升学与选课</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/kxwadhn2qyxziqhh" target="_blank" rel="noreferrer">第八封：谈作文</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/du2dx1rdq0twwfof" target="_blank" rel="noreferrer">第九封：谈情与理</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/givmo7x4oritfn44" target="_blank" rel="noreferrer">第十封：谈摆脱</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/ov2q9uw6seg9wm1d" target="_blank" rel="noreferrer">第十一封：谈在卢佛尔宫所得的一个感想</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/aqbxxd51vfqrgoxp" target="_blank" rel="noreferrer">第十二封：谈人生与我</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/zgmt7o1yppp9nss2" target="_blank" rel="noreferrer">谈交友</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/mtipccan3k5dfyc1" target="_blank" rel="noreferrer">谈学问</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/rq6tna8ygfksmz2s" target="_blank" rel="noreferrer">一番语重心长的话——给现代中国青年</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/sf1igbl67dw6rcap" target="_blank" rel="noreferrer">悼夏孟刚</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/ae4p6ig0xcrg2ns5" target="_blank" rel="noreferrer">无言之美</a></li>
</ul>
<p>《给青年的十二封信》
朱光潜
91个笔记</p>
<p>◆  点评</p>
<p>2023/12/23 认为好看 待补充点评🚀...</p>
<p>◆  序</p>
<blockquote>
<blockquote>
<p>就是劝青年眼光要深沉，要从根本上做功夫，要顾到自己，勿随了世俗图近利。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“太贪容易，太浮浅粗疏，太不能深入，太不能耐苦”，作者对于现代青年的毛病，曾这样慨乎言之。征之现状，不禁同感。</p>
</blockquote>
</blockquote>
<p>◆  一 谈读书</p>
<blockquote>
<blockquote>
<p>兴味要在青年时设法培养，过了正当时节，便会萎谢。比方打网球，你在中学时欢喜打，你到老都欢喜打。假如你在中学时代错过机会，后来要发愿去学，比登天还要难十倍。养成读书习惯也是这样</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>别的事都可以学时髦，惟有读书做学问不能学时髦。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>第一，凡值得读的书至少须读两遍。第一遍须快读，着眼在醒豁全篇大旨与特色。第二遍须慢读，须以批评态度衡量书的内容。第二，读过一本书，须笔记纲要和精彩的地方和你自己的意见。记笔记不特可以帮助你记忆，而且可以逼得你仔细，刺激你思考。</p>
</blockquote>
</blockquote>
<p>2023/11/21 发表想法
阅读完这封信，感觉如果是我学生时代阅读到，我可能会很受启发或者有很强的认同感，反而现在感觉文中观点有点不太适合我了。不过作者讲到：“兴味要在青年时设法培养，过了正当时节，便会萎谢。比方打网球，你在中学时欢喜打，你到老都欢喜打。假如你在中学时代错过机会，后来要发愿去学，比登天还要难十倍。养成读书习惯也是这样”，这个是确实，培养习惯，兴趣爱好确实要趁早，越早越有时间和精力的优势吧，而且相对来说会容易一些
信中说到读书方法中规中矩，比较常见，可供参考：“第一，凡值得读的书至少须读两遍。第一遍须快读，着眼在醒豁全篇大旨与特色。第二遍须慢读，须以批评态度衡量书的内容。第二，读过一本书，须笔记纲要和精彩的地方和你自己的意见。记笔记不特可以帮助你记忆，而且可以逼得你仔细，刺激你思考。”但我可能觉得鲁迅说的：“不先泛览群书，则会无所适从或失之偏好，广然后深，博然后专。”会更适合我。书是读不完的，如果选择一本好书，如何读一本适合自己的书，值得探讨
总之，看书有一个好处就是让你心静下来，可以好好享受当下的时光，感觉不到时间的流逝</p>
<blockquote>
<blockquote>
<p>你嫌这封信太冗长了罢？下次谈别的问题，我当力求简短。再会！</p>
</blockquote>
</blockquote>
<p>◆  二 谈动</p>
<blockquote>
<blockquote>
<p>愁生于郁，解愁的方法在泄；郁由于静止，求泄的方法在动。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>朋友，闲愁最苦！愁来愁去，人生还是那么样一个人生，世界也还是那么样一个世界。假如把自己看得伟大，你对于烦恼，当有“不屑”的看待；假如把自己看得渺小，你对于烦恼，当有“不值得”的看待。我劝你多打网球，多弹钢琴，多栽花木，多搬砖弄瓦。假如你不喜欢这些玩艺儿，你就谈谈笑笑，跑跑跳跳，也是好的。就在此祝你
谈谈笑笑，
跑跑跳跳！</p>
</blockquote>
</blockquote>
<p>◆  三 谈静</p>
<blockquote>
<blockquote>
<p>领略趣味的能力固然一半由于天资，一半也由于修养。</p>
</blockquote>
</blockquote>
<p>◆  四 谈中学生与社会运动</p>
<blockquote>
<blockquote>
<p>但是青年人都有过于自觉的幻觉，在你谈爱国谈革命以前，你总应该默诵几声：“君子求诸己！”</p>
</blockquote>
</blockquote>
<p>◆  五 谈十字街头</p>
<blockquote>
<blockquote>
<p>从前学士大夫好以清高名贵相尚，所以力求与世绝缘，冥心孤往。但是闭户读书的成就总难免空疏虚伪。近代哲学与文艺都逐渐趋向写实，于是大家都极力提倡与现实生活接触。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>站在十字街头的人们，尤其是你我们青年，要时时戒备十字街头的危险，要时时回首瞻顾象牙之塔。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>最后，打破偶像，也并非鲁莽叫嚣所可了事。鲁莽叫嚣还是十字街头的特色，是浮浅卑劣的表征。我们要能于叫嚣扰攘中：以冷静态度，灼见世弊；以深沉思考，规划方略；以坚强意志，征服障碍。总而言之，我们要自由伸张自我，不要汩没在十字街头的影响里去。</p>
</blockquote>
</blockquote>
<p>◆  六 谈多元宇宙</p>
<blockquote>
<blockquote>
<p>人生是多方面的，每方面如果发展到极点，都自有其特殊宇宙和特殊价值标准。我们不能以甲宇宙中的标准，测量乙宇宙中的价值。</p>
</blockquote>
</blockquote>
<p>◆  七 谈升学与选课</p>
<p>2023/11/26 发表想法
出来工作几年了深有体会，你自己的成长都主要取决于你，而不是公司、同事、工作内容等；虽然这几个因素也有一定的影响作用，但并不是取决定性作用，有则锦上添花，无则独善其身，提高自己，而不是只会抱怨这不好那不行，怨天尤人。上班第一件事就是写 TO DO LIST，坚持写了 2 年多，置顶座右铭是：“每一天都很重要：你不是工作没有挑战，而是缺少自我要求”。很感谢现在的自己可以坚持下来，也一步步成长走过来。因为，我们唯一能掌控的只有自己</p>
<blockquote>
<blockquote>
<p>我们求学最难得的是诚恳的良师与和爱的益友，所以选校应该以有无诚恳、和爱的空气为准。如果能得这种学校空气，无论是大学不是大学，我们都可以心满意足。做学问全赖自己，做事业也全赖自己，与资格都无关系。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我们求学最难得的是诚恳的良师与和爱的益友，所以选校应该以有无诚恳、和爱的空气为准。如果能得这种学校空气，无论是大学不是大学，我们都可以心满意足。做学问全赖自己，做事业也全赖自己，与资格都无关系。</p>
</blockquote>
</blockquote>
<p>2023/11/26 发表想法
我想我现在就是“今之学者”，为了工作，为了提升专业能力，不停地学习，虽然谈不上合不合自己胃口，符不符合自己兴趣，但至少可以让自己生活的更好，有更多的选择。毕竟不是谁都能找到自己喜欢的东西并持之以恒的在做的。有这个心力不一定有这个条件，有这个条件不一定就找到适合自己的东西。我们都在努力的前行着，也许开心，过得好也是一种不错的活法吧</p>
<blockquote>
<blockquote>
<p>“学以致用”本来不是一种坏的主张，但是资禀兴趣人各不同，你假若为社会需要而忘却自己，你就未免是一位“今之学者”了</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“学以致用”本来不是一种坏的主张，但是资禀兴趣人各不同，你假若为社会需要而忘却自己，你就未免是一位“今之学者”了</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我时常想，做学问，做事业，在人生中都只能算是第二桩事。人生第一桩事是生活。我所谓“生活”是“享受”，是“领略”，是“培养生机”。假若为学问为事业而忘却生活，那种学问事业在人生中便失其真正意义与价值。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我时常想，学问这件东西，先要能博大而后能精深。“博学守约”，真是至理名言。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>贪多而不务得，也是一种毛病。我是说，在你的精力时间可能范围以内，你须极力求多方面的发展。</p>
</blockquote>
</blockquote>
<p>2023/11/26 发表想法
看完这封信，有很多共鸣，可惜上大学时候没能阅读到。好的书籍内容就是这样，只要当你阅读到受用的时候，才发现相见恨晚，有点可惜遗憾，但也许与书籍的相遇也需要一个过程吧，急不得
对于作者的求学观点我还是比较认同的，出来工作几年了深有体会，你自己的成长都主要取决于你，而不是公司、同事、工作内容等；虽然这几个因素也有一定的影响作用，但并不是取决定性作用，有则锦上添花，无则独善其身，提高自己，而不是只会抱怨这不好那不行，怨天尤人。上班第一件事就是写 TO DO LIST，坚持写了 2 年多，置顶座右铭是：“每一天都很重要：你不是工作没有挑战，而是缺少自我要求”。很感谢现在的自己可以坚持下来，也一步步成长走过来。因为，我们唯一能掌控的只有自己
我想我现在就是“今之学者”，为了工作，为了提升专业能力，不停地学习，虽然谈不上合不合自己胃口，符不符合自己兴趣，但至少可以让自己生活的更好，有更多的选择。毕竟不是谁都能找到自己喜欢的东西并持之以恒的在做的。有这个心力不一定有这个条件，有这个条件不一定就找到适合自己的东西。我们都在努力的前行着，也许开心，过得好也是一种不错的活法吧
总之，做学问要博学守约，正所谓“君子尊德性而道问学，致广大而尽精微，极高明而道中庸。”和“源不深而望流之远，根不固而求木之长，德不厚而思国之治，臣虽下愚，知其不可，而况于明哲乎？”的道理一致，但也别忘了该好好生活的自己</p>
<blockquote>
<blockquote>
<p>同时，我也很愿听听你自己的意见。</p>
</blockquote>
</blockquote>
<p>◆  八 谈作文</p>
<p>2023/11/27 发表想法
很喜欢的一句话：所谓的文笔好，不是指你出口成章。而是，你一动笔，你就心生欢喜。希望能激励你坚持写作</p>
<blockquote>
<blockquote>
<p>每读到一种好作品，看见自己所久想说出而说不出的话，被他人轻轻易易地说出来了，一方面固然以作者“先获我心”为快，而另一方面也不免心怀惭怍</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>其实冬烘学究之厌恶新小说和白话诗，和新文学运动者之攻击读经和念古诗文，都是偏见。文学上只有好坏的分别，没有新旧的分别。青年们读新书已成时髦，用不着再提倡，我只劝有闲工夫有好兴致的人对于旧书也不妨去读读看。</p>
</blockquote>
</blockquote>
<p>◆  九 谈情与理</p>
<blockquote>
<blockquote>
<p>我们的生活应该受理智支配呢？还是应该受感情支配呢？</p>
</blockquote>
</blockquote>
<p>2023/11/29 发表想法
理性主导，感性辅助，相辅相成，相得益彰</p>
<blockquote>
<blockquote>
<p>他们想把理智抬举到万能的地位，而不问在事实上理智是否万能；他们只主张理智应该支配一切生活，而不考究生活是否完全可以理智支配。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>行为是理智的产品，而理智所去取，则以感觉之快与不快为标准。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>行为的原动力是本能与情绪，不是理智。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>总观以上各点，我们可以知道在事实上理智支配生活的能力是极微末、极薄弱的，尊理智抑感情的人在思想上是开倒车，是想由现世纪回到十八世纪。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>(morality according to heart)。问理的道德迫于外力，问心的道德激于衷情，问理而不问心的道德，只能给人类以束缚而不能给人类以幸福。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我说了这许多话，可以一言以蔽之，“仁”胜于“义”，问心的道德胜于问理的道德，所以情感的生活胜于理智的生活。生活是多方面的，我们不但要能够知(know)，我们更要能够感(feel)。理智的生活只是片面的生活。理智没有多大能力去支配情感，纵使理智能支配情感，而理胜于情的生活和文化都不是理想的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我承认“养老”、“养小”都确是一种义务，我否认能尽这种义务就是孝慈。因为我主张于能尽养老的义务之外，还要有出于衷诚的敬爱，才能谓孝，所以我主张孝不是一种报酬。</p>
</blockquote>
</blockquote>
<p>◆  十 谈摆脱</p>
<p>2023/12/1 发表想法
鱼与熊掌不可兼得，无论怎么选都会有后悔或遗憾，还不如顺其本心，勿念过往，心之所向，一往无前</p>
<blockquote>
<blockquote>
<p>生命途程上的歧路尽管千差万别，而实际上只有一条路可走，有所取必有所舍，这是自然的道理。世间有许多人站在歧路上只徘徊顾虑，既不肯有所舍，便不能有所取。世间也有许多人既走上这一条路，又念念不忘那一条路。结果也不免差误时光。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>生命途程上的歧路尽管千差万别，而实际上只有一条路可走，有所取必有所舍，这是自然的道理。世间有许多人站在歧路上只徘徊顾虑，既不肯有所舍，便不能有所取。世间也有许多人既走上这一条路，又念念不忘那一条路。结果也不免差误时光。</p>
</blockquote>
</blockquote>
<p>2023/12/1 发表想法
有什么事是可以摆脱不开的呢，说白了就是自己不愿意去做，然后会找一堆理由借口安慰自己，不是自己问题是吗？我们习惯了舒适区的安逸，一旦有外界闯入或被打破，第一反应是防御和反感是吗？我之前有时候就是这样，因为我们都不是圣人，我们需要克服人性去做一些难而坚持的事情，我们需要不断的与自己和解，给自己加油鼓励坚持做下去，直到守得云开见月明，相信优秀的我们终究会顶峰相见对吧。记住了作者所说的：认定一个目标，便专心致志地向那里走，其余一切都置之度外</p>
<blockquote>
<blockquote>
<p>“摆脱不开”便是人生悲剧的起源。畏首畏尾，徘徊歧路，心境既多苦痛，而事业也不能成就。许多人的生命都是这样模模糊糊地过去的。要免除这种人生悲剧，第一须要“摆脱得开”。消极说是“摆脱得开”，积极说便是“提得起”，便是“抓得住”。认定一个目标，便专心致志地向那里走，其余一切都置之度外，这是成功的秘诀，也是免除烦恼的秘诀。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“摆脱不开”便是人生悲剧的起源。畏首畏尾，徘徊歧路，心境既多苦痛，而事业也不能成就。许多人的生命都是这样模模糊糊地过去的。要免除这种人生悲剧，第一须要“摆脱得开”。消极说是“摆脱得开”，积极说便是“提得起”，便是“抓得住”。认定一个目标，便专心致志地向那里走，其余一切都置之度外，这是成功的秘诀，也是免除烦恼的秘诀。</p>
</blockquote>
</blockquote>
<p>2023/12/1 发表想法
释迦牟尼深山冥想为了解脱人类罪苦的方法，屈原、文天祥从容就死而摆脱生活欲，孟敏堕甑不顾而摆脱过去失败，还有摆脱真理、摆脱恋爱、摆脱功名利禄等等历史人迹说明：万物皆可摆脱，可以摆脱一切，只要你愿意。追寻的也许就是吾心所安吧</p>
<blockquote>
<blockquote>
<p>这是古今第一个知道摆脱的人。其次如苏格拉底，如耶稣，如屈原，如文天祥，为保持人格而从容就死，能摆脱开一般人所摆脱不开的生活欲，也很可以廉顽立懦。再其次如希腊第欧根尼提倡克欲哲学，除一个饮水的杯子和一个盘坐的桶子以外，身旁别无长物，一日见童子用手捧水喝，他便把饮水的杯子也掷碎。犹太斯宾诺莎学说与犹太教义不合，犹太教徒行贿不遂，把他驱逐出籍，他以后便专靠磨镜过活。他在当时是欧洲第一个大哲学家，海得尔堡大学请他去当哲学教授，他说：“我还是磨我的镜子比较自由。”所以谢绝教授的位置。这是能为真理为学问摆脱一切的。卓文君逃开富家的安适，去陪司马相如当垆卖酒，是能为恋爱摆脱一切的。张翰在齐做大司马东曹掾，一天看见秋风乍起，想起吴中菰菜莼羹鲈鱼脍，立刻就弃官归里。陶渊明做彭泽令，不愿束带见督邮，向县吏说：“我岂能为五斗米折腰向乡里小儿！”立即解绶辞官。这是能摆脱禄位以行吾心所安的。英国小说家司各特早年颇致力于诗，后读拜伦著作，知道自己在诗的方面不能有大成就，便丢开音律专去做他的小说。这是能为某一种学问而摆脱开其他学问之引诱的。孟敏堕甑，不顾而去。</p>
</blockquote>
</blockquote>
<p>2023/12/1 发表想法
也许都是为了生存，为了生活，不是谁都可以摆脱生活走向更高境界的，但是我们确实都在变好</p>
<blockquote>
<blockquote>
<p>请问街头那纷纷群众忙的为什么？为什么天天做明知其无聊的工作，说明知其无聊的话，和明知其无聊的朋友假意周旋？在我看来，这都由于“摆脱不开”。因为人人都“摆脱不开”，所以生命便成了一幕最大的悲剧。</p>
</blockquote>
</blockquote>
<p>◆  十一 谈在卢佛尔宫所得的一个感想</p>
<blockquote>
<blockquote>
<p>凡是第一流美术作品都能使人在微尘中见出大千，在刹那中见出终古。</p>
</blockquote>
</blockquote>
<p>2023/12/3 发表想法
始于初心，成于匠心</p>
<blockquote>
<blockquote>
<p>“效率”决不是唯一的估定价值的标准，尤其不是最高品的估定价值的标准。最高品估定价值的标准一定要着重人的成分(human element)，遇见一种工作不仅估量它的成功如何，还有问它是否由努力得来的，是否为高尚理想与伟大人格之表现。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“效率”决不是唯一的估定价值的标准，尤其不是最高品的估定价值的标准。最高品估定价值的标准一定要着重人的成分(human element)，遇见一种工作不仅估量它的成功如何，还有问它是否由努力得来的，是否为高尚理想与伟大人格之表现。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我记得这几句话，所以能惊赞热烈的失败，能欣赏一般人所嗤笑的呆气和空想，能景仰不计成败的坚苦卓绝的努力。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>因为我所知道的学生们、学者们和革命家们都太贪容易，太浮浅粗疏，太不能深入，太不能耐苦，太类似美国旅行家看《蒙娜·丽莎》了。</p>
</blockquote>
</blockquote>
<p>◆  十二 谈人生与我</p>
<p>2023/12/7 发表想法
第一种态度是：人生如戏，全靠演技；我们要把生活当做生活，不要有其他目的。还有别把自己看的太重要，不然带来的大多数是痛苦、内耗自己。明白生活自身就是方法，生活自身也就是目的。只要顺其自然所给的本性生活着就好；
第二种态度是：不以物喜，不以己悲；针对是非善恶无意义，把一切纯当趣味喜剧看待即可。如何看待悲剧问题呢，可以理解为“悲剧也就是人生一种缺陷。它好比洪涛巨浪，令人在平凡中见出庄严，在黑暗中见出光彩。”因为“人不活一个点，人活起伏”吧</p>
<blockquote>
<blockquote>
<p>我有两种看待人生的方法。在第一种方法里，我把我自己摆在前台，和世界一切人和物在一块玩把戏；在第二种方法里，我把我自己摆在后台，袖手看旁人在那儿装腔作势。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我有两种看待人生的方法。在第一种方法里，我把我自己摆在前台，和世界一切人和物在一块玩把戏；在第二种方法里，我把我自己摆在后台，袖手看旁人在那儿装腔作势。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>悲剧也就是人生一种缺陷。它好比洪涛巨浪，令人在平凡中见出庄严，在黑暗中见出光彩</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人生本来要有悲剧才能算人生，你偏想把它一笔勾销，不说你勾销不去，就是勾销去了，人生反更索然寡趣。所以我无论站在前台或站在后台时，对于失败，对于罪孽，对于殃咎，都是一副冷眼看待，都是用一个热心惊赞</p>
</blockquote>
</blockquote>
<p>◆  附录</p>
<blockquote>
<blockquote>
<p>言所以达意，然而意决不是完全可以言达的。因为言是固定的，有迹象的；意是瞬息万变，飘渺无踪的。言是散碎的，意是混整的。言是有限的，意是无限的。以言达意，好像用断续的虚线画实物，只能得其近似。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>所谓无言，不一定指不说话，是注重在含蓄不露</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>拿美术来表现思想和情感，与其尽量流露，不如稍有含蓄；与其吐肚子把一切都说出来，不如留一大部分让欣赏者自己去领会。因为在欣赏者的头脑里所生的印象和美感，有含蓄比较尽量流露的还要更加深刻。换句话说，说出来的越少，留着不说的越多，所引起的美感就越大越深越真切。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我们处世有两种态度，人力所能做到的时候，我们竭力征服现实。人力莫可奈何的时候，我们就要暂时超脱现实，储蓄精力待将来再向他方面征服现实。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“言有尽而意无穷。”无穷之意达之以有尽之言，所以有许多意，尽在不言中。文学之所以美，不仅在有尽之言，而尤在无穷之意。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>此中有真意，欲辨已忘言！</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>这世界是污浊极了，苦痛我也够受了。我自己姑且不算吧，但是我自己堕入苦海了。我决不忍眼睁睁地看别人也跟我下水。我决计要努力把这个环境弄得完美些，使后我而来的人们免得再尝受我现在所尝受的苦痛，我自己不幸而为奴隶，我所以不惜粉身碎骨，努力打破这个奴隶制度，为他人争自由，这就是绝我而不绝世的态度。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>这五六十年来我们天天在讲教育，教育对于人的质料似乎没有发生很好的影响。这一辈子人睁着眼睛蹈前一辈子人的覆辙，下一辈子人仍然睁着眼睛蹈这一辈子人的覆辙，如此循环展转，一报还一报，“长夜漫漫何时旦”呢？</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>世间事之难就难在人们不知道或是不能够转一个念头，或是转了念头而没有力量坚持到底。幸福的世界里决没有愚蠢者、怯懦者和懒惰者的地位。你要合理地生存，你就要有觉悟、有决心、有奋斗的精神和能力。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一个真正有学问的人必定知识丰富、思想锐敏、洞达事理，处任何环境，知道把握纲要、分析条理、解决困难。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人有肉体，有心灵。肉体有它的生活，心灵也应有它的生活。肉体需要营养，心灵也不能“辟谷”。肉体缺乏营养，必酿成饥饿病死；心灵缺乏营养，自然也要干枯腐化。人为万物之灵，就在他有心灵或精神生活。所以测量人的成就并不在他能否谋温饱，而在他有无丰富的精神生活。一个人到了只顾衣食饱暖而对于真善美漫不感觉兴趣时，他就只能算是一种“行尸走肉”，一个民族到了只顾体肤需要而不珍视精神生活的价值时，它也就必定逐渐没落了。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一个人在学问上如果有浓厚的兴趣，精深的造诣，他会发现万事万物各有一个妙理在内，他会发现自己的心涵蕴万象，澄明通达，时时有寄托，时时在生展，这种人的生活决不会干枯，他也决不会做出卑污下贱的事。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>世间决没有自身无兴趣的学问，人感觉不到兴趣，只由于人的愚昧或懒惰。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>犹如吸收食物加以消化之后变为生命的动力。食而不化固然是无用，不食而求化也还是求无中生有</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>最重要的因素是个人自己的努力。学问是一件艰苦的事，许多人不能忍耐它所必经的艰苦。努力之外，第二个重要的因素是认清方向与门径。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>学校教育，在我想，只有两个重要的功用：第一是启发兴趣，其次就是指点门径。</p>
</blockquote>
</blockquote>
<p>2023/12/11 发表想法
这封信看了 3 遍，如何与人交朋友，如何拥有或成为一个好朋友感触很深，因为信中很多内容解答了我很多疑惑和交友方法。作者总结了一句话就是：“责己宜严，责人宜宽”。说到交朋友，首先需要得懂处友，就懂得处人，懂得处人，就懂得做人。所以为啥有人人缘好，人品好之类标签的人，身边总不缺有朋友呢
人们常说人是社会性动物，人生的很多快乐都需要建立在人与人之间的分享上的，分享自己的快乐，可以让自己的快乐翻倍，也可以让自己的苦恼减半，我是认可的，但也很难去做到，因为不是身边所有的朋友都有这种分享欲，珍惜有这种分享欲的朋友，而且还有关系处理适当才行。当然也有一类朋友，正如作者所说的：“人是一种怪物，自己是一个人，却要显得瞧不起人，要孤高自赏，要闭门谢客，要把心里所想的看成神妙不可言说，“不可与俗人道”，其实隐意识里面惟恐人不注意自己，不知道自己，不赞赏自己。”我自己也是过来人，我也有这样的时候，可能是因为自己的无知，导致狂妄自大，目中无人吧。以为感觉自己比别人懂得多，会的多，就觉得自己了不起看不起别人。其实闻道有先后，术业有专攻，如是而已。也有可能别人比你厉害，只是没有揭穿你而已。与人相处，保持谦卑，挺重要的
怎么选择朋友，怎么交朋友呢？首先得知道你自己是什么样的人，就会得到什么样的朋友。因为：“欣赏与创造根本难分，每人所欣赏的世界就是每人所创造的世界，就是他自己的情趣和性格的返照”。所以那些说到什么跨越阶层交朋友，什么价值利益交换的朋友等等，可能只是你把别人当朋友而已，别人未必把你当朋友。或者说你只是别人的一个工具而已。怎么才算真正的朋友呢，作者也说到：“朋友的乐趣在相同中容易见出，朋友的益处却往往在相异处才能得到。古人尝拿“如切如磋，如琢如磨”来譬喻朋友的交互影响。”所以，好的朋友之间是可以互相交互影响、共同进步的，正所谓“同声相应，同气相求”吧
当然，好朋友还有一个比较高的境界就是：友必同心，也许就是心目中朋友该有的样子。怎么同心呢？作者意思是指性灵同在一个水准上。如果朋友之间在性灵上有高低之分呢，如果可以的话，可以这样做：我高就须感化你，把你提高到同样水准；你高也是如此，否则友谊就难成立。生活中很多朋友都会陆陆续续转变为路人，也许就是我们都很难做到这样，结局可想而知。珍惜身边把你当朋友的人，说不定别人就是想帮你。也要经营好自己把别人当朋友的时候，因为有朋友不易吧</p>
<blockquote>
<blockquote>
<p>谈交友</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人生的快乐有一大半要建筑在人与人的关系上面。只要人与人的关系调处得好，生活没有不快乐的。许多人感觉生活苦恼，原因大半在没有把人与人的关系调处适宜。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>换句话说，无论哪一伦，都非有朋友的要素不可，朋友是一切人伦的基础。懂得处友，就懂得处人；懂得处人，就懂得做人。</p>
</blockquote>
</blockquote>
<p>2023/12/10 发表想法
我也有这样的时候，可能因为自己的无知，导致狂妄自大，目中无人。感觉自己比别人懂得多，会的多，就觉得自己了不起看不起别人。其实闻道有先后，术业有专攻，如是而已。好好做一个谦卑的人吧</p>
<blockquote>
<blockquote>
<p>人是一种怪物，自己是一个人，却要显得瞧不起人，要孤高自赏，要闭门谢客，要把心里所想的看成神妙不可言说，“不可与俗人道”，其实隐意识里面惟恐人不注意自己，不知道自己，不赞赏自己。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人是一种怪物，自己是一个人，却要显得瞧不起人，要孤高自赏，要闭门谢客，要把心里所想的看成神妙不可言说，“不可与俗人道”，其实隐意识里面惟恐人不注意自己，不知道自己，不赞赏自己。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>与善人交，如入芝兰之室，久而不闻其香；与恶人交，如入鲍鱼之肆，久而不闻其臭。</p>
</blockquote>
</blockquote>
<p>2023/12/10 发表想法
好的朋友之间是可以互相交互影响、共同进步的</p>
<blockquote>
<blockquote>
<p>朋友的乐趣在相同中容易见出，朋友的益处却往往在相异处才能得到。古人尝拿“如切如磋，如琢如磨”来譬喻朋友的交互影响。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>朋友的乐趣在相同中容易见出，朋友的益处却往往在相异处才能得到。古人尝拿“如切如磋，如琢如磨”来譬喻朋友的交互影响。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一个人多和异己的朋友讨论，会逐渐发现自己的学说不圆满处，对方的学说有可取处，逼得不得不作进一层的思考，这样地对于学问才能鞭辟入里。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一个不能有诤友的人永远是愚而好自用，在道德学问上都不会有很大的成就。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>知人是处人的基础，而知人却极不易，因为深刻的了解必基于深刻的同情</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>交友是一件寻常事，人人都有朋友，交友却也不是一件易事，很少人有真正的朋友。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>欣赏与创造根本难分，每人所欣赏的世界就是每人所创造的世界，就是他自己的情趣和性格的返照</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>你自己是什么样的人，就会得到什么样的朋友。人类心灵尝交感回流。你拿一分真心待人，人也就拿一分真心待你，你所“取”如何，就看你所“与”如何。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>友必同心，所谓“同心”是指性灵同在一个水准上。如果你我在性灵上有高低，我高就须感化你，把你提高到同样水准；你高也是如此，否则友谊就难成立。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>交友和一般行为一样，我们应该常牢记在心的是“责己宜严，责人宜宽”。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我们中国人做事的通病就在怕站而不怕慢，慢条斯理地不死不活地望前挨，说不做而做着并没有歇，说做却并没有做出什么名色来。许多事就这样因循耽误了。我们只讲工作而不讲效率，在现代社会中，不讲效率，就要落后。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>据心理学家的解释，有意识作用的工作须得退到潜意识中酝酿一阵，才得着土生根。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>假如在发现神思不旺时立即丢开，在乡下散步，吸一口新鲜空气，看看蓝天绿水，陡然间心旷神怡，回头来再伏案做事，便觉精神百倍，本来做得很艰苦而不能成功的事，现在做起来却有手挥目送之乐，轻轻易易就做成了。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>世间有许多过于辛苦的人，满身是尘劳，满腔是杂念，时时刻刻都为环境的需要所驱遣，如机械一般流转不息，自己做不得自己的主宰，呆板枯燥，没有一点人生之趣。这种人是环境压迫的牺牲者，没有力量抬起头来驾驭环境或征服环境，在事业和学问上都难有真正的大成就。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人生最大的快慰是创造，一件难做的事做成了，一种闷在心里的情感或思想表现出来了，自己回头一看，就如同上帝创造了世界，母亲产出了婴儿，看到它好，自己也充分感觉到自己的力量，越发兴起鼓舞。没有尝到这种快慰的人就没有尝到文学的最大乐趣。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>许多人在文学上不能有成就，大半都误在入手就养成说谎的习惯。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>宇宙间一切现象都可以纳到四大范畴里去，就是情、理、事、态。“情”指喜怒哀乐之类主观的感动，“理”是思想在事物中所推求出来的条理秩序，“事”包含一切人物的动作，“态”指人物的形状。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>文学借文字表现思想情感；文字上面有含糊，就显得思想还没有透彻，情感还没有凝炼。咬文嚼字，在表面上像只是斟酌文字的分量，在实际上就是调整思想和情感。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>语言跟着思想情感走，你不肯用俗滥的语言，自然也就不肯用俗滥的思想情感，你遇事就会朝深一层去想，你的文章也就真正是“作”出来的，不致落入下乘。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>文学是艰苦的事，只有刻苦自勉，推陈翻新，时时求思想情感与语文的精炼与吻合，他才会逐渐达到艺术的完美。</p>
</blockquote>
</blockquote>
<p>◆  代跋：“再说一句话”</p>
<blockquote>
<blockquote>
<p>我所要说的话，都是由体验我自己的生活，先感到(feel)而后想到(think)的。换句话说，我的理都是由我的情产生出来的，我的思想是从心出发而后再经过脑加以整理的。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/geiqingniandeshierfengxin.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[Vue3 学习笔记（一）]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/vue3-study-01.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/vue3-study-01.html</guid>
            <pubDate>Sat, 23 Dec 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[# Vue3 学习笔记（一）

## 简介
:::info
💡：Vue3 版本学习官方文档笔记
:::

- [简介 | Vue.js](https://cn.vuejs.org/guide/introduction.html)
- [互动教程文档](https://cn.vuejs.org/tutorial/#step-1)
- [所有示例文档](https://cn.vuejs.org/examples/#hello-world)
- [Vue SPC Playground——在线演练场及示例分享站点](https://play.vuejs.org/#eNp9kVFLwzAQx7/KeS9TmBuyt1EHKgP1QUUFX/JS2lvXmSYhucxC6Xf32tLqwxiEJPf/X5Lf5Rq8c25xjIRrTELmS8cbZah21jPktEujZmiUAchTTi+vhj2AJ47ejBFAFYo1zB5Jawtf1uv8YjZYbbfIJCNZTg9IwFQ5nTJJBJDsbzZN090CbZssJerV0rjIcLyubE76VqH4CsVKltNpnCOHzJpdWSwOwRqpo4dSmNnKlZr8q+PSmqBwPeIqTIXz57nX2Eeaj3q2p+z7hH4IdacpfPMUyB9J4eRx6gviwd5+vFAt+8kU8qgl+4z5TsHq2DEOaffR5IL9L6+nfaq6npSm+AzbmsmEsagOtP/kPl+hNPPhTOl/uKvFamwOtr/4aany)
- [术语表](https://cn.vuejs.org/glossary/)
- [生产环境错误代码参考](https://cn.vuejs.org/error-reference/)
- [API](https://cn.vuejs.org/api/)
- [主题案例](https://cn.vuejs.org/ecosystem/themes.html)
- [UI 组件学习](https://ui-libs.vercel.app/)

<CustomImage src='/growth-record/frame/vue/vue3study01.webp' />

- [工具链相关](https://cn.vuejs.org/guide/scaling-up/tooling.html)

### 核心功能
Vue 的两大核心功能：

- 声明式渲染：Vue 基于标准 HTML 拓展了一套模版语法，使得我们可以声明式地**描述**最终输出的 **HTML** 和 **JavaScript** **状态之间的关系；**
- 响应式：Vue 会自动跟踪 **JavaScript 状态**并在其**发生变化**时**响应式地更新 DOM；**

### 渐进式框架
它是一个可以与你共同成长、适应你不同需求的框架

特点：灵活性、逐步集成使用

- 无需构建步骤，渐进式增强静态 HTML；
- 在任何页面中作为 Web Components 嵌入；
- 单页应用（SPA）；
- 全栈 / 服务端渲染（SSR）；
- Jamstack / 静态站点生成（SSG）；
- 开发桌面端、移动端、WebGL，甚至是命令行终端中的界面；

### 单文件组件
SRC（Single-File Components）：使用一种类似 HTML 格式的文件来书写 Vue 组件，会将一个组件的逻辑（JavaScript）、模版（HTML）和样式（CSS）封装在同一个文件里

### API 风格
两种：

- 选项式 API；
- 组合式 API；

选项式 API 是在组合式 API 的基础上实现的

选项式 API：“组件实例”为概念中心（this），按照选项来组织代码；
组合式 API 的核心思想：直接在函数作用域内定义响应式状态变量，并将从多个函数中得到的状态组合起来处理复杂问题

## 基本使用
### DOM 更新时机
nextTick 使用等待更新时机：
```typescript
import { nextTick } from 'vue'

async function increment () {
  count.value++
  await nextTick()
  // DOM 已经更新了
}

```
### 响应式基础

1. 注意，在模板中使用 ref 时，我们不需要附加 .value。为了方便起见，当在模板中使用时，ref 会自动解包 (有一些[注意事项](https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#caveat-when-unwrapping-in-templates))
2. [为什么要使用 ref ](https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#why-refs)

另一个 ref 的好处是，与普通变量不同，你可以**将 ref 传递给函数，同时保留对最新值和响应式连接的访问**。当将复杂的逻辑重构为可重用的代码时，这将非常有用

shallow ref 放弃深层响应式

3. reactive 与将内部值包装在特殊对象中的 ref 不同
- shallowReactive 退出深层响应式
- 值得注意的是，reactive() 返回的是一个原始对象的 [Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy)，它和原始对象是不相等的

4. reactive 的局限性：
- 有限的值类型：它只能用于对象类型 (对象、数组和如 Map、Set 这样的[集合类型](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#keyed_collections))。它不能持有如 string、number 或 boolean 这样的[原始类型](https://developer.mozilla.org/en-US/docs/Glossary/Primitive)
- 不能替换整个对象：由于 Vue 的响应式跟踪是通过属性访问实现的，因此我们必须始终保持对响应式对象的相同引用。这意味着我们不能轻易地“替换”响应式对象，因为这样的话与第一个引用的响应性连接将丢失
- 对解构操作不友好：当我们将响应式对象的原始类型属性解构为本地变量时，或者将该属性传递给函数时，我们将丢失响应性连接

5. ref 解包细节：
- 一个 ref 会在作为响应式对象的属性被访问或修改时自动解包；
- 如果将一个新的 ref 赋值给一个关联了已有 ref 的属性，那么它会替换掉旧的 ref
- 只有当嵌套在一个深层响应式对象内时，才会发生 ref 解包。当其作为[浅层响应式对象](https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive)的属性被访问时不会解包

数组和集合的注意事项：

- 与 reactive 对象不同的是，当 ref 作为响应式数组或原生集合类型(如 Map) 中的元素被访问时，它不会被解包
- 在模板渲染上下文中，只有顶级的 ref 属性才会被解包，但是，另一个需要注意的点是，如果 ref 是文本插值的最终计算值 (即 `{{ }}` 标签)，那么它将被解包

### 计算属性
可写计算属性
```typescript
const firstName = ref('John')
const lastName = ref('Doe')

const fullName = computed({
  get () {
    return firstName.value + lastName.value
  },
  set (newValue) {
    // 解构赋值法
    [firstName.value, lastName.value] = newValue.split(' ')
  }
})
```

**Getter 不应有副作用**
计算属性的 getter 应只做计算而没有任何其他的副作用，这一点非常重要，请务必牢记。举例来说，不要在 getter 中做异步请求或者更改 DOM！一个计算属性的声明中描述的是如何根据其他值派生一个值。因此 getter 的职责应该仅为计算和返回该值

**避免直接修改计算属性值**
从计算属性返回的值是派生状态。可以把它看作是一个“临时快照”，每当源状态发生变化时，就会创建一个新的快照。更改快照是没有意义的，因此计算属性的返回值应该被视为只读的，并且永远不应该被更改——应该更新它所依赖的源状态以触发新的计算

### Class 与 Style 绑定

1. 绑定 class：

将动态的对象或数组改为多使用计算属性绑定对象

数组和对象结合使用：
```typescript
<div :class="[{ active: isActive }, errorClass]"></div>
```

注意：如果在组件上使用，对于只有一个根元素的组件，当你使用了 class attribute 时，这些 class 会被添加到根元素上并与该元素上已有的 class 合并。根元素为多个时，使用 $attrs.class 属性接收设置对应样式（透传 Attribute）

2. 绑定內联样式 style：
- 注意：自动前缀、样式多值
```typescript
<div :style="{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }"></div>
```

```html
<!--
 使用Vue.js的:style绑定,设置display属性为flex,以实现弹性布局.
 这里使用了三种不同的前缀,以适应不同的浏览器.
 注意: 在实际开发中,应该根据需要选择合适的前缀,并且避免使用不必要的前缀,以避免代码过于冗长.
-->
<div :style="{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }"></div>

```
数组仅会渲染浏览器支持的最后一个值。在这个示例中，在支持不需要特别前缀的浏览器中都会渲染为 display: flex

### 条件渲染
v-if vs v-show 的区别：

- v-if 是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建；
- v-if 也是惰性的：如果在初次渲染时条件值为 false，则不会做任何事。条件区块只有当条件首次变为 true 时才被渲染。
- 相比之下，v-show 简单许多，元素无论初始条件如何，始终会被渲染，只有 CSS display 属性会被切换；
- 总的来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要频繁切换，则使用 v-show 较好；如果在运行时绑定条件很少改变，则 v-if 会更合适

v-if 和 v-for 同时存在于一个元素上的时候，v-if 会首先被执行

### 列表渲染
v-for 的解构赋值写法：
```typescript
<li v-for="{ message } in items">
  {{ message }}
</li>

<!-- 有 index 索引时 -->
<li v-for="({ message }, index) in items">
  {{ message }} {{ index }}
</li>
```

也可以使用 v-of：
```typescript
<div v-for="item of items"></div>
```

v-for 遍历对象：遍历顺序跟 Object.keys() 返回值有一样
```typescript
const myObject = reactive({
  title: 'How to do lists in Vue',
  author: 'Jane Doe',
  publishedAt: '2016-04-10'
})

<ul>
  <li v-for="value in myObject">
    {{ value }}
  </li>
</ul>

// 解构多个值
<li v-for="(value, key, index) in myObject">
  {{ index }}. {{ key }}: {{ value }}
</li>
```

v-for 里使用范围值（数值），通过使用一个整数值，渲染 1...n，注意：是从 1 开始而并非 0
```typescript
<span v-for="n in 10">{{ n }}</span>
```

template 使用 v-for

v-for 与 v-if：
当它们同时存在于一个节点上时，v-if 比 v-for 的优先级更高。这意味着 v-if 的条件渲染无法访问到 v-for 作用域内定义的变量别名
```typescript
<!--
 这会抛出一个错误，因为属性 todo 此时
 没有在该实例上定义
-->
<li v-for="todo in todos" v-if="!todo.isComplete">
  {{ todo.name }}
</li>

// 修改为：
<template v-for="todo in todos">
  <li v-if="!todo.isComplete">
    {{ todo.name }}
  </li>
</template>
```

通过 key 管理状态
**就地更新原则：当数据项的顺序改变时，Vue 不会随之移动 DOM 元素的顺序，而是就地更新每个元素，确保它们在原本指定的索引位置上渲染**
注意：默认模式是高效的，但只适用于列表渲染输出的结果不依赖子组件状态或者临时 DOM 状态 (例如表单输入值) 的情况
key 的作用：为了给 Vue 一个提示，以便它可以跟踪每个节点的标识，从而重用和重新排序现有的元素，需要为每个元素对应的块提供一个唯一的 key attribute：
```typescript
<div v-for="item in items" :key="item.id">
  <!-- 内容 -->
</div>
```

当使用 `<template v-for>` 时， key 应该被放置在这个 template 容器上：
```typescript
<template v-for="todo in todos" :key="todo.name">
  <li>{{ todo.name }}</li>
</template>
```

key 绑定的值期望是一个基础类型的值，例如字符串或 number 类型。**不要用对象作为 v-for 的 key**

组件上使用 v-for 跟一般元素上使用没有区别

数组变化侦测

### 事件处理
事件处理器的值可以是：

- 內联事件处理器：
- 方法事件处理器：

內联事件处理器用于简单的场景：
```typescript
<button @click="count++">Add 1</button>
<p>Count is: {{ count }}</p>
```

方法事件处理器：会自动接收原生 DOM 事件并触发执行

在內联事件处理器中访问事件参数：
```typescript
<!-- 使用特殊的 $event 变量 -->
<button @click="warn('Form cannot be submitted yet.', $event)">
  Submit
</button>

<!-- 使用内联箭头函数 -->
<button @click="(event) => warn('Form cannot be submitted yet.', event)">
  Submit
</button>
```

事件修饰符

- .stop
- .prevent
- .self
- .capture
- .once
- .passive

注意：`.capture`、`.once` 和 `.passive` 修饰符与[原生 addEventListener 事件](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#options)相对应
```typescript
<!-- 单击事件将停止传递 -->
<a @click.stop="doThis"></a>

<!-- 提交事件将不再重新加载页面 -->
<form @submit.prevent="onSubmit"></form>

<!-- 修饰语可以使用链式书写 -->
<a @click.stop.prevent="doThat"></a>

<!-- 也可以只有修饰符 -->
<form @submit.prevent></form>

<!-- 仅当 event.target 是元素本身时才会触发事件处理器 -->
<!-- 例如：事件处理器不来自子元素 -->
<div @click.self="doThat">...</div>

<!-- 添加事件监听器时，使用 `capture` 捕获模式 -->
<!-- 例如：指向内部元素的事件，在被内部元素处理前，先被外部处理 -->
<div @click.capture="doThis">...</div>

<!-- 点击事件最多被触发一次 -->
<a @click.once="doThis"></a>

<!-- 滚动事件的默认行为 (scrolling) 将立即发生而非等待 `onScroll` 完成 -->
<!-- 以防其中包含 `event.preventDefault()` -->
<div @scroll.passive="onScroll">...</div>
```

按键修饰符

- .enter
- .tab
- .delete（捕获 Delete 和 Backspace 两个按键）
- .esc
- .space
- .up
- .down
- .left
- .right

系统按键：

- .crtl
- .alt
- .shift
- .meta（在 Mac 键盘上，meta 是 Command 键 (⌘)。在 Windows 键盘上，meta 键是 Windows 键 (⊞)）
```typescript
<!-- 仅在 `key` 为 `Enter` 时调用 `submit` -->
<input @keyup.enter="submit" />

  <!-- Alt + Enter -->
<input @keyup.alt.enter="clear" />

<!-- Ctrl + 点击 -->
<div @click.ctrl="doSomething">Do something</div>
```

鼠标按键修饰符

- .left
- .right
- .middle

### 表单输入绑定
v-model 语法糖：
```typescript
<input
  :value="text"
  @input="event => text = event.target.value">

// 修改为
<input v-model="text">
```
注意⚠️：
v-model 会忽略任何表单元素上初始的 value、checked 或 selected attribute。它将始终将当前绑定的 JavaScript 状态视为数据的正确来源。你应该在 JavaScript 中使用 [响应式系统的 API](https://cn.vuejs.org/api/reactivity-core.html#reactivity-api-core) 来声明该初始值

复选框及单选框：
将多个复选框绑定到同一个数组或集合的值中：
```typescript
const checkedNames = ref([])

<div>Checked names: {{ checkedNames }}</div>

<input type="checkbox" id="jack" value="Jack" v-model="checkedNames">
<label for="jack">Jack</label>

<input type="checkbox" id="john" value="John" v-model="checkedNames">
<label for="john">John</label>

<input type="checkbox" id="mike" value="Mike" v-model="checkedNames">
<label for="mike">Mike</label>

// 设置复选框选中和未选中的自定义值（默认为 true 或 false）
<input
  type="checkbox"
  v-model="toggle"
  true-value="yes"
  false-value="no" />
```
注意⚠️：true-value 和 false-value attributes 不会影响 value attribute，因为浏览器在表单提交时，并不会包含未选择的复选框。为了保证这两个值 (例如：“yes”和“no”) 的其中之一被表单提交，请使用单选按钮作为替代

单选按钮：
```typescript
<div>Picked: {{ picked }}</div>

<input type="radio" id="one" value="One" v-model="picked" />
<label for="one">One</label>

<input type="radio" id="two" value="Two" v-model="picked" />
<label for="two">Two</label>
```

选择器选项：
v-model 同样也支持非字符串类型的值绑定：
```typescript
<select v-model="selected">
  <!-- 内联对象字面量 -->
  <option :value="{ number: 123 }">123</option>
</select>
```
选中后 selected 的值为：`{ number: 123 }`

修饰符

- .lazy
```typescript
<!-- 在 "change" 事件后同步更新而不是 "input" -->
<input v-model.lazy="msg" />
```

- .number
```typescript
<input v-model.number="age" />
```
注意⚠️：如果该值无法被 parseFloat() 处理，将返回原始值

- .trim
```typescript
<input v-model.trim="msg" />
```
默认去除输入内容的首尾两端空格

### 生命周期
onMounted：用来组件完成初始化渲染并创建 DOM 节点后运行代码
当调用 onMounted 时，Vue 会自动将回调函数注册到当前正被初始化的组件实例上。**这意味着这些钩子应当在组件初始化时被同步注册**

注意⚠️：不哟啊异步注册钩子
```typescript
setTimeout(() => {
  onMounted(() => {
    // 异步注册时当前组件实例已丢失
    // 这将不会正常工作
  })
}, 100)
```

外部函数调用：
**`onMounted` 的调用不必须放在 `setup()` 或 `<script setup>` 内的词法上下文中。`onMounted()` 也可以在一个外部函数中调用，只要调用栈是同步的，且最终起源自 `setup()` 就可以**
<CustomImage src='/growth-record/frame/vue/vue3study02.webp' />

### 侦听器
**注意⚠️：watch 可以直接监听一个 ref**
```typescript
<script setup>
import { ref, watch } from 'vue'

const question = ref('')
const answer = ref('Questions usually contain a question mark. ;-)')
const loading = ref(false)

// 可以直接侦听一个 ref
watch(question, async (newQuestion, oldQuestion) => {
  if (newQuestion.includes('?')) {
    loading.value = true
    answer.value = 'Thinking...'
    try {
      const res = await fetch('https://yesno.wtf/api')
      answer.value = (await res.json()).answer
    } catch (error) {
      answer.value = 'Error! Could not reach the API. ' + error
    } finally {
      loading.value = false
    }
  }
})
</script>

<template>
  <p>
    Ask a yes/no question:
    <input v-model="question" :disabled="loading" />
  </p>
  <p>{{ answer }}</p>
</template>
```

侦听数据源类型
watch 的第一个参数可以是不同形式的“数据源”：

- 一个 ref （包括计算属性）；
- 一个响应式对象（reactive()）；
- 一个 getter 函数（() => x.value）；
- 多个数据源组成的数组；
```typescript
const x = ref(0)
const y = ref(0)

// 单个 ref
watch(x, (newX) => {
  console.log(`x is ${newX}`)
})

// getter 函数
watch(
  () => x.value + y.value,
  (sum) => {
    console.log(`sum of x + y is: ${sum}`)
  }
)

// 多个来源组成的数组
watch([x, () => y.value], ([newX, newY]) => {
  console.log(`x is ${newX} and y is ${newY}`)
})
```
**注意⚠️：响应式对象监听某个属性写法，需要写成 getter 函数形式：**
```typescript
const obj = reactive({ count: 0 })

// 错误，因为 watch 得到的是一个 number
watch(obj.count, (count) => {
  ...
})

// 修改为
watch(() => obj.count, (count) => {
  ...
})
```

深层侦听
如果直接给 `watch()` 传入一个响应式对象，**会隐式地创建一个深层侦听器**——**该回调函数在所有嵌套的变更时都会被触发**：
```typescript
const obj = reactive({ count: 0 })

watch(obj, (newValue, oldValue) => {
  // 在嵌套的属性变更时触发
  // 注意：`newValue` 此处和 `oldValue` 是相等的
  // 因为它们是同一个对象！
})

obj.count++
```
相比之下，一个返回响应式对象的 getter 函数，只有在返回不同的对象时，才会触发回调：
```typescript
watch(
  // 响应式对象中的对象
  () => state.someObject,
  () => {
    // 仅当 state.someObject 被替换时触发
  }
)

// 改成深度侦听器，添加 deep
watch(
  () => state.someObject,
  (newValue, oldValue) => {
    // 注意：`newValue` 此处和 `oldValue` 是相等的
    // *除非* state.someObject 被整个替换了
  },
  { deep: true }
)
```
注意⚠️：深度侦听需要遍历被侦听对象中的所有嵌套的属性，当用于大型数据结构时，开销很大。因此请只在必要时才使用它，**并且要留意性能**

即时回调的侦听器
```typescript
watch(
  source,
  (newValue, oldValue) => {
    // 立即执行，且当 `source` 改变时再次执行
  },
  { immediate: true }
)
```

watchEffect()
注意回调会立即执行，不需要指定：immediate: true，自动追踪依赖（和计算属性类似）
```typescript
const todoId = ref(1)
const data = ref(null)

watch(
  todoId,
  async () => {
    const response = await fetch(
      `https://jsonplaceholder.typicode.com/todos/${todoId.value}`
    )
    data.value = await response.json()
  },
  { immediate: true }
)

// 修改为
watchEffect(async () => {
  const response = await fetch(
    `https://jsonplaceholder.typicode.com/todos/${todoId.value}`
  )
  data.value = await response.json()
})
```
注意⚠️：

- 对于有**多个依赖项**的侦听器来说，使用 `watchEffect()`**可以消除手动维护依赖列表的负担**。此外，如果你需要**侦听一个嵌套数据结构中的几个属性**，`watchEffect()` 可能会比深度侦听器更有效，因为它将**只跟踪回调中被使用到的属性，而不是递归地跟踪所有的属性**
- watchEffect **仅会在其同步执行期间，才追踪依赖**。在使用异步回调时，只有在**第一个 await 正常工作前访问到的属性才会被追踪**

**多使用 watchEffect 替换 watch API 操作**

watch VS watchEffect：
主要区别在于追踪响应式依赖的方式

- watch **只追踪明确侦听的数据源**。它不会追踪任何在回调中访问到的东西。另外，仅在数据源确实改变时才会触发回调。watch 会避免在发生副作用时追踪依赖，因此，能**更加精确地控制回调函数的触发时机**
- watchEffect，**则会在副作用发生期间追踪依赖**。它会在同步执行过程中，自动追踪所有能访问到的响应式属性。这更方便，而且代码往往更简洁，但有时其**响应性依赖关系会不那么明确**

回调的触发时机：
更改了响应式状态，它可能会**同时触发 Vue 组件更新和侦听器回调**
**默认情况下，侦听器回调都会在 Vue 组件更新之前被调用，意味着侦听器回调中访问的 DOM 将是被 Vue 更新之前的状态**
如果在侦听器回调中想访问在 Vue 更新之后的 DOM，指明选项：
```typescript
watch(source, callback, {
  flush: 'post'
})

watchEffect(callback, {
  flush: 'post'
})

import { watchPostEffect } from 'vue'

// 别名
watchPostEffect(() => {
  /* 在 Vue 更新后执行 */
})
```

停止侦听器：
注意⚠️：在 setup() 或 `<script setup>` 中用**同步语句**创建的侦听器，会自动绑定到宿主组件实例上，并且会在**宿主组件卸载时自动停止**。因此，在大多数情况下，你无需关心怎么停止一个侦听器

异步语句创建侦听器：**如果用异步回调创建一个侦听器，那么它不会绑定到当前组件上**，你必须手动停止它，以防内存泄漏：
```typescript
<script setup>
import { watchEffect } from 'vue'

// 它会自动停止
watchEffect(() => {})

// ...这个则不会！
setTimeout(() => {
  watchEffect(() => {})
}, 100)

// 手动停止侦听器
const unwatch = watchEffect(() => {})

// ...当该侦听器不再需要时
unwatch()
</script>
```
注意⚠️：尽量不要使用异步创建侦听器，如果需要等待异步状态数据，使用条件式侦听逻辑即可：
```typescript
// 需要异步请求得到的数据
const data = ref(null)

watchEffect(() => {
  if (data.value) {
    // 数据加载后执行某些操作...
  }
})
```

### 模版引用
访问模版引用：
```typescript
<script setup>
import { ref, onMounted } from 'vue'

// 声明一个 ref 来存放该元素的引用
// 必须和模板里的 ref 同名
const input = ref(null)

onMounted(() => {
  input.value.focus()
})
</script>

<template>
  <input ref="input" />
</template>
```
注意⚠️：只可以在组件挂载后才能访问模版引用。如果想在模版中的表达式上访问，在初次渲染时会是 null。这是因为在初次渲染前这个元素还不存在
侦听模版引用 ref 的变化：
```typescript
watchEffect(() => {
  if (input.value) {
    input.value.focus()
  } else {
    // 此时还未挂载，或此元素已经被卸载（例如通过 v-if 控制）
  }
})
```

v-for 使用模版引用
当在 v-for 中使用模版引用时，对应的 ref 中包含的值是一个数组，它将在元素被挂载后包含对应整个列表的所有元素：
```typescript
<script setup>
import { ref, onMounted } from 'vue'

const list = ref([
  /* ... */
])

const itemRefs = ref([])

onMounted(() => console.log(itemRefs.value))
</script>

<template>
  <ul>
    <li v-for="item in list" ref="itemRefs">
      {{ item }}
    </li>
  </ul>
</template>
```
注意⚠️：ref 数组并不保证与源数组相同的顺序

函数模版引用：
ref 属性还可以绑定为一个函数，会在每次组件更新时都被调用。该函数会收到元素引用作为其第一个参数：
```typescript
<input :ref="(el) => { /* 将 el 赋值给一个数据属性或 ref 变量 */ }">
```
注意⚠️：使用动态的 :ref 绑定才能够传入一个函数。当绑定的元素被卸载时，函数也会被调用一次，此时的 el 参数会是 null。可以绑定一个组件方法而不是內联函数

组件上的 ref
模版引用也可以绑定被用在一个子组件上，这种情况下引用中获得的值是组件实例：
```typescript
<script setup>
import { ref, onMounted } from 'vue'
import Child from './Child.vue'

const child = ref(null)

onMounted(() => {
  // child.value 是 <Child /> 组件的实例
})
</script>

<template>
  <Child ref="child" />
</template>
```
注意⚠️：如果子组件使用的是选项式 API 或没有使用 `<script setup>`，被引用的组件实例和该组件的 this 完全一致，意味着父组件对子组件的每一个属性和方法都有完全的访问权
大多数情况下，应该使用标准的 props 和 emit 接口来实现父子组件交互

使用 `<script setup>` 的组件是默认私有的：一个父组件无法访问到一个使用了 `<script setup>` 的子组件中的任何东西，除非子组件在其中通过 defineExpose 宏显示暴露：
```typescript
<script setup>
import { ref } from 'vue'

const a = 1
const b = ref(2)

// 像 defineExpose 这样的编译器宏不需要导入
defineExpose({
  a,
  b
})
</script>
```

### 组件基础
组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考：
<CustomImage src='/growth-record/frame/vue/vue3study03.webp' />

注意⚠️：Vue 同样也能很好地配合原生 Web Component

定义一个组件：
将 Vue 组件定义在一个单独的 .vue 文件中，这被叫做单文件组件（简称 SFC）
```typescript
<script setup>
import { ref } from 'vue'

const count = ref(0)
</script>

<template>
  <button @click="count++">You clicked me {{ count }} times.</button>
</template>
```

不使用构建步骤时，一个 Vue 组件以一个包含 Vue 特定选项的 JavaScript 对象来定义：
```typescript
import { ref } from 'vue'

export default {
  setup() {
    const count = ref(0)
    return { count }
  },
  template: `
    <button @click="count++">
      You clicked me {{ count }} times.
    </button>`
  // 也可以针对一个 DOM 内联模板：
  // template: '#my-template-element'
}
```
这个模版是一个內联的 JavaScript 字符串，Vue 将会在运行时编译它。使用 ID 选择器来指向一个元素（通常是原生的 `<template>` 元素），Vue 将会使用其内容作为模版来源
上面👆🏻🌰定义了一个组件，并在一个 .js 文件里默认导出它自己，但也可以通过具名导出在一个文件中导出多个组件

使用组件：
同一个组件注册使用多次，每个组件都是新的实例，都维护着自己的状态
推荐组件名写法为 PascalCase 的标签名来以原生元素做区分
```typescript
// ParcalCase 写法
<ButtonCounter />

<!-- 如果是在 DOM 中书写该模板（原生的 <template> 元素的内容）：kebab-case 写法 -->
<button-counter></button-counter>
```

传递 props：
声明组件 props：

```typescript
<!-- BlogPost.vue -->
<script setup>
defineProps(['title'])
</script>

<template>
  <h4>{{ title }}</h4>
</template>
```

注意⚠️：defineProps 仅在 `<script setup>` 中可用的编译宏命令，不需要显示地导入。
defineProps 会返回一个对象，其中包含了可以传递给组件的所有 props：

```typescript
const props = defineProps(['title'])
console.log(props.title)
```

如果没有使用 `<script setup>` ，props 必须以 props 选项的方式声明，props 对象会作为 setup() 函数的第一个参数被传入：

```typescript
export default {
  props: ['title'],
  setup(props) {
    console.log(props.title)
  }
}
```

监听事件：
`$emit` 方法（`<templeate>` 可以直接使用内联函数）

defineEmits 宏来声明要抛出的事件：声明一个组件可能触发的所有事件，可以对事件的参数进行验证。避免将它们作为原生事件监听器隐式地应用于子组件的根元素
```typescript
<!-- BlogPost.vue -->
<script setup>
defineProps(['title'])
defineEmits(['enlarge-text'])
</script>
```
注意⚠️：`defineEmits` 仅可用于 `<script setup>` 之中，无需导入，返回一个等同于 $emit 方法的 emit 函数。用于在组件的 `<script setup>` 中抛出事件，因为此处无法直接访问 $emit：

```typescript
<script setup>
const emit = defineEmits(['enlarge-text'])

emit('enlarge-text')
</script>
```
使用非 `<script setup>` 可以通过 emits 选项定义组件会抛出的事件。可以从 setup 函数的第二个参数，即 setup 上下文对象访问到 emit 函数：
```typescript
export default {
  emits: ['enlarge-text'],
  setup(props, ctx) {
    ctx.emit('enlarge-text')
  }
}
```

通过插槽来分配内容：
`<slot />`

动态组件：
`<component>` 特殊的 is attribute 实现：
```typescript
<!-- currentTab 改变时组件也改变 -->
<component :is="tabs[currentTab]"></component>
```
is 的值可以是：

- 被注册的组件名；
- 导入的组件对象；

注意⚠️：多个组件切换时，被切换到组件将会被卸载，可以通过 `<keep-alive>` 包裹组件强制被切换掉仍然保持“存活”状态

DOM 内模版解析注意事项：
使用限制

大小写区分
HTML 标签和属性名称是不分大小写的，所以浏览器会把任何大写的字符解释为小写。这意味着当你使用 DOM 内的模板时，无论是 PascalCase 形式的组件名称、camelCase 形式的 prop 名称还是 `v-on` 的事件名称，都需要转换为相应等价的 kebab-case (短横线连字符) 形式：
```typescript
// JavaScript 中的 camelCase
const BlogPost = {
  props: ['postTitle'],
  emits: ['updatePost'],
  template: `
    <h3>{{ postTitle }}</h3>
  `
}

<!-- HTML 中的 kebab-case -->
<blog-post post-title="hello!" @update-post="onUpdatePost"></blog-post>
```

闭合标签：
Vue 的模板解析器支持任意标签使用 `/>` 作为标签关闭的标志

```typescript
<MyComponent />
```

注意⚠️：DOM 内模版中，必须显示地写出关闭标签：这是由于 HTML 只允许[一小部分特殊的元素](https://html.spec.whatwg.org/multipage/syntax.html#void-elements)省略其关闭标签，最常见的就是 `<input>` 和 `<img>`。对于其他的元素来说，如果你省略了关闭标签，原生的 HTML 解析器会认为开启的标签永远没有结束：
```typescript
<my-component></my-component>

// 比如：
<my-component /> <!-- 我们想要在这里关闭标签... -->
<span>hello</span>

// 将被解析为：
<my-component>
  <span>hello</span>
</my-component> <!-- 但浏览器会在这里关闭标签 -->
```

元素位置限制：
某些 HTML 元素对于放在其中的元素类型有限制，例如 `<ul>，<ol>，<table> 和 <select>`，相应的，某些元素仅在放置于特定元素中时才会显示，例如 `<li>，<tr> 和 <option>`，否则标签元素将会被忽略：
```typescript
<table>
  <blog-post-row></blog-post-row>
</table>

  // 自定义的组件 <blog-post-row> 将作为无效的内容被忽略，因而在最终呈现的输出中造成错误
  // 使用特殊的 is 属性解决：（注意⚠️：前缀）
  <table>
  <tr is="vue:blog-post-row"></tr>
</table>
```
注意⚠️：当使用在原生 HTML 元素上时，is 的值必须加上前缀 vue: 才可以被解析为一个 Vue 组件。这一点是必要的，为了避免和原生的[自定义内置元素](https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-customized-builtin-example)相混淆

## 深入组件
### 组件注册
一个 Vue 组件在使用前需要被先“注册”，这样 Vue 才能在渲染模版时找到其对应的实现
组件注册有两种方式：

- 全局注册；
- 局部注册；

全局注册：`.component`

```typescript
import { createApp } from 'vue'

const app = createApp({})

app.component(
  // 注册的名字
  'MyComponent',
  // 组件的实现
  {
    /* ... */
  }
)

// 单文件组件
import MyComponent from './App.vue'

app.component('MyComponent', MyComponent)

// 链式调用
app
  .component('ComponentA', ComponentA)
  .component('ComponentB', ComponentB)
  .component('ComponentC', ComponentC)
```

注意⚠️：全局注册的组件可以在此应用的任意组件的模板中使用：

```typescript
<!-- 这在当前应用的任意组件中都可用 -->
<ComponentA/>
<ComponentB/>
<ComponentC/>
```

所有的子组件可以使用全局注册的组件，这意味着这个三个组件也都可以在彼此内部使用

局部注册：
全局注册组件存在的问题：

- 全局注册，但并没有被使用的组件**无法在生产打包时被自动移除** (也叫“tree-shaking”)。如果你全局注册了一个组件，即使它并没有被实际使用，它仍然会出现在打包后的 JS 文件中；
- **全局注册在大型项目中使项目的依赖关系变得不那么明确**。在父组件中使用子组件时，不太容易定位子组件的实现。和使用过多的全局变量一样，这可能会影响应用长期的可维护性；

局部注册组件的优点：

- 使用的父组件中显示导入，并且只能在父组件中使用；
- 使组件之间的依赖关系更加明确；
- 对 `tree-sharking` 更加友好；

在 `<script setup>` 单文件组件中，导入的组件可以直接在模板中使用，无需注册：

```typescript
<script setup>
import ComponentA from './ComponentA.vue'
</script>

<template>
  <ComponentA />
</template>
```

没有使用 `<script setup>`，则需要使用 `components` 选项来显式注册：

```typescript
import ComponentA from './ComponentA.js'

export default {
  components: {
    ComponentA
  },
  setup() {
    // ...
  }
}
```
注意⚠️：对于每个 `components` 对象里的属性，它们的 key 名就是注册的组件名，而值就是相应组件的实现
```typescript
export default {
  components: {
    ComponentA: ComponentA
  }
  // ...
}
```

注意⚠️：局部注册的组件在后代组件中不能使用/不可用

组件名格式：
推荐使用 `PascalCase`

1. `PascalCase` 是合法的 JavaScript 标识符。这使得在 JavaScript 中导入和注册组件都很容易，同时 IDE 也能提供较好的自动补全；
2. `<PascalCase />` 在模板中更明显地表明了这是一个 Vue 组件，而不是原生 HTML 元素。同时也能够将 **Vue 组件和自定义元素 (web components) 区分开来**

注意⚠️：Vue 支持将模板中使用 `kebab-case` 的标签解析为使用 `PascalCase` 注册的组件。这意味着一个以 `MyComponent` 为名注册的组件，在模板中可以通过 `<MyComponent>` 或 `<my-component>` 引用

### Props
一个组件需要显示声明它所接受的 props，这样接收组件才知道外部传入的哪些 props，哪些是透传 attribute

在 `<script setup>` 文件中使用 `defineProps()` 宏来声明：

```typescript
<script setup>
const props = defineProps(['foo'])

// 使用对象声明
defineProps({
  title: String,
  likes: Number
})

// TypeScript 写法
// <script setup lang="ts">
defineProps<{
  title?: string
  likes?: number
}>()

console.log(props.foo)
</script>
```
不是 `<script setup>` 文件中使用 props 选项来声明：
```typescript
export default {
  props: ['foo'],
  setup(props) {
    // setup() 接收 props 作为第一个参数
    console.log(props.foo)
  }
}

// 使用对象声明
export default {
  props: {
    title: String,
    likes: Number
  }
}
```

注意⚠️：

- `defineProps()` 的参数和提供给 props 选项的值是相同的，两种声明方式背后都是 prop 选项；
- 对于以对象形式声明中的每个属性，**key 是 prop 的名称，而值则是该 prop 预期类型的构造函数（TypeScript 用法不一样）**。比如，如果要求一个 prop 的值是 number 类型，则可使用 Number 构造函数作为其声明的值。对象形式的 props 声明不仅可以一定程度上作为组件的文档，而且如果其他开发者在使用你的组件时传递了错误的类型，也会在浏览器控制台中抛出警告

传递 prop 细节：
prop 名称使用 `camelCase` 形式

```typescript
defineProps({
  greetingMessage: String
})
```

**但是子组件传递 props 时，使用 `camelCase` 形式不太友好，推荐使用 `kebab-case` 形式写法，为了和 HTML `attribute` 对齐**

```typescript
<MyComponent greeting-message="hello" />
```
**组件名推荐 `PascalCase` 形式，提高模板可读性，为了区分 Vue 组件和原生 HTML 元素**

静态 VS 动态：

```typescript
<BlogPost title="My journey with Vue" />

<!-- 根据一个变量的值动态传入 -->
<BlogPost :title="post.title" />

<!-- 根据一个更复杂表达式的值动态传入 -->
<BlogPost :title="post.title + ' by ' + post.author.name" />
```

传值不同的值类型：

```typescript
<!-- 虽然 `42` 是个常量，我们还是需要使用 v-bind -->
<!-- 因为这是一个 JavaScript 表达式而不是一个字符串 -->
<BlogPost :likes="42" />

<!-- 根据一个变量的值动态传入 -->
<BlogPost :likes="post.likes" />
]]></description>
            <content:encoded><![CDATA[<h1 id="vue3-学习笔记-一" tabindex="-1">Vue3 学习笔记（一） <a class="header-anchor" href="#vue3-学习笔记-一" aria-label="Permalink to &quot;Vue3 学习笔记（一）&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>💡：Vue3 版本学习官方文档笔记</p>
</div>
<ul>
<li><a href="https://cn.vuejs.org/guide/introduction.html" target="_blank" rel="noreferrer">简介 | Vue.js</a></li>
<li><a href="https://cn.vuejs.org/tutorial/#step-1" target="_blank" rel="noreferrer">互动教程文档</a></li>
<li><a href="https://cn.vuejs.org/examples/#hello-world" target="_blank" rel="noreferrer">所有示例文档</a></li>
<li><a href="https://play.vuejs.org/#eNp9kVFLwzAQx7/KeS9TmBuyt1EHKgP1QUUFX/JS2lvXmSYhucxC6Xf32tLqwxiEJPf/X5Lf5Rq8c25xjIRrTELmS8cbZah21jPktEujZmiUAchTTi+vhj2AJ47ejBFAFYo1zB5Jawtf1uv8YjZYbbfIJCNZTg9IwFQ5nTJJBJDsbzZN090CbZssJerV0rjIcLyubE76VqH4CsVKltNpnCOHzJpdWSwOwRqpo4dSmNnKlZr8q+PSmqBwPeIqTIXz57nX2Eeaj3q2p+z7hH4IdacpfPMUyB9J4eRx6gviwd5+vFAt+8kU8qgl+4z5TsHq2DEOaffR5IL9L6+nfaq6npSm+AzbmsmEsagOtP/kPl+hNPPhTOl/uKvFamwOtr/4aany" target="_blank" rel="noreferrer">Vue SPC Playground——在线演练场及示例分享站点</a></li>
<li><a href="https://cn.vuejs.org/glossary/" target="_blank" rel="noreferrer">术语表</a></li>
<li><a href="https://cn.vuejs.org/error-reference/" target="_blank" rel="noreferrer">生产环境错误代码参考</a></li>
<li><a href="https://cn.vuejs.org/api/" target="_blank" rel="noreferrer">API</a></li>
<li><a href="https://cn.vuejs.org/ecosystem/themes.html" target="_blank" rel="noreferrer">主题案例</a></li>
<li><a href="https://ui-libs.vercel.app/" target="_blank" rel="noreferrer">UI 组件学习</a></li>
</ul>
<CustomImage src='/growth-record/frame/vue/vue3study01.webp' /><ul>
<li><a href="https://cn.vuejs.org/guide/scaling-up/tooling.html" target="_blank" rel="noreferrer">工具链相关</a></li>
</ul>
<h3 id="核心功能" tabindex="-1">核心功能 <a class="header-anchor" href="#核心功能" aria-label="Permalink to &quot;核心功能&quot;">&ZeroWidthSpace;</a></h3>
<p>Vue 的两大核心功能：</p>
<ul>
<li>声明式渲染：Vue 基于标准 HTML 拓展了一套模版语法，使得我们可以声明式地<strong>描述</strong>最终输出的 <strong>HTML</strong> 和 <strong>JavaScript</strong> <strong>状态之间的关系；</strong></li>
<li>响应式：Vue 会自动跟踪 <strong>JavaScript 状态</strong>并在其<strong>发生变化</strong>时<strong>响应式地更新 DOM；</strong></li>
</ul>
<h3 id="渐进式框架" tabindex="-1">渐进式框架 <a class="header-anchor" href="#渐进式框架" aria-label="Permalink to &quot;渐进式框架&quot;">&ZeroWidthSpace;</a></h3>
<p>它是一个可以与你共同成长、适应你不同需求的框架</p>
<p>特点：灵活性、逐步集成使用</p>
<ul>
<li>无需构建步骤，渐进式增强静态 HTML；</li>
<li>在任何页面中作为 Web Components 嵌入；</li>
<li>单页应用（SPA）；</li>
<li>全栈 / 服务端渲染（SSR）；</li>
<li>Jamstack / 静态站点生成（SSG）；</li>
<li>开发桌面端、移动端、WebGL，甚至是命令行终端中的界面；</li>
</ul>
<h3 id="单文件组件" tabindex="-1">单文件组件 <a class="header-anchor" href="#单文件组件" aria-label="Permalink to &quot;单文件组件&quot;">&ZeroWidthSpace;</a></h3>
<p>SRC（Single-File Components）：使用一种类似 HTML 格式的文件来书写 Vue 组件，会将一个组件的逻辑（JavaScript）、模版（HTML）和样式（CSS）封装在同一个文件里</p>
<h3 id="api-风格" tabindex="-1">API 风格 <a class="header-anchor" href="#api-风格" aria-label="Permalink to &quot;API 风格&quot;">&ZeroWidthSpace;</a></h3>
<p>两种：</p>
<ul>
<li>选项式 API；</li>
<li>组合式 API；</li>
</ul>
<p>选项式 API 是在组合式 API 的基础上实现的</p>
<p>选项式 API：“组件实例”为概念中心（this），按照选项来组织代码；
组合式 API 的核心思想：直接在函数作用域内定义响应式状态变量，并将从多个函数中得到的状态组合起来处理复杂问题</p>
<h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="dom-更新时机" tabindex="-1">DOM 更新时机 <a class="header-anchor" href="#dom-更新时机" aria-label="Permalink to &quot;DOM 更新时机&quot;">&ZeroWidthSpace;</a></h3>
<p>nextTick 使用等待更新时机：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { nextTick } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  count.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // DOM 已经更新了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h3 id="响应式基础" tabindex="-1">响应式基础 <a class="header-anchor" href="#响应式基础" aria-label="Permalink to &quot;响应式基础&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>注意，在模板中使用 ref 时，我们不需要附加 .value。为了方便起见，当在模板中使用时，ref 会自动解包 (有一些<a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#caveat-when-unwrapping-in-templates" target="_blank" rel="noreferrer">注意事项</a>)</li>
<li><a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#why-refs" target="_blank" rel="noreferrer">为什么要使用 ref </a></li>
</ol>
<p>另一个 ref 的好处是，与普通变量不同，你可以<strong>将 ref 传递给函数，同时保留对最新值和响应式连接的访问</strong>。当将复杂的逻辑重构为可重用的代码时，这将非常有用</p>
<p>shallow ref 放弃深层响应式</p>
<ol start="3">
<li>reactive 与将内部值包装在特殊对象中的 ref 不同</li>
</ol>
<ul>
<li>shallowReactive 退出深层响应式</li>
<li>值得注意的是，reactive() 返回的是一个原始对象的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">Proxy</a>，它和原始对象是不相等的</li>
</ul>
<ol start="4">
<li>reactive 的局限性：</li>
</ol>
<ul>
<li>有限的值类型：它只能用于对象类型 (对象、数组和如 Map、Set 这样的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#keyed_collections" target="_blank" rel="noreferrer">集合类型</a>)。它不能持有如 string、number 或 boolean 这样的<a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noreferrer">原始类型</a></li>
<li>不能替换整个对象：由于 Vue 的响应式跟踪是通过属性访问实现的，因此我们必须始终保持对响应式对象的相同引用。这意味着我们不能轻易地“替换”响应式对象，因为这样的话与第一个引用的响应性连接将丢失</li>
<li>对解构操作不友好：当我们将响应式对象的原始类型属性解构为本地变量时，或者将该属性传递给函数时，我们将丢失响应性连接</li>
</ul>
<ol start="5">
<li>ref 解包细节：</li>
</ol>
<ul>
<li>一个 ref 会在作为响应式对象的属性被访问或修改时自动解包；</li>
<li>如果将一个新的 ref 赋值给一个关联了已有 ref 的属性，那么它会替换掉旧的 ref</li>
<li>只有当嵌套在一个深层响应式对象内时，才会发生 ref 解包。当其作为<a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive" target="_blank" rel="noreferrer">浅层响应式对象</a>的属性被访问时不会解包</li>
</ul>
<p>数组和集合的注意事项：</p>
<ul>
<li>与 reactive 对象不同的是，当 ref 作为响应式数组或原生集合类型(如 Map) 中的元素被访问时，它不会被解包</li>
<li>在模板渲染上下文中，只有顶级的 ref 属性才会被解包，但是，另一个需要注意的点是，如果 ref 是文本插值的最终计算值 (即 <code>{{ }}</code> 标签)，那么它将被解包</li>
</ul>
<h3 id="计算属性" tabindex="-1">计算属性 <a class="header-anchor" href="#计算属性" aria-label="Permalink to &quot;计算属性&quot;">&ZeroWidthSpace;</a></h3>
<p>可写计算属性</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> firstName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'John'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> lastName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Doe'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> fullName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> firstName.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> lastName.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 解构赋值法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    [firstName.value, lastName.value] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> newValue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">' '</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p><strong>Getter 不应有副作用</strong>
计算属性的 getter 应只做计算而没有任何其他的副作用，这一点非常重要，请务必牢记。举例来说，不要在 getter 中做异步请求或者更改 DOM！一个计算属性的声明中描述的是如何根据其他值派生一个值。因此 getter 的职责应该仅为计算和返回该值</p>
<p><strong>避免直接修改计算属性值</strong>
从计算属性返回的值是派生状态。可以把它看作是一个“临时快照”，每当源状态发生变化时，就会创建一个新的快照。更改快照是没有意义的，因此计算属性的返回值应该被视为只读的，并且永远不应该被更改——应该更新它所依赖的源状态以触发新的计算</p>
<h3 id="class-与-style-绑定" tabindex="-1">Class 与 Style 绑定 <a class="header-anchor" href="#class-与-style-绑定" aria-label="Permalink to &quot;Class 与 Style 绑定&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>绑定 class：</li>
</ol>
<p>将动态的对象或数组改为多使用计算属性绑定对象</p>
<p>数组和对象结合使用：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"[{ active: isActive }, errorClass]"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>注意：如果在组件上使用，对于只有一个根元素的组件，当你使用了 class attribute 时，这些 class 会被添加到根元素上并与该元素上已有的 class 合并。根元素为多个时，使用 $attrs.class 属性接收设置对应样式（透传 Attribute）</p>
<ol start="2">
<li>绑定內联样式 style：</li>
</ol>
<ul>
<li>注意：自动前缀、样式多值</li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">&#x3C;!--</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> 使用Vue.js的:style绑定,设置display属性为flex,以实现弹性布局.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> 这里使用了三种不同的前缀,以适应不同的浏览器.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> 注意: 在实际开发中,应该根据需要选择合适的前缀,并且避免使用不必要的前缀,以避免代码过于冗长.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">--></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> :style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>数组仅会渲染浏览器支持的最后一个值。在这个示例中，在支持不需要特别前缀的浏览器中都会渲染为 display: flex</p>
<h3 id="条件渲染" tabindex="-1">条件渲染 <a class="header-anchor" href="#条件渲染" aria-label="Permalink to &quot;条件渲染&quot;">&ZeroWidthSpace;</a></h3>
<p>v-if vs v-show 的区别：</p>
<ul>
<li>v-if 是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建；</li>
<li>v-if 也是惰性的：如果在初次渲染时条件值为 false，则不会做任何事。条件区块只有当条件首次变为 true 时才被渲染。</li>
<li>相比之下，v-show 简单许多，元素无论初始条件如何，始终会被渲染，只有 CSS display 属性会被切换；</li>
<li>总的来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要频繁切换，则使用 v-show 较好；如果在运行时绑定条件很少改变，则 v-if 会更合适</li>
</ul>
<p>v-if 和 v-for 同时存在于一个元素上的时候，v-if 会首先被执行</p>
<h3 id="列表渲染" tabindex="-1">列表渲染 <a class="header-anchor" href="#列表渲染" aria-label="Permalink to &quot;列表渲染&quot;">&ZeroWidthSpace;</a></h3>
<p>v-for 的解构赋值写法：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ message } in items"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  {{ message }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 有 index 索引时 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"({ message }, index) in items"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  {{ message }} {{ index }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>也可以使用 v-of：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item of items"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>v-for 遍历对象：遍历顺序跟 Object.keys() 返回值有一样</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> myObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'How to do lists in Vue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  author: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Jane Doe'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  publishedAt: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'2016-04-10'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"value in myObject"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    {{ value }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ul</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 解构多个值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"(value, key, index) in myObject"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  {{ index }}. {{ key }}: {{ value }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>v-for 里使用范围值（数值），通过使用一个整数值，渲染 1...n，注意：是从 1 开始而并非 0</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"n in 10"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{{ n }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>template 使用 v-for</p>
<p>v-for 与 v-if：
当它们同时存在于一个节点上时，v-if 比 v-for 的优先级更高。这意味着 v-if 的条件渲染无法访问到 v-for 作用域内定义的变量别名</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 这会抛出一个错误，因为属性 todo 此时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 没有在该实例上定义</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todo in todos"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"!todo.isComplete"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  {{ todo.name }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改为：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todo in todos"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"!todo.isComplete"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    {{ todo.name }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>通过 key 管理状态
<strong>就地更新原则：当数据项的顺序改变时，Vue 不会随之移动 DOM 元素的顺序，而是就地更新每个元素，确保它们在原本指定的索引位置上渲染</strong>
注意：默认模式是高效的，但只适用于列表渲染输出的结果不依赖子组件状态或者临时 DOM 状态 (例如表单输入值) 的情况
key 的作用：为了给 Vue 一个提示，以便它可以跟踪每个节点的标识，从而重用和重新排序现有的元素，需要为每个元素对应的块提供一个唯一的 key attribute：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item in items"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item.id"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 内容 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>当使用 <code>&lt;template v-for&gt;</code> 时， key 应该被放置在这个 template 容器上：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todo in todos"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todo.name"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ todo.name }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>key 绑定的值期望是一个基础类型的值，例如字符串或 number 类型。<strong>不要用对象作为 v-for 的 key</strong></p>
<p>组件上使用 v-for 跟一般元素上使用没有区别</p>
<p>数组变化侦测</p>
<h3 id="事件处理" tabindex="-1">事件处理 <a class="header-anchor" href="#事件处理" aria-label="Permalink to &quot;事件处理&quot;">&ZeroWidthSpace;</a></h3>
<p>事件处理器的值可以是：</p>
<ul>
<li>內联事件处理器：</li>
<li>方法事件处理器：</li>
</ul>
<p>內联事件处理器用于简单的场景：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button @click</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"count++"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Add </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Count </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {{ count }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>方法事件处理器：会自动接收原生 DOM 事件并触发执行</p>
<p>在內联事件处理器中访问事件参数：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 使用特殊的 $event 变量 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button @click</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"warn('Form cannot be submitted yet.', $event)"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  Submit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 使用内联箭头函数 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button @click</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"(event) => warn('Form cannot be submitted yet.', event)"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  Submit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>事件修饰符</p>
<ul>
<li>.stop</li>
<li>.prevent</li>
<li>.self</li>
<li>.capture</li>
<li>.once</li>
<li>.passive</li>
</ul>
<p>注意：<code>.capture</code>、<code>.once</code> 和 <code>.passive</code> 修饰符与<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#options" target="_blank" rel="noreferrer">原生 addEventListener 事件</a>相对应</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 单击事件将停止传递 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a @click.stop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"doThis"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 提交事件将不再重新加载页面 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form @submit.prevent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onSubmit"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 修饰语可以使用链式书写 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a @click.stop.prevent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"doThat"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 也可以只有修饰符 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form @submit.prevent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 仅当 event.target 是元素本身时才会触发事件处理器 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 例如：事件处理器不来自子元素 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div @click.self</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"doThat"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>...&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 添加事件监听器时，使用 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`capture`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 捕获模式 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 例如：指向内部元素的事件，在被内部元素处理前，先被外部处理 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div @click.capture</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"doThis"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>...&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 点击事件最多被触发一次 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a @click.once</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"doThis"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> 滚动事件的默认行为</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (scrolling) 将立即发生而非等待 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`onScroll`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 完成 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 以防其中包含 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`event.preventDefault()`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> --></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div @scroll.passive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onScroll"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>...&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>按键修饰符</p>
<ul>
<li>.enter</li>
<li>.tab</li>
<li>.delete（捕获 Delete 和 Backspace 两个按键）</li>
<li>.esc</li>
<li>.space</li>
<li>.up</li>
<li>.down</li>
<li>.left</li>
<li>.right</li>
</ul>
<p>系统按键：</p>
<ul>
<li>.crtl</li>
<li>.alt</li>
<li>.shift</li>
<li>.meta（在 Mac 键盘上，meta 是 Command 键 (⌘)。在 Windows 键盘上，meta 键是 Windows 键 (⊞)）</li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 仅在 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`key`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 为 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`Enter`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 时调用 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`submit`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> --></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input @keyup.enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"submit"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Alt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Enter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input @keyup.alt.enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"clear"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Ctrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 点击 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div @click.ctrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"doSomething"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Do something</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>鼠标按键修饰符</p>
<ul>
<li>.left</li>
<li>.right</li>
<li>.middle</li>
</ul>
<h3 id="表单输入绑定" tabindex="-1">表单输入绑定 <a class="header-anchor" href="#表单输入绑定" aria-label="Permalink to &quot;表单输入绑定&quot;">&ZeroWidthSpace;</a></h3>
<p>v-model 语法糖：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  :value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  @input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"event => text = event.target.value"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改为</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：
v-model 会忽略任何表单元素上初始的 value、checked 或 selected attribute。它将始终将当前绑定的 JavaScript 状态视为数据的正确来源。你应该在 JavaScript 中使用 <a href="https://cn.vuejs.org/api/reactivity-core.html#reactivity-api-core" target="_blank" rel="noreferrer">响应式系统的 API</a> 来声明该初始值</p>
<p>复选框及单选框：
将多个复选框绑定到同一个数组或集合的值中：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> checkedNames</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Checked </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {{ checkedNames }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"checkbox"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"jack"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Jack"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"checkedNames"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"jack"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Jack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"checkbox"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"john"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"John"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"checkedNames"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"john"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">John</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"checkbox"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"mike"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Mike"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"checkedNames"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"mike"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Mike</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 设置复选框选中和未选中的自定义值（默认为 true 或 false）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"checkbox"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"toggle"</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"yes"</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"no"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><p>注意⚠️：true-value 和 false-value attributes 不会影响 value attribute，因为浏览器在表单提交时，并不会包含未选择的复选框。为了保证这两个值 (例如：“yes”和“no”) 的其中之一被表单提交，请使用单选按钮作为替代</p>
<p>单选按钮：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Picked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {{ picked }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"radio"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"one"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"One"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"picked"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"one"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">One</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"radio"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"two"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Two"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"picked"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"two"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Two</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>选择器选项：
v-model 同样也支持非字符串类型的值绑定：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">select v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"selected"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 内联对象字面量 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ number: 123 }"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">123</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">option</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>选中后 selected 的值为：<code>{ number: 123 }</code></p>
<p>修饰符</p>
<ul>
<li>.lazy</li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 在 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"change"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 事件后同步更新而不是 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"input"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> --></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model.lazy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"msg"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><ul>
<li>.number</li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model.number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"age"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><p>注意⚠️：如果该值无法被 parseFloat() 处理，将返回原始值</p>
<ul>
<li>.trim</li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model.trim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"msg"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><p>默认去除输入内容的首尾两端空格</p>
<h3 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">&ZeroWidthSpace;</a></h3>
<p>onMounted：用来组件完成初始化渲染并创建 DOM 节点后运行代码
当调用 onMounted 时，Vue 会自动将回调函数注册到当前正被初始化的组件实例上。<strong>这意味着这些钩子应当在组件初始化时被同步注册</strong></p>
<p>注意⚠️：不哟啊异步注册钩子</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 异步注册时当前组件实例已丢失</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 这将不会正常工作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div><p>外部函数调用：
<strong><code>onMounted</code> 的调用不必须放在 <code>setup()</code> 或 <code>&lt;script setup&gt;</code> 内的词法上下文中。<code>onMounted()</code> 也可以在一个外部函数中调用，只要调用栈是同步的，且最终起源自 <code>setup()</code> 就可以</strong></p>
<CustomImage src='/growth-record/frame/vue/vue3study02.webp' /><h3 id="侦听器" tabindex="-1">侦听器 <a class="header-anchor" href="#侦听器" aria-label="Permalink to &quot;侦听器&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>注意⚠️：watch 可以直接监听一个 ref</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref, watch } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> question</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> answer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Questions usually contain a question mark. ;-)'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> loading</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 可以直接侦听一个 ref</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(question, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">newQuestion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">oldQuestion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (newQuestion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'?'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    loading.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    answer.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'Thinking...'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'https://yesno.wtf/api'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      answer.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()).answer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      answer.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'Error! Could not reach the API. '</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      loading.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    Ask a yes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">no </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">question</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"question"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :disabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"loading"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ answer }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>侦听数据源类型
watch 的第一个参数可以是不同形式的“数据源”：</p>
<ul>
<li>一个 ref （包括计算属性）；</li>
<li>一个响应式对象（reactive()）；</li>
<li>一个 getter 函数（() =&gt; x.value）；</li>
<li>多个数据源组成的数组；</li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 单个 ref</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(x, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">newX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`x is ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">newX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// getter 函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y.value,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`sum of x + y is: ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">sum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 多个来源组成的数组</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([x, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y.value], ([</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">newX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">newY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`x is ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">newX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">} and y is ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">newY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p><strong>注意⚠️：响应式对象监听某个属性写法，需要写成 getter 函数形式：</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 错误，因为 watch 得到的是一个 number</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj.count, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改为</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj.count, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>深层侦听
如果直接给 <code>watch()</code> 传入一个响应式对象，<strong>会隐式地创建一个深层侦听器</strong>——<strong>该回调函数在所有嵌套的变更时都会被触发</strong>：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">oldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 在嵌套的属性变更时触发</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 注意：`newValue` 此处和 `oldValue` 是相等的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 因为它们是同一个对象！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj.count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span></span></code></pre>
</div><p>相比之下，一个返回响应式对象的 getter 函数，只有在返回不同的对象时，才会触发回调：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 响应式对象中的对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> state.someObject,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 仅当 state.someObject 被替换时触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 改成深度侦听器，添加 deep</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> state.someObject,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">oldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 注意：`newValue` 此处和 `oldValue` 是相等的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // *除非* state.someObject 被整个替换了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  { deep: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div><p>注意⚠️：深度侦听需要遍历被侦听对象中的所有嵌套的属性，当用于大型数据结构时，开销很大。因此请只在必要时才使用它，<strong>并且要留意性能</strong></p>
<p>即时回调的侦听器</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  source,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">oldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 立即执行，且当 `source` 改变时再次执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  { immediate: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div><p>watchEffect()
注意回调会立即执行，不需要指定：immediate: true，自动追踪依赖（和计算属性类似）</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> todoId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  todoId,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">      `https://jsonplaceholder.typicode.com/todos/${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">todoId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    data.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  { immediate: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改为</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    `https://jsonplaceholder.typicode.com/todos/${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">todoId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  data.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>注意⚠️：</p>
<ul>
<li>对于有<strong>多个依赖项</strong>的侦听器来说，使用 <code>watchEffect()</code><strong>可以消除手动维护依赖列表的负担</strong>。此外，如果你需要<strong>侦听一个嵌套数据结构中的几个属性</strong>，<code>watchEffect()</code> 可能会比深度侦听器更有效，因为它将<strong>只跟踪回调中被使用到的属性，而不是递归地跟踪所有的属性</strong></li>
<li>watchEffect <strong>仅会在其同步执行期间，才追踪依赖</strong>。在使用异步回调时，只有在<strong>第一个 await 正常工作前访问到的属性才会被追踪</strong></li>
</ul>
<p><strong>多使用 watchEffect 替换 watch API 操作</strong></p>
<p>watch VS watchEffect：
主要区别在于追踪响应式依赖的方式</p>
<ul>
<li>watch <strong>只追踪明确侦听的数据源</strong>。它不会追踪任何在回调中访问到的东西。另外，仅在数据源确实改变时才会触发回调。watch 会避免在发生副作用时追踪依赖，因此，能<strong>更加精确地控制回调函数的触发时机</strong></li>
<li>watchEffect，<strong>则会在副作用发生期间追踪依赖</strong>。它会在同步执行过程中，自动追踪所有能访问到的响应式属性。这更方便，而且代码往往更简洁，但有时其<strong>响应性依赖关系会不那么明确</strong></li>
</ul>
<p>回调的触发时机：
更改了响应式状态，它可能会<strong>同时触发 Vue 组件更新和侦听器回调</strong>
<strong>默认情况下，侦听器回调都会在 Vue 组件更新之前被调用，意味着侦听器回调中访问的 DOM 将是被 Vue 更新之前的状态</strong>
如果在侦听器回调中想访问在 Vue 更新之后的 DOM，指明选项：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(source, callback, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  flush: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'post'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(callback, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  flush: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'post'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { watchPostEffect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 别名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watchPostEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* 在 Vue 更新后执行 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>停止侦听器：
注意⚠️：在 setup() 或 <code>&lt;script setup&gt;</code> 中用<strong>同步语句</strong>创建的侦听器，会自动绑定到宿主组件实例上，并且会在<strong>宿主组件卸载时自动停止</strong>。因此，在大多数情况下，你无需关心怎么停止一个侦听器</p>
<p>异步语句创建侦听器：<strong>如果用异步回调创建一个侦听器，那么它不会绑定到当前组件上</strong>，你必须手动停止它，以防内存泄漏：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { watchEffect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 它会自动停止</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// ...这个则不会！</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 手动停止侦听器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> unwatch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// ...当该侦听器不再需要时</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unwatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：尽量不要使用异步创建侦听器，如果需要等待异步状态数据，使用条件式侦听逻辑即可：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 需要异步请求得到的数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (data.value) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 数据加载后执行某些操作...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><h3 id="模版引用" tabindex="-1">模版引用 <a class="header-anchor" href="#模版引用" aria-label="Permalink to &quot;模版引用&quot;">&ZeroWidthSpace;</a></h3>
<p>访问模版引用：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref, onMounted } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 声明一个 ref 来存放该元素的引用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 必须和模板里的 ref 同名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  input.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"input"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：只可以在组件挂载后才能访问模版引用。如果想在模版中的表达式上访问，在初次渲染时会是 null。这是因为在初次渲染前这个元素还不存在
侦听模版引用 ref 的变化：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (input.value) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    input.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 此时还未挂载，或此元素已经被卸载（例如通过 v-if 控制）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>v-for 使用模版引用
当在 v-for 中使用模版引用时，对应的 ref 中包含的值是一个数组，它将在元素被挂载后包含对应整个列表的所有元素：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref, onMounted } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> itemRefs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(itemRefs.value))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item in list"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"itemRefs"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      {{ item }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ul</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：ref 数组并不保证与源数组相同的顺序</p>
<p>函数模版引用：
ref 属性还可以绑定为一个函数，会在每次组件更新时都被调用。该函数会收到元素引用作为其第一个参数：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"(el) => { /* 将 el 赋值给一个数据属性或 ref 变量 */ }"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：使用动态的 :ref 绑定才能够传入一个函数。当绑定的元素被卸载时，函数也会被调用一次，此时的 el 参数会是 null。可以绑定一个组件方法而不是內联函数</p>
<p>组件上的 ref
模版引用也可以绑定被用在一个子组件上，这种情况下引用中获得的值是组件实例：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref, onMounted } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './Child.vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // child.value 是 &#x3C;Child /> 组件的实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Child ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"child"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：如果子组件使用的是选项式 API 或没有使用 <code>&lt;script setup&gt;</code>，被引用的组件实例和该组件的 this 完全一致，意味着父组件对子组件的每一个属性和方法都有完全的访问权
大多数情况下，应该使用标准的 props 和 emit 接口来实现父子组件交互</p>
<p>使用 <code>&lt;script setup&gt;</code> 的组件是默认私有的：一个父组件无法访问到一个使用了 <code>&lt;script setup&gt;</code> 的子组件中的任何东西，除非子组件在其中通过 defineExpose 宏显示暴露：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 像 defineExpose 这样的编译器宏不需要导入</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineExpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  a,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><h3 id="组件基础" tabindex="-1">组件基础 <a class="header-anchor" href="#组件基础" aria-label="Permalink to &quot;组件基础&quot;">&ZeroWidthSpace;</a></h3>
<p>组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考：</p>
<CustomImage src='/growth-record/frame/vue/vue3study03.webp' /><p>注意⚠️：Vue 同样也能很好地配合原生 Web Component</p>
<p>定义一个组件：
将 Vue 组件定义在一个单独的 .vue 文件中，这被叫做单文件组件（简称 SFC）</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button @click</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"count++"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">You clicked me {{ count }} times.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>不使用构建步骤时，一个 Vue 组件以一个包含 Vue 特定选项的 JavaScript 对象来定义：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { count }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    &#x3C;button @click="count++"></span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">      You clicked me {{ count }} times.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    &#x3C;/button>`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 也可以针对一个 DOM 内联模板：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // template: '#my-template-element'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>这个模版是一个內联的 JavaScript 字符串，Vue 将会在运行时编译它。使用 ID 选择器来指向一个元素（通常是原生的 <code>&lt;template&gt;</code> 元素），Vue 将会使用其内容作为模版来源
上面👆🏻🌰定义了一个组件，并在一个 .js 文件里默认导出它自己，但也可以通过具名导出在一个文件中导出多个组件</p>
<p>使用组件：
同一个组件注册使用多次，每个组件都是新的实例，都维护着自己的状态
推荐组件名写法为 PascalCase 的标签名来以原生元素做区分</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// ParcalCase 写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ButtonCounter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 如果是在 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">DOM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 中书写该模板（原生的 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 元素的内容）：kebab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 写法 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>传递 props：
声明组件 props：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> BlogPost.vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'title'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ title }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：defineProps 仅在 <code>&lt;script setup&gt;</code> 中可用的编译宏命令，不需要显示地导入。
defineProps 会返回一个对象，其中包含了可以传递给组件的所有 props：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'title'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(props.title)</span></span></code></pre>
</div><p>如果没有使用 <code>&lt;script setup&gt;</code> ，props 必须以 props 选项的方式声明，props 对象会作为 setup() 函数的第一个参数被传入：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  props: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'title'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(props.title)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>监听事件：
<code>$emit</code> 方法（<code>&lt;templeate&gt;</code> 可以直接使用内联函数）</p>
<p>defineEmits 宏来声明要抛出的事件：声明一个组件可能触发的所有事件，可以对事件的参数进行验证。避免将它们作为原生事件监听器隐式地应用于子组件的根元素</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> BlogPost.vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'title'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'enlarge-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：<code>defineEmits</code> 仅可用于 <code>&lt;script setup&gt;</code> 之中，无需导入，返回一个等同于 $emit 方法的 emit 函数。用于在组件的 <code>&lt;script setup&gt;</code> 中抛出事件，因为此处无法直接访问 $emit：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'enlarge-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'enlarge-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>使用非 <code>&lt;script setup&gt;</code> 可以通过 emits 选项定义组件会抛出的事件。可以从 setup 函数的第二个参数，即 setup 上下文对象访问到 emit 函数：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  emits: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'enlarge-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'enlarge-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>通过插槽来分配内容：
<code>&lt;slot /&gt;</code></p>
<p>动态组件：
<code>&lt;component&gt;</code> 特殊的 is attribute 实现：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> currentTab 改变时组件也改变 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"tabs[currentTab]"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>is 的值可以是：</p>
<ul>
<li>被注册的组件名；</li>
<li>导入的组件对象；</li>
</ul>
<p>注意⚠️：多个组件切换时，被切换到组件将会被卸载，可以通过 <code>&lt;keep-alive&gt;</code> 包裹组件强制被切换掉仍然保持“存活”状态</p>
<p>DOM 内模版解析注意事项：
使用限制</p>
<p>大小写区分
HTML 标签和属性名称是不分大小写的，所以浏览器会把任何大写的字符解释为小写。这意味着当你使用 DOM 内的模板时，无论是 PascalCase 形式的组件名称、camelCase 形式的 prop 名称还是 <code>v-on</code> 的事件名称，都需要转换为相应等价的 kebab-case (短横线连字符) 形式：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// JavaScript 中的 camelCase</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> BlogPost</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  props: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'postTitle'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  emits: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'updatePost'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    &#x3C;h3>{{ postTitle }}&#x3C;/h3></span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">  `</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> HTML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 中的 kebab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> --></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">blog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">post post</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"hello!"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @update</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">post</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onUpdatePost"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">blog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>闭合标签：
Vue 的模板解析器支持任意标签使用 <code>/&gt;</code> 作为标签关闭的标志</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span></code></pre>
</div><p>注意⚠️：DOM 内模版中，必须显示地写出关闭标签：这是由于 HTML 只允许<a href="https://html.spec.whatwg.org/multipage/syntax.html#void-elements" target="_blank" rel="noreferrer">一小部分特殊的元素</a>省略其关闭标签，最常见的就是 <code>&lt;input&gt;</code> 和 <code>&lt;img&gt;</code>。对于其他的元素来说，如果你省略了关闭标签，原生的 HTML 解析器会认为开启的标签永远没有结束：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">my</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">my</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 比如：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">my</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">component </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;!-- </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">我们想要在这里关闭标签</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">... --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 将被解析为：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">my</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">my</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;!-- </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">但浏览器会在这里关闭标签</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> --></span></span></code></pre>
</div><p>元素位置限制：
某些 HTML 元素对于放在其中的元素类型有限制，例如 <code>&lt;ul&gt;，&lt;ol&gt;，&lt;table&gt; 和 &lt;select&gt;</code>，相应的，某些元素仅在放置于特定元素中时才会显示，例如 <code>&lt;li&gt;，&lt;tr&gt; 和 &lt;option&gt;</code>，否则标签元素将会被忽略：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">blog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">post</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">blog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">row</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 自定义的组件 &#x3C;blog-post-row> 将作为无效的内容被忽略，因而在最终呈现的输出中造成错误</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 使用特殊的 is 属性解决：（注意⚠️：前缀）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">tr is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"vue:blog-post-row"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">tr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：当使用在原生 HTML 元素上时，is 的值必须加上前缀 vue: 才可以被解析为一个 Vue 组件。这一点是必要的，为了避免和原生的<a href="https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-customized-builtin-example" target="_blank" rel="noreferrer">自定义内置元素</a>相混淆</p>
<h2 id="深入组件" tabindex="-1">深入组件 <a class="header-anchor" href="#深入组件" aria-label="Permalink to &quot;深入组件&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="组件注册" tabindex="-1">组件注册 <a class="header-anchor" href="#组件注册" aria-label="Permalink to &quot;组件注册&quot;">&ZeroWidthSpace;</a></h3>
<p>一个 Vue 组件在使用前需要被先“注册”，这样 Vue 才能在渲染模版时找到其对应的实现
组件注册有两种方式：</p>
<ul>
<li>全局注册；</li>
<li>局部注册；</li>
</ul>
<p>全局注册：<code>.component</code></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 注册的名字</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">  'MyComponent'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 组件的实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 单文件组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> MyComponent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './App.vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'MyComponent'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, MyComponent)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 链式调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'ComponentA'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, ComponentA)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'ComponentB'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, ComponentB)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'ComponentC'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, ComponentC)</span></span></code></pre>
</div><p>注意⚠️：全局注册的组件可以在此应用的任意组件的模板中使用：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 这在当前应用的任意组件中都可用 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ComponentA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ComponentB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ComponentC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span></code></pre>
</div><p>所有的子组件可以使用全局注册的组件，这意味着这个三个组件也都可以在彼此内部使用</p>
<p>局部注册：
全局注册组件存在的问题：</p>
<ul>
<li>全局注册，但并没有被使用的组件<strong>无法在生产打包时被自动移除</strong> (也叫“tree-shaking”)。如果你全局注册了一个组件，即使它并没有被实际使用，它仍然会出现在打包后的 JS 文件中；</li>
<li><strong>全局注册在大型项目中使项目的依赖关系变得不那么明确</strong>。在父组件中使用子组件时，不太容易定位子组件的实现。和使用过多的全局变量一样，这可能会影响应用长期的可维护性；</li>
</ul>
<p>局部注册组件的优点：</p>
<ul>
<li>使用的父组件中显示导入，并且只能在父组件中使用；</li>
<li>使组件之间的依赖关系更加明确；</li>
<li>对 <code>tree-sharking</code> 更加友好；</li>
</ul>
<p>在 <code>&lt;script setup&gt;</code> 单文件组件中，导入的组件可以直接在模板中使用，无需注册：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ComponentA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './ComponentA.vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ComponentA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>没有使用 <code>&lt;script setup&gt;</code>，则需要使用 <code>components</code> 选项来显式注册：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ComponentA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './ComponentA.js'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  components: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ComponentA</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：对于每个 <code>components</code> 对象里的属性，它们的 key 名就是注册的组件名，而值就是相应组件的实现</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  components: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ComponentA: ComponentA</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：局部注册的组件在后代组件中不能使用/不可用</p>
<p>组件名格式：
推荐使用 <code>PascalCase</code></p>
<ol>
<li><code>PascalCase</code> 是合法的 JavaScript 标识符。这使得在 JavaScript 中导入和注册组件都很容易，同时 IDE 也能提供较好的自动补全；</li>
<li><code>&lt;PascalCase /&gt;</code> 在模板中更明显地表明了这是一个 Vue 组件，而不是原生 HTML 元素。同时也能够将 <strong>Vue 组件和自定义元素 (web components) 区分开来</strong></li>
</ol>
<p>注意⚠️：Vue 支持将模板中使用 <code>kebab-case</code> 的标签解析为使用 <code>PascalCase</code> 注册的组件。这意味着一个以 <code>MyComponent</code> 为名注册的组件，在模板中可以通过 <code>&lt;MyComponent&gt;</code> 或 <code>&lt;my-component&gt;</code> 引用</p>
<h3 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">&ZeroWidthSpace;</a></h3>
<p>一个组件需要显示声明它所接受的 props，这样接收组件才知道外部传入的哪些 props，哪些是透传 attribute</p>
<p>在 <code>&lt;script setup&gt;</code> 文件中使用 <code>defineProps()</code> 宏来声明：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用对象声明</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  title: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  likes: Number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// TypeScript 写法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// &#x3C;script setup lang="ts"></span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;{</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  likes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}>()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(props.foo)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>不是 <code>&lt;script setup&gt;</code> 文件中使用 props 选项来声明：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  props: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // setup() 接收 props 作为第一个参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(props.foo)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用对象声明</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  props: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    title: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    likes: Number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：</p>
<ul>
<li><code>defineProps()</code> 的参数和提供给 props 选项的值是相同的，两种声明方式背后都是 prop 选项；</li>
<li>对于以对象形式声明中的每个属性，<strong>key 是 prop 的名称，而值则是该 prop 预期类型的构造函数（TypeScript 用法不一样）</strong>。比如，如果要求一个 prop 的值是 number 类型，则可使用 Number 构造函数作为其声明的值。对象形式的 props 声明不仅可以一定程度上作为组件的文档，而且如果其他开发者在使用你的组件时传递了错误的类型，也会在浏览器控制台中抛出警告</li>
</ul>
<p>传递 prop 细节：
prop 名称使用 <code>camelCase</code> 形式</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  greetingMessage: String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p><strong>但是子组件传递 props 时，使用 <code>camelCase</code> 形式不太友好，推荐使用 <code>kebab-case</code> 形式写法，为了和 HTML <code>attribute</code> 对齐</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent greeting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"hello"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><p><strong>组件名推荐 <code>PascalCase</code> 形式，提高模板可读性，为了区分 Vue 组件和原生 HTML 元素</strong></p>
<p>静态 VS 动态：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">BlogPost title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"My journey with Vue"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 根据一个变量的值动态传入 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">BlogPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"post.title"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 根据一个更复杂表达式的值动态传入 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">BlogPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"post.title + ' by ' + post.author.name"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><p>传值不同的值类型：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 虽然 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`42`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 是个常量，我们还是需要使用 v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">bind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 因为这是一个 JavaScript 表达式而不是一个字符串 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">BlogPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :likes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"42"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 根据一个变量的值动态传入 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">BlogPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :likes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"post.likes"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-----------</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 仅写上 prop 但不传值，会隐式转换为 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`true`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> --></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">BlogPost is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">published </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 虽然 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`false`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 是静态的值，我们还是需要使用 v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">bind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 因为这是一个 JavaScript 表达式而不是一个字符串 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">BlogPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"false"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 根据一个变量的值动态传入 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">BlogPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"post.isPublished"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-------------</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 虽然这个数组是个常量，我们还是需要使用 v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">bind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 因为这是一个 JavaScript 表达式而不是一个字符串 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">BlogPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :comment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ids</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"[234, 266, 273]"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 根据一个变量的值动态传入 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">BlogPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :comment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ids</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"post.commentIds"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">------------</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 虽然这个对象字面量是个常量，我们还是需要使用 v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">bind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 因为这是一个 JavaScript 表达式而不是一个字符串 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">BlogPost</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  :author</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Veronica'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    company</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Veridian Dynamics'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 根据一个变量的值动态传入 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">BlogPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :author</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"post.author"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><p>使用一个对象绑定多个 prop：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> post</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'My Journey with Vue'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">BlogPost v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">bind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"post"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">BlogPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"post.id"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"post.title"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><p>单向数据流：
注意⚠️：</p>
<ul>
<li>所有的 props 都遵循着单向绑定原则，props 因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递；</li>
<li>这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解；</li>
<li>每次父组件更新后，所有的子组件中的 props 都会被更新到最新值，这意味着你不应该在子组件中去更改一个 prop</li>
</ul>
<p>如果想要更改一个 prop 的需求两场场景：</p>
<ol>
<li>作为子组件某个变量的初始值，而子组件想在之后将其作为一个局部数据属性：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'initialCounter'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 计数器只是将 props.initialCounter 作为初始值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 像下面这样做就使 prop 和后续更新无关了</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(props.initialCounter)</span></span></code></pre>
</div><ol start="2">
<li>需要对传入的 prop 值做进一步的转换。最好的方式是使用计算属性处理：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'size'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 该 prop 变更时计算属性也会自动更新</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> normalizedSize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> props.size.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())</span></span></code></pre>
</div><p>注意：更改对象/数组类型的 props</p>
<ul>
<li>当对象或数组作为 props 被传入时，虽然子组件无法更改 props 绑定，但仍然可以更改对象或数组内部的值。这是因为 JavaScript 的对象和数组是按引用传递，而对 Vue 来说，禁止这样的改动，虽然可能生效，但有很大的性能损耗，比较得不偿失；</li>
<li>这种更改的主要缺陷是它允许了子组件以某种不明显的方式影响父组件的状态，可能会使数据流在将来变得更难以理解。在最佳实践中，你应该尽可能避免这样的更改，<strong>除非父子组件在设计上本来就需要紧密耦合。在大多数场景下，子组件应该</strong><a href="https://cn.vuejs.org/guide/components/events.html" target="_blank" rel="noreferrer"><strong>抛出一个事件</strong></a><strong>来通知父组件做出改变；</strong></li>
</ul>
<p>prop 校验：
Vue 组件可以更细致地声明对传入的 props 的校验要求。比如我们上面已经看到过的类型声明，如果传入的值不满足类型要求，Vue 会在浏览器控制台中抛出警告来提醒使用者</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 基础类型检查</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // （给出 `null` 和 `undefined` 值则会跳过任何类型检查）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  propA: Number,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 多种可能的类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  propB: [String, Number],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 必传，且为 String 类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  propC: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // Number 类型的默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  propD: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type: Number,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    default: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 对象类型的默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  propE: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type: Object,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 对象或数组的默认值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 必须从一个工厂函数返回。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 该函数接收组件所接收到的原始 prop 作为参数。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">rawProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 自定义类型校验函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  propF: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    validator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // The value must match one of these strings</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'success'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'warning'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'danger'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 函数类型的默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  propG: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type: Function,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 不像对象或数组的默认，这不是一个</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 工厂函数。这会是一个用来作为默认值的函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'Default function'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>注意：<code>defineProps()</code> 宏中的参数不可以访问 <code>&lt;script setup&gt;</code> 中定义的其他变量，因为在编译时整个表达式都会被移到外部的函数中</p>
<ul>
<li>所有 prop 默认都是可选的，除非声明了 <code>required: true</code></li>
<li>除 <code>Boolean</code> 外的未传递的可选 prop 将会有一个默认值 <code>undefined；</code></li>
<li><strong><code>Boolean</code> 类型的未传递 prop 将被转换为 false</strong>。这可以通过为它设置 <code>default</code> 来更改——例如：<strong>设置为 <code>default: undefined</code> 将与非布尔类型的 prop 的行为保持一致</strong>；</li>
<li>如果声明了 <code>default</code> 值，那么在** <code>prop</code> 的值被解析为 <code>undefined</code> 时**，无论 prop 是未被传递还是显式指明的 <code>undefined</code>，<strong>都会改为 default 值</strong></li>
</ul>
<p>注意⚠️：prop 校验失败，Vue 会在控制台下给出警告（开发模式下）</p>
<p><strong>如果使用了</strong><a href="https://cn.vuejs.org/api/sfc-script-setup.html#type-only-props-emit-declarations" target="_blank" rel="noreferrer"><strong>基于类型的 prop 声明</strong></a>** ，Vue 会尽最大努力在运行时按照 prop 的类型标注进行编译。举例来说，<code>defineProps&lt;{ msg: string }&gt;</code> 会被编译为 <code>{ msg: { type: String, required: true }}</code>**</p>
<p>运行时类型检查：
校验类型选项的 type 可以是这些构造函数：</p>
<ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>Array</li>
<li>Object</li>
<li>Date</li>
<li>Function</li>
<li>Symbol</li>
</ul>
<p>另外，type 也可以是自定义的类或构造函数，Vue 将会通过 <code>instanceof</code> 来检查类型是否匹配</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">lastName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.firstName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> firstName</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.lastName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> lastName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>校验 prop 类型是否是某个类的实例：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  author: Person</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>Vue 会通过 <code>instanceof</code> Person 来校验 author prop 的值是否是 Person 类的一个实例</p>
<p><code>Boolean</code> 类型转换：
为了更贴近原生 <code>boolean</code> attributes 的行为，声明为 <code>Boolean</code> 类型的 props 有特别的类型转换规则</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  disabled: Boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> 等同于传入</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :disabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"true"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> --></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent disabled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> 等同于传入</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :disabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"false"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> --></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span></code></pre>
</div><p><strong>当一个 prop 被声明为允许多种类型时，<code>Boolean</code> 的转换规则也将被应用。然而，当同时允许 <code>String</code> 和 <code>Boolean</code> 时，有一种边缘情况——只有当 <code>Boolean</code> 出现在 <code>String</code> 之前时，<code>Boolean</code> 转换规则才适用</strong>：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// disabled 将被转换为 true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  disabled: [Boolean, Number]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// disabled 将被转换为 true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  disabled: [Boolean, String]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// disabled 将被转换为 true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  disabled: [Number, Boolean]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// disabled 将被解析为空字符串 (disabled="")</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  disabled: [String, Boolean]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><h3 id="组件事件" tabindex="-1">组件事件 <a class="header-anchor" href="#组件事件" aria-label="Permalink to &quot;组件事件&quot;">&ZeroWidthSpace;</a></h3>
<p>触发与监听事件：
直接使用 <code>$emit</code> 方法触发自定义事件：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// &#x3C;!-- 子组件：MyComponent --></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button @click</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"$emit('someEvent')"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">click me</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 父组件接收事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent @some</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"callback"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><p>事件修饰符：<code>.once</code></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent @some</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">event.once</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"callback"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><p>注意⚠️：像组件与 prop 一样，事件的名字也提供了自动的格式转换。注意这里我们触发了一个以 camelCase 形式命名的事件，但在父组件中可以使用 <code>kebab-case</code> 形式来监听。与 <a href="https://cn.vuejs.org/guide/components/props.html#prop-name-casing" target="_blank" rel="noreferrer">prop 大小写格式</a>一样，<strong>在模板中我们也推荐使用 <code>kebab-case</code> 形式来编写监听器</strong></p>
<p><strong>和原生 DOM 事件不一样，组件触发的事件没有冒泡机制</strong>。你只能监听直接子组件触发的事件。平级组件或是跨越多层嵌套的组件间通信，应使用一个外部的事件总线，或是使用一个<a href="https://cn.vuejs.org/guide/scaling-up/state-management.html" target="_blank" rel="noreferrer">全局状态管理方案</a></p>
<p>事件参数：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button @click</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"$emit('increaseBy', 1)"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  Increase by </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 父组件接收：內联函数或组件方法都可以</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyButton @increase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">by</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"(n) => count += n"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><p>注意⚠️：所有传入 <code>$emit()</code> 的额外参数都会被直接传向监听器。举例来说，<code>$emit('foo', 1, 2, 3)</code> 触发后，监听器函数将会收到这三个参数值</p>
<p>声明触发的事件：
显示地通过 <code>defineEmits()</code> 宏来声明要触发的事件：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'inFocus'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'submit'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>在 <code>&lt;template&gt;</code> 中使用的 <code>$emit</code> 方法不能在组件的 <code>&lt;script setup&gt;</code> 部分中使用，但 <code>defineEmits()</code> 会返回一个相同作用的函数供我们使用：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'inFocus'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'submit'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> buttonClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'submit'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 其他写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  emits: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'inFocus'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'submit'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// setup(props, { emit })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'submit'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：<code>defineEmit()</code> 不能在子函数中使用，必须直接放置在 <code>&lt;script setup&gt;</code> 的顶级作用域下</p>
<p><code>emits</code> 选项和 <code>defineEmits()</code> 宏还支持对象语法。通过 TypeScript 为参数指定类型，它允许我们对触发事件的参数进行验证：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">payload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">email</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 通过返回值为 `true` 还是为 `false` 来判断</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 验证是否通过</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 或</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'change'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'update'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}>()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：尽管事件声明是可选的，我们还是<strong>推荐你完整地声明所有要触发的事件，以此在代码中作为文档记录组件的用法</strong>。同时，事件声明能让 Vue 更好地将事件和<a href="https://cn.vuejs.org/guide/components/attrs.html#v-on-listener-inheritance" target="_blank" rel="noreferrer">透传 attribute</a> 作出区分，从而避免一些由第三方代码触发的自定义 DOM 事件所导致的边界情况</p>
<p>事件校验：
和对 <code>props</code> 添加类型校验的方式类似，所有触发的事件也可以使用对象形式来描述。
要为事件添加校验，那么事件可以被赋值为一个函数，接受的参数就是抛出事件时传入 <code>emit</code> 的内容，返回一个布尔值来表明事件是否合法：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 没有校验</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  click: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 校验 submit 事件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> password) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Invalid submit event payload!'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> submitForm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'submit'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { email, password })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>将事件作为 <code>prop</code>：
可以通过在大写的事件名称前加上 <code>on</code> 将 <code>events</code> 作为 <code>props</code> 声明并传递。
与使用 <code>emit('event')</code> 的行为不同，<code>props.onEvent</code> 只会处理基于属性的监听器（<code>@event</code> 或 <code>:on-event</code>）
注意⚠️：如果同时传递了 <code>:onEvent</code> 和 <code>@event</code>，则 <code>props.onEvent</code> 可能是一个函数数组而不是单个函数，这种行为不稳定，可能会在未来改变。因此，建议在触发事件时使用 <code>emit('event')</code> 而不是 <code>props.onEvent</code></p>
<h3 id="组件-v-model" tabindex="-1">组件  <code>v-model</code> <a class="header-anchor" href="#组件-v-model" aria-label="Permalink to &quot;组件  `v-model`&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"searchText"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 等价于</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  :value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"searchText"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  @input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"searchText = $event.target.value"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 组件使用时</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">CustomInput</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  :model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"searchText"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  @update:model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"newValue => searchText = newValue"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 等价于</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">CustomInput v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"searchText"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><p>组件用法解析：</p>
<ol>
<li>将内部原生 <code>&lt;input /&gt;</code> 元素的 value <code>attribute</code> 绑定到 <code>modelValue</code> prop；</li>
<li>当原生的 <code>input</code> 事件触发时，触发一个携带了新值的 <code>update:modelValue</code> 自定义事件；</li>
</ol>
<p>另一种在组件内实现 <code>v-model</code> 的方式是使用一个可写的，<strong>同时具有 <code>getter</code> 和 <code>setter</code> 的 <code>computed</code> 属性。get 方法需返回 <code>modelValue prop</code>，而 <code>set</code> 方法需触发相应的事件</strong>：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 将上面组件重写</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { computed } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'modelValue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'update:modelValue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> props.modelValue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'update:modelValue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"value"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p><code>v-model</code> 的参数：
默认情况下，<code>v-model</code> 在组件上都是使用 <code>modelValue</code> 作为 prop，并以 <code>update:modelValue</code> 作为对应的事件。可以<strong>通过给 <code>v-model</code> 指定一个参数来更改这些名字：</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"bookTitle"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> MyComponent.vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'title'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'update:title'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    :value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"title"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"$emit('update:title', $event.target.value)"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>多个 <code>v-model</code> 绑定</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">UserName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:first</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"first"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:last</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"last"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  firstName: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  lastName: String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'update:firstName'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'update:lastName'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    :value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"firstName"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"$emit('update:firstName', $event.target.value)"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    :value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"lastName"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"$emit('update:lastName', $event.target.value)"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>处理 <code>v-model</code> 修饰符
<a href="https://cn.vuejs.org/guide/essentials/forms.html#modifiers" target="_blank" rel="noreferrer">内置的修饰符</a>，例如 <code>.trim，.number 和 .lazy</code>。在某些场景下，可能想要一个自定义组件的 <code>v-model</code> 支持自定义的修饰符：创建一个自定义的修饰符 capitalize，它会自动将 <code>v-model</code> 绑定输入的字符串值第一个字母转为大写：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model.capitalize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"myText"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><p><strong>组件的 <code>v-model</code> 上所添加的修饰符，可以通过 <code>modelModifiers</code> prop 在组件内访问到</strong>。在下面的组件中，声明了 <code>modelModifiers</code> 这个 prop，它的默认值是一个空对象：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  modelValue: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  modelModifiers: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({}) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'update:modelValue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(props.modelModifiers) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// { capitalize: true }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    :value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"modelValue"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"$emit('update:modelValue', $event.target.value)"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改为</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  modelValue: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  modelModifiers: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({}) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'update:modelValue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> emitValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> e.target.value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (props.modelModifiers.capitalize) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'update:modelValue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"modelValue"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"emitValue"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>带参数的 <code>v-model</code> 修饰符
对于又有参数又有修饰符的 <code>v-model</code> 绑定，生成的 prop 名将是 <code>arg + &quot;Modifiers&quot;</code>。举例来说：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:title.capitalize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"myText"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 组件内部实现</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'title'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'titleModifiers'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'update:title'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(props.titleModifiers) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// { capitalize: true }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 多个不同参数使用修饰符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">UserName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:first</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">name.capitalize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"first"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:last</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">name.uppercase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"last"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  firstName: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  lastName: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  firstNameModifiers: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({}) },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  lastNameModifiers: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({}) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'update:firstName'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'update:lastName'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(props.firstNameModifiers) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// { capitalize: true }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(props.lastNameModifiers) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// { uppercase: true}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><h3 id="透传-attributes" tabindex="-1">透传 Attributes <a class="header-anchor" href="#透传-attributes" aria-label="Permalink to &quot;透传 Attributes&quot;">&ZeroWidthSpace;</a></h3>
<p>Attributes 继承
“透传 attribute”指的是传递给一个组件，却没有被该组件声明为 <a href="https://cn.vuejs.org/guide/components/props.html" target="_blank" rel="noreferrer">props</a> 或 <a href="https://cn.vuejs.org/guide/components/events.html#defining-custom-events" target="_blank" rel="noreferrer">emits</a> 的 attribute 或者 <code>v-on</code> 事件监听器。最常见的例子就是 class、style 和 id
注意⚠️：当一个组件以单个元素为根作渲染时，透传的 attribute 会<strong>自动被添加到根元素上</strong>（如果一个子组件的根元素已经有了 class 或 style attribute，它会和从父组件上<strong>继承的值合并</strong>）</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyButton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 的模板 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>click me</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyButton class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"large"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 渲染后</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"large"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">click me</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p><code>v-on</code> 监听器继承</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyButton @click</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onClick"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><p>click 监听器会被添加到 <code>&lt;MyButton&gt;</code> 的根元素，即那个原生的 <code>&lt;button&gt;</code> 元素之上。当原生的 <code>&lt;button&gt;</code> 被点击，会触发父组件的 onClick 方法。同样的，<strong>如果原生 button 元素自身也通过 <code>v-on</code> 绑定了一个事件监听器，则这个监听器和从父组件继承的监听器都会被触发</strong></p>
<p>深层组件继承
有些情况下一个组件会在根节点上渲染另一个组件
如果此时组件接收透传的 <code>attribute</code> 会直接继承传给 <code>&lt;BaseButton&gt;</code> 组件：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyButton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 的模板，只是渲染另一个组件 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">BaseButton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span></code></pre>
</div><p>注意⚠️：</p>
<ul>
<li>透传的 <code>attribute</code> 不会包含 <code>&lt;MyButton&gt;</code> 上声明过的 <code>props</code> 或是针对 <code>emits</code> 声明事件的 <code>v-on</code> 侦听函数，换句话说，声明过的 <code>props</code> 和侦听函数被 <code>&lt;MyButton&gt;</code>“消费”了；</li>
<li>透传的 <code>attribute</code> 若符合声明，也可以作为 <code>props</code> 传入 <code>&lt;BaseButton&gt;</code>；</li>
</ul>
<p>禁用 Attributes 继承
如果你不想要一个组件自动地继承 attribute，你可以在组件选项中设置 <code>inheritAttrs: false</code></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// Vue3.3 开始</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  inheritAttrs: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// ...setup 逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 模版表达式可以直接使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Fallthrough </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {{ $attrs }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：</p>
<ul>
<li>和 props 有所不同，透传 attributes 在 JavaScript 中保留了它们原始的大小写，所以像 foo-bar 这样的一个 attribute 需要通过 <code>$attrs['foo-bar']</code> 来访问</li>
<li>像 <code>@click</code> 这样的一个 <code>v-on</code> 事件监听器将在此对象下被暴露为一个函数 <strong><code>$attrs.onClick</code></strong></li>
</ul>
<p>子组件无需透传，但某个按钮需要使用到一个监听事件处理：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"btn-wrapper"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"btn"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">click me</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改为，记得设定：inheritAttrs: false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"btn-wrapper"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"btn"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">bind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"$attrs"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">click me</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>多根节点的 Attributes 继承
和单根节点组件有所不同，有着多个根节点的组件没有自动 attribute 透传行为。<strong>如果 <code>$attrs</code> 没有被显式绑定，将会抛出一个运行时警告</strong>
因为子组件有多根节点情况下，Vue 不知道要将 attribute 透传到哪里，所以会抛出一个警告</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">header</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">footer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改为</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">header</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">main v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">bind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"$attrs"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>...&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">footer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>在 JavaScript 中访问透传 Attributes
如果需要，你可以在 <code>&lt;script setup&gt;</code> 中使用 <code>useAttrs()</code> API 来访问一个组件的所有透传</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useAttrs } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> attrs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useAttrs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 或</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 透传 attribute 被暴露为 ctx.attrs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ctx.attrs)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：
需要注意的是，虽然这里的 attrs 对象总是反映为最新的透传 attribute，<strong>但它并不是响应式的 (考虑到性能因素)。你不能通过侦听器去监听它的变化</strong>。如果你需要响应性，可以<strong>使用 prop</strong>。或者你也可以**使用 <code>onUpdated()</code> **使得在每次更新时结合最新的 attrs 执行副作用</p>
<h3 id="插槽-slots" tabindex="-1">插槽 Slots <a class="header-anchor" href="#插槽-slots" aria-label="Permalink to &quot;插槽 Slots&quot;">&ZeroWidthSpace;</a></h3>
<p>插槽内容与出口，给子组件传递一些模版片段，让子组件在它们的组件中渲染这些片段</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">FancyButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  Click me</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 插槽内容 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">FancyButton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 子组件插槽</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"fancy-btn"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> &#x3C;!-- </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">插槽出口</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> --></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 渲染最终结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"fancy-btn"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Click me</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p><code>&lt;slot&gt;</code> 元素是一个插槽出口 (slot outlet)，标示了父元素提供的插槽内容 (slot content) 将在哪里被渲染</p>
<CustomImage src='/growth-record/frame/vue/vue3study04.webp' /><p>理解插槽的另一种方式是和下面的 JavaScript 函数作类比，其概念是类似的：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 父元素传入插槽内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">FancyButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Click me!'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// FancyButton 在自己的模板中渲染插槽内容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FancyButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">slotContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `&#x3C;button class="fancy-btn"></span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">      ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slotContent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    &#x3C;/button>`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：插槽内容可以是任意合法的模板内容，不局限于文本。例如我们可以传入多个元素，甚至是组件：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">FancyButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"color:red"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Click me</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">AwesomeIcon name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"plus"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">FancyButton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>通过使用插槽，<code>&lt;FancyButton&gt;</code> 组件<strong>更加灵活和具有可复用性</strong>。现在组件可以用在不同的地方渲染各异的内容，但同时还保证都具有相同的样式。<strong>Vue 组件的插槽机制是受</strong><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot" target="_blank" rel="noreferrer"><strong>原生 Web Component<code>&lt;slot&gt;</code> 元素</strong></a><strong>的启发而诞生</strong></p>
<p>渲染作用域：
<strong>插槽内容可以访问到父组件的数据作用域，因为插槽内容本身是在父组件模版中定义的</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ message }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">FancyButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ message }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">FancyButton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：插槽内容无法访问子组件的数据。Vue 模板中的表达式只能访问其定义时所处的作用域，这和 JavaScript 的词法作用域规则是一致的。<strong>父组件模板中的表达式只能访问父组件的作用域；子组件模板中的表达式只能访问子组件的作用域</strong></p>
<p>默认内容：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"submit"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    Submit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 默认内容 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 提供了默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">SubmitButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">SubmitButton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 渲染最终结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"submit"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>具名插槽：
有时在一个组件中包含多个插槽出口是很有用的</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"container"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 标题内容放这里 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">header</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 主要内容放这里 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 底部内容放这里 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">footer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>对于这种场景，<strong><code>&lt;slot&gt;</code> 元素可以有一个特殊的 attribute name，用来给各个插槽分配唯一的 ID</strong>，以确定每一处要渲染的内容：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"container"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slot name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"header"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">header</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slot name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"footer"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">footer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用，指令也可以缩写</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">BaseLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:header</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> header 插槽的内容放这里 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">BaseLayout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">BaseLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template #header</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Here might be a page title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template #</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">default></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> paragraph for the main content.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>And another one.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 等价于</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // &#x3C;!-- 隐式的默认插槽 --></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // &#x3C;p>A paragraph for the main content.&#x3C;/p></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // &#x3C;p>And another one.&#x3C;/p></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template #footer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Here</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'s some contact info&#x3C;/p</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">BaseLayout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">----------------------------</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 传入不同的内容给不同名字的插槽</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">BaseLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  header: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`...`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  default: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`...`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  footer: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`...`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// &#x3C;BaseLayout> 渲染插槽内容到对应位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> BaseLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">slots</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `&#x3C;div class="container"></span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">      &#x3C;header>${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slots</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}&#x3C;/header></span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">      &#x3C;main>${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slots</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}&#x3C;/main></span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">      &#x3C;footer>${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slots</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">footer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}&#x3C;/footer></span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    &#x3C;/div>`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：这类带 name 的插槽被称为具名插槽 (named slots)。<strong>没有提供 name 的 <code>&lt;slot&gt;</code> 出口会隐式地命名为“default”</strong></p>
<CustomImage src='/growth-record/frame/vue/vue3study05.webp' /><p>动态插槽名：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">layout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:[dynamicSlotName]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 缩写为 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template #[dynamicSlotName]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">layout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：表达式和动态指令参数受相同的语法限制</p>
<p>作用域插槽：
在某些场景下插槽的内容可能想要同时使用父组件域内和子组件域内的数据。像对组件传递 props 那样，向一个插槽的出口上传递 attributes：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 的模板 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"greetingMessage"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"1"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>默认插槽如何接受 props，通过子组件标签上的 v-slot 指令，直接接收到了一个插槽 props 对象：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"slotProps"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  {{ slotProps.text }} {{ slotProps.count }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ text, count }"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  {{ text }} {{ count }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><CustomImage src='/growth-record/frame/vue/vue3study06.webp' /><p>将作用域插槽类比为一个传入子组件的函数。子组件会将相应的 props 作为参数传给它：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 类比默认插槽，将其想成一个函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">slotProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slotProps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">text</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">} ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slotProps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">slots</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> greetingMessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hello'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `&#x3C;div>${</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 在插槽函数调用时传入 props</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    slots</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">({ text: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">greetingMessage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">, count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> })</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">  }&#x3C;/div>`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>具名作用域插槽：
插槽 props 可以作为 <code>v-slot</code> 指令的值被访问到：<code>v-slot:name=&quot;slotProps&quot;</code></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template #header</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"headerProps"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    {{ headerProps }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template #</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">default=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"defaultProps"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    {{ defaultProps }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template #footer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"footerProps"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    {{ footerProps }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 子组件内部传值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slot name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"header"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"hello"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>注意⚠️：注意插槽上的 name 是一个 Vue 特别保留的 attribute，不会作为 props 传递给插槽。因此最终 headerProps 的结果是 <code>{ message: 'hello' }</code></p>
<p>如果同时使用了具名插槽与默认插槽，则需要为默认插槽使用显式的 <code>&lt;template&gt;</code> 标签。尝试直接为组件添加 <code>v-slot</code> 指令将导致编译错误。这是为了避免因默认插槽的 props 的作用域而困惑：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 该模板无法编译 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ message }"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ message }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template #footer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> message 属于默认插槽，此处不可用 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ message }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改为：为默认插槽使用显式的 &#x3C;template> 标签有助于更清晰地指出 message 属性在其他插槽中不可用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 使用显式的默认插槽 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template #</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">default=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ message }"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ message }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template #footer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Here</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'s some contact info&#x3C;/p</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>高级列表组件示例：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">FancyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :api</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"url"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :per</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"10"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 保留足够的灵活性，将对单个列表元素内容和样式的控制权留给使用它的父组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template #item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ body, username, likes }"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ body }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>by {{ username }} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {{ likes }} likes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">FancyList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 或者修改为：在 &#x3C;FancyList> 之中，多次渲染 &#x3C;slot> 并每次都提供不同的数据 (注意我们这里使用了 v-bind 来传递插槽的 props)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item in items"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slot name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">bind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ul</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>无渲染组件：
<code>&lt;FancyList&gt;</code> 案例同时封装了可重用的逻辑 (数据获取、分页等) 和视图输出，但也将部分视图输出通过作用域插槽交给了消费者组件来管理
注意⚠️：一些组件可能只包括了逻辑而不需要自己渲染内容，视图输出通过作用域插槽全权交给了消费者组件。我们将这种类型的组件称为无渲染组件</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MouseTracker v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ x, y }"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  Mouse is </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {{ x }}, {{ y }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MouseTracker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p><strong>作用域插槽在需要同时封装逻辑、组合视图界面</strong></p>
<h3 id="依赖注入" tabindex="-1">依赖注入 <a class="header-anchor" href="#依赖注入" aria-label="Permalink to &quot;依赖注入&quot;">&ZeroWidthSpace;</a></h3>
<p>Prop 逐级透传问题
当需要从父组件向子组件传递数据时，会使用 <a href="https://cn.vuejs.org/guide/components/props.html" target="_blank" rel="noreferrer">props</a>。想象一下这样的结构：有一些多层级嵌套的组件，形成了一颗巨大的组件树，而某个深层的子组件需要一个较远的祖先组件中的部分数据。在这种情况下，<strong>如果仅使用 props 则必须将其沿着组件链逐级传递下去，这会非常麻烦</strong>：</p>
<CustomImage src='/growth-record/frame/vue/vue3study07.webp' /><p>注意⚠️：虽然这里的 <code>&lt;Footer&gt;</code> 组件可能根本不关心这些 props，但为了使 <code>&lt;DeepChild&gt;</code> 能访问到它们，仍然需要定义并向下传递。<strong>如果组件链路非常长，可能会影响到更多这条路上的组件。这一问题被称为“prop 逐级透传”，显然是希望尽量避免的情况</strong></p>
<p><code>provide</code> 和 <code>inject</code> 可以帮助我们解决这一问题。 <strong>一个父组件相对于其所有的后代组件，会作为依赖提供者。任何后代的组件树，无论层级有多深，都可以注入由父组件提供给整条链路的依赖：</strong></p>
<CustomImage src='/growth-record/frame/vue/vue3study08.webp' /><p><code>provide（提供</code>）：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { provide } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 注入名 */</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'message'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 值 */</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hello!'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 注意非 setup 写法需要确保 provide() 是在 setup() 同步调用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { provide } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 注入名 */</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'message'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 值 */</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hello!'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><code>provide()</code> <strong>函数接收两个参数。第一个参数被称为注入名，可以是一个字符串或是一个 <code>Symbol</code></strong>。后代组件会用注入名来查找期望注入的值。<strong>一个组件可以多次调用 <code>provide()</code>，使用不同的注入名，注入不同的依赖值</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref, provide } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'key'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, count)</span></span></code></pre>
</div><p>注意⚠️：第二个参数是提供的值，值可以是任意类型，包括响应式的状态，比如一个 ref
<strong>提供的响应式状态使后代组件可以由此和提供者建立响应式的联系</strong></p>
<p>应用层 Provide：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 注入名 */</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'message'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 值 */</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hello!'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div><p>在应用级别提供的数据在该应用内的所有组件中都可以注入。<strong>这在你编写</strong><a href="https://cn.vuejs.org/guide/reusability/plugins.html" target="_blank" rel="noreferrer"><strong>插件</strong></a><strong>时会特别有用，因为插件一般都不会使用组件形式来提供值</strong></p>
<p><code>Inject（注入）</code>：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { inject } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'message'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 注意非 setup 写法需要确保 provide() 是在 setup() 同步调用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { inject } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'message'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { message }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>如果提供的值是一个 ref，注入进来的会是该 ref 对象，而不会自动解包为其内部的值。这使得注入方组件能够通过 ref 对象保持了和供给方的响应性链接</strong></p>
<p>注入默认值：
默认情况下，<code>inject</code> 假设传入的注入名会被某个祖先链上的组件提供。如果该注入名的确没有任何组件提供，则会抛出一个运行时警告</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 如果没有祖先组件提供 "message"</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// `value` 会是 "这是默认值"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'message'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'这是默认值'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div><p>注意⚠️：<strong>在一些场景中，默认值可能需要通过调用一个函数或初始化一个类来取得</strong>。为了避免在用不到默认值的情况下进行不必要的计算或产生副作用，我们可以使用工厂函数来创建默认值：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'key'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ExpensiveClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div><p>注意⚠️：<strong>第三个参数表示默认值应该被当作一个工厂函数</strong></p>
<p>和响应式数据配合使用：
当提供 / 注入响应式的数据时，<strong>建议尽可能将任何对响应式状态的变更都保持在供给方组件中</strong>。这样可以确保所提供状态的声明和变更操作都内聚在同一个组件内，使其更容易维护</p>
<p><strong>🔥🔥🔥有的时候，可能需要在注入方组件中更改数据。在这种情况下，我们推荐在供给方组件内声明并提供一个更改数据的方法函数：</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 在供给方组件内 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { provide, ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'North Pole'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> updateLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  location.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'South Pole'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'location'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  location,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  updateLocation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 在注入方组件 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { inject } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">updateLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'location'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button @click</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"updateLocation"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{{ location }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：<strong>如果你想确保提供的数据不能被注入方的组件更改，你可以使用 <strong><a href="https://cn.vuejs.org/api/reactivity-core.html#readonly" target="_blank" rel="noreferrer"><strong><code>readonly()</code></strong></a></strong> 来包装提供的值</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref, provide, readonly } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'read-only-count'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(count))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>使用 Symbol 作注入名：
正在构建大型的应用，包含非常多的依赖提供，或者你正在编写提供给其他开发者使用的组件库，<strong>建议最好使用 Symbol 来作为注入名以避免潜在的冲突，推荐一个单独的文件中导出这些注入名 Symbol：</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// keys.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> myInjectionKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 在供给方组件中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { provide } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { myInjectionKey } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './keys.js'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(myInjectionKey, { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  要提供的数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 注入方组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { inject } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { myInjectionKey } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './keys.js'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> injected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(myInjectionKey)</span></span></code></pre>
</div><h3 id="异步组件" tabindex="-1">异步组件 <a class="header-anchor" href="#异步组件" aria-label="Permalink to &quot;异步组件&quot;">&ZeroWidthSpace;</a></h3>
<p>在大型项目中，我们可能需要拆分应用为更小的块，并仅在需要时再从服务器加载相关组件。Vue 提供了 <a href="https://cn.vuejs.org/api/general.html#defineasynccomponent" target="_blank" rel="noreferrer">defineAsyncComponent</a> 方法来实现此功能：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineAsyncComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> AsyncComp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineAsyncComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // ...从服务器获取组件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 获取到的组件 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// ... 像使用其他一般组件一样使用 `AsyncComp`</span></span></code></pre>
</div><p>注意⚠️：<code>defineAsyncComponent</code> 方法<strong>接收一个返回 Promise 的加载函数</strong>。这个 Promise 的 resolve 回调方法应该在从服务器获得组件定义时调用。你也可以调用 <code>reject(reason)</code> 表明加载失败</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import" target="_blank" rel="noreferrer">ES 模块动态导入</a>也会返回一个 Promise，所以多数情况下我们会将它和 defineAsyncComponent 搭配使用。类似 Vite 和 Webpack 这样的构建工具也支持此语法 (并且会将它们作为打包时的代码分割点)，因此我们也可以用它来导入 Vue 单文件组件：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineAsyncComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> AsyncComp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineAsyncComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./components/MyComponent.vue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div><p><strong><code>AsyncComp</code> 是一个外层包装过的组件，仅在页面需要它渲染时才会调用加载内部实际组件的函数</strong>。它会将接收到的 props 和插槽传给内部组件，所以你可以使用这个<strong>异步的包装组件无缝地替换原始组件，同时实现延迟加载</strong></p>
<p>异步组件可以使用 <code>app.component()</code> <a href="https://cn.vuejs.org/guide/components/registration.html#global-registration" target="_blank" rel="noreferrer">全局注册</a>：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'MyComponent'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineAsyncComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./components/MyComponent.vue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 父组件直接使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineAsyncComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> AdminPage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineAsyncComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./components/AdminPageComponent.vue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">AdminPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>加载与错误状态：
异步操作不可避免地会涉及到加载和错误状态，因此 <code>defineAsyncComponent()</code> 也支持在高级选项中处理这些状态：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> AsyncComp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineAsyncComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 加载函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./Foo.vue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 加载异步组件时使用的组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  loadingComponent: LoadingComponent,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 展示加载组件前的延迟时间，默认为 200ms</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  delay: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 加载失败后展示的组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  errorComponent: ErrorComponent,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 如果提供了一个 timeout 时间限制，并超时了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 也会显示这里配置的报错组件，默认值是：Infinity</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  timeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>如果提供了一个加载组件，它将在内部组件加载时先行显示。<strong>在加载组件显示之前有一个默认的 200ms 延迟</strong>——这是因为在网络状况较好时，加载完成得很快，<strong>加载组件和最终组件之间的替换太快可能产生闪烁，反而影响用户感受</strong>
注意⚠️：如果提供了一个报错组件，则它会在加载器函数返回的 Promise 抛错时被渲染。你还可以指定一个超时时间，在请求耗时超过指定时间时也会渲染报错组件</p>
<p>搭配 Suspense 使用
<strong>异步组件可以搭配内置的 <code>&lt;Suspense&gt;</code> 组件一起使用</strong></p>
<h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>树状视图，递归使用自身组件：<a href="https://cn.vuejs.org/examples/#tree" target="_blank" rel="noreferrer">在线示例</a></li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref, computed } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  model: Object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> isOpen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> isFolder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> props.model.children </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> props.model.children.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  isOpen.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">isOpen.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> changeType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">isFolder.value) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    props.model.children </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> []</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    addChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    isOpen.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> addChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  props.model.children.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'new stuff'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      :class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ bold: isFolder }"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      @click</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"toggle"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      @dblclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"changeType"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      {{ model.name }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"isFolder"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[{{ isOpen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '-'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '+'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }}]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ul v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">show</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"isOpen"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"isFolder"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // &#x3C;!--</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      //   一个可以通过其“name”选项递归渲染自己的组件，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      //   (如果使用单文件组件，则从文件名推断)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // --></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">TreeItem</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"model in model.children"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        :model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"model"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">TreeItem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"add"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @click</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"addChild"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ul</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><ol start="2">
<li>TodoMVC 示例：<a href="https://cn.vuejs.org/examples/#todomvc" target="_blank" rel="noreferrer">在线示例</a></li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">一个完全标准的 TodoMVC 实现</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">https</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//todomvc.com/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref, computed, watchEffect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> STORAGE_KEY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue-todomvc'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 值得借鉴学习的获取指定数据的方式（通过对象属性函数操作，获取对应的值）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> filters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">todos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> todos,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">todos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> todos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">todo.completed),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  completed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">todos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> todos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> todo.completed)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> todos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">STORAGE_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '[]'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> visibility</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'all'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> editedTodo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 获取的状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> filteredTodos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> filters[visibility.value](todos.value))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> remaining</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> filters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(todos.value).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 处理路由</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hashchange'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, onHashChange)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onHashChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 状态持久化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">STORAGE_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(todos.value))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> toggleAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  todos.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (todo.completed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> e.target.checked))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> addTodo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> e.target.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (value) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    todos.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      id: Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      title: value,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      completed: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    e.target.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> removeTodo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  todos.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(todos.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(todo), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> beforeEditCache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> editTodo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  beforeEditCache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> todo.title</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  editedTodo.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> todo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> cancelEdit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  editedTodo.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  todo.title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> beforeEditCache</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> doneEdit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (editedTodo.value) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    editedTodo.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    todo.title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> todo.title.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">todo.title) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">removeTodo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(todo)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> removeCompleted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  todos.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> filters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(todos.value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> onHashChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> route</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> window.location.hash.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF">#</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold">\/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (filters[route]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    visibility.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> route</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    window.location.hash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    visibility.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'all'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">section class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todoapp"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">header class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"header"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>todos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"new-todo"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        autofocus</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        placeholder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"What needs to be done?"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        @keyup.enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"addTodo"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      ></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">header</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">section class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"main"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">show</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todos.length"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"toggle-all"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"toggle-all"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"checkbox"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        :checked</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"remaining === 0"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        @change</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"toggleAll"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      ></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"toggle-all"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Mark all </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> complete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ul class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todo-list"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todo in filteredTodos"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todo"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          :key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todo.id"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          :class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ completed: todo.completed, editing: todo === editedTodo }"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        ></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"view"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"toggle"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"checkbox"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todo.completed"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label @dblclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"editTodo(todo)"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{{ todo.title }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"destroy"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @click</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"removeTodo(todo)"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todo === editedTodo"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"edit"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todo.title"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            @vue:mounted</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"({ el }) => el.focus()"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            @blur</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"doneEdit(todo)"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            @keyup.enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"doneEdit(todo)"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            @keyup.escape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"cancelEdit(todo)"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          ></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ul</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">section</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">footer class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"footer"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">show</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todos.length"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todo-count"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">strong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ remaining }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">strong</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ remaining </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ' item'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ' items'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }} left</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ul class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"filters"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"#/all"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ selected: visibility === 'all' }"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">All</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"#/active"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ selected: visibility === 'active' }"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Active</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"#/completed"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ selected: visibility === 'completed' }"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Completed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ul</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"clear-completed"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @click</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"removeCompleted"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">show</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"todos.length > remaining"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Clear completed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">footer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">section</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@import </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"https://unpkg.com/todomvc-app-css@2.4.1/index.css"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue3 学习笔记（二）]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/vue3-study-02.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/vue3-study-02.html</guid>
            <pubDate>Sat, 23 Dec 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[# Vue3 学习笔记（二）
## 逻辑复用
### 组合式函数
在 Vue 应用的概念中，“**组合式函数**”(Composables) 是一个利用 Vue 的组合式 API 来**封装和复用有状态逻辑的函数**

- 无状态函数：复用公共任务的逻辑。例如为了在不同地方格式化时间，我们可能会抽取一个可复用的日期格式化函数。这个函数封装了无状态的逻辑：它在接收一些输入后立刻返回所期望的输出。复用无状态逻辑的库有很多，比如你可能已经用过的 [lodash](https://lodash.com/) 或是 [date-fns](https://date-fns.org/)
- 有状态函数：**有状态逻辑负责管理会随时间而变化的状态**。一个简单的例子是跟踪当前鼠标在页面中的位置

嵌套多个组合式函数：**一个组合式函数可以调用一个或多个其他的组合式函数**。这使得我们可以像使用多个组件组合成整个应用一样，用**多个较小且逻辑独立的单元**来组合形成**复杂的逻辑**

核心：抽离、封装、状态、复用

传入异步响应式参数并自动监听响应触发执行：
```typescript
// fetch.js
import { ref, watchEffect, toValue } from 'vue'

export function useFetch(url) {
  const data = ref(null)
  const error = ref(null)

  const fetchData = () => {
    // reset state before fetching..
    data.value = null
    error.value = null

    fetch(toValue(url))
      .then((res) => res.json())
      .then((json) => (data.value = json))
      .catch((err) => (error.value = err))
  }

  watchEffect(() => {
    fetchData()
  })

  return { data, error }
}
```

Vue3.3 `toValue()` 新增 API 目的：将 ref 或 getter 规范化为值。跟 unref 类似，但可以对函数特殊处理

约定和最佳实践

1. 命名：组合式函数约定用驼峰名法命名，并以“use”开头
2. 输入参数：需要考虑 ref 或 getter 的响应式参数情况，使用 `toValue()` 函数实现
```typescript
import { toValue } from 'vue'

function useFeature(maybeRefOrGetter) {
  // 如果 maybeRefOrGetter 是一个 ref 或 getter，
  // 将返回它的规范化值。
  // 否则原样返回。
  const value = toValue(maybeRefOrGetter)
}
```
注意⚠️：要么使用 `watch()` 显式地监视 ref 或 getter，要么在 `watchEffect()` 中调用 `toValue()`

3. 返回值：在组合式函数中使用 `ref()` 而不是 `reactive()`。因为组合式函数始终返回一个包含多个 ref 的普通的非响应式对象，这样该对象在组件中被解构为 ref 之后仍可以保持响应性（通过 ref 来维持这一响应性连接）：
```typescript
// x 和 y 是两个 ref
const { x, y } = useMouse()
```
当然，可以将返回的对象用 `reactive()` 包装一次，这样其中的 ref 会被自动解包：
```typescript
const mouse = reactive(useMouse())
// mouse.x 链接到了原来的 x ref
console.log(mouse.x)
```

4. 副作用：
- 如果你的应用用到了[服务端渲染](https://cn.vuejs.org/guide/scaling-up/ssr.html) (SSR)，请确保在组件挂载后才调用的生命周期钩子中执行 DOM 相关的副作用，例如：`onMounted()`。这些钩子仅会在浏览器中被调用，因此可以确保能访问到 DOM
- 确保在 `onUnmounted()` 时清理副作用。举例来说，如果一个组合式函数设置了一个事件监听器，它就应该在 `onUnmounted()` 中被移除 (就像我们在 `useMouse()` 示例中看到的一样)。当然也可以像之前的 `useEventListener()` 示例那样，使用一个组合式函数来自动帮你做这些事
5. 使用限制：
- 组合式函数只能在 `<script setup>` 或 `setup()` 钩子中被调用。在这些上下文中，它们也只能被同步调用。在某些情况下，也可以在像 `onMounted()` 这样的生命周期钩子中调用它们
   1. 将生命周期钩子注册到该组件实例上
   2. 将计算属性和监听器注册到该组件实例上，以便在该组件被卸载时停止监听，避免内存泄漏

注意⚠️：**`<script setup>` 是唯一在调用 await 之后仍可调用组合式函数的地方**。编译器会在异步操作之后自动为你恢复当前的组件实例

5. 通过抽取组合式函数改善代码结构：

抽取组合式函数不仅是为了复用，也是为了代码组织，保持足够的灵活性，基于逻辑问题将组件代码拆分成更小的函数：
```typescript
<script setup>
import { useFeatureA } from './featureA.js'
import { useFeatureB } from './featureB.js'
import { useFeatureC } from './featureC.js'

const { foo, bar } = useFeatureA()
const { baz } = useFeatureB(foo)
const { qux } = useFeatureC(baz)
</script>
```
**注意⚠️：在某种程度上，可以将这些提取出的组合式函数看作是可以相互通信的组件范围内的服务**

6. 在选项式 API 中使用组合式函数

如果使用的是选项式 API，组合式函数必须在 `setup()` 中调用。且其返回的绑定必须在 `setup()` 中返回，以便暴露给 `this` 及其模板：
```typescript
import { useMouse } from './mouse.js'
import { useFetch } from './fetch.js'

export default {
  setup() {
    const { x, y } = useMouse()
    const { data, error } = useFetch('...')
    return { x, y, data, error }
  },
  mounted() {
    // setup() 暴露的属性可以在通过 `this` 访问到
    console.log(this.x)
  }
  // ...其他选项
}
```

7. 与其他模式比较：
   1. 和 Mixin 的对比：

mixins 有三个主要的短板：

- **不清晰的数据来源**：当使用了多个 mixin 时，实例上的数据属性来自哪个 mixin 变得不清晰，这使追溯实现和理解组件行为变得困难。推荐在组合式函数中使用 ref + 解构模式的理由：让属性的来源在消费组件时一目了然；
- **命名空间冲突**：多个来自不同作者的 mixin 可能会注册相同的属性名，造成命名冲突。若使用组合式函数，可以通过在解构变量时对变量进行重命名来避免相同的键名；
- **隐式的跨 mixin 交流**：多个 mixin 需要依赖共享的属性名来进行相互作用，这使得它们隐性地耦合在一起。而一个组合式函数的返回值可以作为另一个组合式函数的参数被传入，像普通函数那样。

   2. 和无渲染组件的对比：

**组合式函数相对于无渲染组件的主要优势是**：组合式函数不会产生额外的**组件实例开销**。当在整个应用中使用时，由无渲染组件产生的额外组件实例会带来无法忽视的**性能开销**
注意⚠️：**推荐在纯逻辑复用时使用组合式函数，在需要同时复用逻辑和视图布局时使用无渲染组件**

   3. 和 React Hooks 的对比：

如果有 React 的开发经验，可能注意到组合式函数和自定义 React hooks 非常相似。**组合式 API 的一部分灵感正来自于 React hooks**，**Vue 的组合式函数也的确在逻辑组合能力上与 React hooks 相近**。然而，Vue 的组合式函数是**基于 Vue 细粒度的响应性系统**，这和 React hooks 的执行模型有本质上的不同

### 自定义指令
除了 Vue 内置的一系列指令 (比如 `v-model` 或 `v-show`) 之外，Vue 还允许你注册自定义的指令 (Custom Directives)

重用代码的方式：

- 组件；
- 组合式函数；
- 自定义指令；

一个自定义指令由一个包含类似组件生命周期钩子的对象来定义。钩子函数会接收到指令所绑定元素作为其参数：
```typescript
<script setup>
// 在模板中启用 v-focus
const vFocus = {
  mounted: (el) => el.focus()
}
</script>

<template>
  <input v-focus />
</template>

// 另一种写法
  export default {
  setup() {
    /*...*/
  },
  directives: {
    // 在模板中启用 v-focus
    focus: {
      /* ... */
    }
  }
}

// 全局注册
const app = createApp({})

// 使 v-focus 在所有组件中都可用
app.directive('focus', {
  /* ... */
})
```
注意⚠️：

- **在 `<script setup>` 中，任何以 v 开头的驼峰式命名的变量都可以被用作一个自定义指令**。在上面的例子中，vFocus 即可以在模板中以 `v-focus` 的形式使用
- **只有当所需功能只能通过直接的 DOM 操作来实现时，才应该使用自定义指令**。其他情况下应该尽可能地使用 v-bind 这样的内置指令来声明式地使用模板，这样更高效，也对服务端渲染更友好

指令钩子：
一个指令的定义对象可以提供几种钩子函数 (都是可选的)：
```typescript
const myDirective = {
  // 在绑定元素的 attribute 前
  // 或事件监听器应用前调用
  created(el, binding, vnode, prevVnode) {
    // 下面会介绍各个参数的细节
  },
  // 在元素被插入到 DOM 前调用
  beforeMount(el, binding, vnode, prevVnode) {},
  // 在绑定元素的父组件
  // 及他自己的所有子节点都挂载完成后调用
  mounted(el, binding, vnode, prevVnode) {},
  // 绑定元素的父组件更新前调用
  beforeUpdate(el, binding, vnode, prevVnode) {},
  // 在绑定元素的父组件
  // 及他自己的所有子节点都更新后调用
  updated(el, binding, vnode, prevVnode) {},
  // 绑定元素的父组件卸载前调用
  beforeUnmount(el, binding, vnode, prevVnode) {},
  // 绑定元素的父组件卸载后调用
  unmounted(el, binding, vnode, prevVnode) {}
}
```
钩子参数：
指令的钩子会传递以下几种参数：

- el：指令绑定到的元素。这可以用于直接操作 DOM。
- binding：一个对象，包含以下属性。
   - value：传递给指令的值。例如在 v-my-directive="1 + 1" 中，值是 2。
   - oldValue：之前的值，仅在 beforeUpdate 和 updated 中可用。无论值是否更改，它都可用。
   - arg：传递给指令的参数 (如果有的话)。例如在 v-my-directive:foo 中，参数是 "foo"。
   - modifiers：一个包含修饰符的对象 (如果有的话)。例如在 v-my-directive.foo.bar 中，修饰符对象是 { foo: true, bar: true }。
   - instance：使用该指令的组件实例。
   - dir：指令的定义对象。
- vnode：代表绑定元素的底层 VNode。
- prevNode：代表之前的渲染中指令所绑定元素的 VNode。仅在 beforeUpdate 和 updated 钩子中可用。
```typescript
<div v-example:foo.bar="baz">
// 动态参数
// <div v-example:[arg]="value"></div>
// 注意⚠️：这里指令的参数会基于组件的 arg 数据属性响应式地更新

// 获取到的参数
{
  arg: 'foo',
  modifiers: { bar: true },
  value: /* `baz` 的值 */,
  oldValue: /* 上一次更新时 `baz` 的值 */
}
```
注意⚠️：**除了 el 外，其他参数都是只读的，不要更改它们**。若你需要在不同的钩子间共享信息，推荐通过元素的 [dataset](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset) attribute 实现

简化形式：
对于自定义指令来说，一个很常见的情况是仅仅需要在 mounted 和 updated 上实现相同的行为，除此之外并不需要其他钩子。这种情况下我们可以直接用一个函数来定义指令：
```typescript
<div v-color="color"></div>

// 实现
app.directive('color', (el, binding) => {
  // 这会在 `mounted` 和 `updated` 时都调用
  el.style.color = binding.value
})
```

对象字面量：
如果你的指令需要多个值，你可以向它传递一个 JavaScript 对象字面量。别忘了，指令也可以接收任何合法的 JavaScript 表达式：
```typescript
<div v-demo="{ color: 'white', text: 'hello!' }"></div>

app.directive('demo', (el, binding) => {
  console.log(binding.value.color) // => "white"
  console.log(binding.value.text) // => "hello!"
})
```

组件上使用：
当在组件上使用自定义指令时，它会始终应用于组件的根节点，和[透传 attributes](https://cn.vuejs.org/guide/components/attrs.html) 类似：
```typescript
<MyComponent v-demo="test" />

// <!-- MyComponent 的模板 -->
<div> <!-- v-demo 指令会被应用在此处 -->
  <span>My component content</span>
</div>
```
注意⚠️**：当应用到一个多根组件时，指令将会被忽略且抛出一个警告。和 attribute 不同，指令不能通过 v-bind="$attrs" 来传递给一个不同的元素**。**总的来说，不推荐在组件上使用自定义指令**

### 插件
插件 (Plugins) 是一种能**为 Vue 添加全局功能的工具代码**
```typescript
import { createApp } from 'vue'

const app = createApp({})

app.use(myPlugin, {
  /* 可选的选项 */
})
```
一个插件可以是一个拥有 `install()` 方法的对象，也可以直接是一个安装函数本身。安装函数会接收到安装它的[应用实例](https://cn.vuejs.org/api/application.html)和传递给 `app.use()` 的额外选项作为参数：
```typescript
const myPlugin = {
  install(app, options) {
    // 配置此应用
  }
}
```
插件使用场景：

1. 通过 `app.component()` 和 `app.directive()` 注册一个到多个全局组件或自定义指令；
2. 通过 `app.provide()` 和使一个资源可被注入进整个应用；
3. 向 `app.config.globalProperties` 中添加一些全局实例属性和方法；
4. 一个可能上述三种都包含了的功能库，比如 `vue-router`；

编写一个插件：

1. 创建入口文件：
```typescript
// plugins/i18n.js
export default {
  install: (app, options) => {
    // 在这里编写插件代码
  }
}
```

2. 使用方式：
```typescript
<h1>{{ $translate('greetings.hello') }}</h1>
```

3. 全局使用，在插件中将它添加到 `app.config.globalProperties` 上实现：
```typescript
// plugins/i18n.js
export default {
  install: (app, options) => {
    // 注入一个全局可用的 $translate() 方法
    app.config.globalProperties.$translate = (key) => {
      // 获取 `options` 对象的深层属性
      // 使用 `key` 作为索引
      return key.split('.').reduce((o, i) => {
        if (o) return o[i]
      }, options)
    }
  }
}
```

4. 注册传入翻译文件信息：
```typescript
import i18nPlugin from './plugins/i18n'

app.use(i18nPlugin, {
  greetings: {
    hello: 'Bonjour!'
  }
})
```
注意⚠️：请谨慎使用全局属性，如果在整个应用中使用不同插件注入的太多全局属性，很容易让应用变得难以理解和维护

插件中的 `Provide/Inject`：
通过 provide 来为插件用户供给一些内容
```typescript
// plugins/i18n.js
export default {
  install: (app, options) => {
    app.provide('i18n', options)
  }
}
```
使用方：
```typescript
<script setup>
import { inject } from 'vue'

const i18n = inject('i18n')

console.log(i18n.greetings.hello)
</script>
```

## 内置组件
### Transition
Vue 提供了两个内置组件，可以帮助你制作基于状态变化的过渡和动画：

- `<Transition>` 会在一个元素或组件进入和离开 DOM 时应用动画；
- `<TransitionGroup>` 会在一个 `v-for` 列表中的元素或组件被插入，移动，或移除时应用动画；

除了这两个组件，我们也可以通过其他技术手段来应用动画，比如切换 CSS class 或用状态绑定样式来驱动动画
可以将进入和离开动画应用到通过默认插槽传递给它的元素或组件上。进入或离开可以由以下的条件之一触发：

- 由 `v-if` 所触发的切换；
- 由 `v-show` 所触发的切换；
- 有特殊元素 `<component>` 切换的动作组件；
- 改变特殊的 key 属性；

```typescript
<button @click="show = !show">Toggle</button>
<Transition>
  <p v-if="show">hello</p>
</Transition>

/* 下面我们会解释这些 class 是做什么的 */
.v-enter-active,
.v-leave-active {
  transition: opacity 0.5s ease;
}

.v-enter-from,
.v-leave-to {
  opacity: 0;
}
```

注意⚠️：`<Transition>` 仅支持单个元素或组件作为其插槽内容。如果内容是一个组件，这个组件必须仅有一个根元素

当一个 `<Transition>` 组件中的元素被插入或移除时，会发生下面这些事情：

1. Vue 会自动检测目标元素是否应用了 CSS 过渡或动画。如果是，则一些 [CSS 过渡 class](https://cn.vuejs.org/guide/built-ins/transition.html#transition-classes) 会在适当的时机被添加和移除；
2. 如果有作为监听器的 [JavaScript 钩子](https://cn.vuejs.org/guide/built-ins/transition.html#javascript-hooks)，这些钩子函数会在适当时机被调用；
3. 如果没有探测到 CSS 过渡或动画、也没有提供 JavaScript 钩子，那么 DOM 的插入、删除操作将在浏览器的下一个动画帧后执行；

基于 CSS 的过渡效果：
一共有 6 个应用于进入与离开过渡效果的 CSS `class`：

<CustomImage src='/growth-record/frame/vue/vue3study09.webp' />

1. `v-enter-from`：进入动画的起始状态。在元素插入之前添加，在元素插入完成后的下一帧移除。
2. `v-enter-active`：进入动画的生效状态。应用于整个进入动画阶段。在元素被插入之前添加，在过渡或动画完成之后移除。这个 `class` 可以被用来定义进入动画的持续时间、延迟与速度曲线类型。
3. `v-enter-to`：进入动画的结束状态。在元素插入完成后的下一帧被添加 (也就是 `v-enter-from` 被移除的同时)，在过渡或动画完成之后移除。
4. `v-leave-from`：离开动画的起始状态。在离开过渡效果被触发时立即添加，在一帧后被移除。
5. `v-leave-active`：离开动画的生效状态。应用于整个离开动画阶段。在离开过渡效果被触发时立即添加，在过渡或动画完成之后移除。这个 `class` 可以被用来定义离开动画的持续时间、延迟与速度曲线类型。
6. `v-leave-to`：离开动画的结束状态。在一个离开动画被触发后的下一帧被添加 (也就是 `v-leave-from` 被移除的同时)，在过渡或动画完成之后移除。

`v-enter-active` 和 `v-leave-active` 给我们提供了为进入和离开动画指定不同速度曲线的能力

为过渡效果命名：给 `<Transition>` 组件传一个 name prop 来声明一个过渡效果名

```typescript
<Transition name="fade">
  ...
</Transition>
```

注意⚠️：对于一个有名字的过渡效果，对它起作用的过渡 `class` 会以其名字而不是 v 作为前缀。比如，上方例子中被应用的 `class` 将会是 `fade-enter-active` 而不是 `v-enter-active`。这个“fade”过渡的 `class` 应该是这样：

```typescript
.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.5s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}
```

CSS 的 transition：
`<Transition>` 一般都会搭配[原生 CSS 过渡](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions)一起使用，正如你在上面的例子中所看到的那样。这个 transition CSS 属性是一个简写形式，使我们可以一次定义一个过渡的各个方面，包括需要执行动画的属性、持续时间和[速度曲线](https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function)：

```typescript
<Transition name="slide-fade">
  <p v-if="show">hello</p>
</Transition>

/*
  进入和离开动画可以使用不同
  持续时间和速度曲线。
*/
.slide-fade-enter-active {
  transition: all 0.3s ease-out;
}

.slide-fade-leave-active {
  transition: all 0.8s cubic-bezier(1, 0.5, 0.8, 1);
}

.slide-fade-enter-from,
.slide-fade-leave-to {
  transform: translateX(20px);
  opacity: 0;
}
```

CSS 的 animation：
[原生 CSS 动画](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations)和 CSS transition 的应用方式基本上是相同的，只有一点不同，那就是 *-enter-from 不是在元素插入后立即移除，而是在一个 animationend 事件触发时被移除：

```typescript
<Transition name="bounce">
  <p v-if="show" style="text-align: center;">
    Hello here is some bouncy text!
  </p>
</Transition>

.bounce-enter-active {
  animation: bounce-in 0.5s;
}
.bounce-leave-active {
  animation: bounce-in 0.5s reverse;
}
@keyframes bounce-in {
  0% {
    transform: scale(0);
  }
  50% {
    transform: scale(1.25);
  }
  100% {
    transform: scale(1);
  }
}
```

自定义过渡 `class：`
`<Transition>` 传递以下的 props 来指定自定义的过渡 `class：`

- `enter-from-class`
- `enter-active-class`
- `enter-to-class`
- `leave-from-class`
- `leave-active-class`
- `leave-to-class`

传入的这些 `class` 会覆盖相应阶段的默认 `class` 名。这个功能在你想要在 Vue 的动画机制下集成其他的第三方 CSS 动画库时非常有用，比如 [`Animate.css`](https://daneden.github.io/animate.css/)：

```typescript
<!-- 假设你已经在页面中引入了 Animate.css -->
<Transition
  name="custom-classes"
  enter-active-class="animate__animated animate__tada"
  leave-active-class="animate__animated animate__bounceOutRight"
>
  <p v-if="show">hello</p>
</Transition>
```

同时使用 transition 和 animation：
**Vue 需要附加事件监听器，以便知道过渡何时结束**。可以是 transitionend 或 animationend，这取决于你所应用的 CSS 规则。如果你仅仅使用二者的其中之一，Vue 可以自动探测到正确的类型。
然而在某些场景中，你或许想要在同一个元素上同时使用它们两个。举例来说，**Vue 触发了一个 CSS 动画，同时鼠标悬停触发另一个 CSS 过渡。此时你需要显式地传入 `type prop` 来声明，告诉 Vue 需要关心哪种类型，传入的值是 animation 或 transition**：

```typescript
<Transition type="animation">...</Transition>
```

深层级过渡与显示过渡时长：
尽管过渡 `class` 仅能应用在 `<Transition>` 的直接子元素上，我们还是可以使用深层级的 CSS 选择器，在深层级的元素上触发过渡效果：

```typescript
<Transition name="nested">
  <div v-if="show" class="outer">
    <div class="inner">
      Hello
    </div>
  </div>
</Transition>

/* 应用于嵌套元素的规则 */
.nested-enter-active .inner,
.nested-leave-active .inner {
  transition: all 0.3s ease-in-out;
}

.nested-enter-from .inner,
.nested-leave-to .inner {
  transform: translateX(30px);
  opacity: 0;
}

/* ... 省略了其他必要的 CSS */
```

甚至可以在深层元素上添加一个过渡延迟，从而创建一个带渐进延迟的动画序列：

```typescript
/* 延迟嵌套元素的进入以获得交错效果 */
.nested-enter-active .inner {
  transition-delay: 0.25s;
}
```

默认情况下，`<Transition>` 组件会通过监听过渡根元素上的第一个 transitionend 或者 animationend 事件来尝试自动判断过渡何时结束。而在嵌套的过渡中，期望的行为应该是等待所有内部元素的过渡完成。在这种情况下，你可以通过向 `<Transition>` 组件传入 duration prop 来显式指定过渡的持续时间 (以毫秒为单位)。总持续时间应该匹配延迟加上内部元素的过渡持续时间：

```typescript
<Transition :duration="550">...</Transition>

<Transition :duration="{ enter: 500, leave: 800 }">...</Transition>
```

性能考量：
动画所用到的 CSS 属性大多是 transform 和 opacity 之类的。用这些属性制作动画非常高效，因为：

1. 他们在动画过程中不会影响到 DOM 结构，因此不会每一帧都触发昂贵的 CSS 布局重新计算。
2. 大多数的现代浏览器都可以在执行 transform 动画时利用 GPU 进行硬件加速。

相比之下，**像 `height` 或者 `margin` 这样的属性会触发 CSS 布局变动**，因此执行它们的动画效果更昂贵，需要谨慎使用。我们可以在** **[**`CSS-Triggers`**](https://csstriggers.com/)** 这类的网站查询哪些属性会在执行动画时触发 CSS 布局变动**

JavaScript 钩子：

```typescript
<Transition
  @before-enter="onBeforeEnter"
  @enter="onEnter"
  @after-enter="onAfterEnter"
  @enter-cancelled="onEnterCancelled"
  @before-leave="onBeforeLeave"
  @leave="onLeave"
  @after-leave="onAfterLeave"
  @leave-cancelled="onLeaveCancelled"
>
  <!-- ... -->
</Transition>

// 在元素被插入到 DOM 之前被调用
// 用这个来设置元素的 "enter-from" 状态
function onBeforeEnter(el) {}

// 在元素被插入到 DOM 之后的下一帧被调用
// 用这个来开始进入动画
function onEnter(el, done) {
  // 调用回调函数 done 表示过渡结束
  // 如果与 CSS 结合使用，则这个回调是可选参数
  done()
}

// 当进入过渡完成时调用。
function onAfterEnter(el) {}

// 当进入过渡在完成之前被取消时调用
function onEnterCancelled(el) {}

// 在 leave 钩子之前调用
// 大多数时候，你应该只会用到 leave 钩子
function onBeforeLeave(el) {}

// 在离开过渡开始时调用
// 用这个来开始离开动画
function onLeave(el, done) {
  // 调用回调函数 done 表示过渡结束
  // 如果与 CSS 结合使用，则这个回调是可选参数
  done()
}

// 在离开过渡完成、
// 且元素已从 DOM 中移除时调用
function onAfterLeave(el) {}

// 仅在 v-show 过渡中可用
function onLeaveCancelled(el) {}
```

注意⚠️：在使用仅由 JavaScript 执行的动画时，最好是添加一个 `:css="false"` prop。这显式地向 Vue 表明可以跳过对 CSS 过渡的自动探测。除了性能稍好一些之外，还可以防止 CSS 规则意外地干扰过渡效果：

```typescript
<Transition
  ...
  :css="false"
>
  ...
</Transition>
```

在有了 `:css="false"` 后，我们就自己全权负责控制什么时候过渡结束了。这种情况下对于 `@enter` 和 `@leave` 钩子来说，回调函数 done 就是必须的。否则，钩子将被同步调用，过渡将立即完成
注意⚠️：使用 [GreenSock 库](https://greensock.com/)执行动画的一个示例，你也可以使用任何你想要的库，比如 [`Anime.js`](https://animejs.com/) 或者 [Motion One](https://motion.dev/)

可复用过渡效果：
要创建一个可被复用的过渡，我们需要为 `<Transition>` 组件创建一个包装组件，并向内传入插槽内容：

```typescript
<!-- MyTransition.vue -->
<script>
// JavaScript 钩子逻辑...
</script>

<template>
  <!-- 包装内置的 Transition 组件 -->
  <Transition
    name="my-transition"
    @enter="onEnter"
    @leave="onLeave">
    <slot></slot> <!-- 向内传递插槽内容 -->
  </Transition>
</template>

<style>
/*
  必要的 CSS...
  注意：避免在这里使用 <style scoped>
  因为那不会应用到插槽内容上
*/
</style>

// 使用
<MyTransition>
  <div v-if="show">Hello</div>
</MyTransition>
```

出现时过渡：

```typescript
<Transition appear>
  ...
</Transition>
```

元素间过渡：
**除了通过 `v-if / v-show` 切换一个元素，也可以通过 `v-if / v-else / v-else-if` 在几个组件间进行切换，只要确保任一时刻只会有一个元素被渲染即可：**

```typescript
<Transition>
  <button v-if="docState === 'saved'">Edit</button>
  <button v-else-if="docState === 'edited'">Save</button>
  <button v-else-if="docState === 'editing'">Cancel</button>
</Transition>
```

过渡模式：
注意⚠️：**进入和离开的元素都是在同时开始动画的，因此不得不将它们设为 `position: absolute` 以避免二者同时存在时出现的布局问题**

很多情况下这可能并不符合需求。我们可能想要先执行离开动画，然后在其完成之后再执行元素的进入动画。手动编排这样的动画是非常复杂的，好在我们可以通过向 `<Transition>` 传入一个 `mode prop` 来实现这个行为：

```typescript
<Transition mode="out-in">
  ...
</Transition>
```

组件间过渡：

```typescript
<Transition name="fade" mode="out-in">
  <component :is="activeComponent"></component>
</Transition>
```

动态过渡：
`<Transition>` 的 props (比如 name) 也可以是动态的！这让我们可以根据状态变化动态地应用不同类型的过渡：

```typescript
<Transition :name="transitionName">
  <!-- ... -->
</Transition>
```

这个特性的用处是可以提前定义好多组 CSS 过渡或动画的 `class`，然后在它们之间动态切换。
你也可以根据你的组件的当前状态在 JavaScript 过渡钩子中应用不同的行为。最后，**创建动态过渡的终极方式还是创建**[**可复用的过渡组件**](https://cn.vuejs.org/guide/built-ins/transition.html#reusable-transitions)，并让这些组件根据动态的 `props` 来改变过渡的效果

### TransitionGroup
`<TransitionGroup>` 是一个内置组件，用于对 `v-for` 列表中的元素或组件的插入、移除和顺序改变添加动画效果

和 `<Transition>` 的区别：
`<TransitionGroup>` 支持和 `<Transition>` 基本相同的 `props`、CSS 过渡 class 和 JavaScript 钩子监听器，但有以下几点区别：

- 默认情况下，**它不会渲染一个容器元素。但你可以通过传入 `tag prop` 来指定一个元素作为容器元素来渲染**。
- [**过渡模式**](https://cn.vuejs.org/guide/built-ins/transition.html#transition-modes)**在这里不可用，因为我们不再是在互斥的元素之间进行切换**。
- 列表中的每个元素都必须有一个**独一无二的 `key attribute`**。
- CSS 过渡 `class` 会被应用在列表内的元素上，而不是容器元素上。

注意⚠️：当在 [DOM 内模板](https://cn.vuejs.org/guide/essentials/component-basics.html#in-dom-template-parsing-caveats)中使用时，组件名需要写为 `<transition-group>`

进入/离开动画：

```typescript
<TransitionGroup name="list" tag="ul">
  <li v-for="item in items" :key="item">
    {{ item }}
  </li>
</TransitionGroup>

.list-enter-active,
.list-leave-active {
  transition: all 0.5s ease;
}
.list-enter-from,
.list-leave-to {
  opacity: 0;
  transform: translateX(30px);
}
```

移除动画：
上面的示例有一些明显的缺陷：当某一项被插入或移除时，它周围的元素会立即发生“跳跃”而不是平稳地移动。可以通过添加一些额外的 CSS 规则来解决这个问题：

```typescript
.list-move, /* 对移动中的元素应用的过渡 */
.list-enter-active,
.list-leave-active {
  transition: all 0.5s ease;
}

.list-enter-from,
.list-leave-to {
  opacity: 0;
  transform: translateX(30px);
}

/* 确保将离开的元素从布局流中删除
  以便能够正确地计算移动的动画。 */
.list-leave-active {
  position: absolute;
}
```

渐进延迟列表动画：
通过在 JavaScript 钩子中读取元素的 `data attribute`，我们可以实现带渐进延迟的列表动画。首先，我们把每一个元素的索引渲染为该元素上的一个 `data attribute`：

```typescript
<TransitionGroup
  tag="ul"
  :css="false"
  @before-enter="onBeforeEnter"
  @enter="onEnter"
  @leave="onLeave"
>
  <li
    v-for="(item, index) in computedList"
    :key="item.msg"
    :data-index="index"
  >
    {{ item.msg }}
  </li>
</TransitionGroup>
```

接着，在 JavaScript 钩子中，我们基于当前元素的 `data attribute` 对该元素的进场动画添加一个延迟。以下是一个基于** **[**GreenSock library**](https://greensock.com/)** （官网动画效果驱动贼好看，值得学习）**的动画示例：

```typescript
function onEnter(el, done) {
  gsap.to(el, {
    opacity: 1,
    height: '1.6em',
    delay: el.dataset.index * 0.15,
    onComplete: done
  })
}
```

### KeepAlive
功能是在多个组件间动态切换时缓存被移除的组件实例

动态组件中：

```typescript
<component :is="activeComponent" />
```

默认情况下，**一个组件实例在被替换掉后会被销毁。这会导致它丢失其中所有已变化的状态——当这个组件再一次被显示时，会创建一个只带有初始状态的新实例**

```typescript
<!-- 非活跃的组件将会被缓存！ -->
<KeepAlive>
  <component :is="activeComponent" />
</KeepAlive>
```

注意⚠️：在 [DOM 内模板](https://cn.vuejs.org/guide/essentials/component-basics.html#in-dom-template-parsing-caveats)中使用时，它应该被写为 `<keep-alive>`

包含/排除：
`<KeepAlive>` 默认会缓存内部的所有组件实例，但可以通过 **`include`** 和 **`exclude` prop **来定制该行为。这两个 prop 的值都可以是一个以**英文逗号分隔的字符串**、**一个正则表达式**，或是**包含这两种类型的一个数组**：

```typescript
<!-- 以英文逗号分隔的字符串 -->
<KeepAlive include="a,b">
  <component :is="view" />
</KeepAlive>

<!-- 正则表达式 (需使用 `v-bind`) -->
<KeepAlive :include="/a|b/">
  <component :is="view" />
</KeepAlive>

<!-- 数组 (需使用 `v-bind`) -->
<KeepAlive :include="['a', 'b']">
  <component :is="view" />
</KeepAlive>
```

注意⚠️：

- **它会根据组件的 **[**name**](https://cn.vuejs.org/api/options-misc.html#name)** 选项进行匹配，所以组件如果想要条件性地被 `KeepAlive` 缓存，就必须显式声明一个 name 选项**
- **在 3.2.34 或以上的版本中，使用 `<script setup>` 的单文件组件会自动根据文件名生成对应的 name 选项，无需再手动声明**

最大缓存实例数：
可以通过传入 **`max prop`** 来限制可被缓存的最大组件实例数。`<KeepAlive>` 的行为在指定了 max 后类似一个 [LRU 缓存](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU))：如果缓存的实例数量即将超过指定的那个最大数量，则最久没有被访问的缓存实例将被销毁，以便为新的实例腾出空间：

```typescript
<KeepAlive :max="10">
  <component :is="activeComponent" />
</KeepAlive>
```

缓存实例的生命周期：
当一个组件实例从 DOM 上移除但因为被 `<KeepAlive>` 缓存而仍作为组件树的一部分时，它将变为不活跃状态而不是被卸载。当一个组件实例作为缓存树的一部分插入到 DOM 中时，它将重新被激活

一个持续存在的组件可以通过 [`onActivated()`](https://cn.vuejs.org/api/composition-api-lifecycle.html#onactivated) 和 [`onDeactivated()`](https://cn.vuejs.org/api/composition-api-lifecycle.html#ondeactivated) 注册相应的两个状态的生命周期钩子：

```typescript
<script setup>
import { onActivated, onDeactivated } from 'vue'

onActivated(() => {
  // 调用时机为首次挂载
  // 以及每次从缓存中被重新插入时
})

onDeactivated(() => {
  // 在从 DOM 上移除、进入缓存
  // 以及组件卸载时调用
})
</script>
```

注意⚠️：

- `onActivated` 在组件挂载时也会调用，并且 `onDeactivated` 在组件卸载时也会调用；
- **这两个钩子不仅适用于 `<KeepAlive>` 缓存的根组件，也适用于缓存树中的后代组件；**

### Teleport
可以将一个组件内部的一部分模板“传送”到该组件的 DOM 结构外层的位置去
`<Teleport>` 接收一个 to prop 来指定传送的目标。to 的值可以是一个 CSS 选择器字符串，也可以是一个 DOM 元素对象。这段代码的作用就是告诉 Vue“把以下模板片段传送到 body 标签下”

也可以将 `<Teleport>` 和 [`<Transition>`](https://cn.vuejs.org/guide/built-ins/transition.html) 结合使用来创建一个带动画的模态框。你可以看看[这个示例](https://cn.vuejs.org/examples/#modal)
注意⚠️：**`<Teleport>` 挂载时，传送的 to 目标必须已经存在于 DOM 中**。理想情况下，这应该是整个 Vue 应用 DOM 树外部的一个元素。**如果目标元素也是由 Vue 渲染的，你需要确保在挂载 `<Teleport>` 之前先挂载该元素**

搭配组件使用：
`<Teleport>` 只改变了渲染的 DOM 结构，它不会影响组件间的逻辑关系。也就是说，如果 `<Teleport>` 包含了一个组件，那么该组件始终和这个使用了 `<teleport>` 的组件保持逻辑上的父子关系。传入的 props 和触发的事件也会照常工作。
这也意味着来自父组件的注入也会按预期工作，子组件将在 Vue Devtools 中嵌套在父级组件下面，而不是放在实际内容移动到的地方

禁用 Teleport：

```typescript
<Teleport :disabled="isMobile">
  ...
</Teleport>
```

多个 Teleport 共享目标：
一个可重用的模态框组件可能同时存在多个实例。对于此类场景，多个 `<Teleport>` 组件可以将其内容挂载在同一个目标元素上，而顺序就是简单的顺次追加，后挂载的将排在目标元素下更后面的位置上：

```typescript
<Teleport to="#modals">
  <div>A</div>
</Teleport>
<Teleport to="#modals">
  <div>B</div>
</Teleport>

// 渲染后：
<div id="modals">
  <div>A</div>
  <div>B</div>
</div>
```

### Suspense
**用来在组件树中协调对异步依赖的处理**。它让我们可以在组件树上层等待下层的多个嵌套异步依赖项解析完成，并可以在等待时渲染一个加载状态

异步依赖：
比如组件层级结构：
```typescript
<Suspense>
└─ <Dashboard>
   ├─ <Profile>
   │  └─ <FriendStatus>（组件有异步的 setup()）
   └─ <Content>
      ├─ <ActivityFeed> （异步组件）
      └─ <Stats>（异步组件）
```

在这个组件树中有多个嵌套组件，要渲染出它们，首先得解析一些异步资源。如果没有 `<Suspense>`，则它们每个都需要处理自己的加载、报错和完成状态。在最坏的情况下，我们可能会在页面上看到三个旋转的加载态，在不同的时间显示出内容
有了 `<Suspense>` 组件后，就可以在**等待整个多层级组件树中的各个异步依赖获取结果时，在顶层展示出加载中或加载失败的状态**

`<Suspense>` 可以等待的异步依赖有两种：

1. **带有异步 `setup()` 钩子的组件**。**这也包含了使用 `<script setup>` 时有顶层 `await` 表达式的组件**。
2. [异步组件](https://cn.vuejs.org/guide/components/async.html)。

`async setup()`：组合式 API 使用顶层的异步

```typescript

// 第一种写法：
export default {
  async setup() {
    const res = await fetch(...)
    const posts = await res.json()
    return {
      posts
    }
  }
}

// 第二种写法：
<script setup>
const res = await fetch(...)
const posts = await res.json()
</script>

<template>
  {{ posts }}
</template>
```

注意⚠️：**如果使用 `<script setup>`，那么顶层 await 表达式会自动让该组件成为一个异步依赖**

异步组件：
异步组件默认就是“suspensible”的。这意味着如果组件**关系链**上有一个 `<Suspense>`，那么这个**异步组件就会被当作这个 `<Suspense>` 的一个异步依赖**。在这种情况下，加载状态是由 `<Suspense>` 控制，而该组件自己的加载、报错、延时和超时等选项都将被忽略
注意⚠️：异步组件也可以通过在选项中指定 `suspensible: false` 表明不用 Suspense 控制，并让组件始终自己控制其加载状态

加载中状态：
`<Suspense>` 组件有两个插槽：**`#default` 和` #fallback`**。两个插槽都只允许一个直接子节点。在可能的时候都将显示默认槽中的节点。否则将显示后备槽中的节点

```typescript
<Suspense>
  <!-- 具有深层异步依赖的组件 -->
  <Dashboard />

  <!-- 在 #fallback 插槽中显示 “正在加载中” -->
  <template #fallback>
    Loading...
  </template>
</Suspense>
```

在初始渲染时，`<Suspense>` 将在内存中渲染其默认的插槽内容。如果在这个过程中遇到任何异步依赖，则会进入挂起状态。在挂起状态期间，展示的是后备内容。当所有遇到的异步依赖都完成后，`<Suspense>` 会进入完成状态，并将展示出默认插槽的内容

注意⚠️：

- 如果在初次渲染时没有遇到异步依赖，`<Suspense>` 会直接进入完成状态
- 进入完成状态后，只有当默认插槽的根节点被替换时，`<Suspense>` 才会回到挂起状态。组件树中新的更深层次的异步依赖不会造成 `<Suspense>` 回退到挂起状态
- 发生回退时，后备内容不会立即展示出来。相反，`<Suspense>` 在等待新内容和异步依赖完成时，会展示之前 #default 插槽的内容。这个行为可以通过一个 timeout prop 进行配置：在等待渲染新内容耗时超过 timeout 之后，`<Suspense>` 将会切换为展示后备内容。若 timeout 值为 0 将导致在替换默认内容时立即显示后备内容

事件：
`<Suspense>` 组件会触发三个事件：**pending、resolve 和 fallback**。pending 事件是在进入挂起状态时触发。resolve 事件是在 default 插槽完成获取新内容时触发。fallback 事件则是在 fallback 插槽的内容显示时触发
例如，可以使用这些事件在加载新组件时在之前的 DOM 最上层显示一个加载指示器

错误处理：
`<Suspense>` **组件自身目前还不提供错误处理**，**不过你可以使用 **[**`errorCaptured`**](https://cn.vuejs.org/api/options-lifecycle.html#errorcaptured)** 选项或者 **[**`onErrorCaptured()`**](https://cn.vuejs.org/api/composition-api-lifecycle.html#onerrorcaptured)** 钩子，在使用到 `<Suspense>` 的父组件中捕获和处理异步错误**

和其他组件结合：
常常会**将 `<Suspense>` 和 **[**`<Transition>`**](https://cn.vuejs.org/guide/built-ins/transition.html)**、**[**`<KeepAlive>`**](https://cn.vuejs.org/guide/built-ins/keep-alive.html)** 等组件结合**。要保证这些组件都能正常工作，嵌套的顺序非常重要
另外，这些组件都通常与 [Vue Router](https://router.vuejs.org/zh/) 中的 `<RouterView>` 组件结合使用

```typescript
<RouterView v-slot="{ Component }">
  <template v-if="Component">
    <Transition mode="out-in">
      <KeepAlive>
        <Suspense>
          <!-- 主要内容 -->
          <component :is="Component"></component>

          <!-- 加载中状态 -->
          <template #fallback>
            正在加载...
          </template>
        </Suspense>
      </KeepAlive>
    </Transition>
  </template>
</RouterView>
```

Vue Router 使用动态导入对[懒加载组件](https://router.vuejs.org/zh/guide/advanced/lazy-loading.html)进行了内置支持。这些与异步组件不同，目前他们不会触发 `<Suspense>`。但是，它们仍然可以有异步组件作为后代，这些组件可以照常触发 `<Suspense>`

## 应用规模化
### 单文件组件
Vue 的单文件组件 (即 *.vue 文件，英文 Single-File Component，简称 SFC) 是一种特殊的文件格式，使我们能够将一个 Vue 组件的模板、逻辑与样式封装在单个文件中
`<template>`、`<script>` 和 `<style>` 三个块在同一个文件中封装、组合了组件的视图、逻辑和样式。完整的语法定义可以查阅 [SFC 语法说明](https://cn.vuejs.org/api/sfc-spec.html)

为什么要使用 SFC：
使用 SFC 必须使用构建工具，但作为回报带来了以下优点：

- 使用熟悉的 HTML、CSS 和 JavaScript 语法编写模块化的组件
- [让本来就强相关的关注点自然内聚](https://cn.vuejs.org/guide/scaling-up/sfc.html#what-about-separation-of-concerns)
- 预编译模板，避免运行时的编译开销
- [组件作用域的 CSS](https://cn.vuejs.org/api/sfc-css-features.html)
- [在使用组合式 API 时语法更简单](https://cn.vuejs.org/api/sfc-script-setup.html)
- 通过交叉分析模板和逻辑代码能进行更多编译时优化
- [更好的 IDE 支持](https://cn.vuejs.org/guide/scaling-up/tooling.html#ide-support)，提供自动补全和对模板中表达式的类型检查
- 开箱即用的模块热更新 (HMR) 支持

SFC 是 Vue 框架提供的一个功能，并且在下列场景中都是官方推荐的项目组织方式：

- 单页面应用 (SPA)
- 静态站点生成 (SSG)
- 任何值得引入构建步骤以获得更好的开发体验 (DX) 的项目

当然，在一些轻量级场景下使用 SFC 会显得有些杀鸡用牛刀。因此 Vue 同样也可以在无构建步骤的情况下以纯 JavaScript 方式使用。如果你的用例只需要给静态 HTML 添加一些简单的交互，你可以看看 [petite-vue](https://github.com/vuejs/petite-vue)，它是一个 6 kB 左右、预优化过的 Vue 子集，更适合渐进式增强的需求

SFC 是如何工作的：
Vue SFC 是一个框架指定的文件格式，因此必须交由 [`@vue/compiler-sfc`](https://github.com/vuejs/core/tree/main/packages/compiler-sfc) 编译为标准的 JavaScript 和 CSS，**一个编译后的 SFC 是一个标准的 JavaScript(ES) 模块**，这也意味着在构建配置正确的前提下，你可以像导入其他 ES 模块一样导入 SFC：
```typescript
import MyComponent from './MyComponent.vue'

export default {
  components: {
    MyComponent
  }
}
```
SFC 中的 `<style>` 标签一般会在开发时注入成原生的 `<style>` 标签以支持热更新，而**生产环境下它们会被抽取、合并成单独的 CSS 文件**

在实际项目中，一般会使用集成了 SFC 编译器的构建工具，比如 [Vite](https://cn.vitejs.dev/) 或者 [Vue CLI](https://cli.vuejs.org/zh/) (基于 [webpack](https://webpack.js.org/))，Vue 官方也提供了脚手架工具来帮助你尽可能快速地上手开发 SFC。更多细节请查看 [SFC 工具链](https://cn.vuejs.org/guide/scaling-up/tooling.html)章节

如何看待关注点分离：

- 一些有着传统 Web 开发背景的用户可能会因为 SFC 将不同的关注点集合在一处而有所顾虑，觉得 HTML/CSS/JS 应当是分离开的！
- 要回答这个问题，我们必须对这一点达成共识：**前端开发的关注点不是完全基于文件类型分离的。前端工程化的最终目的都是为了能够更好地维护代码**。**关注点分离不应该是教条式地将其视为文件类型的区别和分离，仅仅这样并不够帮我们在日益复杂的前端应用的背景下提高开发效率**。
- 在现代的 UI 开发中，我们发现与其将代码库划分为三个巨大的层，相互交织在一起，不如将它们划分为松散耦合的组件，再按需组合起来。**在一个组件中，其模板、逻辑和样式本就是有内在联系的、是耦合的，将它们放在一起，实际上使组件更有内聚性和可维护性**。
- 即使你不喜欢单文件组件这样的形式而仍然选择拆分单独的 JavaScript 和 CSS 文件，也没关系，你还是可以通过[资源导入](https://cn.vuejs.org/api/sfc-spec.html#src-imports)功能获得热更新和预编译等功能的支持

### 工具链
在线尝试：

- [Vue SFC 演练场](https://play.vuejs.org/)
   - 自动随着 Vue 仓库最新的提交更新
   - 支持检查编译输出的结果
- [StackBlitz 中的 Vue + Vite](https://vite.new/vue)
   - 类似 IDE 的环境，但实际是在浏览器中运行 Vite 开发服务器
   - 和本地开发效果更接近

注意⚠️：在报告 Bug 时，我们也建议使用这些在线演练场来提供最小化重现

项目脚手架：

1. Vite：是一个轻量级的、速度极快的构建工具，对 Vue SFC 提供第一优先级支持；
2. Vue CLI：官方提供的基于 Webpack 的 Vue 工具链，它现在处于维护模式。我们建议使用 Vite 开始新的项目，除非你依赖特定的 Webpack 的特性。在大多数情况下，Vite 将提供更优秀的开发体验

浏览器内模版编译注意事项：
当以无构建步骤方式使用 Vue 时，组件模板要么是写在页面的 HTML 中，要么是内联的 JavaScript 字符串。在这些场景中，为了执行动态模板编译，Vue 需要将模板编译器运行在浏览器中。相对的，如果我们使用了构建步骤，由于提前编译了模板，那么就无须再在浏览器中运行了。为了减小打包出的客户端代码体积，Vue 提供了[多种格式的“构建文件”](https://unpkg.com/browse/vue@3/dist/)以适配不同场景下的优化需求：

- 前缀为 vue.runtime.* 的文件是只**包含运行时的版本**：不包含编译器，当使用这个版本时，**所有的模板都必须由构建步骤预先编译**
- 名称中不包含 .runtime 的文件则是**完全版**：即包含了编译器，并支持在浏览器中直接编译模板。然而，体积也会因此**增长大约 14kb**

默认的工具链中都会使用仅含运行时的版本，因为所有 SFC 中的模板都已经被预编译了。如果因为某些原因，在有构建步骤时，你仍需要浏览器内的模板编译，你可以更改构建工具配置，将 vue 改为相应的版本 vue/dist/vue.esm-bundler.js。
如果你需要一种更轻量级，不依赖构建步骤的替代方案，也可以看看 [petite-vue](https://github.com/vuejs/petite-vue)

IDE 支持：

- 推荐使用的 IDE 是 [VSCode](https://code.visualstudio.com/)，**配合 **[**Vue 语言特性 (Volar)**](https://marketplace.visualstudio.com/items?itemName=Vue.volar)** 插件**。该插件提供了语法高亮、TypeScript 支持，以及模板内表达式与组件 props 的智能提示

注意⚠️：Volar 取代了我们之前为 Vue 2 提供的官方 VSCode 扩展 [Vetur](https://marketplace.visualstudio.com/items?itemName=octref.vetur)。如果你之前已经安装了 Vetur，请确保在 Vue 3 的项目中禁用它

- [WebStorm](https://www.jetbrains.com/webstorm/) 同样也为 Vue 的单文件组件提供了很好的内置支持；
- 其他支持[语言服务协议](https://microsoft.github.io/language-server-protocol/) (LSP) 的 IDE 也可以通过 LSP 享受到 Volar 所提供的核心功能：
   - Sublime Text 通过 [LSP-Volar](https://github.com/sublimelsp/LSP-volar) 支持；
   - vim / Neovim 通过 [coc-volar](https://github.com/yaegassy/coc-volar) 支持；
   - emacs 通过 [lsp-mode](https://emacs-lsp.github.io/lsp-mode/page/lsp-volar/) 支持；

浏览器开发者插件：
Vue 的浏览器开发者插件使我们可以浏览一个 Vue 应用的组件树，查看各个组件的状态，追踪状态管理的事件，还可以进行组件性能分析

- [文档](https://devtools.vuejs.org/)
- [Chrome 扩展商店页](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd)

TypeScript：
具体细节请参考章节：[配合 TypeScript 使用 Vue](https://cn.vuejs.org/guide/typescript/overview.html)。

- [Volar](https://github.com/johnsoncodehk/volar) 插件能够为 `<script lang="ts">` 块提供类型检查，也能对模板内表达式和组件之间 props 提供自动补全和类型验证。
- 使用 [vue-tsc](https://github.com/vuejs/language-tools/tree/master/packages/tsc) 可以在命令行中执行相同的类型检查，通常用来生成单文件组件的 d.ts 文件

测试：
具体细节请参考章节：[测试指南](https://cn.vuejs.org/guide/scaling-up/testing.html)。

- [Cypress](https://www.cypress.io/) 推荐用于 E2E 测试。也可以通过 [Cypress 组件测试运行器](https://docs.cypress.io/guides/component-testing/introduction)来给 Vue SFC 作单文件组件测试。
- [Vitest](https://vitest.dev/) 是一个追求更快运行速度的测试运行器，由 Vue / Vite 团队成员开发。主要针对基于 Vite 的应用设计，可以为组件提供即时响应的测试反馈。
- [Jest](https://jestjs.io/) 可以通过 [vite-jest](https://github.com/sodatea/vite-jest) 配合 Vite 使用。不过只推荐在你已经有一套基于 Jest 的测试集、且想要迁移到基于 Vite 的开发配置时使用，因为 Vitest 也能够提供类似的功能，且后者与 Vite 的集成更方便高效

代码规范：

- [Volar](https://github.com/johnsoncodehk/volar) VSCode 插件为 Vue SFC 提供了开箱即用的格式化功能。
- 除此之外，[Prettier](https://prettier.io/) 也提供了内置的 Vue SFC 格式化支持。

SFC 自定义块集成：
自定义块被编译成导入到同一 Vue 文件的不同请求查询。这取决于底层构建工具如何处理这类导入请求。

- 如果使用 Vite，需使用一个自定义 Vite 插件将自定义块转换为可执行的 JavaScript 代码。[示例](https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-transforming-custom-blocks)。
- 如果使用 Vue CLI 或只是 webpack，需要使用一个 loader 来配置如何转换匹配到的自定义块。[示例](https://vue-loader.vuejs.org/zh/guide/custom-blocks.html)

底层库：
@vue/compiler-sfc：提供了处理 Vue SFC 的底层的功能，并只适用于需要支持 Vue SFC 相关工具链的开发者；
@vitejs/plugin-vue：为 Vite 提供 Vue SFC 支持的官方插件
vue-loader：为 webpack 提供 Vue SFC 支持的官方 loader。如果你正在使用 Vue CLI，也可以看看[如何在 Vue CLI 中更改vue-loader选项的文档](https://cli.vuejs.org/zh/guide/webpack.html#%E4%BF%AE%E6%94%B9-loader-%E9%80%89%E9%A1%B9)

其他在线演练场：

- [VueUse Playground](https://play.vueuse.org/)
- [Vue + Vite on Repl.it](https://replit.com/@templates/VueJS-with-Vite)
- [Vue on CodeSandbox](https://codesandbox.io/s/vue-3)
- [Vue on Codepen](https://codepen.io/pen/editor/vue)
- [Vue on Components.studio](https://components.studio/create/vue3)
- [Vue on WebComponents.dev](https://webcomponents.dev/create/cevue)

### 路由
客户端 vs 服务端路由：
服务端路由指的是服务器根据用户访问的 URL 路径返回不同的响应结果。当我们在一个传统的服务端渲染的 web 应用中点击一个链接时，浏览器会从服务端获得全新的 HTML，然后重新加载整个页面

然而，在[单页面应用](https://developer.mozilla.org/en-US/docs/Glossary/SPA)中，客户端的 JavaScript 可以拦截页面的跳转请求，动态获取新的数据，然后在无需重新加载的情况下更新当前页面。这样通常可以带来更顺滑的用户体验，尤其是在更偏向“应用”的场景下，因为这类场景下用户通常会在很长的一段时间中做出多次交互

在这类单页应用中，“路由”是在客户端执行的。**一个客户端路由器的职责就是利用诸如 **[**History API**](https://developer.mozilla.org/en-US/docs/Web/API/History)** 或是 **[**hashchange事件**](https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event)**这样的浏览器 API 来管理应用当前应该渲染的视图**

官方路由：
官方支持的[路由库](https://github.com/vuejs/router)。要了解更多细节，请查看 [Vue Router 的文档](https://router.vuejs.org/zh/)

从头开始实现一个简单的路由：
通过[动态组件](https://cn.vuejs.org/guide/essentials/component-basics.html#dynamic-components)的方式，监听浏览器 [hashchange事件](https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event)或使用 [History API](https://developer.mozilla.org/en-US/docs/Web/API/History) 来更新当前组件：
```typescript
<script setup>
import { ref, computed } from 'vue'
import Home from './Home.vue'
import About from './About.vue'
import NotFound from './NotFound.vue'
const routes = {
  '/': Home,
  '/about': About
}
const currentPath = ref(window.location.hash)
window.addEventListener('hashchange', () => {
  currentPath.value = window.location.hash
})
const currentView = computed(() => {
  return routes[currentPath.value.slice(1) || '/'] || NotFound
})
</script>
<template>
  <a href="#/">Home</a> |
  <a href="#/about">About</a> |
  <a href="#/non-existent-path">Broken Link</a>
  <component :is="currentView" />
</template>
```

### 状态管理
什么是状态管理：
理论上来说，每一个 Vue 组件实例都已经在“管理”它自己的响应式状态了：
```typescript
<script setup>
import { ref } from 'vue'

// 状态
const count = ref(0)

// 动作
function increment() {
  count.value++
}
</script>

<!-- 视图 -->
<template>{{ count }}</template>
```
独立的单元：

- 状态：驱动整个应用的数据源；
- 视图：对状态的一种声明式映射；
- 交互：状态根据用户在视图中的输入而作出相应变更的可能方式

单项数据流：
<CustomImage src='/growth-record/frame/vue/vue3study10.webp' />

多个组件共享一个状态：

1. 多个视图可能都依赖于同一份状态。
2. 来自不同视图的交互也可能需要更改同一份状态。

解决方案：

- 一是一个可行的办法是将共享状态“提升”到共同的祖先组件上去，再通过 props 传递下来。然而在深层次的组件树结构中这么做的话，很快就会使得代码变得繁琐冗长。这会导致另一个问题：[Prop 逐级透传问题](https://cn.vuejs.org/guide/components/provide-inject.html#prop-drilling)
- 二是直接通过模板引用获取父/子实例，或者通过触发的事件尝试改变和同步多个状态的副本。但这些模式的健壮性都不甚理想，很容易就会导致代码难以维护；

**最好的解决方案是：**
**一个更简单直接的解决方案是抽取出组件间的共享状态，放在一个全局单例中来管理。这样我们的组件树就变成了一个大的“视图”，而任何位置上的组件都可以访问其中的状态或触发动作**

用响应式 API 做简单状态管理：
**reactive：**
```typescript
// store.js
import { reactive } from 'vue'

export const store = reactive({
  count: 0
})

<!-- ComponentA.vue -->
<script setup>
import { store } from './store.js'
</script>

<template>From A: {{ store.count }}</template>

<!-- ComponentB.vue -->
<script setup>
import { store } from './store.js'
</script>

<template>From B: {{ store.count }}</template>

<template>
  <button @click="store.count++">
    From B: {{ store.count }}
  </button>
</template>

// ]]></description>
            <content:encoded><![CDATA[<h1 id="vue3-学习笔记-二" tabindex="-1">Vue3 学习笔记（二） <a class="header-anchor" href="#vue3-学习笔记-二" aria-label="Permalink to &quot;Vue3 学习笔记（二）&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="逻辑复用" tabindex="-1">逻辑复用 <a class="header-anchor" href="#逻辑复用" aria-label="Permalink to &quot;逻辑复用&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="组合式函数" tabindex="-1">组合式函数 <a class="header-anchor" href="#组合式函数" aria-label="Permalink to &quot;组合式函数&quot;">&ZeroWidthSpace;</a></h3>
<p>在 Vue 应用的概念中，“<strong>组合式函数</strong>”(Composables) 是一个利用 Vue 的组合式 API 来<strong>封装和复用有状态逻辑的函数</strong></p>
<ul>
<li>无状态函数：复用公共任务的逻辑。例如为了在不同地方格式化时间，我们可能会抽取一个可复用的日期格式化函数。这个函数封装了无状态的逻辑：它在接收一些输入后立刻返回所期望的输出。复用无状态逻辑的库有很多，比如你可能已经用过的 <a href="https://lodash.com/" target="_blank" rel="noreferrer">lodash</a> 或是 <a href="https://date-fns.org/" target="_blank" rel="noreferrer">date-fns</a></li>
<li>有状态函数：<strong>有状态逻辑负责管理会随时间而变化的状态</strong>。一个简单的例子是跟踪当前鼠标在页面中的位置</li>
</ul>
<p>嵌套多个组合式函数：<strong>一个组合式函数可以调用一个或多个其他的组合式函数</strong>。这使得我们可以像使用多个组件组合成整个应用一样，用<strong>多个较小且逻辑独立的单元</strong>来组合形成<strong>复杂的逻辑</strong></p>
<p>核心：抽离、封装、状态、复用</p>
<p>传入异步响应式参数并自动监听响应触发执行：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// fetch.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref, watchEffect, toValue } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useFetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fetchData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // reset state before fetching..</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    data.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    error.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(url))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (data.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> json))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (error.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> err))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { data, error }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>Vue3.3 <code>toValue()</code> 新增 API 目的：将 ref 或 getter 规范化为值。跟 unref 类似，但可以对函数特殊处理</p>
<p>约定和最佳实践</p>
<ol>
<li>命名：组合式函数约定用驼峰名法命名，并以“use”开头</li>
<li>输入参数：需要考虑 ref 或 getter 的响应式参数情况，使用 <code>toValue()</code> 函数实现</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { toValue } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useFeature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">maybeRefOrGetter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 如果 maybeRefOrGetter 是一个 ref 或 getter，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 将返回它的规范化值。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 否则原样返回。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> toValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(maybeRefOrGetter)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：要么使用 <code>watch()</code> 显式地监视 ref 或 getter，要么在 <code>watchEffect()</code> 中调用 <code>toValue()</code></p>
<ol start="3">
<li>返回值：在组合式函数中使用 <code>ref()</code> 而不是 <code>reactive()</code>。因为组合式函数始终返回一个包含多个 ref 的普通的非响应式对象，这样该对象在组件中被解构为 ref 之后仍可以保持响应性（通过 ref 来维持这一响应性连接）：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// x 和 y 是两个 ref</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useMouse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span></code></pre>
</div><p>当然，可以将返回的对象用 <code>reactive()</code> 包装一次，这样其中的 ref 会被自动解包：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> mouse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">useMouse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// mouse.x 链接到了原来的 x ref</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(mouse.x)</span></span></code></pre>
</div><ol start="4">
<li>副作用：</li>
</ol>
<ul>
<li>如果你的应用用到了<a href="https://cn.vuejs.org/guide/scaling-up/ssr.html" target="_blank" rel="noreferrer">服务端渲染</a> (SSR)，请确保在组件挂载后才调用的生命周期钩子中执行 DOM 相关的副作用，例如：<code>onMounted()</code>。这些钩子仅会在浏览器中被调用，因此可以确保能访问到 DOM</li>
<li>确保在 <code>onUnmounted()</code> 时清理副作用。举例来说，如果一个组合式函数设置了一个事件监听器，它就应该在 <code>onUnmounted()</code> 中被移除 (就像我们在 <code>useMouse()</code> 示例中看到的一样)。当然也可以像之前的 <code>useEventListener()</code> 示例那样，使用一个组合式函数来自动帮你做这些事</li>
</ul>
<ol start="5">
<li>使用限制：</li>
</ol>
<ul>
<li>组合式函数只能在 <code>&lt;script setup&gt;</code> 或 <code>setup()</code> 钩子中被调用。在这些上下文中，它们也只能被同步调用。在某些情况下，也可以在像 <code>onMounted()</code> 这样的生命周期钩子中调用它们
<ol>
<li>将生命周期钩子注册到该组件实例上</li>
<li>将计算属性和监听器注册到该组件实例上，以便在该组件被卸载时停止监听，避免内存泄漏</li>
</ol>
</li>
</ul>
<p>注意⚠️：<strong><code>&lt;script setup&gt;</code> 是唯一在调用 await 之后仍可调用组合式函数的地方</strong>。编译器会在异步操作之后自动为你恢复当前的组件实例</p>
<ol start="5">
<li>通过抽取组合式函数改善代码结构：</li>
</ol>
<p>抽取组合式函数不仅是为了复用，也是为了代码组织，保持足够的灵活性，基于逻辑问题将组件代码拆分成更小的函数：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useFeatureA } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './featureA.js'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useFeatureB } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './featureB.js'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useFeatureC } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './featureC.js'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useFeatureA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useFeatureB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(foo)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">qux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useFeatureC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(baz)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p><strong>注意⚠️：在某种程度上，可以将这些提取出的组合式函数看作是可以相互通信的组件范围内的服务</strong></p>
<ol start="6">
<li>在选项式 API 中使用组合式函数</li>
</ol>
<p>如果使用的是选项式 API，组合式函数必须在 <code>setup()</code> 中调用。且其返回的绑定必须在 <code>setup()</code> 中返回，以便暴露给 <code>this</code> 及其模板：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useMouse } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './mouse.js'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useFetch } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './fetch.js'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useMouse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useFetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'...'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { x, y, data, error }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // setup() 暴露的属性可以在通过 `this` 访问到</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...其他选项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="7">
<li>与其他模式比较：
<ol>
<li>和 Mixin 的对比：</li>
</ol>
</li>
</ol>
<p>mixins 有三个主要的短板：</p>
<ul>
<li>
<p><strong>不清晰的数据来源</strong>：当使用了多个 mixin 时，实例上的数据属性来自哪个 mixin 变得不清晰，这使追溯实现和理解组件行为变得困难。推荐在组合式函数中使用 ref + 解构模式的理由：让属性的来源在消费组件时一目了然；</p>
</li>
<li>
<p><strong>命名空间冲突</strong>：多个来自不同作者的 mixin 可能会注册相同的属性名，造成命名冲突。若使用组合式函数，可以通过在解构变量时对变量进行重命名来避免相同的键名；</p>
</li>
<li>
<p><strong>隐式的跨 mixin 交流</strong>：多个 mixin 需要依赖共享的属性名来进行相互作用，这使得它们隐性地耦合在一起。而一个组合式函数的返回值可以作为另一个组合式函数的参数被传入，像普通函数那样。</p>
<ol start="2">
<li>和无渲染组件的对比：</li>
</ol>
</li>
</ul>
<p><strong>组合式函数相对于无渲染组件的主要优势是</strong>：组合式函数不会产生额外的<strong>组件实例开销</strong>。当在整个应用中使用时，由无渲染组件产生的额外组件实例会带来无法忽视的<strong>性能开销</strong>
注意⚠️：<strong>推荐在纯逻辑复用时使用组合式函数，在需要同时复用逻辑和视图布局时使用无渲染组件</strong></p>
<ol start="3">
<li>和 React Hooks 的对比：</li>
</ol>
<p>如果有 React 的开发经验，可能注意到组合式函数和自定义 React hooks 非常相似。<strong>组合式 API 的一部分灵感正来自于 React hooks</strong>，<strong>Vue 的组合式函数也的确在逻辑组合能力上与 React hooks 相近</strong>。然而，Vue 的组合式函数是<strong>基于 Vue 细粒度的响应性系统</strong>，这和 React hooks 的执行模型有本质上的不同</p>
<h3 id="自定义指令" tabindex="-1">自定义指令 <a class="header-anchor" href="#自定义指令" aria-label="Permalink to &quot;自定义指令&quot;">&ZeroWidthSpace;</a></h3>
<p>除了 Vue 内置的一系列指令 (比如 <code>v-model</code> 或 <code>v-show</code>) 之外，Vue 还允许你注册自定义的指令 (Custom Directives)</p>
<p>重用代码的方式：</p>
<ul>
<li>组件；</li>
<li>组合式函数；</li>
<li>自定义指令；</li>
</ul>
<p>一个自定义指令由一个包含类似组件生命周期钩子的对象来定义。钩子函数会接收到指令所绑定元素作为其参数：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 在模板中启用 v-focus</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> vFocus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">focus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 另一种写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    /*...*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  directives: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 在模板中启用 v-focus</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    focus: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 全局注册</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使 v-focus 在所有组件中都可用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'focus'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>注意⚠️：</p>
<ul>
<li><strong>在 <code>&lt;script setup&gt;</code> 中，任何以 v 开头的驼峰式命名的变量都可以被用作一个自定义指令</strong>。在上面的例子中，vFocus 即可以在模板中以 <code>v-focus</code> 的形式使用</li>
<li><strong>只有当所需功能只能通过直接的 DOM 操作来实现时，才应该使用自定义指令</strong>。其他情况下应该尽可能地使用 v-bind 这样的内置指令来声明式地使用模板，这样更高效，也对服务端渲染更友好</li>
</ul>
<p>指令钩子：
一个指令的定义对象可以提供几种钩子函数 (都是可选的)：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> myDirective</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 在绑定元素的 attribute 前</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 或事件监听器应用前调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">vnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prevVnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 下面会介绍各个参数的细节</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 在元素被插入到 DOM 前调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  beforeMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">vnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prevVnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 在绑定元素的父组件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 及他自己的所有子节点都挂载完成后调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">vnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prevVnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 绑定元素的父组件更新前调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  beforeUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">vnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prevVnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 在绑定元素的父组件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 及他自己的所有子节点都更新后调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  updated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">vnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prevVnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 绑定元素的父组件卸载前调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  beforeUnmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">vnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prevVnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 绑定元素的父组件卸载后调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  unmounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">vnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prevVnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>钩子参数：
指令的钩子会传递以下几种参数：</p>
<ul>
<li>el：指令绑定到的元素。这可以用于直接操作 DOM。</li>
<li>binding：一个对象，包含以下属性。
<ul>
<li>value：传递给指令的值。例如在 v-my-directive=&quot;1 + 1&quot; 中，值是 2。</li>
<li>oldValue：之前的值，仅在 beforeUpdate 和 updated 中可用。无论值是否更改，它都可用。</li>
<li>arg：传递给指令的参数 (如果有的话)。例如在 v-my-directive:foo 中，参数是 &quot;foo&quot;。</li>
<li>modifiers：一个包含修饰符的对象 (如果有的话)。例如在 v-my-directive.foo.bar 中，修饰符对象是 { foo: true, bar: true }。</li>
<li>instance：使用该指令的组件实例。</li>
<li>dir：指令的定义对象。</li>
</ul>
</li>
<li>vnode：代表绑定元素的底层 VNode。</li>
<li>prevNode：代表之前的渲染中指令所绑定元素的 VNode。仅在 beforeUpdate 和 updated 钩子中可用。</li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:foo.bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"baz"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 动态参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// &#x3C;div v-example:[arg]="value">&#x3C;/div></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 注意⚠️：这里指令的参数会基于组件的 arg 数据属性响应式地更新</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 获取到的参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  modifiers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* `baz` 的值 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  oldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 上一次更新时 `baz` 的值 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：<strong>除了 el 外，其他参数都是只读的，不要更改它们</strong>。若你需要在不同的钩子间共享信息，推荐通过元素的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset" target="_blank" rel="noreferrer">dataset</a> attribute 实现</p>
<p>简化形式：
对于自定义指令来说，一个很常见的情况是仅仅需要在 mounted 和 updated 上实现相同的行为，除此之外并不需要其他钩子。这种情况下我们可以直接用一个函数来定义指令：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"color"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'color'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 这会在 `mounted` 和 `updated` 时都调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  el.style.color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> binding.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>对象字面量：
如果你的指令需要多个值，你可以向它传递一个 JavaScript 对象字面量。别忘了，指令也可以接收任何合法的 JavaScript 表达式：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">demo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ color: 'white', text: 'hello!' }"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'demo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(binding.value.color) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// => "white"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(binding.value.text) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// => "hello!"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>组件上使用：
当在组件上使用自定义指令时，它会始终应用于组件的根节点，和<a href="https://cn.vuejs.org/guide/components/attrs.html" target="_blank" rel="noreferrer">透传 attributes</a> 类似：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyComponent v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">demo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"test"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// &#x3C;!-- MyComponent 的模板 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> &#x3C;!-- </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">demo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> 指令会被应用在此处</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>My component content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️**：当应用到一个多根组件时，指令将会被忽略且抛出一个警告。和 attribute 不同，指令不能通过 v-bind=&quot;$attrs&quot; 来传递给一个不同的元素**。<strong>总的来说，不推荐在组件上使用自定义指令</strong></p>
<h3 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">&ZeroWidthSpace;</a></h3>
<p>插件 (Plugins) 是一种能<strong>为 Vue 添加全局功能的工具代码</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(myPlugin, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* 可选的选项 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>一个插件可以是一个拥有 <code>install()</code> 方法的对象，也可以直接是一个安装函数本身。安装函数会接收到安装它的<a href="https://cn.vuejs.org/api/application.html" target="_blank" rel="noreferrer">应用实例</a>和传递给 <code>app.use()</code> 的额外选项作为参数：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> myPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 配置此应用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>插件使用场景：</p>
<ol>
<li>通过 <code>app.component()</code> 和 <code>app.directive()</code> 注册一个到多个全局组件或自定义指令；</li>
<li>通过 <code>app.provide()</code> 和使一个资源可被注入进整个应用；</li>
<li>向 <code>app.config.globalProperties</code> 中添加一些全局实例属性和方法；</li>
<li>一个可能上述三种都包含了的功能库，比如 <code>vue-router</code>；</li>
</ol>
<p>编写一个插件：</p>
<ol>
<li>创建入口文件：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// plugins/i18n.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 在这里编写插件代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="2">
<li>使用方式：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$translate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'greetings.hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><ol start="3">
<li>全局使用，在插件中将它添加到 <code>app.config.globalProperties</code> 上实现：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// plugins/i18n.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 注入一个全局可用的 $translate() 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    app.config.globalProperties.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$translate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 获取 `options` 对象的深层属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 使用 `key` 作为索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'.'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (o) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> o[i]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }, options)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="4">
<li>注册传入翻译文件信息：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i18nPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './plugins/i18n'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(i18nPlugin, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  greetings: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    hello: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Bonjour!'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>注意⚠️：请谨慎使用全局属性，如果在整个应用中使用不同插件注入的太多全局属性，很容易让应用变得难以理解和维护</p>
<p>插件中的 <code>Provide/Inject</code>：
通过 provide 来为插件用户供给一些内容</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// plugins/i18n.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'i18n'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, options)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>使用方：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { inject } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> i18n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'i18n'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(i18n.greetings.hello)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><h2 id="内置组件" tabindex="-1">内置组件 <a class="header-anchor" href="#内置组件" aria-label="Permalink to &quot;内置组件&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="transition" tabindex="-1">Transition <a class="header-anchor" href="#transition" aria-label="Permalink to &quot;Transition&quot;">&ZeroWidthSpace;</a></h3>
<p>Vue 提供了两个内置组件，可以帮助你制作基于状态变化的过渡和动画：</p>
<ul>
<li><code>&lt;Transition&gt;</code> 会在一个元素或组件进入和离开 DOM 时应用动画；</li>
<li><code>&lt;TransitionGroup&gt;</code> 会在一个 <code>v-for</code> 列表中的元素或组件被插入，移动，或移除时应用动画；</li>
</ul>
<p>除了这两个组件，我们也可以通过其他技术手段来应用动画，比如切换 CSS class 或用状态绑定样式来驱动动画
可以将进入和离开动画应用到通过默认插槽传递给它的元素或组件上。进入或离开可以由以下的条件之一触发：</p>
<ul>
<li>由 <code>v-if</code> 所触发的切换；</li>
<li>由 <code>v-show</code> 所触发的切换；</li>
<li>有特殊元素 <code>&lt;component&gt;</code> 切换的动作组件；</li>
<li>改变特殊的 key 属性；</li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button @click</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"show = !show"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Toggle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"show"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 下面我们会解释这些 class 是做什么的 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: opacity 0.5s ease;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">from,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">to {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：<code>&lt;Transition&gt;</code> 仅支持单个元素或组件作为其插槽内容。如果内容是一个组件，这个组件必须仅有一个根元素</p>
<p>当一个 <code>&lt;Transition&gt;</code> 组件中的元素被插入或移除时，会发生下面这些事情：</p>
<ol>
<li>Vue 会自动检测目标元素是否应用了 CSS 过渡或动画。如果是，则一些 <a href="https://cn.vuejs.org/guide/built-ins/transition.html#transition-classes" target="_blank" rel="noreferrer">CSS 过渡 class</a> 会在适当的时机被添加和移除；</li>
<li>如果有作为监听器的 <a href="https://cn.vuejs.org/guide/built-ins/transition.html#javascript-hooks" target="_blank" rel="noreferrer">JavaScript 钩子</a>，这些钩子函数会在适当时机被调用；</li>
<li>如果没有探测到 CSS 过渡或动画、也没有提供 JavaScript 钩子，那么 DOM 的插入、删除操作将在浏览器的下一个动画帧后执行；</li>
</ol>
<p>基于 CSS 的过渡效果：
一共有 6 个应用于进入与离开过渡效果的 CSS <code>class</code>：</p>
<CustomImage src='/growth-record/frame/vue/vue3study09.webp' /><ol>
<li><code>v-enter-from</code>：进入动画的起始状态。在元素插入之前添加，在元素插入完成后的下一帧移除。</li>
<li><code>v-enter-active</code>：进入动画的生效状态。应用于整个进入动画阶段。在元素被插入之前添加，在过渡或动画完成之后移除。这个 <code>class</code> 可以被用来定义进入动画的持续时间、延迟与速度曲线类型。</li>
<li><code>v-enter-to</code>：进入动画的结束状态。在元素插入完成后的下一帧被添加 (也就是 <code>v-enter-from</code> 被移除的同时)，在过渡或动画完成之后移除。</li>
<li><code>v-leave-from</code>：离开动画的起始状态。在离开过渡效果被触发时立即添加，在一帧后被移除。</li>
<li><code>v-leave-active</code>：离开动画的生效状态。应用于整个离开动画阶段。在离开过渡效果被触发时立即添加，在过渡或动画完成之后移除。这个 <code>class</code> 可以被用来定义离开动画的持续时间、延迟与速度曲线类型。</li>
<li><code>v-leave-to</code>：离开动画的结束状态。在一个离开动画被触发后的下一帧被添加 (也就是 <code>v-leave-from</code> 被移除的同时)，在过渡或动画完成之后移除。</li>
</ol>
<p><code>v-enter-active</code> 和 <code>v-leave-active</code> 给我们提供了为进入和离开动画指定不同速度曲线的能力</p>
<p>为过渡效果命名：给 <code>&lt;Transition&gt;</code> 组件传一个 name prop 来声明一个过渡效果名</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"fade"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：对于一个有名字的过渡效果，对它起作用的过渡 <code>class</code> 会以其名字而不是 v 作为前缀。比如，上方例子中被应用的 <code>class</code> 将会是 <code>fade-enter-active</code> 而不是 <code>v-enter-active</code>。这个“fade”过渡的 <code>class</code> 应该是这样：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.fade</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.fade</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: opacity 0.5s ease;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.fade</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">from,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.fade</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">to {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>CSS 的 transition：
<code>&lt;Transition&gt;</code> 一般都会搭配<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions" target="_blank" rel="noreferrer">原生 CSS 过渡</a>一起使用，正如你在上面的例子中所看到的那样。这个 transition CSS 属性是一个简写形式，使我们可以一次定义一个过渡的各个方面，包括需要执行动画的属性、持续时间和<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function" target="_blank" rel="noreferrer">速度曲线</a>：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"slide-fade"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"show"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  进入和离开动画可以使用不同</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  持续时间和速度曲线。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.slide</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">fade</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: all 0.3s ease</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">out;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.slide</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">fade</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: all 0.8s cubic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">bezier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.slide</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">fade</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">from,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.slide</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">fade</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">to {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">translateX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(20px);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>CSS 的 animation：
<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations" target="_blank" rel="noreferrer">原生 CSS 动画</a>和 CSS transition 的应用方式基本上是相同的，只有一点不同，那就是 *-enter-from 不是在元素插入后立即移除，而是在一个 animationend 事件触发时被移除：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"bounce"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"show"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text-align: center;"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    Hello here is some bouncy text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.bounce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: bounce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 0.5s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.bounce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: bounce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 0.5s reverse;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@keyframes bounce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">% {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    transform: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1.25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>自定义过渡 <code>class：</code>
<code>&lt;Transition&gt;</code> 传递以下的 props 来指定自定义的过渡 <code>class：</code></p>
<ul>
<li><code>enter-from-class</code></li>
<li><code>enter-active-class</code></li>
<li><code>enter-to-class</code></li>
<li><code>leave-from-class</code></li>
<li><code>leave-active-class</code></li>
<li><code>leave-to-class</code></li>
</ul>
<p>传入的这些 <code>class</code> 会覆盖相应阶段的默认 <code>class</code> 名。这个功能在你想要在 Vue 的动画机制下集成其他的第三方 CSS 动画库时非常有用，比如 <a href="https://daneden.github.io/animate.css/" target="_blank" rel="noreferrer"><code>Animate.css</code></a>：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 假设你已经在页面中引入了 Animate.css </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"custom-classes"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"animate__animated animate__tada"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"animate__animated animate__bounceOutRight"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"show"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>同时使用 transition 和 animation：
<strong>Vue 需要附加事件监听器，以便知道过渡何时结束</strong>。可以是 transitionend 或 animationend，这取决于你所应用的 CSS 规则。如果你仅仅使用二者的其中之一，Vue 可以自动探测到正确的类型。
然而在某些场景中，你或许想要在同一个元素上同时使用它们两个。举例来说，<strong>Vue 触发了一个 CSS 动画，同时鼠标悬停触发另一个 CSS 过渡。此时你需要显式地传入 <code>type prop</code> 来声明，告诉 Vue 需要关心哪种类型，传入的值是 animation 或 transition</strong>：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"animation"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>...&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>深层级过渡与显示过渡时长：
尽管过渡 <code>class</code> 仅能应用在 <code>&lt;Transition&gt;</code> 的直接子元素上，我们还是可以使用深层级的 CSS 选择器，在深层级的元素上触发过渡效果：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"nested"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"show"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"outer"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"inner"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      Hello</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 应用于嵌套元素的规则 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.nested</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active .inner,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.nested</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active .inner {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: all 0.3s ease</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-in-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">out;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.nested</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">from .inner,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.nested</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">to .inner {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">translateX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(30px);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* ... 省略了其他必要的 CSS */</span></span></code></pre>
</div><p>甚至可以在深层元素上添加一个过渡延迟，从而创建一个带渐进延迟的动画序列：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 延迟嵌套元素的进入以获得交错效果 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.nested</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active .inner {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: 0.25s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>默认情况下，<code>&lt;Transition&gt;</code> 组件会通过监听过渡根元素上的第一个 transitionend 或者 animationend 事件来尝试自动判断过渡何时结束。而在嵌套的过渡中，期望的行为应该是等待所有内部元素的过渡完成。在这种情况下，你可以通过向 <code>&lt;Transition&gt;</code> 组件传入 duration prop 来显式指定过渡的持续时间 (以毫秒为单位)。总持续时间应该匹配延迟加上内部元素的过渡持续时间：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"550"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>...&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ enter: 500, leave: 800 }"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>...&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>性能考量：
动画所用到的 CSS 属性大多是 transform 和 opacity 之类的。用这些属性制作动画非常高效，因为：</p>
<ol>
<li>他们在动画过程中不会影响到 DOM 结构，因此不会每一帧都触发昂贵的 CSS 布局重新计算。</li>
<li>大多数的现代浏览器都可以在执行 transform 动画时利用 GPU 进行硬件加速。</li>
</ol>
<p>相比之下，<strong>像 <code>height</code> 或者 <code>margin</code> 这样的属性会触发 CSS 布局变动</strong>，因此执行它们的动画效果更昂贵，需要谨慎使用。我们可以在** <strong><a href="https://csstriggers.com/" target="_blank" rel="noreferrer"><strong><code>CSS-Triggers</code></strong></a></strong> 这类的网站查询哪些属性会在执行动画时触发 CSS 布局变动**</p>
<p>JavaScript 钩子：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  @before</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onBeforeEnter"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  @enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onEnter"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  @after</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onAfterEnter"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  @enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">cancelled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onEnterCancelled"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  @before</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onBeforeLeave"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  @leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onLeave"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  @after</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onAfterLeave"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  @leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">cancelled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onLeaveCancelled"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;!--</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> --></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 在元素被插入到 DOM 之前被调用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 用这个来设置元素的 "enter-from" 状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> onBeforeEnter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 在元素被插入到 DOM 之后的下一帧被调用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 用这个来开始进入动画</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> onEnter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 调用回调函数 done 表示过渡结束</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 如果与 CSS 结合使用，则这个回调是可选参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 当进入过渡完成时调用。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> onAfterEnter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 当进入过渡在完成之前被取消时调用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> onEnterCancelled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 在 leave 钩子之前调用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 大多数时候，你应该只会用到 leave 钩子</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> onBeforeLeave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 在离开过渡开始时调用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 用这个来开始离开动画</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> onLeave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 调用回调函数 done 表示过渡结束</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 如果与 CSS 结合使用，则这个回调是可选参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 在离开过渡完成、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 且元素已从 DOM 中移除时调用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> onAfterLeave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 仅在 v-show 过渡中可用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> onLeaveCancelled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {}</span></span></code></pre>
</div><p>注意⚠️：在使用仅由 JavaScript 执行的动画时，最好是添加一个 <code>:css=&quot;false&quot;</code> prop。这显式地向 Vue 表明可以跳过对 CSS 过渡的自动探测。除了性能稍好一些之外，还可以防止 CSS 规则意外地干扰过渡效果：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  :css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"false"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>在有了 <code>:css=&quot;false&quot;</code> 后，我们就自己全权负责控制什么时候过渡结束了。这种情况下对于 <code>@enter</code> 和 <code>@leave</code> 钩子来说，回调函数 done 就是必须的。否则，钩子将被同步调用，过渡将立即完成
注意⚠️：使用 <a href="https://greensock.com/" target="_blank" rel="noreferrer">GreenSock 库</a>执行动画的一个示例，你也可以使用任何你想要的库，比如 <a href="https://animejs.com/" target="_blank" rel="noreferrer"><code>Anime.js</code></a> 或者 <a href="https://motion.dev/" target="_blank" rel="noreferrer">Motion One</a></p>
<p>可复用过渡效果：
要创建一个可被复用的过渡，我们需要为 <code>&lt;Transition&gt;</code> 组件创建一个包装组件，并向内传入插槽内容：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> MyTransition.vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// JavaScript 钩子逻辑...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 包装内置的 Transition 组件 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"my-transition"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onEnter"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onLeave"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> &#x3C;!-- </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">向内传递插槽内容</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> --></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  必要的 CSS...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  注意：避免在这里使用 &#x3C;style scoped></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  因为那不会应用到插槽内容上</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">MyTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"show"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">MyTransition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>出现时过渡：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition appear</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>元素间过渡：
<strong>除了通过 <code>v-if / v-show</code> 切换一个元素，也可以通过 <code>v-if / v-else / v-else-if</code> 在几个组件间进行切换，只要确保任一时刻只会有一个元素被渲染即可：</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"docState === 'saved'"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Edit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-else-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"docState === 'edited'"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-else-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"docState === 'editing'"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Cancel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>过渡模式：
注意⚠️：<strong>进入和离开的元素都是在同时开始动画的，因此不得不将它们设为 <code>position: absolute</code> 以避免二者同时存在时出现的布局问题</strong></p>
<p>很多情况下这可能并不符合需求。我们可能想要先执行离开动画，然后在其完成之后再执行元素的进入动画。手动编排这样的动画是非常复杂的，好在我们可以通过向 <code>&lt;Transition&gt;</code> 传入一个 <code>mode prop</code> 来实现这个行为：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"out-in"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>组件间过渡：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"fade"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"out-in"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"activeComponent"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>动态过渡：
<code>&lt;Transition&gt;</code> 的 props (比如 name) 也可以是动态的！这让我们可以根据状态变化动态地应用不同类型的过渡：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"transitionName"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;!--</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> --></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>这个特性的用处是可以提前定义好多组 CSS 过渡或动画的 <code>class</code>，然后在它们之间动态切换。
你也可以根据你的组件的当前状态在 JavaScript 过渡钩子中应用不同的行为。最后，<strong>创建动态过渡的终极方式还是创建</strong><a href="https://cn.vuejs.org/guide/built-ins/transition.html#reusable-transitions" target="_blank" rel="noreferrer"><strong>可复用的过渡组件</strong></a>，并让这些组件根据动态的 <code>props</code> 来改变过渡的效果</p>
<h3 id="transitiongroup" tabindex="-1">TransitionGroup <a class="header-anchor" href="#transitiongroup" aria-label="Permalink to &quot;TransitionGroup&quot;">&ZeroWidthSpace;</a></h3>
<p><code>&lt;TransitionGroup&gt;</code> 是一个内置组件，用于对 <code>v-for</code> 列表中的元素或组件的插入、移除和顺序改变添加动画效果</p>
<p>和 <code>&lt;Transition&gt;</code> 的区别：
<code>&lt;TransitionGroup&gt;</code> 支持和 <code>&lt;Transition&gt;</code> 基本相同的 <code>props</code>、CSS 过渡 class 和 JavaScript 钩子监听器，但有以下几点区别：</p>
<ul>
<li>默认情况下，<strong>它不会渲染一个容器元素。但你可以通过传入 <code>tag prop</code> 来指定一个元素作为容器元素来渲染</strong>。</li>
<li><a href="https://cn.vuejs.org/guide/built-ins/transition.html#transition-modes" target="_blank" rel="noreferrer"><strong>过渡模式</strong></a><strong>在这里不可用，因为我们不再是在互斥的元素之间进行切换</strong>。</li>
<li>列表中的每个元素都必须有一个<strong>独一无二的 <code>key attribute</code></strong>。</li>
<li>CSS 过渡 <code>class</code> 会被应用在列表内的元素上，而不是容器元素上。</li>
</ul>
<p>注意⚠️：当在 <a href="https://cn.vuejs.org/guide/essentials/component-basics.html#in-dom-template-parsing-caveats" target="_blank" rel="noreferrer">DOM 内模板</a>中使用时，组件名需要写为 <code>&lt;transition-group&gt;</code></p>
<p>进入/离开动画：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">TransitionGroup name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"list"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ul"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item in items"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    {{ item }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">TransitionGroup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: all 0.5s ease;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">from,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">to {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">translateX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(30px);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>移除动画：
上面的示例有一些明显的缺陷：当某一项被插入或移除时，它周围的元素会立即发生“跳跃”而不是平稳地移动。可以通过添加一些额外的 CSS 规则来解决这个问题：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">move, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 对移动中的元素应用的过渡 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: all 0.5s ease;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">from,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">to {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">translateX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(30px);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 确保将离开的元素从布局流中删除</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  以便能够正确地计算移动的动画。 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">active {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: absolute;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>渐进延迟列表动画：
通过在 JavaScript 钩子中读取元素的 <code>data attribute</code>，我们可以实现带渐进延迟的列表动画。首先，我们把每一个元素的索引渲染为该元素上的一个 <code>data attribute</code>：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">TransitionGroup</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ul"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  :css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"false"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  @before</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onBeforeEnter"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  @enter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onEnter"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  @leave</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onLeave"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"(item, index) in computedList"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    :key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item.msg"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    :data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"index"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    {{ item.msg }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">TransitionGroup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>接着，在 JavaScript 钩子中，我们基于当前元素的 <code>data attribute</code> 对该元素的进场动画添加一个延迟。以下是一个基于** <strong><a href="https://greensock.com/" target="_blank" rel="noreferrer"><strong>GreenSock library</strong></a></strong> （官网动画效果驱动贼好看，值得学习）**的动画示例：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> onEnter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(el, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    height: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'1.6em'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    delay: el.dataset.index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0.15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    onComplete: done</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h3 id="keepalive" tabindex="-1">KeepAlive <a class="header-anchor" href="#keepalive" aria-label="Permalink to &quot;KeepAlive&quot;">&ZeroWidthSpace;</a></h3>
<p>功能是在多个组件间动态切换时缓存被移除的组件实例</p>
<p>动态组件中：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"activeComponent"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><p>默认情况下，<strong>一个组件实例在被替换掉后会被销毁。这会导致它丢失其中所有已变化的状态——当这个组件再一次被显示时，会创建一个只带有初始状态的新实例</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 非活跃的组件将会被缓存！ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">KeepAlive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"activeComponent"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">KeepAlive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：在 <a href="https://cn.vuejs.org/guide/essentials/component-basics.html#in-dom-template-parsing-caveats" target="_blank" rel="noreferrer">DOM 内模板</a>中使用时，它应该被写为 <code>&lt;keep-alive&gt;</code></p>
<p>包含/排除：
<code>&lt;KeepAlive&gt;</code> 默认会缓存内部的所有组件实例，但可以通过 <strong><code>include</code></strong> 和 <strong><code>exclude</code> prop <strong>来定制该行为。这两个 prop 的值都可以是一个以</strong>英文逗号分隔的字符串</strong>、<strong>一个正则表达式</strong>，或是<strong>包含这两种类型的一个数组</strong>：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 以英文逗号分隔的字符串 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">KeepAlive include</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"a,b"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"view"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">KeepAlive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> 正则表达式</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (需使用 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`v-bind`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">KeepAlive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :include</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/a|b/"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"view"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">KeepAlive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> 数组</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (需使用 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`v-bind`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">KeepAlive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :include</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"['a', 'b']"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"view"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">KeepAlive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：</p>
<ul>
<li><strong>它会根据组件的 <strong><a href="https://cn.vuejs.org/api/options-misc.html#name" target="_blank" rel="noreferrer"><strong>name</strong></a></strong> 选项进行匹配，所以组件如果想要条件性地被 <code>KeepAlive</code> 缓存，就必须显式声明一个 name 选项</strong></li>
<li><strong>在 3.2.34 或以上的版本中，使用 <code>&lt;script setup&gt;</code> 的单文件组件会自动根据文件名生成对应的 name 选项，无需再手动声明</strong></li>
</ul>
<p>最大缓存实例数：
可以通过传入 <strong><code>max prop</code></strong> 来限制可被缓存的最大组件实例数。<code>&lt;KeepAlive&gt;</code> 的行为在指定了 max 后类似一个 <a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)" target="_blank" rel="noreferrer">LRU 缓存</a>：如果缓存的实例数量即将超过指定的那个最大数量，则最久没有被访问的缓存实例将被销毁，以便为新的实例腾出空间：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">KeepAlive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :max</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"10"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"activeComponent"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">KeepAlive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>缓存实例的生命周期：
当一个组件实例从 DOM 上移除但因为被 <code>&lt;KeepAlive&gt;</code> 缓存而仍作为组件树的一部分时，它将变为不活跃状态而不是被卸载。当一个组件实例作为缓存树的一部分插入到 DOM 中时，它将重新被激活</p>
<p>一个持续存在的组件可以通过 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onactivated" target="_blank" rel="noreferrer"><code>onActivated()</code></a> 和 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#ondeactivated" target="_blank" rel="noreferrer"><code>onDeactivated()</code></a> 注册相应的两个状态的生命周期钩子：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { onActivated, onDeactivated } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onActivated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 调用时机为首次挂载</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 以及每次从缓存中被重新插入时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onDeactivated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 在从 DOM 上移除、进入缓存</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 以及组件卸载时调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：</p>
<ul>
<li><code>onActivated</code> 在组件挂载时也会调用，并且 <code>onDeactivated</code> 在组件卸载时也会调用；</li>
<li><strong>这两个钩子不仅适用于 <code>&lt;KeepAlive&gt;</code> 缓存的根组件，也适用于缓存树中的后代组件；</strong></li>
</ul>
<h3 id="teleport" tabindex="-1">Teleport <a class="header-anchor" href="#teleport" aria-label="Permalink to &quot;Teleport&quot;">&ZeroWidthSpace;</a></h3>
<p>可以将一个组件内部的一部分模板“传送”到该组件的 DOM 结构外层的位置去
<code>&lt;Teleport&gt;</code> 接收一个 to prop 来指定传送的目标。to 的值可以是一个 CSS 选择器字符串，也可以是一个 DOM 元素对象。这段代码的作用就是告诉 Vue“把以下模板片段传送到 body 标签下”</p>
<p>也可以将 <code>&lt;Teleport&gt;</code> 和 <a href="https://cn.vuejs.org/guide/built-ins/transition.html" target="_blank" rel="noreferrer"><code>&lt;Transition&gt;</code></a> 结合使用来创建一个带动画的模态框。你可以看看<a href="https://cn.vuejs.org/examples/#modal" target="_blank" rel="noreferrer">这个示例</a>
注意⚠️：<strong><code>&lt;Teleport&gt;</code> 挂载时，传送的 to 目标必须已经存在于 DOM 中</strong>。理想情况下，这应该是整个 Vue 应用 DOM 树外部的一个元素。<strong>如果目标元素也是由 Vue 渲染的，你需要确保在挂载 <code>&lt;Teleport&gt;</code> 之前先挂载该元素</strong></p>
<p>搭配组件使用：
<code>&lt;Teleport&gt;</code> 只改变了渲染的 DOM 结构，它不会影响组件间的逻辑关系。也就是说，如果 <code>&lt;Teleport&gt;</code> 包含了一个组件，那么该组件始终和这个使用了 <code>&lt;teleport&gt;</code> 的组件保持逻辑上的父子关系。传入的 props 和触发的事件也会照常工作。
这也意味着来自父组件的注入也会按预期工作，子组件将在 Vue Devtools 中嵌套在父级组件下面，而不是放在实际内容移动到的地方</p>
<p>禁用 Teleport：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Teleport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :disabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"isMobile"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Teleport</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>多个 Teleport 共享目标：
一个可重用的模态框组件可能同时存在多个实例。对于此类场景，多个 <code>&lt;Teleport&gt;</code> 组件可以将其内容挂载在同一个目标元素上，而顺序就是简单的顺次追加，后挂载的将排在目标元素下更后面的位置上：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Teleport to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"#modals"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Teleport</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Teleport to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"#modals"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Teleport</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 渲染后：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"modals"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><h3 id="suspense" tabindex="-1">Suspense <a class="header-anchor" href="#suspense" aria-label="Permalink to &quot;Suspense&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>用来在组件树中协调对异步依赖的处理</strong>。它让我们可以在组件树上层等待下层的多个嵌套异步依赖项解析完成，并可以在等待时渲染一个加载状态</p>
<p>异步依赖：
比如组件层级结构：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">└─ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Dashboard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   ├─ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Profile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   │  └─ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">FriendStatus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">（组件有异步的 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   └─ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      ├─ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ActivityFeed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> （异步组件）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      └─ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Stats</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">（异步组件）</span></span></code></pre>
</div><p>在这个组件树中有多个嵌套组件，要渲染出它们，首先得解析一些异步资源。如果没有 <code>&lt;Suspense&gt;</code>，则它们每个都需要处理自己的加载、报错和完成状态。在最坏的情况下，我们可能会在页面上看到三个旋转的加载态，在不同的时间显示出内容
有了 <code>&lt;Suspense&gt;</code> 组件后，就可以在<strong>等待整个多层级组件树中的各个异步依赖获取结果时，在顶层展示出加载中或加载失败的状态</strong></p>
<p><code>&lt;Suspense&gt;</code> 可以等待的异步依赖有两种：</p>
<ol>
<li><strong>带有异步 <code>setup()</code> 钩子的组件</strong>。<strong>这也包含了使用 <code>&lt;script setup&gt;</code> 时有顶层 <code>await</code> 表达式的组件</strong>。</li>
<li><a href="https://cn.vuejs.org/guide/components/async.html" target="_blank" rel="noreferrer">异步组件</a>。</li>
</ol>
<p><code>async setup()</code>：组合式 API 使用顶层的异步</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 第一种写法：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> posts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      posts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 第二种写法：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> posts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  {{ posts }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：<strong>如果使用 <code>&lt;script setup&gt;</code>，那么顶层 await 表达式会自动让该组件成为一个异步依赖</strong></p>
<p>异步组件：
异步组件默认就是“suspensible”的。这意味着如果组件<strong>关系链</strong>上有一个 <code>&lt;Suspense&gt;</code>，那么这个<strong>异步组件就会被当作这个 <code>&lt;Suspense&gt;</code> 的一个异步依赖</strong>。在这种情况下，加载状态是由 <code>&lt;Suspense&gt;</code> 控制，而该组件自己的加载、报错、延时和超时等选项都将被忽略
注意⚠️：异步组件也可以通过在选项中指定 <code>suspensible: false</code> 表明不用 Suspense 控制，并让组件始终自己控制其加载状态</p>
<p>加载中状态：
<code>&lt;Suspense&gt;</code> 组件有两个插槽：<strong><code>#default</code> 和<code> #fallback</code></strong>。两个插槽都只允许一个直接子节点。在可能的时候都将显示默认槽中的节点。否则将显示后备槽中的节点</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 具有深层异步依赖的组件 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Dashboard </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 在 #fallback 插槽中显示 “正在加载中” </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template #fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    Loading</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Suspense</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>在初始渲染时，<code>&lt;Suspense&gt;</code> 将在内存中渲染其默认的插槽内容。如果在这个过程中遇到任何异步依赖，则会进入挂起状态。在挂起状态期间，展示的是后备内容。当所有遇到的异步依赖都完成后，<code>&lt;Suspense&gt;</code> 会进入完成状态，并将展示出默认插槽的内容</p>
<p>注意⚠️：</p>
<ul>
<li>如果在初次渲染时没有遇到异步依赖，<code>&lt;Suspense&gt;</code> 会直接进入完成状态</li>
<li>进入完成状态后，只有当默认插槽的根节点被替换时，<code>&lt;Suspense&gt;</code> 才会回到挂起状态。组件树中新的更深层次的异步依赖不会造成 <code>&lt;Suspense&gt;</code> 回退到挂起状态</li>
<li>发生回退时，后备内容不会立即展示出来。相反，<code>&lt;Suspense&gt;</code> 在等待新内容和异步依赖完成时，会展示之前 #default 插槽的内容。这个行为可以通过一个 timeout prop 进行配置：在等待渲染新内容耗时超过 timeout 之后，<code>&lt;Suspense&gt;</code> 将会切换为展示后备内容。若 timeout 值为 0 将导致在替换默认内容时立即显示后备内容</li>
</ul>
<p>事件：
<code>&lt;Suspense&gt;</code> 组件会触发三个事件：<strong>pending、resolve 和 fallback</strong>。pending 事件是在进入挂起状态时触发。resolve 事件是在 default 插槽完成获取新内容时触发。fallback 事件则是在 fallback 插槽的内容显示时触发
例如，可以使用这些事件在加载新组件时在之前的 DOM 最上层显示一个加载指示器</p>
<p>错误处理：
<code>&lt;Suspense&gt;</code> <strong>组件自身目前还不提供错误处理</strong>，<strong>不过你可以使用 <strong><a href="https://cn.vuejs.org/api/options-lifecycle.html#errorcaptured" target="_blank" rel="noreferrer"><strong><code>errorCaptured</code></strong></a></strong> 选项或者 <strong><a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onerrorcaptured" target="_blank" rel="noreferrer"><strong><code>onErrorCaptured()</code></strong></a></strong> 钩子，在使用到 <code>&lt;Suspense&gt;</code> 的父组件中捕获和处理异步错误</strong></p>
<p>和其他组件结合：
常常会<strong>将 <code>&lt;Suspense&gt;</code> 和 <strong><a href="https://cn.vuejs.org/guide/built-ins/transition.html" target="_blank" rel="noreferrer"><strong><code>&lt;Transition&gt;</code></strong></a></strong>、</strong><a href="https://cn.vuejs.org/guide/built-ins/keep-alive.html" target="_blank" rel="noreferrer"><strong><code>&lt;KeepAlive&gt;</code></strong></a>** 等组件结合**。要保证这些组件都能正常工作，嵌套的顺序非常重要
另外，这些组件都通常与 <a href="https://router.vuejs.org/zh/" target="_blank" rel="noreferrer">Vue Router</a> 中的 <code>&lt;RouterView&gt;</code> 组件结合使用</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">RouterView v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">slot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{ Component }"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Component"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"out-in"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">KeepAlive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 主要内容 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Component"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 加载中状态 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template #fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            正在加载</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Suspense</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">KeepAlive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">RouterView</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>Vue Router 使用动态导入对<a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html" target="_blank" rel="noreferrer">懒加载组件</a>进行了内置支持。这些与异步组件不同，目前他们不会触发 <code>&lt;Suspense&gt;</code>。但是，它们仍然可以有异步组件作为后代，这些组件可以照常触发 <code>&lt;Suspense&gt;</code></p>
<h2 id="应用规模化" tabindex="-1">应用规模化 <a class="header-anchor" href="#应用规模化" aria-label="Permalink to &quot;应用规模化&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="单文件组件" tabindex="-1">单文件组件 <a class="header-anchor" href="#单文件组件" aria-label="Permalink to &quot;单文件组件&quot;">&ZeroWidthSpace;</a></h3>
<p>Vue 的单文件组件 (即 *.vue 文件，英文 Single-File Component，简称 SFC) 是一种特殊的文件格式，使我们能够将一个 Vue 组件的模板、逻辑与样式封装在单个文件中
<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 三个块在同一个文件中封装、组合了组件的视图、逻辑和样式。完整的语法定义可以查阅 <a href="https://cn.vuejs.org/api/sfc-spec.html" target="_blank" rel="noreferrer">SFC 语法说明</a></p>
<p>为什么要使用 SFC：
使用 SFC 必须使用构建工具，但作为回报带来了以下优点：</p>
<ul>
<li>使用熟悉的 HTML、CSS 和 JavaScript 语法编写模块化的组件</li>
<li><a href="https://cn.vuejs.org/guide/scaling-up/sfc.html#what-about-separation-of-concerns" target="_blank" rel="noreferrer">让本来就强相关的关注点自然内聚</a></li>
<li>预编译模板，避免运行时的编译开销</li>
<li><a href="https://cn.vuejs.org/api/sfc-css-features.html" target="_blank" rel="noreferrer">组件作用域的 CSS</a></li>
<li><a href="https://cn.vuejs.org/api/sfc-script-setup.html" target="_blank" rel="noreferrer">在使用组合式 API 时语法更简单</a></li>
<li>通过交叉分析模板和逻辑代码能进行更多编译时优化</li>
<li><a href="https://cn.vuejs.org/guide/scaling-up/tooling.html#ide-support" target="_blank" rel="noreferrer">更好的 IDE 支持</a>，提供自动补全和对模板中表达式的类型检查</li>
<li>开箱即用的模块热更新 (HMR) 支持</li>
</ul>
<p>SFC 是 Vue 框架提供的一个功能，并且在下列场景中都是官方推荐的项目组织方式：</p>
<ul>
<li>单页面应用 (SPA)</li>
<li>静态站点生成 (SSG)</li>
<li>任何值得引入构建步骤以获得更好的开发体验 (DX) 的项目</li>
</ul>
<p>当然，在一些轻量级场景下使用 SFC 会显得有些杀鸡用牛刀。因此 Vue 同样也可以在无构建步骤的情况下以纯 JavaScript 方式使用。如果你的用例只需要给静态 HTML 添加一些简单的交互，你可以看看 <a href="https://github.com/vuejs/petite-vue" target="_blank" rel="noreferrer">petite-vue</a>，它是一个 6 kB 左右、预优化过的 Vue 子集，更适合渐进式增强的需求</p>
<p>SFC 是如何工作的：
Vue SFC 是一个框架指定的文件格式，因此必须交由 <a href="https://github.com/vuejs/core/tree/main/packages/compiler-sfc" target="_blank" rel="noreferrer"><code>@vue/compiler-sfc</code></a> 编译为标准的 JavaScript 和 CSS，<strong>一个编译后的 SFC 是一个标准的 JavaScript(ES) 模块</strong>，这也意味着在构建配置正确的前提下，你可以像导入其他 ES 模块一样导入 SFC：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> MyComponent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './MyComponent.vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  components: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    MyComponent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>SFC 中的 <code>&lt;style&gt;</code> 标签一般会在开发时注入成原生的 <code>&lt;style&gt;</code> 标签以支持热更新，而<strong>生产环境下它们会被抽取、合并成单独的 CSS 文件</strong></p>
<p>在实际项目中，一般会使用集成了 SFC 编译器的构建工具，比如 <a href="https://cn.vitejs.dev/" target="_blank" rel="noreferrer">Vite</a> 或者 <a href="https://cli.vuejs.org/zh/" target="_blank" rel="noreferrer">Vue CLI</a> (基于 <a href="https://webpack.js.org/" target="_blank" rel="noreferrer">webpack</a>)，Vue 官方也提供了脚手架工具来帮助你尽可能快速地上手开发 SFC。更多细节请查看 <a href="https://cn.vuejs.org/guide/scaling-up/tooling.html" target="_blank" rel="noreferrer">SFC 工具链</a>章节</p>
<p>如何看待关注点分离：</p>
<ul>
<li>一些有着传统 Web 开发背景的用户可能会因为 SFC 将不同的关注点集合在一处而有所顾虑，觉得 HTML/CSS/JS 应当是分离开的！</li>
<li>要回答这个问题，我们必须对这一点达成共识：<strong>前端开发的关注点不是完全基于文件类型分离的。前端工程化的最终目的都是为了能够更好地维护代码</strong>。<strong>关注点分离不应该是教条式地将其视为文件类型的区别和分离，仅仅这样并不够帮我们在日益复杂的前端应用的背景下提高开发效率</strong>。</li>
<li>在现代的 UI 开发中，我们发现与其将代码库划分为三个巨大的层，相互交织在一起，不如将它们划分为松散耦合的组件，再按需组合起来。<strong>在一个组件中，其模板、逻辑和样式本就是有内在联系的、是耦合的，将它们放在一起，实际上使组件更有内聚性和可维护性</strong>。</li>
<li>即使你不喜欢单文件组件这样的形式而仍然选择拆分单独的 JavaScript 和 CSS 文件，也没关系，你还是可以通过<a href="https://cn.vuejs.org/api/sfc-spec.html#src-imports" target="_blank" rel="noreferrer">资源导入</a>功能获得热更新和预编译等功能的支持</li>
</ul>
<h3 id="工具链" tabindex="-1">工具链 <a class="header-anchor" href="#工具链" aria-label="Permalink to &quot;工具链&quot;">&ZeroWidthSpace;</a></h3>
<p>在线尝试：</p>
<ul>
<li><a href="https://play.vuejs.org/" target="_blank" rel="noreferrer">Vue SFC 演练场</a>
<ul>
<li>自动随着 Vue 仓库最新的提交更新</li>
<li>支持检查编译输出的结果</li>
</ul>
</li>
<li><a href="https://vite.new/vue" target="_blank" rel="noreferrer">StackBlitz 中的 Vue + Vite</a>
<ul>
<li>类似 IDE 的环境，但实际是在浏览器中运行 Vite 开发服务器</li>
<li>和本地开发效果更接近</li>
</ul>
</li>
</ul>
<p>注意⚠️：在报告 Bug 时，我们也建议使用这些在线演练场来提供最小化重现</p>
<p>项目脚手架：</p>
<ol>
<li>Vite：是一个轻量级的、速度极快的构建工具，对 Vue SFC 提供第一优先级支持；</li>
<li>Vue CLI：官方提供的基于 Webpack 的 Vue 工具链，它现在处于维护模式。我们建议使用 Vite 开始新的项目，除非你依赖特定的 Webpack 的特性。在大多数情况下，Vite 将提供更优秀的开发体验</li>
</ol>
<p>浏览器内模版编译注意事项：
当以无构建步骤方式使用 Vue 时，组件模板要么是写在页面的 HTML 中，要么是内联的 JavaScript 字符串。在这些场景中，为了执行动态模板编译，Vue 需要将模板编译器运行在浏览器中。相对的，如果我们使用了构建步骤，由于提前编译了模板，那么就无须再在浏览器中运行了。为了减小打包出的客户端代码体积，Vue 提供了<a href="https://unpkg.com/browse/vue@3/dist/" target="_blank" rel="noreferrer">多种格式的“构建文件”</a>以适配不同场景下的优化需求：</p>
<ul>
<li>前缀为 vue.runtime.* 的文件是只<strong>包含运行时的版本</strong>：不包含编译器，当使用这个版本时，<strong>所有的模板都必须由构建步骤预先编译</strong></li>
<li>名称中不包含 .runtime 的文件则是<strong>完全版</strong>：即包含了编译器，并支持在浏览器中直接编译模板。然而，体积也会因此<strong>增长大约 14kb</strong></li>
</ul>
<p>默认的工具链中都会使用仅含运行时的版本，因为所有 SFC 中的模板都已经被预编译了。如果因为某些原因，在有构建步骤时，你仍需要浏览器内的模板编译，你可以更改构建工具配置，将 vue 改为相应的版本 vue/dist/vue.esm-bundler.js。
如果你需要一种更轻量级，不依赖构建步骤的替代方案，也可以看看 <a href="https://github.com/vuejs/petite-vue" target="_blank" rel="noreferrer">petite-vue</a></p>
<p>IDE 支持：</p>
<ul>
<li>推荐使用的 IDE 是 <a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">VSCode</a>，<strong>配合 <strong><a href="https://marketplace.visualstudio.com/items?itemName=Vue.volar" target="_blank" rel="noreferrer"><strong>Vue 语言特性 (Volar)</strong></a></strong> 插件</strong>。该插件提供了语法高亮、TypeScript 支持，以及模板内表达式与组件 props 的智能提示</li>
</ul>
<p>注意⚠️：Volar 取代了我们之前为 Vue 2 提供的官方 VSCode 扩展 <a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur" target="_blank" rel="noreferrer">Vetur</a>。如果你之前已经安装了 Vetur，请确保在 Vue 3 的项目中禁用它</p>
<ul>
<li><a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noreferrer">WebStorm</a> 同样也为 Vue 的单文件组件提供了很好的内置支持；</li>
<li>其他支持<a href="https://microsoft.github.io/language-server-protocol/" target="_blank" rel="noreferrer">语言服务协议</a> (LSP) 的 IDE 也可以通过 LSP 享受到 Volar 所提供的核心功能：
<ul>
<li>Sublime Text 通过 <a href="https://github.com/sublimelsp/LSP-volar" target="_blank" rel="noreferrer">LSP-Volar</a> 支持；</li>
<li>vim / Neovim 通过 <a href="https://github.com/yaegassy/coc-volar" target="_blank" rel="noreferrer">coc-volar</a> 支持；</li>
<li>emacs 通过 <a href="https://emacs-lsp.github.io/lsp-mode/page/lsp-volar/" target="_blank" rel="noreferrer">lsp-mode</a> 支持；</li>
</ul>
</li>
</ul>
<p>浏览器开发者插件：
Vue 的浏览器开发者插件使我们可以浏览一个 Vue 应用的组件树，查看各个组件的状态，追踪状态管理的事件，还可以进行组件性能分析</p>
<ul>
<li><a href="https://devtools.vuejs.org/" target="_blank" rel="noreferrer">文档</a></li>
<li><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="noreferrer">Chrome 扩展商店页</a></li>
</ul>
<p>TypeScript：
具体细节请参考章节：<a href="https://cn.vuejs.org/guide/typescript/overview.html" target="_blank" rel="noreferrer">配合 TypeScript 使用 Vue</a>。</p>
<ul>
<li><a href="https://github.com/johnsoncodehk/volar" target="_blank" rel="noreferrer">Volar</a> 插件能够为 <code>&lt;script lang=&quot;ts&quot;&gt;</code> 块提供类型检查，也能对模板内表达式和组件之间 props 提供自动补全和类型验证。</li>
<li>使用 <a href="https://github.com/vuejs/language-tools/tree/master/packages/tsc" target="_blank" rel="noreferrer">vue-tsc</a> 可以在命令行中执行相同的类型检查，通常用来生成单文件组件的 d.ts 文件</li>
</ul>
<p>测试：
具体细节请参考章节：<a href="https://cn.vuejs.org/guide/scaling-up/testing.html" target="_blank" rel="noreferrer">测试指南</a>。</p>
<ul>
<li><a href="https://www.cypress.io/" target="_blank" rel="noreferrer">Cypress</a> 推荐用于 E2E 测试。也可以通过 <a href="https://docs.cypress.io/guides/component-testing/introduction" target="_blank" rel="noreferrer">Cypress 组件测试运行器</a>来给 Vue SFC 作单文件组件测试。</li>
<li><a href="https://vitest.dev/" target="_blank" rel="noreferrer">Vitest</a> 是一个追求更快运行速度的测试运行器，由 Vue / Vite 团队成员开发。主要针对基于 Vite 的应用设计，可以为组件提供即时响应的测试反馈。</li>
<li><a href="https://jestjs.io/" target="_blank" rel="noreferrer">Jest</a> 可以通过 <a href="https://github.com/sodatea/vite-jest" target="_blank" rel="noreferrer">vite-jest</a> 配合 Vite 使用。不过只推荐在你已经有一套基于 Jest 的测试集、且想要迁移到基于 Vite 的开发配置时使用，因为 Vitest 也能够提供类似的功能，且后者与 Vite 的集成更方便高效</li>
</ul>
<p>代码规范：</p>
<ul>
<li><a href="https://github.com/johnsoncodehk/volar" target="_blank" rel="noreferrer">Volar</a> VSCode 插件为 Vue SFC 提供了开箱即用的格式化功能。</li>
<li>除此之外，<a href="https://prettier.io/" target="_blank" rel="noreferrer">Prettier</a> 也提供了内置的 Vue SFC 格式化支持。</li>
</ul>
<p>SFC 自定义块集成：
自定义块被编译成导入到同一 Vue 文件的不同请求查询。这取决于底层构建工具如何处理这类导入请求。</p>
<ul>
<li>如果使用 Vite，需使用一个自定义 Vite 插件将自定义块转换为可执行的 JavaScript 代码。<a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-transforming-custom-blocks" target="_blank" rel="noreferrer">示例</a>。</li>
<li>如果使用 Vue CLI 或只是 webpack，需要使用一个 loader 来配置如何转换匹配到的自定义块。<a href="https://vue-loader.vuejs.org/zh/guide/custom-blocks.html" target="_blank" rel="noreferrer">示例</a></li>
</ul>
<p>底层库：
@vue/compiler-sfc：提供了处理 Vue SFC 的底层的功能，并只适用于需要支持 Vue SFC 相关工具链的开发者；
@vitejs/plugin-vue：为 Vite 提供 Vue SFC 支持的官方插件
vue-loader：为 webpack 提供 Vue SFC 支持的官方 loader。如果你正在使用 Vue CLI，也可以看看<a href="https://cli.vuejs.org/zh/guide/webpack.html#%E4%BF%AE%E6%94%B9-loader-%E9%80%89%E9%A1%B9" target="_blank" rel="noreferrer">如何在 Vue CLI 中更改vue-loader选项的文档</a></p>
<p>其他在线演练场：</p>
<ul>
<li><a href="https://play.vueuse.org/" target="_blank" rel="noreferrer">VueUse Playground</a></li>
<li><a href="https://replit.com/@templates/VueJS-with-Vite" target="_blank" rel="noreferrer">Vue + Vite on Repl.it</a></li>
<li><a href="https://codesandbox.io/s/vue-3" target="_blank" rel="noreferrer">Vue on CodeSandbox</a></li>
<li><a href="https://codepen.io/pen/editor/vue" target="_blank" rel="noreferrer">Vue on Codepen</a></li>
<li><a href="https://components.studio/create/vue3" target="_blank" rel="noreferrer">Vue on Components.studio</a></li>
<li><a href="https://webcomponents.dev/create/cevue" target="_blank" rel="noreferrer">Vue on WebComponents.dev</a></li>
</ul>
<h3 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-label="Permalink to &quot;路由&quot;">&ZeroWidthSpace;</a></h3>
<p>客户端 vs 服务端路由：
服务端路由指的是服务器根据用户访问的 URL 路径返回不同的响应结果。当我们在一个传统的服务端渲染的 web 应用中点击一个链接时，浏览器会从服务端获得全新的 HTML，然后重新加载整个页面</p>
<p>然而，在<a href="https://developer.mozilla.org/en-US/docs/Glossary/SPA" target="_blank" rel="noreferrer">单页面应用</a>中，客户端的 JavaScript 可以拦截页面的跳转请求，动态获取新的数据，然后在无需重新加载的情况下更新当前页面。这样通常可以带来更顺滑的用户体验，尤其是在更偏向“应用”的场景下，因为这类场景下用户通常会在很长的一段时间中做出多次交互</p>
<p>在这类单页应用中，“路由”是在客户端执行的。**一个客户端路由器的职责就是利用诸如 <strong><a href="https://developer.mozilla.org/en-US/docs/Web/API/History" target="_blank" rel="noreferrer"><strong>History API</strong></a></strong> 或是 **<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event" target="_blank" rel="noreferrer"><strong>hashchange事件</strong></a><strong>这样的浏览器 API 来管理应用当前应该渲染的视图</strong></p>
<p>官方路由：
官方支持的<a href="https://github.com/vuejs/router" target="_blank" rel="noreferrer">路由库</a>。要了解更多细节，请查看 <a href="https://router.vuejs.org/zh/" target="_blank" rel="noreferrer">Vue Router 的文档</a></p>
<p>从头开始实现一个简单的路由：
通过<a href="https://cn.vuejs.org/guide/essentials/component-basics.html#dynamic-components" target="_blank" rel="noreferrer">动态组件</a>的方式，监听浏览器 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event" target="_blank" rel="noreferrer">hashchange事件</a>或使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History" target="_blank" rel="noreferrer">History API</a> 来更新当前组件：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref, computed } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Home </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './Home.vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> About </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './About.vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> NotFound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './NotFound.vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> routes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">  '/'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: Home,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">  '/about'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: About</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> currentPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(window.location.hash)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hashchange'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  currentPath.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> window.location.hash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> currentView</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> routes[currentPath.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '/'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> NotFound</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"#/"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Home</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"#/about"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">About</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"#/non-existent-path"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Broken Link</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"currentView"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><h3 id="状态管理" tabindex="-1">状态管理 <a class="header-anchor" href="#状态管理" aria-label="Permalink to &quot;状态管理&quot;">&ZeroWidthSpace;</a></h3>
<p>什么是状态管理：
理论上来说，每一个 Vue 组件实例都已经在“管理”它自己的响应式状态了：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 动作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  count.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 视图 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ count }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>独立的单元：</p>
<ul>
<li>状态：驱动整个应用的数据源；</li>
<li>视图：对状态的一种声明式映射；</li>
<li>交互：状态根据用户在视图中的输入而作出相应变更的可能方式</li>
</ul>
<p>单项数据流：</p>
<CustomImage src='/growth-record/frame/vue/vue3study10.webp' /><p>多个组件共享一个状态：</p>
<ol>
<li>多个视图可能都依赖于同一份状态。</li>
<li>来自不同视图的交互也可能需要更改同一份状态。</li>
</ol>
<p>解决方案：</p>
<ul>
<li>一是一个可行的办法是将共享状态“提升”到共同的祖先组件上去，再通过 props 传递下来。然而在深层次的组件树结构中这么做的话，很快就会使得代码变得繁琐冗长。这会导致另一个问题：<a href="https://cn.vuejs.org/guide/components/provide-inject.html#prop-drilling" target="_blank" rel="noreferrer">Prop 逐级透传问题</a></li>
<li>二是直接通过模板引用获取父/子实例，或者通过触发的事件尝试改变和同步多个状态的副本。但这些模式的健壮性都不甚理想，很容易就会导致代码难以维护；</li>
</ul>
<p><strong>最好的解决方案是：</strong>
<strong>一个更简单直接的解决方案是抽取出组件间的共享状态，放在一个全局单例中来管理。这样我们的组件树就变成了一个大的“视图”，而任何位置上的组件都可以访问其中的状态或触发动作</strong></p>
<p>用响应式 API 做简单状态管理：
<strong>reactive：</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// store.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { reactive } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ComponentA.vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { store } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './store.js'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>From </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {{ store.count }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ComponentB.vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { store } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './store.js'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>From </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {{ store.count }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button @click</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"store.count++"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    From </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {{ store.count }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// -------------------------</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 可以被任何组件任意改变的全局状态是不太容易维护的。为了确保改变状态的逻辑像状态本身一样集中，建议在 store 上定义方法，方法的名称应该要能表达出行动的意图</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// store.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { reactive } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 请注意这里点击的处理函数使用了 store.increment()，带上了圆括号作为内联表达式调用，因为它并不是组件的方法，并且必须要以正确的 this 上下文来调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用其他响应式 API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 全局状态，创建在模块作用域下</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> globalCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 局部状态，每个组件都会创建</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> localCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    globalCount,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    localCount</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>SSR 服务端渲染：</p>
<p>Pinia：</p>
<ul>
<li>更强的团队协作约定；</li>
<li>与 Vue DevTools 集成，包括时间轴、组件内部审查和时间旅行调试；</li>
<li>模块热更新 (HMR)；</li>
<li>服务端渲染支持；</li>
</ul>
<ol>
<li>Vuex 现在处于维护模式。它仍然可以工作，但不再接受新的功能；</li>
<li>Pinia 最初正是为了探索 Vuex 的下一个版本而开发的，因此整合了核心团队关于 Vuex 5 的许多想法。最终，我们意识到 Pinia 已经实现了我们想要在 Vuex 5 中提供的大部分内容，因此决定将其作为新的官方推荐；</li>
</ol>
<p>优点：</p>
<ul>
<li>更简洁直接的 API；</li>
<li>组合式风格的 API；</li>
<li>支持 TypeScript 类型推导；</li>
</ul>
<h3 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">&ZeroWidthSpace;</a></h3>
<p>测试的类型：</p>
<ul>
<li>单元测试：检查给定函数、类或组合式函数的输入是否产生预期的输出或副作用。</li>
<li>组件测试：检查你的组件是否正常挂载和渲染、是否可以与之互动，以及表现是否符合预期。这些测试比单元测试导入了更多的代码，更复杂，需要更多时间来执行。</li>
<li>端到端测试：检查跨越多个页面的功能，并对生产构建的 Vue 应用进行实际的网络请求。这些测试通常涉及到建立一个数据库或其他后端</li>
</ul>
<p>单元测试：
编写单元测试是为了验证小的、独立的代码单元是否按预期工作。一个单元测试通常覆盖一个单个函数、类、组合式函数或模块。单元测试侧重于逻辑上的正确性，只关注应用整体功能的一小部分。他们可能会模拟你的应用环境的很大一部分（如初始状态、复杂的类、第三方模块和网络请求）
单元测试将捕获函数的业务逻辑和逻辑正确性的问题</p>
<p>单元测试通常适用于独立的业务逻辑、组件、类、模块或函数，不涉及 UI 渲染、网络请求或其他环境问题</p>
<p>组合式函数：</p>
<p>组件的单元测试：</p>
<ol>
<li>白盒：<strong>单元测试白盒测试知晓一个组件的实现细节和依赖关系</strong>。它们更专注于将组件进行更 独立 的测试。这些测试通常会涉及到模拟一些组件的部分子组件，以及设置插件的状态和依赖性（例如 Pinia）。</li>
<li>黑盒：<strong>组件测试黑盒测试不知晓一个组件的实现细节</strong>。这些测试尽可能少地模拟，以测试组件在整个系统中的集成情况。它们通常会渲染所有子组件，因而会被认为更像一种“集成测试”。请查看下方的<a href="https://cn.vuejs.org/guide/scaling-up/testing.html#component-testing" target="_blank" rel="noreferrer">组件测试建议</a>作进一步了解</li>
</ol>
<p>推荐方案：
<a href="https://vitest.dev/" target="_blank" rel="noreferrer">Vitest</a>
因为由 create-vue 创建的官方项目配置是基于 <a href="https://cn.vitejs.dev/" target="_blank" rel="noreferrer">Vite</a> 的，所以我们推荐你使用一个可以利用同一套 Vite 配置和转换管道的<strong>单元测试框架</strong>。<a href="https://cn.vitest.dev/" target="_blank" rel="noreferrer">Vitest</a> 正是一个针对此目标设计的单元测试框架，它由 Vue / Vite 团队成员开发和维护。<strong>在 Vite 的项目集成它会非常简单，而且速度非常快</strong></p>
<p><a href="https://jestjs.io/" target="_blank" rel="noreferrer">Jest</a> 是一个广受欢迎的单元测试框架。不过，只推荐你在已有一套 Jest 测试配置、且需要迁移到基于 Vite 的项目时使用它，因为 Vitest 提供了更无缝的集成和更好的性能</p>
<p>组件测试：
组件测试应该捕捉组件中的 prop、事件、提供的插槽、样式、CSS class 名、生命周期钩子，和其他相关的问题</p>
<p>组件测试主要需要关心组件的公开接口而不是内部实现细节。对于大部分的组件来说，公开接口包括触发的事件、prop 和插槽。当进行测试时，请记住，测试这个组件做了什么，而不是测试它是怎么做到的</p>
<p>推荐做法：</p>
<ul>
<li>对于 视图 的测试：根据输入 prop 和插槽断言渲染输出是否正确。</li>
<li>对于 交互 的测试：断言渲染的更新是否正确或触发的事件是否正确地响应了用户输入事件</li>
</ul>
<p>应避免的做法：</p>
<ul>
<li>不要去断言一个组件实例的私有状态或测试一个组件的私有方法。测试实现细节会使测试代码太脆弱，因为当实现发生变化时，它们更有可能失败并需要更新重写。</li>
<li>组件的最终工作是渲染正确的 DOM 输出，所以专注于 DOM 输出的测试提供了足够的正确性保证（如果你不需要更多其他方面测试的话），同时更加健壮、需要的改动更少。</li>
<li>不要完全依赖快照测试。断言 HTML 字符串并不能完全说明正确性。应当编写有意图的测试。</li>
<li>如果一个方法需要测试，把它提取到一个独立的实用函数中，并为它写一个专门的单元测试。如果它不能被直截了当地抽离出来，那么对它的调用应该作为交互测试的一部分</li>
</ul>
<p>推荐方案：</p>
<ul>
<li><a href="https://vitest.dev/" target="_blank" rel="noreferrer">Vitest</a> 对于组件和组合式函数都采用无头渲染的方式 (例如 VueUse 中的 <a href="https://vueuse.org/core/useFavicon/#usefavicon" target="_blank" rel="noreferrer">useFavicon</a> 函数)。组件和 DOM 都可以通过 <a href="https://github.com/vuejs/test-utils" target="_blank" rel="noreferrer">@vue/test-utils</a> 来测试。</li>
<li><a href="https://on.cypress.io/component" target="_blank" rel="noreferrer">Cypress 组件测试</a> 会预期其准确地渲染样式或者触发原生 DOM 事件。它可以搭配 <a href="https://testing-library.com/docs/cypress-testing-library/intro" target="_blank" rel="noreferrer">@testing-library/cypress</a> 这个库一同进行测试</li>
</ul>
<p>Vitest 和基于浏览器的运行器之间的主要区别是速度和执行上下文。简而言之，基于浏览器的运行器，如 Cypress，可以捕捉到基于 Node 的运行器（如 Vitest）所不能捕捉的问题（比如样式问题、原生 DOM 事件、Cookies、本地存储和网络故障），但基于浏览器的运行器比 Vitest 慢几个数量级，因为它们要执行打开浏览器，编译样式表以及其他步骤。Cypress 是一个基于浏览器的运行器，支持组件测试。请阅读 <a href="https://vitest.dev/guide/comparisons.html#cypress" target="_blank" rel="noreferrer">Vitest 文档的“比较”这一章</a> 了解 Vitest 和 Cypress 最新的比较信息</p>
<p>组件挂载库：
组件测试通常涉及到单独挂载被测试的组件，触发模拟的用户输入事件，并对渲染的 DOM 输出进行断言。有一些专门的工具库可以使这些任务变得更简单。</p>
<ul>
<li><a href="https://github.com/vuejs/test-utils" target="_blank" rel="noreferrer">@vue/test-utils</a> 是<strong>官方的底层组件测试库，用来提供给用户访问 Vue 特有的 API</strong>。@testing-library/vue 也是基于此库构建的。</li>
<li><a href="https://github.com/testing-library/vue-testing-library" target="_blank" rel="noreferrer">@testing-library/vue</a> 是一个<strong>专注于测试组件而不依赖于实现细节的 Vue 测试库</strong>。它的指导原则是：测试越是类似于软件的使用方式，它们就能提供越多的信心</li>
</ul>
<p>注意⚠️：推荐在应用中使用 @vue/test-utils 测试组件。@testing-library/vue 在测试带有 Suspense 的异步组件时存在问题，在使用时需要谨慎</p>
<p>其他选择：</p>
<ul>
<li><a href="https://v2.nightwatchjs.org/" target="_blank" rel="noreferrer">Nightwatch</a> 是一个端到端测试运行器，支持 Vue 的组件测试。(Nightwatch v2 版本的 <a href="https://github.com/nightwatchjs-community/todo-vue" target="_blank" rel="noreferrer">示例项目</a>)；</li>
<li><a href="https://webdriver.io/docs/component-testing/vue" target="_blank" rel="noreferrer">WebdriverIO</a> 用于跨浏览器组件测试，该测试依赖于基于标准自动化的原生用户交互。它也可以与测试库一起使用；</li>
</ul>
<p>端到端（E2E）测试：</p>
<ul>
<li>端到端测试针对的可以说是应用最重要的方面：当用户实际使用你的应用时发生了什么。</li>
<li>端到端测试的重点是多页面的应用表现，针对你的应用在生产环境下进行网络请求。他们通常需要建立一个数据库或其他形式的后端，甚至可能针对一个预备上线的环境运行。</li>
<li>端到端测试通常会捕捉到路由、状态管理库、顶级组件（常见为 App 或 Layout）、公共资源或任何请求处理方面的问题。如上所述，它们可以捕捉到单元测试或组件测试无法捕捉的关键问题。</li>
<li>端到端测试不导入任何 Vue 应用的代码，而是完全依靠在真实浏览器中浏览整个页面来测试你的应用。</li>
<li>端到端测试验证了你的应用中的许多层。可以在你的本地构建的应用中，甚至是一个预上线的环境中运行。针对预上线环境的测试不仅包括你的前端代码和静态服务器，还包括所有相关的后端服务和基础设施</li>
</ul>
<p>解决方案：</p>
<ul>
<li>跨浏览器测试：</li>
<li>更快的反馈：</li>
<li>第一优先级的调试体验：</li>
<li>无头模式下的可见性：</li>
</ul>
<p><a href="https://www.cypress.io/" target="_blank" rel="noreferrer">Cypress</a>总的来说，我们认为 Cypress 提供了最完整的端到端解决方案，其具有信息丰富的图形界面、出色的调试性、内置断言和存根、抗剥落性、并行化和快照等诸多特性。而且如上所述，它还提供对 <a href="https://docs.cypress.io/guides/component-testing/introduction" target="_blank" rel="noreferrer">组件测试</a> 的支持。不过，它只支持测试基于 Chromium 的浏览器和 Firefox。
其他选项：</p>
<ul>
<li><a href="https://playwright.dev/" target="_blank" rel="noreferrer">Playwright</a> 也是一个非常好的端到端测试解决方案，支持测试范围更广的浏览器品类（主要是 WebKit 型的）。查看这篇文章 <a href="https://playwright.dev/docs/why-playwright" target="_blank" rel="noreferrer">《为什么选择 Playwright》</a> 了解更多细节。</li>
<li><a href="https://nightwatchjs.org/" target="_blank" rel="noreferrer">Nightwatch</a> 是一个基于 <a href="https://www.npmjs.com/package/selenium-webdriver" target="_blank" rel="noreferrer">Selenium WebDriver</a> 的端到端测试解决方案。它的浏览器品类支持范围是最广的。</li>
<li><a href="https://webdriver.io/" target="_blank" rel="noreferrer">WebdriverIO</a> 是一个基于 WebDriver 协议的网络和移动测试的自动化测试框架</li>
</ul>
<p>AI 总结：</p>
<ol>
<li><strong>为什么需要测试</strong>：
<ul>
<li>自动化测试可以预防 bug，鼓励开发者构建可测试、可维护的代码。</li>
<li>测试有助于快速、自信地构建复杂的 Vue 应用。</li>
<li>在发布前发现并解决问题至关重要。</li>
</ul>
</li>
<li><strong>何时测试</strong>：
<ul>
<li>建议尽早开始编写测试，随着应用复杂度增加，添加测试的难度也会增加。</li>
</ul>
</li>
<li><strong>测试的类型</strong>：
<ul>
<li><strong>单元测试</strong>：验证小的、独立的代码单元（如函数、类、组合式函数或模块）是否按预期工作。</li>
<li><strong>组件测试</strong>：验证组件是否正常挂载、渲染和响应用户交互。</li>
<li><strong>端到端（E2E）测试</strong>：跨越多个页面，对生产构建的 Vue 应用进行实际网络请求的测试。</li>
</ul>
</li>
<li><strong>单元测试</strong>：
<ul>
<li>单元测试关注逻辑正确性，通常模拟应用环境的大部分。</li>
<li>单元测试适用于独立的业务逻辑、组件、类、模块或函数。</li>
<li>推荐使用 Vitest（基于 Vite 的测试框架）或 Jest（如果已有 Jest 配置）。</li>
</ul>
</li>
<li><strong>组件测试</strong>：
<ul>
<li>组件测试关注组件的公开接口，如 prop、事件、插槽、样式等。</li>
<li>应该模拟用户交互，而不是直接与组件编程式交互。</li>
<li>推荐使用 Vue Test Utils 和 @testing-library/vue。</li>
</ul>
</li>
<li><strong>端到端（E2E）测试</strong>：
<ul>
<li>E2E 测试关注用户实际使用应用时的行为。</li>
<li>需要建立数据库或其他后端服务。</li>
<li>现代 E2E 测试工具如 Cypress 提供了丰富的调试功能和并行化支持。</li>
</ul>
</li>
<li><strong>测试组合式函数</strong>：
<ul>
<li>组合式函数的测试分为依赖宿主组件实例和不依赖的两类。</li>
<li>不依赖的组合式函数可以直接调用并断言其结果。</li>
<li>依赖的组合式函数需要在宿主组件中进行测试。</li>
</ul>
</li>
<li><strong>用例指南</strong>：
<ul>
<li>提供了如何在基于 Vite 的 Vue 项目中添加 Vitest 和进行测试的步骤。</li>
</ul>
</li>
</ol>
<p>页面还提到了一些测试工具和库，如 Vitest、Jest、Vue Test Utils、@testing-library/vue、Cypress 和 Playwright，以及它们在 Vue.js 应用测试中的应用。此外，还强调了测试应该尽可能模拟真实的用户行为，以及如何通过测试来提高应用的可靠性和维护性。</p>
<h3 id="服务端渲染-ssr" tabindex="-1">服务端渲染（SSR） <a class="header-anchor" href="#服务端渲染-ssr" aria-label="Permalink to &quot;服务端渲染（SSR）&quot;">&ZeroWidthSpace;</a></h3>
<p>AI 总结：</p>
<ol>
<li>为什么要用 SSR？ SSR 提供了更快的首屏加载时间，这对于用户体验和 SEO 都非常重要。它允许搜索引擎爬虫直接看到完全渲染的页面，这对于内容驱动的网站尤其有用。</li>
<li>SSR vs. SSG：静态站点生成（SSG）是另一种技术，它在构建时生成静态 HTML 文件，适用于数据在构建时已知且不会改变的场景。SSG 更适合于内容网站，而 SSR 适合于需要动态数据的应用。</li>
<li>基础教程：文档提供了一个简单的 SSR 示例，展示了如何在 Node.js 服务器上创建一个 Vue SSR 应用，并在客户端激活它。</li>
<li>客户端激活：在 SSR 应用中，客户端需要执行一个激活步骤，以便将预渲染的 HTML 与 DOM 节点匹配并添加事件监听器。</li>
<li>代码结构：为了在客户端复用服务端的应用实现，需要考虑如何在服务器和客户端之间共享相同的应用代码。</li>
<li>更通用的解决方案：文档推荐使用如 Nuxt、Quasar 或 Vite SSR 这样的解决方案，它们提供了更集成化的 SSR 开发体验。</li>
<li>书写 SSR 友好的代码：在 SSR 应用中，需要注意服务端的响应性、组件生命周期钩子、平台特有 API 的访问、跨请求状态污染、激活不匹配等问题。</li>
<li>Teleports：在 SSR 中，Teleport 组件需要特殊处理，因为它们的内容不会包含在主应用渲染的 HTML 字符串中</li>
</ol>
<p>什么是 SSR：
Vue.js 是一个用于构建客户端应用的框架。默认情况下，<strong>Vue 组件的职责是在浏览器中生成和操作 DOM</strong>。然而，Vue 也支持将组件在服务端直接<strong>渲染成 HTML 字符串</strong>，作为服务端响应返回给浏览器，最后在浏览器端将静态的 HTML“激活”(hydrate) 为能够交互的客户端应用。
一个由服务端渲染的 Vue.js 应用也可以被认为是“同构的”(Isomorphic) 或“通用的”(Universal)，因为应用的大部分代码同时运行在服务端和客户端</p>
<p>为什么要用 SSR：
与客户端的单页应用 (SPA) 相比，SSR 的优势主要在于：</p>
<ul>
<li><strong>更快的首屏加载</strong>：这一点在慢网速或者运行缓慢的设备上尤为重要。服务端渲染的 HTML 无需等到所有的 JavaScript 都下载并执行完成之后才显示，所以你的用户将会更快地看到完整渲染的页面。除此之外，数据获取过程在首次访问时在服务端完成，相比于从客户端获取，可能有更快的数据库连接。这通常可以带来更高的<a href="https://web.dev/vitals/" target="_blank" rel="noreferrer">核心 Web 指标</a>评分、更好的用户体验，而对于那些“首屏加载速度与转化率直接相关”的应用来说，这点可能至关重要。</li>
<li><strong>统一的心智模型</strong>：你可以使用相同的语言以及相同的声明式、面向组件的心智模型来开发整个应用，而不需要在后端模板系统和前端框架之间来回切换。</li>
<li><strong>更好的 SEO</strong>：搜索引擎爬虫可以直接看到完全渲染的页面。</li>
</ul>
<p>注意⚠️：截至目前，Google 和 Bing 可以很好地对同步 JavaScript 应用进行索引。这里的“同步”是关键词。如果你的应用以一个 loading 动画开始，然后通过 Ajax 获取内容，爬虫并不会等到内容加载完成再抓取。也就是说，如果 SEO 对你的页面至关重要，而你的内容又是异步获取的，那么 SSR 可能是必需的</p>
<p>使用 SSR 时还有一些权衡之处需要考量：</p>
<ul>
<li><strong>开发中的限制。浏览器端特定的代码只能在某些生命周期钩子中使用</strong>；一些外部库可能需要特殊处理才能在服务端渲染的应用中运行。</li>
<li><strong>更多的与构建配置和部署相关的要求</strong>。<strong>服务端渲染的应用需要一个能让 Node.js 服务器运行的环境，不像完全静态的 SPA 那样可以部署在任意的静态文件服务器上</strong>。</li>
<li><strong>更高的服务端负载</strong>。在 Node.js 中渲染一个完整的应用要比仅仅托管静态文件更加占用 CPU 资源，因此如果你预期有高流量，请为相应的服务器负载做好准备，并采用合理的缓存策略。</li>
</ul>
<p>注意⚠️：在为你的应用使用 SSR 之前，你首先应该问自己是否真的需要它。这主要取决于首屏加载速度对应用的重要程度。例如，如果你正在开发一个内部的管理面板，初始加载时的那额外几百毫秒对你来说并不重要，这种情况下使用 SSR 就没有太多必要了。然而，在内容展示速度极其重要的场景下，<strong>SSR 可以尽可能地帮你实现最优的初始加载性能</strong></p>
<p>SSR vs SSG：
<strong>静态站点生成 (Static-Site Generation，缩写为 SSG)，也被称为预渲染，是另一种流行的构建快速网站的技术</strong>。如果用服务端渲染一个页面所需的数据对每个用户来说都是相同的，那么我们可以只渲染一次，提前在构建过程中完成，而不是每次请求进来都重新渲染页面。预渲染的页面生成后作为静态 HTML 文件被服务器托管。
SSG 保留了和 SSR 应用相同的性能表现：它带来了优秀的首屏加载性能。同时，它比 SSR 应用的花销更小，也更容易部署，因为它输出的是静态 HTML 和资源文件。这里的关键词是静态：SSG 仅可以用于消费静态数据的页面，即数据在构建期间就是已知的，并且在多次部署期间不会改变。<strong>每当数据变化时，都需要重新部署</strong></p>
<p>如果你调研 SSR 只是为了优化为数不多的营销页面的 SEO (例如 /、/about 和 /contact 等)，那么你可能需要 SSG 而不是 SSR。SSG 也非常适合构建基于内容的网站，比如文档站点或者博客。<strong>Vue 官方文档这个网站就是使用 <strong><a href="https://vitepress.dev/" target="_blank" rel="noreferrer"><strong>VitePress</strong></a></strong> 静态生成的，它是一个由 Vue 驱动的静态站点生成器</strong></p>
<p>框架推荐：</p>
<ul>
<li>Nuxt</li>
</ul>
<p><a href="https://nuxt.com/" target="_blank" rel="noreferrer">Nuxt</a> 是一个构建于 Vue 生态系统之上的全栈框架，它为编写 Vue SSR 应用提供了丝滑的开发体验。更棒的是，你还可以把它当作一个静态站点生成器来用！</p>
<ul>
<li>Quasar</li>
</ul>
<p><a href="https://quasar.dev/" target="_blank" rel="noreferrer">Quasar</a> 是一个基于 Vue 的完整解决方案，它可以让你用同一套代码库构建不同目标的应用，如 SPA、SSR、PWA、移动端应用、桌面端应用以及浏览器插件。除此之外，它还提供了一整套 Material Design 风格的组件库</p>
<ul>
<li>Vite SSR</li>
</ul>
<p>Vite 提供了内置的 <a href="https://cn.vitejs.dev/guide/ssr.html" target="_blank" rel="noreferrer">Vue 服务端渲染支持</a>，但它在设计上是偏底层的。如果你想要直接使用 Vite，可以看看 <a href="https://vite-plugin-ssr.com/" target="_blank" rel="noreferrer">vite-plugin-ssr</a>，一个帮你抽象掉许多复杂细节的社区插件。
你也可以在<a href="https://github.com/vitejs/vite-plugin-vue/tree/main/playground/ssr-vue" target="_blank" rel="noreferrer">这里</a>查看一个使用手动配置的 Vue + Vite SSR 的示例项目，以它作为基础来构建。请注意，这种方式只有在你有丰富的 SSR 和构建工具经验，并希望对应用的架构做深入的定制时才推荐使用</p>
<p>书写 SSR 友好的代码：</p>
<ul>
<li>服务端响应性；</li>
<li>组件生命周期钩子；</li>
<li>访问平台特有的 API（node-fetch）；</li>
<li>跨请求状态污染；</li>
<li>激活不匹配；</li>
<li>自定义指令；</li>
<li>Teleports；</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue3 学习笔记（三）]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/vue3-study-03.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/vue3-study-03.html</guid>
            <pubDate>Sat, 23 Dec 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[# Vue3 学习笔记（三）
## 最佳实践
### 生产部署

:::info
这个页面是关于 `Vue.js` 生产部署的最佳实践指南。它主要讨论了在将 `Vue.js` 应用部署到生产环境时应该考虑的几个关键点：

1.  **开发环境与生产环境的区别**：`Vue.js` 在开发过程中提供了许多便利功能，如错误警告、组件 props 校验等。但在生产环境中，这些功能可能会导致性能开销，**因此应该移除所有仅用于开发环境的代码**。
2.  **不使用构建工具的情况**：如果你直接从 CDN 加载 `Vue.js`，确保使用的是生产环境版本（以`.prod.js`结尾的文件）。这些文件已经过最小化处理，移除了开发环境代码。
3.  **使用构建工具**：如果你使用`create-vue`（基于Vite）或Vue CLI（基于 webpack）创建的项目，它们已经配置好了生产环境。如果你有自定义构建流程，确保`Vue.js` 被解析为`vue.runtime.esm-bundler.js`，并且`process.env.NODE_ENV`在构建时被设置为`"production"`。
4.  **追踪运行时错误**：在生产环境中，你可以使用应用级错误处理来向追踪服务报告错误。例如，可以使用 Sentry 或 Bugsnag 等服务，并在Vue应用中设置错误处理器。

页面还提供了一些额外的资源链接，如 Vite 生产环境指南和 Vue CLI 部署指南，以及如何编辑该页面的 GitHub 链接
:::

开发环境 VS 生产环境：
开发体验：

- 对常见错误和隐患的警告
- 对组件 `props` / 自定义事件的校验
- [响应性调试钩子](https://cn.vuejs.org/guide/extras/reactivity-in-depth.html#reactivity-debugging)
- 开发工具集成

当部署到生产环境中时，应该移除所有未使用的、仅用于开发环境的代码分支，来获得更小的包体积和更好的性能

不使用构建工具：
从 CDN 或其他源来加载 Vue，请确保在部署时使用的是生产环境版本（以 `.prod.js` 结尾的构建文件）。生产环境版本会被最小化，并移除了所有仅用于开发环境的代码分支

使用构建工具：
`create-vue`

1. vue 被解析为 `vue.runtime.esm-bundler.js`。
2. [编译时功能标记](https://github.com/vuejs/core/tree/main/packages/vue#bundler-build-feature-flags)已被正确配置。
3. `process.env.NODE_ENV` 会在构建时被替换为 "production"

追踪运行时错误：
[应用级错误处理](https://cn.vuejs.org/api/application.html#app-config-errorhandler) 可以用来向追踪服务报告错误：

```typescript
import { createApp } from 'vue'
const app = createApp(...)
app.config.errorHandler = (err, instance, info) => {
  // 向追踪服务报告错误
}
```

诸如 [Sentry](https://docs.sentry.io/platforms/javascript/guides/vue/) 和 [Bugsnag](https://docs.bugsnag.com/platforms/javascript/vue/) 等服务也为 Vue 提供了官方集成

### 性能优化
:::info
您提供的链接是 `Vue.js` 的官方文档页面，专门讨论了 `Vue.js` 应用的性能优化。这个页面涵盖了 `Vue.js` 应用在页面加载性能和更新性能方面的优化技巧。以下是一些关键点的概述：

1.  **性能优化概述**：
   - `Vue.js `在大多数场景下性能表现良好，但有时需要针对性的微调。
   - 性能优化分为页面加载性能和更新性能两个方面。
2.  **分析选项**：
   - 使用工具如 PageSpeed Insights、WebPageTest 和 Chrome 开发者工具来衡量性能。
   - Vue 开发者扩展提供了性能分析功能。
3.  **页面加载优化**：
   - 对于页面加载性能敏感的应用，考虑使用服务器端渲染 (SSR) 或静态站点生成 (SSG)。
   - 避免纯客户端的单页面应用 (SPA)，或者将营销相关页面单独部署。
   - 通过构建步骤减小打包产物体积，利用 Tree-shaking 移除未使用的模块。
   - 使用代码分割来按需加载 JavaScript，减少首次加载时的负担。
4.  **更新优化**：
   - 确保子组件的 props 保持稳定，以减少不必要的更新。
   - 使用 `v-once` 和 `v-memo` 指令来跳过某些更新。
   - 计算属性稳定性：从 Vue 3.4 开始，计算属性只在值改变时触发副作用。
5.  **通用优化技巧**：
   - 使用列表虚拟化技术（如 `vue-virtual-scroller` 或 `vue-virtual-scroll-grid`）来优化大型列表渲染。
   - 减少大型不可变数据的响应性开销，使用 `shallowRef` 或 `shallowReactive`。
   - 避免不必要的组件抽象，特别是在大型列表中。

这些优化技巧可以帮助开发者提高 `Vue.js` 应用的性能，无论是在首次加载还是后续的交互中。如果您有具体的问题或需要更详细的解释，请告诉我，我会尽力帮助您。
:::

web 应用性能：

- 页面加载性能：首次访问时，应用展示出内容与达到可交互状态的速度。这通常会用 Google 所定义的一系列 [Web 指标](https://web.dev/vitals/#core-web-vitals) (Web Vitals) 来进行衡量，如[最大内容绘制](https://web.dev/lcp/) (Largest Contentful Paint，缩写为 LCP) 和[首次输入延迟](https://web.dev/fid/) (First Input Delay，缩写为 FID)。
- 更新性能：应用响应用户输入更新的速度。比如当用户在搜索框中输入时结果列表的更新速度，或者用户在一个单页面应用 (SPA) 中点击链接跳转页面时的切换速度

优化性能第一步就是为了你的应用类型确定合适的架构：

- 查看[使用 Vue 的多种方式](https://cn.vuejs.org/guide/extras/ways-of-using-vue.html)这一章看看如何用不同的方式围绕 Vue 组织架构。
- Jason Miller 在 [Application Holotypes](https://jasonformat.com/application-holotypes/) 一文中讨论了 Web 应用的类型以及它们各自的理想实现/交付方式

分析工具：
用于生产部署的负载性能分析：

- [PageSpeed Insights](https://pagespeed.web.dev/)
- [WebPageTest](https://www.webpagetest.org/)

用于本地开发期间的性能分析：

- [Chrome 开发者工具“性能”面板](https://developer.chrome.com/docs/devtools/evaluate-performance/)
   - [app.config.performance](https://cn.vuejs.org/api/application.html#app-config-performance) 将会开启 Vue 特有的性能标记，标记在 Chrome 开发者工具的性能时间线上。
- [Vue 开发者扩展](https://cn.vuejs.org/guide/scaling-up/tooling.html#browser-devtools)也提供了性能分析的功能

页面加载优化：
**页面性能优化技巧，**[**web.dev 指南**](https://web.dev/fast/)**提供了一个全面的总结**

选用正确的架构：

- 纯客户端渲染存在首屏加载缓慢的问题，这可以通过[服务器端渲染 (SSR)](https://cn.vuejs.org/guide/extras/ways-of-using-vue.html#fullstack-ssr) 或[静态站点生成 (SSG)](https://cn.vuejs.org/guide/extras/ways-of-using-vue.html#jamstack-ssg) 来缓解。查看 [SSR 指南](https://cn.vuejs.org/guide/scaling-up/ssr.html)以了解如何使用 Vue 实现 SSR。如果应用对交互性要求不高，你还可以使用传统的后端服务器来渲染 HTML，并在客户端使用 Vue 对其进行增强
- 如果你的主应用必须是 SPA，但还有其他的营销相关页面 (落地页、关于页、博客等)，请单独部署这些页面！理想情况下，营销页面应该是包含尽可能少 JS 的静态 HTML，并用 SSG 方式部署

包体积与 `Tree-shaking` 优化：

- 采用构建步骤；tree-shake；
- 注意引入的依赖项；

代码分割：
**代码分割**是指构建工具将构建后的 JavaScript 包拆分为多个较小的，可以按需或并行加载的文件。通过适当的代码分割，页面加载时需要的功能可以立即下载，而额外的块只在需要时才加载，从而提高性能

```typescript
// lazy.js 及其依赖会被拆分到一个单独的文件中
// 并只在 `loadLazy()` 调用时才加载
function loadLazy() {
  return import('./lazy.js')
}
```

**懒加载**对于页面初次加载时的优化帮助极大，它帮助应用暂时略过了那些不是立即需要的功能。在 Vue 应用中，这可以与 Vue 的[异步组件](https://cn.vuejs.org/guide/components/async.html)搭配使用，为组件树创建分离的代码块：

```typescript
import { defineAsyncComponent } from 'vue'

// 会为 Foo.vue 及其依赖创建单独的一个块
// 它只会按需加载
//（即该异步组件在页面中被渲染时）
const Foo = defineAsyncComponent(() => import('./Foo.vue'))
```

更新优化：

- `Props` 稳定性：
```typescript
<ListItem
  v-for="item in list"
  :id="item.id"
  :active-id="activeId" />

// 优化
<ListItem
  v-for="item in list"
  :id="item.id"
  :active="item.id === activeId" />
```

注意⚠️：**这个技巧的核心思想就是让传给子组件的 `props` 尽量保持稳定**

`v-once：`
一个内置的指令，可以用来渲染依赖运行时数据但无需再更新的内容。它的整个子树都会在未来的更新中被跳过

`v-memo：`
一个内置指令，可以用来有条件地跳过某些大型子树或者 v-for 列表的更新

计算属性稳定性：
从 3.4 开始，计算属性仅在其计算值较前一个值发生更改时才会触发副作用：

```typescript
const count = ref(0)
const isEven = computed(() => count.value % 2 === 0)

watchEffect(() => console.log(isEven.value)) // true

// will not trigger new logs because the computed value stays `true`
count.value = 2
count.value = 4

// 注意计算返回对象：由于每次都会创建一个新对象，因此从技术上讲，新旧值始终不同。即使 isEven 属性保持不变，Vue 也无法知道，除非它对旧值和新值进行深度比较。这种比较可能代价高昂，并不值得
const computedObj = computed(() => {
  return {
    isEven: count.value % 2 === 0
  }
})
// 优化
const computedObj = computed((oldValue) => {
  const newValue = {
    isEven: count.value % 2 === 0
  }
  if (oldValue && oldValue.isEven === newValue.isEven) {
    return oldValue
  }
  return newValue
})
```

通用优化：
大型虚拟列表：

- [vue-virtual-scroller](https://github.com/Akryum/vue-virtual-scroller)
- [vue-virtual-scroll-grid](https://github.com/rocwang/vue-virtual-scroll-grid)
- [vueuc/VVirtualList](https://github.com/07akioni/vueuc)

减少大型不可变数据的响应式开销：
Vue 的响应性系统默认是深度的。虽然这让状态管理变得更直观，但在数据量巨大时，深度响应性也会导致不小的性能负担，因为每个属性访问都将触发代理的依赖追踪
通过使用 [`shallowRef()`](https://cn.vuejs.org/api/reactivity-advanced.html#shallowref) 和 [`shallowReactive()`](https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive) 来绕开深度响应。浅层式 API 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理。这使得对深层级属性的访问变得更快，但代价是，我们现在必须将所有深层级对象视为不可变的，并且只能通过替换整个根状态来触发更新：

```typescript
const shallowArray = shallowRef([
  /* 巨大的列表，里面包含深层的对象 */
])

// 这不会触发更新...
shallowArray.value.push(newObject)
// 这才会触发更新
shallowArray.value = [...shallowArray.value, newObject]

// 这不会触发更新...
shallowArray.value[0].foo = 1
// 这才会触发更新
shallowArray.value = [
  {
    ...shallowArray.value[0],
    foo: 1
  },
  ...shallowArray.value.slice(1)
]
```
避免不必要的组件抽象：
有些时候我们会去创建[无渲染组件](https://cn.vuejs.org/guide/components/slots.html#renderless-components)或高阶组件 (用来渲染具有额外 `props` 的其他组件) 来实现更好的抽象或代码组织。虽然这并没有什么问题，但请记住，**组件实例比普通 DOM 节点要昂贵得多，而且为了逻辑抽象创建太多组件实例将会导致性能损失**

### 无障碍访问
:::info
您提供的链接是 `Vue.js` 官方文档中的“无障碍访问”部分。无障碍访问（Accessibility）是确保网站或应用程序对所有用户，包括那些有视觉、听觉、运动或认知障碍的人，都是可用的。`Vue.js` 提供了一些最佳实践来帮助开发者创建无障碍的应用程序。

以下是一些关键点：

1.  **跳过链接（Skip Links）**：在每个页面顶部添加一个链接，允许用户跳过重复的导航内容，直接访问主要内容。
2.  **内容结构**：使用合适的HTML元素和ARIA角色（如`role="main"`）来组织内容，以便辅助技术可以正确地导航。
3.  **标题（Headings）**：正确使用标题标签（`<h1>`到`<h6>`），并按层次结构嵌套它们，以便用户可以通过标题来理解内容结构。
4.  **表单（Forms）**：确保表单元素有适当的标签（`<label>`），并使用`aria-label`或`aria-describedby`属性来提供额外的无障碍信息。
5.  **按钮（Buttons）**：使用`<button>`元素或带有`type="button"`的`<input>`元素来创建按钮，并确保它们有明确的用途。
6.  **功能图片（Functional Images）**：为具有功能的图片提供替代文本（`alt`属性），以便屏幕阅读器可以解释图片的功能。
7.  **无障碍标准（Accessibility Standards）**：遵循W3C的Web内容无障碍指南（WCAG）和Web无障碍倡议-无障碍访问丰富的互联网应用（WAI-ARIA）。
8.  **辅助技术（Assistive Technologies）**：了解并考虑如何与屏幕阅读器（如NVDA、VoiceOver）、缩放工具和其他辅助技术配合工作。
9.  **用户多样性（User Diversity）**：认识到全球有大量残障人士，他们的需求应该被考虑在内。

这些实践有助于提高应用程序的可访问性，确保所有用户都能平等地访问和使用您的Vue.js应用程序。如果您有关于如何实现这些最佳实践的具体问题，或者需要进一步的帮助，请告诉我。
:::

Web 无障碍访问 (也称为 a11y) 是指创建可供任何人使用的网站的做法——无论是身患某种障碍、通过慢速的网络连接访问、使用老旧或损坏的硬件，还是仅处于某种不方便的环境。例如，在视频中添加字幕可以帮助失聪、有听力障碍或身处嘈杂环境而听不到手机的用户。同样地，确保文字样式没有处于太低的对比度，可以对低视力用户和在明亮的强光下使用手机的用户都有所帮助
请先阅读由[万维网联盟 (W3C)](https://www.w3.org/) 提供的 [Web 无障碍访问的规划和管理](https://www.w3.org/WAI/planning-and-managing/)

跳过链接：
你应该在每个页面的顶部添加一个直接指向主内容区域的链接，这样用户就可以跳过在多个网页上重复的内容

```typescript
<ul class="skip-links">
  <li>
    <a href="#main" ref="skipLink" class="skip-link">Skip to main content</a>
  </li>
</ul>
```

一旦用户改变路由，请将焦点放回到这个“跳过”链接。通过如下方式聚焦“跳过”链接的模板引用 (假设使用了 `vue-router`) 即可实现：

```typescript
<script setup>
import { ref, watch } from 'vue'
import { useRoute } from 'vue-router'

const route = useRoute()
const skipLink = ref()

watch(
  () => route.path,
  () => {
    skipLink.value.focus()
  }
)
</script>
```

[阅读关于跳过链接到主要内容的文档](https://www.w3.org/WAI/WCAG21/Techniques/general/G1.html)

内容结构：
确保设计可以支持易于访问的实现是无障碍访问最重要的部分之一。设计不仅要考虑颜色对比度、字体选择、文本大小和语言，还要考虑应用中的内容是如何组织的

标题：
为应用的每个部分设置描述性的标题，可以让用户更容易地预测每个部分的内容

- 按级别顺序嵌套标题：`<h1> - <h6>`；
- 不要在一个章节内跳跃标题的级别；
- 使用实际的标题标记，而不是通过对文本设置样式以提供视觉上的标题；

[阅读更多有关标题的信息](https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-descriptive.html)

```typescript
<main role="main" aria-labelledby="main-title">
  <h1 id="main-title">Main title</h1>
  <section aria-labelledby="section-title-1">
    <h2 id="section-title-1"> Section Title </h2>
    <h3>Section Subtitle</h3>
    <!-- 内容 -->
  </section>
  <section aria-labelledby="section-title-2">
    <h2 id="section-title-2"> Section Title </h2>
    <h3>Section Subtitle</h3>
    <!-- 内容 -->
    <h3>Section Subtitle</h3>
    <!-- 内容 -->
  </section>
</main>
```

Landmarks：
[Landmark](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/landmark_role) 会为应用中的章节提供访问规划。依赖辅助技术的用户可以跳过内容直接导航到应用的每个部分。你可以使用 [ARIA role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles) 帮助你实现这个目标：

| HTML | ARIA Role | 地标的目的 |
| ]]></description>
            <content:encoded><![CDATA[<h1 id="vue3-学习笔记-三" tabindex="-1">Vue3 学习笔记（三） <a class="header-anchor" href="#vue3-学习笔记-三" aria-label="Permalink to &quot;Vue3 学习笔记（三）&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="生产部署" tabindex="-1">生产部署 <a class="header-anchor" href="#生产部署" aria-label="Permalink to &quot;生产部署&quot;">&ZeroWidthSpace;</a></h3>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>这个页面是关于 <code>Vue.js</code> 生产部署的最佳实践指南。它主要讨论了在将 <code>Vue.js</code> 应用部署到生产环境时应该考虑的几个关键点：</p>
<ol>
<li><strong>开发环境与生产环境的区别</strong>：<code>Vue.js</code> 在开发过程中提供了许多便利功能，如错误警告、组件 props 校验等。但在生产环境中，这些功能可能会导致性能开销，<strong>因此应该移除所有仅用于开发环境的代码</strong>。</li>
<li><strong>不使用构建工具的情况</strong>：如果你直接从 CDN 加载 <code>Vue.js</code>，确保使用的是生产环境版本（以<code>.prod.js</code>结尾的文件）。这些文件已经过最小化处理，移除了开发环境代码。</li>
<li><strong>使用构建工具</strong>：如果你使用<code>create-vue</code>（基于Vite）或Vue CLI（基于 webpack）创建的项目，它们已经配置好了生产环境。如果你有自定义构建流程，确保<code>Vue.js</code> 被解析为<code>vue.runtime.esm-bundler.js</code>，并且<code>process.env.NODE_ENV</code>在构建时被设置为<code>&quot;production&quot;</code>。</li>
<li><strong>追踪运行时错误</strong>：在生产环境中，你可以使用应用级错误处理来向追踪服务报告错误。例如，可以使用 Sentry 或 Bugsnag 等服务，并在Vue应用中设置错误处理器。</li>
</ol>
<p>页面还提供了一些额外的资源链接，如 Vite 生产环境指南和 Vue CLI 部署指南，以及如何编辑该页面的 GitHub 链接</p>
</div>
<p>开发环境 VS 生产环境：
开发体验：</p>
<ul>
<li>对常见错误和隐患的警告</li>
<li>对组件 <code>props</code> / 自定义事件的校验</li>
<li><a href="https://cn.vuejs.org/guide/extras/reactivity-in-depth.html#reactivity-debugging" target="_blank" rel="noreferrer">响应性调试钩子</a></li>
<li>开发工具集成</li>
</ul>
<p>当部署到生产环境中时，应该移除所有未使用的、仅用于开发环境的代码分支，来获得更小的包体积和更好的性能</p>
<p>不使用构建工具：
从 CDN 或其他源来加载 Vue，请确保在部署时使用的是生产环境版本（以 <code>.prod.js</code> 结尾的构建文件）。生产环境版本会被最小化，并移除了所有仅用于开发环境的代码分支</p>
<p>使用构建工具：
<code>create-vue</code></p>
<ol>
<li>vue 被解析为 <code>vue.runtime.esm-bundler.js</code>。</li>
<li><a href="https://github.com/vuejs/core/tree/main/packages/vue#bundler-build-feature-flags" target="_blank" rel="noreferrer">编译时功能标记</a>已被正确配置。</li>
<li><code>process.env.NODE_ENV</code> 会在构建时被替换为 &quot;production&quot;</li>
</ol>
<p>追踪运行时错误：
<a href="https://cn.vuejs.org/api/application.html#app-config-errorhandler" target="_blank" rel="noreferrer">应用级错误处理</a> 可以用来向追踪服务报告错误：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">app.config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">errorHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 向追踪服务报告错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>诸如 <a href="https://docs.sentry.io/platforms/javascript/guides/vue/" target="_blank" rel="noreferrer">Sentry</a> 和 <a href="https://docs.bugsnag.com/platforms/javascript/vue/" target="_blank" rel="noreferrer">Bugsnag</a> 等服务也为 Vue 提供了官方集成</p>
<h3 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">&ZeroWidthSpace;</a></h3>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>您提供的链接是 <code>Vue.js</code> 的官方文档页面，专门讨论了 <code>Vue.js</code> 应用的性能优化。这个页面涵盖了 <code>Vue.js</code> 应用在页面加载性能和更新性能方面的优化技巧。以下是一些关键点的概述：</p>
<ol>
<li><strong>性能优化概述</strong>：</li>
</ol>
<ul>
<li><code>Vue.js </code>在大多数场景下性能表现良好，但有时需要针对性的微调。</li>
<li>性能优化分为页面加载性能和更新性能两个方面。</li>
</ul>
<ol start="2">
<li><strong>分析选项</strong>：</li>
</ol>
<ul>
<li>使用工具如 PageSpeed Insights、WebPageTest 和 Chrome 开发者工具来衡量性能。</li>
<li>Vue 开发者扩展提供了性能分析功能。</li>
</ul>
<ol start="3">
<li><strong>页面加载优化</strong>：</li>
</ol>
<ul>
<li>对于页面加载性能敏感的应用，考虑使用服务器端渲染 (SSR) 或静态站点生成 (SSG)。</li>
<li>避免纯客户端的单页面应用 (SPA)，或者将营销相关页面单独部署。</li>
<li>通过构建步骤减小打包产物体积，利用 Tree-shaking 移除未使用的模块。</li>
<li>使用代码分割来按需加载 JavaScript，减少首次加载时的负担。</li>
</ul>
<ol start="4">
<li><strong>更新优化</strong>：</li>
</ol>
<ul>
<li>确保子组件的 props 保持稳定，以减少不必要的更新。</li>
<li>使用 <code>v-once</code> 和 <code>v-memo</code> 指令来跳过某些更新。</li>
<li>计算属性稳定性：从 Vue 3.4 开始，计算属性只在值改变时触发副作用。</li>
</ul>
<ol start="5">
<li><strong>通用优化技巧</strong>：</li>
</ol>
<ul>
<li>使用列表虚拟化技术（如 <code>vue-virtual-scroller</code> 或 <code>vue-virtual-scroll-grid</code>）来优化大型列表渲染。</li>
<li>减少大型不可变数据的响应性开销，使用 <code>shallowRef</code> 或 <code>shallowReactive</code>。</li>
<li>避免不必要的组件抽象，特别是在大型列表中。</li>
</ul>
<p>这些优化技巧可以帮助开发者提高 <code>Vue.js</code> 应用的性能，无论是在首次加载还是后续的交互中。如果您有具体的问题或需要更详细的解释，请告诉我，我会尽力帮助您。</p>
</div>
<p>web 应用性能：</p>
<ul>
<li>页面加载性能：首次访问时，应用展示出内容与达到可交互状态的速度。这通常会用 Google 所定义的一系列 <a href="https://web.dev/vitals/#core-web-vitals" target="_blank" rel="noreferrer">Web 指标</a> (Web Vitals) 来进行衡量，如<a href="https://web.dev/lcp/" target="_blank" rel="noreferrer">最大内容绘制</a> (Largest Contentful Paint，缩写为 LCP) 和<a href="https://web.dev/fid/" target="_blank" rel="noreferrer">首次输入延迟</a> (First Input Delay，缩写为 FID)。</li>
<li>更新性能：应用响应用户输入更新的速度。比如当用户在搜索框中输入时结果列表的更新速度，或者用户在一个单页面应用 (SPA) 中点击链接跳转页面时的切换速度</li>
</ul>
<p>优化性能第一步就是为了你的应用类型确定合适的架构：</p>
<ul>
<li>查看<a href="https://cn.vuejs.org/guide/extras/ways-of-using-vue.html" target="_blank" rel="noreferrer">使用 Vue 的多种方式</a>这一章看看如何用不同的方式围绕 Vue 组织架构。</li>
<li>Jason Miller 在 <a href="https://jasonformat.com/application-holotypes/" target="_blank" rel="noreferrer">Application Holotypes</a> 一文中讨论了 Web 应用的类型以及它们各自的理想实现/交付方式</li>
</ul>
<p>分析工具：
用于生产部署的负载性能分析：</p>
<ul>
<li><a href="https://pagespeed.web.dev/" target="_blank" rel="noreferrer">PageSpeed Insights</a></li>
<li><a href="https://www.webpagetest.org/" target="_blank" rel="noreferrer">WebPageTest</a></li>
</ul>
<p>用于本地开发期间的性能分析：</p>
<ul>
<li><a href="https://developer.chrome.com/docs/devtools/evaluate-performance/" target="_blank" rel="noreferrer">Chrome 开发者工具“性能”面板</a>
<ul>
<li><a href="https://cn.vuejs.org/api/application.html#app-config-performance" target="_blank" rel="noreferrer">app.config.performance</a> 将会开启 Vue 特有的性能标记，标记在 Chrome 开发者工具的性能时间线上。</li>
</ul>
</li>
<li><a href="https://cn.vuejs.org/guide/scaling-up/tooling.html#browser-devtools" target="_blank" rel="noreferrer">Vue 开发者扩展</a>也提供了性能分析的功能</li>
</ul>
<p>页面加载优化：
<strong>页面性能优化技巧，</strong><a href="https://web.dev/fast/" target="_blank" rel="noreferrer"><strong>web.dev 指南</strong></a><strong>提供了一个全面的总结</strong></p>
<p>选用正确的架构：</p>
<ul>
<li>纯客户端渲染存在首屏加载缓慢的问题，这可以通过<a href="https://cn.vuejs.org/guide/extras/ways-of-using-vue.html#fullstack-ssr" target="_blank" rel="noreferrer">服务器端渲染 (SSR)</a> 或<a href="https://cn.vuejs.org/guide/extras/ways-of-using-vue.html#jamstack-ssg" target="_blank" rel="noreferrer">静态站点生成 (SSG)</a> 来缓解。查看 <a href="https://cn.vuejs.org/guide/scaling-up/ssr.html" target="_blank" rel="noreferrer">SSR 指南</a>以了解如何使用 Vue 实现 SSR。如果应用对交互性要求不高，你还可以使用传统的后端服务器来渲染 HTML，并在客户端使用 Vue 对其进行增强</li>
<li>如果你的主应用必须是 SPA，但还有其他的营销相关页面 (落地页、关于页、博客等)，请单独部署这些页面！理想情况下，营销页面应该是包含尽可能少 JS 的静态 HTML，并用 SSG 方式部署</li>
</ul>
<p>包体积与 <code>Tree-shaking</code> 优化：</p>
<ul>
<li>采用构建步骤；tree-shake；</li>
<li>注意引入的依赖项；</li>
</ul>
<p>代码分割：
<strong>代码分割</strong>是指构建工具将构建后的 JavaScript 包拆分为多个较小的，可以按需或并行加载的文件。通过适当的代码分割，页面加载时需要的功能可以立即下载，而额外的块只在需要时才加载，从而提高性能</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// lazy.js 及其依赖会被拆分到一个单独的文件中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 并只在 `loadLazy()` 调用时才加载</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> loadLazy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./lazy.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>懒加载</strong>对于页面初次加载时的优化帮助极大，它帮助应用暂时略过了那些不是立即需要的功能。在 Vue 应用中，这可以与 Vue 的<a href="https://cn.vuejs.org/guide/components/async.html" target="_blank" rel="noreferrer">异步组件</a>搭配使用，为组件树创建分离的代码块：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineAsyncComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 会为 Foo.vue 及其依赖创建单独的一个块</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 它只会按需加载</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//（即该异步组件在页面中被渲染时）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineAsyncComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./Foo.vue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))</span></span></code></pre>
</div><p>更新优化：</p>
<ul>
<li><code>Props</code> 稳定性：</li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ListItem</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item in list"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  :id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item.id"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  :active</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"activeId"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 优化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ListItem</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item in list"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  :id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item.id"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  :active</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item.id === activeId"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><p>注意⚠️：<strong>这个技巧的核心思想就是让传给子组件的 <code>props</code> 尽量保持稳定</strong></p>
<p><code>v-once：</code>
一个内置的指令，可以用来渲染依赖运行时数据但无需再更新的内容。它的整个子树都会在未来的更新中被跳过</p>
<p><code>v-memo：</code>
一个内置指令，可以用来有条件地跳过某些大型子树或者 v-for 列表的更新</p>
<p>计算属性稳定性：
从 3.4 开始，计算属性仅在其计算值较前一个值发生更改时才会触发副作用：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> isEven</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> count.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(isEven.value)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// will not trigger new logs because the computed value stays `true`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">count.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">count.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 注意计算返回对象：由于每次都会创建一个新对象，因此从技术上讲，新旧值始终不同。即使 isEven 属性保持不变，Vue 也无法知道，除非它对旧值和新值进行深度比较。这种比较可能代价高昂，并不值得</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> computedObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    isEven: count.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 优化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> computedObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">oldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> newValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    isEven: count.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (oldValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> oldValue.isEven </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> newValue.isEven) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> oldValue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> newValue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>通用优化：
大型虚拟列表：</p>
<ul>
<li><a href="https://github.com/Akryum/vue-virtual-scroller" target="_blank" rel="noreferrer">vue-virtual-scroller</a></li>
<li><a href="https://github.com/rocwang/vue-virtual-scroll-grid" target="_blank" rel="noreferrer">vue-virtual-scroll-grid</a></li>
<li><a href="https://github.com/07akioni/vueuc" target="_blank" rel="noreferrer">vueuc/VVirtualList</a></li>
</ul>
<p>减少大型不可变数据的响应式开销：
Vue 的响应性系统默认是深度的。虽然这让状态管理变得更直观，但在数据量巨大时，深度响应性也会导致不小的性能负担，因为每个属性访问都将触发代理的依赖追踪
通过使用 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowref" target="_blank" rel="noreferrer"><code>shallowRef()</code></a> 和 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive" target="_blank" rel="noreferrer"><code>shallowReactive()</code></a> 来绕开深度响应。浅层式 API 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理。这使得对深层级属性的访问变得更快，但代价是，我们现在必须将所有深层级对象视为不可变的，并且只能通过替换整个根状态来触发更新：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> shallowArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> shallowRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* 巨大的列表，里面包含深层的对象 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 这不会触发更新...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">shallowArray.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(newObject)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 这才会触发更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">shallowArray.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">shallowArray.value, newObject]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 这不会触发更新...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">shallowArray.value[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">].foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 这才会触发更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">shallowArray.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">shallowArray.value[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    foo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">shallowArray.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span></code></pre>
</div><p>避免不必要的组件抽象：
有些时候我们会去创建<a href="https://cn.vuejs.org/guide/components/slots.html#renderless-components" target="_blank" rel="noreferrer">无渲染组件</a>或高阶组件 (用来渲染具有额外 <code>props</code> 的其他组件) 来实现更好的抽象或代码组织。虽然这并没有什么问题，但请记住，<strong>组件实例比普通 DOM 节点要昂贵得多，而且为了逻辑抽象创建太多组件实例将会导致性能损失</strong></p>
<h3 id="无障碍访问" tabindex="-1">无障碍访问 <a class="header-anchor" href="#无障碍访问" aria-label="Permalink to &quot;无障碍访问&quot;">&ZeroWidthSpace;</a></h3>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>您提供的链接是 <code>Vue.js</code> 官方文档中的“无障碍访问”部分。无障碍访问（Accessibility）是确保网站或应用程序对所有用户，包括那些有视觉、听觉、运动或认知障碍的人，都是可用的。<code>Vue.js</code> 提供了一些最佳实践来帮助开发者创建无障碍的应用程序。</p>
<p>以下是一些关键点：</p>
<ol>
<li><strong>跳过链接（Skip Links）</strong>：在每个页面顶部添加一个链接，允许用户跳过重复的导航内容，直接访问主要内容。</li>
<li><strong>内容结构</strong>：使用合适的HTML元素和ARIA角色（如<code>role=&quot;main&quot;</code>）来组织内容，以便辅助技术可以正确地导航。</li>
<li><strong>标题（Headings）</strong>：正确使用标题标签（<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>），并按层次结构嵌套它们，以便用户可以通过标题来理解内容结构。</li>
<li><strong>表单（Forms）</strong>：确保表单元素有适当的标签（<code>&lt;label&gt;</code>），并使用<code>aria-label</code>或<code>aria-describedby</code>属性来提供额外的无障碍信息。</li>
<li><strong>按钮（Buttons）</strong>：使用<code>&lt;button&gt;</code>元素或带有<code>type=&quot;button&quot;</code>的<code>&lt;input&gt;</code>元素来创建按钮，并确保它们有明确的用途。</li>
<li><strong>功能图片（Functional Images）</strong>：为具有功能的图片提供替代文本（<code>alt</code>属性），以便屏幕阅读器可以解释图片的功能。</li>
<li><strong>无障碍标准（Accessibility Standards）</strong>：遵循W3C的Web内容无障碍指南（WCAG）和Web无障碍倡议-无障碍访问丰富的互联网应用（WAI-ARIA）。</li>
<li><strong>辅助技术（Assistive Technologies）</strong>：了解并考虑如何与屏幕阅读器（如NVDA、VoiceOver）、缩放工具和其他辅助技术配合工作。</li>
<li><strong>用户多样性（User Diversity）</strong>：认识到全球有大量残障人士，他们的需求应该被考虑在内。</li>
</ol>
<p>这些实践有助于提高应用程序的可访问性，确保所有用户都能平等地访问和使用您的Vue.js应用程序。如果您有关于如何实现这些最佳实践的具体问题，或者需要进一步的帮助，请告诉我。</p>
</div>
<p>Web 无障碍访问 (也称为 a11y) 是指创建可供任何人使用的网站的做法——无论是身患某种障碍、通过慢速的网络连接访问、使用老旧或损坏的硬件，还是仅处于某种不方便的环境。例如，在视频中添加字幕可以帮助失聪、有听力障碍或身处嘈杂环境而听不到手机的用户。同样地，确保文字样式没有处于太低的对比度，可以对低视力用户和在明亮的强光下使用手机的用户都有所帮助
请先阅读由<a href="https://www.w3.org/" target="_blank" rel="noreferrer">万维网联盟 (W3C)</a> 提供的 <a href="https://www.w3.org/WAI/planning-and-managing/" target="_blank" rel="noreferrer">Web 无障碍访问的规划和管理</a></p>
<p>跳过链接：
你应该在每个页面的顶部添加一个直接指向主内容区域的链接，这样用户就可以跳过在多个网页上重复的内容</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ul class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"skip-links"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"#main"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"skipLink"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"skip-link"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Skip to main content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ul</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>一旦用户改变路由，请将焦点放回到这个“跳过”链接。通过如下方式聚焦“跳过”链接的模板引用 (假设使用了 <code>vue-router</code>) 即可实现：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref, watch } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useRoute } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue-router'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> route</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> skipLink</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> route.path,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    skipLink.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p><a href="https://www.w3.org/WAI/WCAG21/Techniques/general/G1.html" target="_blank" rel="noreferrer">阅读关于跳过链接到主要内容的文档</a></p>
<p>内容结构：
确保设计可以支持易于访问的实现是无障碍访问最重要的部分之一。设计不仅要考虑颜色对比度、字体选择、文本大小和语言，还要考虑应用中的内容是如何组织的</p>
<p>标题：
为应用的每个部分设置描述性的标题，可以让用户更容易地预测每个部分的内容</p>
<ul>
<li>按级别顺序嵌套标题：<code>&lt;h1&gt; - &lt;h6&gt;</code>；</li>
<li>不要在一个章节内跳跃标题的级别；</li>
<li>使用实际的标题标记，而不是通过对文本设置样式以提供视觉上的标题；</li>
</ul>
<p><a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-descriptive.html" target="_blank" rel="noreferrer">阅读更多有关标题的信息</a></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">main role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"main"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">labelledby</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"main-title"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h1 id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"main-title"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Main title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">section aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">labelledby</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"section-title-1"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h2 id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"section-title-1"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Section Title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Section Subtitle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 内容 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">section</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">section aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">labelledby</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"section-title-2"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h2 id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"section-title-2"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Section Title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Section Subtitle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 内容 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Section Subtitle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 内容 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">section</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>Landmarks：
<a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/landmark_role" target="_blank" rel="noreferrer">Landmark</a> 会为应用中的章节提供访问规划。依赖辅助技术的用户可以跳过内容直接导航到应用的每个部分。你可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles" target="_blank" rel="noreferrer">ARIA role</a> 帮助你实现这个目标：</p>
<table>
<thead>
<tr>
<th>HTML</th>
<th>ARIA Role</th>
<th>地标的目的</th>
</tr>
</thead>
<tbody>
<tr>
<td>header</td>
<td><code>role=&quot;banner&quot;</code></td>
<td>主标题：页面的标题</td>
</tr>
<tr>
<td>nav</td>
<td><code>role=&quot;navigation&quot;</code></td>
<td>适合用作文档或相关文档导航的链接集合</td>
</tr>
<tr>
<td>main</td>
<td><code>role=&quot;main&quot;</code></td>
<td>文档的主体或中心内容</td>
</tr>
<tr>
<td>footer</td>
<td><code>role=&quot;contentinfo&quot;</code></td>
<td>关于父级文档的信息：脚注/版权/隐私声明链接</td>
</tr>
<tr>
<td>aside</td>
<td><code>role=&quot;complementary&quot;</code></td>
<td>用来支持主内容，同时其自身的内容是相对独立且有意义的</td>
</tr>
<tr>
<td>search</td>
<td><code>role=&quot;search&quot;</code></td>
<td>该章节包含整个应用的搜索功能</td>
</tr>
<tr>
<td>form</td>
<td><code>role=&quot;form&quot;</code></td>
<td>表单相关元素的集合</td>
</tr>
<tr>
<td>section</td>
<td><code>role=&quot;region&quot;</code></td>
<td>相关的且用户可能会导航至此的内容。必须为该元素提供 label</td>
</tr>
</tbody>
</table>
<p>注意⚠️：建议同时使用 landmark HTML 元素和 role 属性，以最大程度地兼容<a href="https://caniuse.com/#feat=html5semantic" target="_blank" rel="noreferrer">不支持 HTML5 语义元素的传统浏览器</a>，<a href="https://www.w3.org/TR/wai-aria-1.2/#landmark_roles" target="_blank" rel="noreferrer">阅读更多有关标题的细节</a></p>
<p>语义化表单：
当创建一个表单，你可能使用到以下几个元素：<code>&lt;form&gt;、&lt;label&gt;、&lt;input&gt;、&lt;textarea&gt; 和 &lt;button&gt;</code>：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form action</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/dataCollectionLocation"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"post"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> autocomplete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"on"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item in formItems"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item.id"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"form-item"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item.id"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{{ item.label }}: &#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      :type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item.type"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      :id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item.id"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      :name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item.id"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item.value"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"submit"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Submit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：如何在表单元素中引入 <code>autocomplete='on'</code> 的，它将应用于表单中的所有 input 框。你也可以为每个 input 框都设置不同的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete" target="_blank" rel="noreferrer">autocomplete attribute 的值</a></p>
<p>标签：
提供标签来描述所有表单控件的用途；使 for 和 id 链接起来：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: &#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span></code></pre>
</div><CustomImage src="/growth-record/frame/vue/vue3study11.webp" /><p>注意⚠️：可能还见过这样的包装 input 框的标签：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>&#x3C;label></span></span>
<span class="line"><span>  Name：</span></span>
<span class="line"><span>  &#x3C;input type="text" name="name" id="name" v-model="name" /></span></span>
<span class="line"><span>&#x3C;/label></span></span></code></pre>
</div><p>但我们仍建议你显式地为 input 元素设置 id 相匹配的标签，以更好地实现无障碍访问</p>
<p><code>aria-label：</code>设置无障碍访问名</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: &#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  :aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"nameLabel"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/></span></span></code></pre>
</div><CustomImage src="/growth-record/frame/vue/vue3study12.webp" /><p><code>aria-labelledby：</code>
使用 <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby" target="_blank" rel="noreferrer">aria-labelledby</a> 类似于 <code>aria-label</code>，除非标签文本在屏幕上可见。它通过 id 与其他元素配对，你可以链接多个 id：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"demo"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  action</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/dataCollectionLocation"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"post"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  autocomplete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"on"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h1 id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"billing"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Billing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"form-item"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: &#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">labelledby</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"billing name"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"submit"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Submit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><CustomImage src="/growth-record/frame/vue/vue3study13.webp" /><p><code>aria-describedby：</code>
<a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby" target="_blank" rel="noreferrer">aria-describedby</a> 的用法与 <code>aria-labelledby</code> 相同，它提供了一条用户可能需要的附加描述信息。这可用于描述任何输入的标准：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"demo"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  action</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/dataCollectionLocation"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"post"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  autocomplete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"on"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h1 id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"billing"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Billing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"form-item"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Full </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: &#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"name"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">labelledby</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"billing name"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">describedby</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"nameDescription"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"nameDescription"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Please provide first and last name.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"submit"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Submit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><CustomImage src="/growth-record/frame/vue/vue3study14.webp" /><p>占位符：
占位符的缺陷之一是默认情况下它们不符合<a href="https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html" target="_blank" rel="noreferrer">颜色对比度标准</a>；应当修改其颜色，让它看起来像是预先填入 input 框中的数据一样</p>
<p>用法说明：
提供附加用法说明并在 <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby" target="_blank" rel="noreferrer">aria-labelledby</a> 内绑定多个 id。这可以使设计更加灵活：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">fieldset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">legend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Using aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">labelledby</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">legend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"date-label"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"date"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Current </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: &#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"date"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"date"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"date"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">labelledby</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"date-label date-instructions"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"date-instructions"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">MM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">DD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">YYYY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">fieldset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">fieldset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">legend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Using aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">describedby</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">legend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"dob"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"dob"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">of</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Birth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: &#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"date"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"dob"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"dob"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">describedby</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"dob-instructions"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"dob-instructions"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">MM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">DD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">YYYY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">fieldset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>隐藏内容：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"search"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"search"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"hidden-visually"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: &#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"search"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"search"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"search"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"submit"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Search</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p><code>aria-hidden=&quot;true&quot;</code>
添加 <code>aria-hidden=&quot;true&quot;</code> 在无障碍访问时被隐藏，但对其他可视用户仍然是可见的。不要在可聚焦的元素上使用它，请只在装饰性的、重复的或屏幕外的内容上使用它</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>This is not hidden from screen readers.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">hidden</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"true"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">This is hidden from screen readers.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>按钮：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form action</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/dataCollectionLocation"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"post"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> autocomplete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"on"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 按钮 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"button"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Cancel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"submit"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Submit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 输入按钮 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"button"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Cancel"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"submit"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Submit"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>功能图片：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"search"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"search"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"hidden-visually"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: &#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"search"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"search"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"search"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"image"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"btnImg"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"https://img.icons8.com/search"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    alt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Search"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"search"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"searchIcon"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"hidden-visually"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: &#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"searchIcon"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"searchIcon"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"searchIcon"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"submit"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">i class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"fas fa-search"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">hidden</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"true"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"hidden-visually"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Search</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">form</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>规范：
万维网联盟 (W3C) Web 无障碍访问倡议 (WAI) 为不同的组件制定了 Web 无障碍性标准：</p>
<ul>
<li><a href="https://www.w3.org/WAI/standards-guidelines/uaag/" target="_blank" rel="noreferrer">用户代理无障碍访问指南 (UAAG)</a>
<ul>
<li>浏览器和媒体查询，包括一些其他方面的辅助技术</li>
</ul>
</li>
<li><a href="https://www.w3.org/WAI/standards-guidelines/atag/" target="_blank" rel="noreferrer">创作工具无障碍访问指南 (ATAG)</a>
<ul>
<li>创作工具</li>
</ul>
</li>
<li><a href="https://www.w3.org/WAI/standards-guidelines/wcag/" target="_blank" rel="noreferrer">Web 内容无障碍访问指南 (WCAG)</a>
<ul>
<li>网站内容 - 由开发者、创作工具和无障碍访问评估工具使用。</li>
</ul>
</li>
</ul>
<p>网络内容无障碍指南 (WCAG)
<a href="https://www.w3.org/TR/WCAG21/" target="_blank" rel="noreferrer">WCAG 2.1</a> 继承自 <a href="https://www.w3.org/TR/WCAG20/" target="_blank" rel="noreferrer">WCAG 2.0</a>，接纳 Web 演进过程中的新技术。W3C 鼓励在开发或更新 Web 无障碍访问策略时使用 WCAG 的最新版本。</p>
<p>WCAG 2.1 四大指导原则 (缩写 POUR)：</p>
<ul>
<li><a href="https://www.w3.org/TR/WCAG21/#perceivable" target="_blank" rel="noreferrer">可感知性</a>
<ul>
<li>用户必须能够感知所渲染的信息</li>
</ul>
</li>
<li><a href="https://www.w3.org/TR/WCAG21/#operable" target="_blank" rel="noreferrer">可操作性</a>
<ul>
<li>表单界面，控件和导航是可操作的</li>
</ul>
</li>
<li><a href="https://www.w3.org/TR/WCAG21/#understandable" target="_blank" rel="noreferrer">可理解性</a>
<ul>
<li>信息和用户界面的操作必须为所有用户所理解</li>
</ul>
</li>
<li><a href="https://www.w3.org/TR/WCAG21/#robust" target="_blank" rel="noreferrer">健壮性</a>
<ul>
<li>随着技术的进步，用户必须能够访问内容</li>
</ul>
</li>
</ul>
<p>Web 无障碍倡议 – 无障碍访问丰富的互联网应用 (WAI-ARIA)
W3C 的 WAI-ARIA 为如何构建动态内容和高阶用户界面控件提供了指导。</p>
<ul>
<li><a href="https://www.w3.org/TR/wai-aria-1.2/" target="_blank" rel="noreferrer">可便捷访问的丰富互联网应用 (WAI-ARIA) 1.2</a></li>
<li><a href="https://www.w3.org/TR/wai-aria-practices-1.2/" target="_blank" rel="noreferrer">WAI-ARIA 实践 1.2</a></li>
</ul>
<p>资源：
文档</p>
<ul>
<li><a href="https://www.w3.org/TR/WCAG20/" target="_blank" rel="noreferrer">WCAG 2.0</a></li>
<li><a href="https://www.w3.org/TR/WCAG21/" target="_blank" rel="noreferrer">WCAG 2.1</a></li>
<li><a href="https://www.w3.org/TR/wai-aria-1.2/" target="_blank" rel="noreferrer">Accessible Rich Internet Applications (WAI-ARIA) 1.2</a></li>
<li><a href="https://www.w3.org/TR/wai-aria-practices-1.2/" target="_blank" rel="noreferrer">WAI-ARIA Authoring Practices 1.2</a></li>
</ul>
<p>辅助技术</p>
<ul>
<li>屏幕助读器
<ul>
<li><a href="https://www.nvaccess.org/download/" target="_blank" rel="noreferrer">NVDA</a></li>
<li><a href="https://www.apple.com/accessibility/mac/vision/" target="_blank" rel="noreferrer">VoiceOver</a></li>
<li><a href="https://www.freedomscientific.com/products/software/jaws/?utm_term=jaws%20screen%20reader&amp;utm_source=adwords&amp;utm_campaign=All+Products&amp;utm_medium=ppc&amp;hsa_tgt=kwd-394361346638&amp;hsa_cam=200218713&amp;hsa_ad=296201131673&amp;hsa_kw=jaws%20screen%20reader&amp;hsa_grp=52663682111&amp;hsa_net=adwords&amp;hsa_mt=e&amp;hsa_src=g&amp;hsa_acc=1684996396&amp;hsa_ver=3&amp;gclid=Cj0KCQjwnv71BRCOARIsAIkxW9HXKQ6kKNQD0q8a_1TXSJXnIuUyb65KJeTWmtS6BH96-5he9dsNq6oaAh6UEALw_wcB" target="_blank" rel="noreferrer">JAWS</a></li>
<li><a href="https://chrome.google.com/webstore/detail/chromevox-classic-extensi/kgejglhpjiefppelpmljglcjbhoiplfn?hl=en" target="_blank" rel="noreferrer">ChromeVox</a></li>
</ul>
</li>
<li>缩放工具
<ul>
<li><a href="https://www.freedomscientific.com/products/software/magic/" target="_blank" rel="noreferrer">MAGic</a></li>
<li><a href="https://www.freedomscientific.com/products/software/zoomtext/" target="_blank" rel="noreferrer">ZoomText</a></li>
<li><a href="https://support.microsoft.com/en-us/help/11542/windows-use-magnifier-to-make-things-easier-to-see" target="_blank" rel="noreferrer">Magnifier</a></li>
</ul>
</li>
</ul>
<p>测试</p>
<ul>
<li>自动化相关的工具
<ul>
<li><a href="https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk" target="_blank" rel="noreferrer">Lighthouse</a></li>
<li><a href="https://chrome.google.com/webstore/detail/wave-evaluation-tool/jbbplnpkjmmeebjpijfedlgcdilocofh" target="_blank" rel="noreferrer">WAVE</a></li>
<li><a href="https://chrome.google.com/webstore/detail/arc-toolkit/chdkkkccnlfncngelccgbgfmjebmkmce?hl=en-US" target="_blank" rel="noreferrer">ARC Toolkit</a></li>
</ul>
</li>
<li>颜色相关的工具
<ul>
<li><a href="https://webaim.org/resources/contrastchecker/" target="_blank" rel="noreferrer">WebAim Color Contrast</a></li>
<li><a href="https://webaim.org/resources/linkcontrastchecker" target="_blank" rel="noreferrer">WebAim Link Color Contrast</a></li>
</ul>
</li>
<li>其他有用的工具
<ul>
<li><a href="https://chrome.google.com/webstore/detail/headingsmap/flbjommegcjonpdmenkdiocclhjacmbi?hl=en%E2%80%A6" target="_blank" rel="noreferrer">HeadingMap</a></li>
<li><a href="https://colororacle.org/" target="_blank" rel="noreferrer">Color Oracle</a></li>
<li><a href="https://chrome.google.com/webstore/detail/nerdefocus/lpfiljldhgjecfepfljnbjnbjfhennpd?hl=en-US%E2%80%A6" target="_blank" rel="noreferrer">NerdeFocus</a></li>
<li><a href="https://chrome.google.com/webstore/detail/visual-aria/lhbmajchkkmakajkjenkchhnhbadmhmk?hl=en-US" target="_blank" rel="noreferrer">Visual Aria</a></li>
<li><a href="https://chrome.google.com/webstore/detail/silktide-website-accessib/okcpiimdfkpkjcbihbmhppldhiebhhaf?hl=en-US" target="_blank" rel="noreferrer">Silktide Website Accessibility Simulator</a></li>
</ul>
</li>
</ul>
<p>用户
世界卫生组织估计，全世界 15% 的人口患有某种形式的残疾，其中约 2 - 4% 的人严重残疾。估计全世界有 10 亿残障人士，他们是世界上最大的少数群体。
残疾的种类繁多，大致可分为以下四类：</p>
<ul>
<li><a href="https://webaim.org/articles/visual/" target="_blank" rel="noreferrer">视觉</a> - 可以为这些用户提供屏幕助读器、屏幕缩放、控制屏幕对比度或盲文显示等帮助。</li>
<li><a href="https://webaim.org/articles/auditory/" target="_blank" rel="noreferrer">听觉</a> - 可以为这些用户提供视频字幕、文字记录或手语视频。</li>
<li><a href="https://webaim.org/articles/motor/" target="_blank" rel="noreferrer">运动能力</a> - 可以为这些用户提供一系列<a href="https://webaim.org/articles/motor/assistive" target="_blank" rel="noreferrer">运动障碍辅助技术</a>中：比如语音识别软件、眼球跟踪、单刀式开关、超大轨迹球鼠标、自适应键盘等等。</li>
<li><a href="https://webaim.org/articles/cognitive/" target="_blank" rel="noreferrer">认知能力</a> - 可以为这些用户提供补充媒体、更清晰和简单、更结构化的内容。</li>
</ul>
<p>你可以查看以下来自 WebAim 的链接，更深入地了解这些用户的需求：</p>
<ul>
<li><a href="https://www.w3.org/WAI/perspective-videos/" target="_blank" rel="noreferrer">Web 无障碍愿景：探索改变 &amp; 人人受益</a></li>
<li><a href="https://www.w3.org/WAI/people-use-web/user-stories/" target="_blank" rel="noreferrer">Web 用户的故事</a></li>
</ul>
<h3 id="安全" tabindex="-1">安全 <a class="header-anchor" href="#安全" aria-label="Permalink to &quot;安全&quot;">&ZeroWidthSpace;</a></h3>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>您提供的链接是 Vue.js 的官方文档中关于安全的最佳实践页面。这个页面提供了一系列的安全建议和最佳实践，以帮助开发者在构建 Vue.js 应用时避免常见的安全问题。以下是一些关键点：</p>
<ol>
<li><strong>报告漏洞</strong>：如果发现 Vue.js 的漏洞，应立即通过发送电子邮件至 <a href="mailto:security@vuejs.org" target="_blank" rel="noreferrer">security@vuejs.org</a> 报告。</li>
<li><strong>首要规则</strong>：不要使用无法信赖的模板。这意味着不应该将用户输入直接作为 Vue 组件的模板，因为这可能导致任意 JavaScript 代码执行。</li>
<li><strong>Vue 的安全机制</strong>：</li>
</ol>
<ul>
<li><strong>HTML 内容</strong>：Vue 会自动转义模板中的 HTML 内容，防止脚本注入。</li>
<li><strong>Attribute 绑定</strong>：动态属性绑定也会自动转义，防止在属性解析时注入 HTML。</li>
<li><strong>潜在的危险</strong>：尽管 Vue 提供了自动转义，但在某些情况下，如允许用户控制样式或 JavaScript，仍然存在安全风险。</li>
</ul>
<ol start="4">
<li><strong>最佳实践</strong>：</li>
</ol>
<ul>
<li><strong>注入 HTML</strong>：如果需要渲染用户提供的 HTML，应确保在沙盒环境中进行，或者仅允许用户看到。</li>
<li><strong>URL 注入</strong>：用户提供的 URL 应该在后端进行无害化处理。</li>
<li><strong>样式注入</strong>：避免在模板中渲染 <code>&lt;style&gt;</code> 标签，以防止点击劫持。</li>
<li><strong>JavaScript 注入</strong>：避免在 Vue 中渲染 <code>&lt;script&gt;</code> 标签，或者将用户提供的 JavaScript 绑定到事件属性。</li>
</ul>
<ol start="5">
<li><strong>后端协调</strong>：与后端团队沟通，确保在处理 CSRF/XSRF 和 XSSI 等 HTTP 安全漏洞时采取适当的措施。</li>
<li><strong>服务端渲染 (SSR)</strong>：在使用 SSR 时，应遵循 Vue.js 文档中的最佳实践来避免安全漏洞。</li>
</ol>
<p>这个页面还提供了一些资源链接，如 HTML5 安全手册和 OWASP 的 XSS 防护手册，帮助开发者更深入地了解和防范安全问题。如果您有关于 Vue.js 安全性的具体问题或需要进一步的帮助，请告诉我。</p>
</div>
<p>不要使用无法信赖的模版：
使用 Vue 时最基本的安全规则就是不要将无法信赖的内容作为你的组件模板。使用无法信赖的模板相当于允许任意的 JavaScript 在你的应用中执行。更糟糕的是，如果在服务端渲染时执行了这些代码，可能会导致服务器被攻击：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`&#x3C;div>`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> userProvidedString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `&#x3C;/div>`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 永远不要这样做！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'#app'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div><p>注意⚠️：Vue 模板会被编译成 JavaScript，而模板内的表达式将作为渲染过程的一部分被执行。尽管这些表达式在特定的渲染环境中执行，但由于全局执行环境的复杂性，Vue 作为一个开发框架，要在性能开销合理的前提下完全避免潜在的恶意代码执行是不现实的。避免这类问题最直接的方法是确保你的 Vue 模板始终是可信的，并且完全由你控制</p>
<p>Vue 自身的安全机制：
HTML 内容：无论是使用模板还是渲染函数，内容都是自动转义的</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ userProvidedString }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 如果该字符串包含以下内容：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'&#x3C;script>alert("hi")&#x3C;/script>'</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 会被转转义</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">lt;script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">quot;hi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">quot;)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 从而防止脚本注入。这种转义是使用 textContent 这样的浏览器原生 API 完成的，所以只有当浏览器本身存在漏洞时，才会存在漏洞</span></span></code></pre>
</div><p>Attribute 绑定：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"userProvidedString"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  hello</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'" onclick="alert(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\'</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">hi</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\'</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">)'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">quot; onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hi'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div><p>潜在的危险：
<strong>在任何 Web 应用中，允许以 HTML、CSS 或 JavaScript 形式执行未经无害化处理的、用户提供的内容都有潜在的安全隐患，因此这应尽可能避免。不过，有时候一些风险或许是可以接受的</strong>。
例如，像 CodePen 和 JSFiddle 这样的服务允许执行用户提供的内容，但这是在 iframe 这样一个可预期的沙盒环境中。当一个重要的功能本身会伴随某种程度的漏洞时，就需要你自行权衡该功能的重要性和该漏洞所带来的最坏情况</p>
<p>注入 HTML:
Vue 会自动转义 HTML 内容，防止你意外地将可执行的 HTML 注入到你的应用中。然而，在你知道 HTML 安全的情况下，你还是可以显式地渲染 HTML 内容（三种形式使用）：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">html</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"userProvidedHtml"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 渲染函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  innerHTML: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.userProvidedHtml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // JSX 形式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div innerHTML</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{this.userProvidedHtml}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>注意⚠️：用户提供的 HTML 永远不能被认为是 100% 安全的，除非它在 iframe 这样的沙盒环境中，或者该 HTML 只会被该用户看到。此外，允许用户编写自己的 Vue 模板也会带来类似的危险</p>
<p>URL 注入：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> :href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"userProvidedUrl"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  click me</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>如果这个 URL 允许通过 javascript: 执行 JavaScript，即没有进行无害化处理，那么就会有一些潜在的安全问题。可以使用一些库来解决此类问题，比如 <a href="https://www.npmjs.com/package/@braintree/sanitize-url" target="_blank" rel="noreferrer">sanitize-url</a>，但请注意：如果你发现你需要在前端做 URL 无害化处理，那你的应用已经存在一个更严重的安全问题了。任何用户提供的 URL 在被保存到数据库之前都应该先在后端做<strong>无害化处理</strong>。这样，连接到你 API 的每一个客户端都可以避免这个问题，包括原生移动应用。另外，即使是经过无害化处理的 URL，Vue 也不能保证它们指向安全的目的地</p>
<p>样式注入：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  :href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"sanitizedUrl"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  :style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"userProvidedStyles"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  click me</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>假设 sanitizedUrl 已进行无害化处理，它是一个正常 URL 而非 JavaScript。然而，由于 userProvidedStyles 的存在，恶意用户仍然能利用 CSS 进行“点击劫持”，例如，可以在“登录”按钮上方覆盖一个透明的链接。如果用户控制的页面 <a href="https://user-controlled-website.com/" target="_blank" rel="noreferrer">https://user-controlled-website.com/</a> 专门仿造了你应用的登录页，那么他们就有可能捕获用户的真实登录信息
如果允许在 <code>&lt;style&gt;</code> 元素中插入用户提供的内容，会造成更大的漏洞，因为这使得用户能控制整个页面的样式。因此 Vue 阻止了在模板中像这样渲染 style 标签：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ userProvidedStyles }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>为了避免用户的点击被劫持，我们建议仅在沙盒环境的 iframe 中允许用户控制 CSS。或者，当用户控制样式绑定时，我们建议使用其<a href="https://cn.vuejs.org/guide/essentials/class-and-style.html#object-syntax-2" target="_blank" rel="noreferrer">对象值形式</a>并仅允许用户提供能够安全控制的、特定的属性，就像这样：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  :href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"sanitizedUrl"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  :style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: userProvidedColor,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: userProvidedBackground</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  click me</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>JavaScript 注入：
强烈建议任何时候都<strong>不要在 Vue 中渲染 <code>&lt;script&gt;</code></strong>，因为模板和渲染函数不应有其他副作用。但是，渲染 <code>&lt;script&gt;</code> 并不是插入在运行时执行的 JavaScript 字符串的唯一方法。
每个 HTML 元素都有能接受字符串形式 JavaScript 的 attribute，例如 onclick、onfocus 和 onmouseenter。绑定任何用户提供的 JavaScript 给这些事件 attribute 都具有潜在风险，因此需要避免这么做
注意⚠️：用户提供的 JavaScript 永远不能被认为是 100% 安全的，除非它在 iframe 这样的沙盒环境中，或者该段代码只会在该用户登录的页面上被执行</p>
<p>不受 XSS 的影响：</p>
<ol>
<li>开发者显式地将用户提供的、未经无害化处理的内容作为 Vue 模板渲染。这本身就是不安全的，Vue 也无从溯源。</li>
<li>开发者将 Vue 挂载到可能包含服务端渲染或用户提供内容的 HTML 页面上，这与 #1 的问题基本相同，但有时开发者可能会不知不觉地这样做。攻击者提供的 HTML 可能在普通 HTML 中是安全的，但在 Vue 模板中是不安全的，这就会导致漏洞。最佳实践是：<strong>不要将 Vue 挂载到可能包含服务端渲染或用户提供内容的 DOM 节点上</strong></li>
</ol>
<p>最佳实践：
最基本的规则就是只要你允许执行未经无害化处理的、用户提供的内容 (无论是 HTML、JavaScript 还是 CSS)，你就可能面临攻击。无论是使用 Vue、其他框架，或是不使用框架，道理都是一样的。
除了上面为处理<a href="https://cn.vuejs.org/guide/best-practices/security.html#potential-dangers" target="_blank" rel="noreferrer">潜在危险</a>提供的建议，我们也建议你熟读下面这些资源：</p>
<ul>
<li><a href="https://html5sec.org/" target="_blank" rel="noreferrer">HTML5 安全手册</a></li>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html" target="_blank" rel="noreferrer">OWASP 的跨站脚本攻击 (XSS) 防护手册</a></li>
</ul>
<p>后端协调：
类似跨站请求伪造 <strong>(CSRF/XSRF) 和跨站脚本引入 (XSSI) 这样的 HTTP 安全漏洞</strong>，主要由<strong>后端负责处理</strong>，因此它们不是 Vue 职责范围内的问题。但是，你应该与后端团队保持沟通，了解如何更好地与后端 API 进行交互，例如，<strong>在提交表单时附带 CSRF 令牌</strong></p>
<p>服务端渲染（SSR）:
在使用 SSR 时还有一些其他的安全注意事项，因此请确保遵循我们的 <a href="https://cn.vuejs.org/guide/scaling-up/ssr.html" target="_blank" rel="noreferrer">SSR 文档</a>给出的最佳实践来避免产生漏洞</p>
<h2 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;TypeScript&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="总览" tabindex="-1">总览 <a class="header-anchor" href="#总览" aria-label="Permalink to &quot;总览&quot;">&ZeroWidthSpace;</a></h3>
<p>搭配 TypeScript 使用 Vue</p>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>您提供的链接是 Vue.js 官方文档中关于如何搭配 TypeScript 使用 Vue 的概述页面。这个页面详细介绍了 TypeScript 如何帮助开发者在编译时通过静态分析检测错误，提高开发效率和重构大型项目时的信心。Vue.js 本身是用 TypeScript 编写的，并且对 TypeScript 提供了全面的支持，所有官方库都自带类型声明文件。</p>
<p>页面内容涵盖了以下几个主要部分：</p>
<ol>
<li><strong>项目配置</strong>：介绍了如何使用 Vue CLI 创建基于 Vite 的 TypeScript 项目，以及在开发阶段如何依赖 IDE 配置来获取即时类型错误反馈。</li>
<li><strong>IDE 支持</strong>：强烈推荐使用 Visual Studio Code (VSCode) 配合 Volar 扩展来支持 Vue 单文件组件中的 TypeScript。Volar 是官方的 VSCode 扩展，取代了之前的 Vetur。WebStorm 和其他 JetBrains IDE 也提供了对 TypeScript 和 Vue 的支持。</li>
<li><strong>配置 tsconfig.json</strong>：提供了关于如何配置 TypeScript 编译器选项的建议，例如设置 <code>isolatedModules</code> 和 <code>verbatimModuleSyntax</code>，以及如何配置路径解析别名。</li>
<li><strong>Volar Takeover 模式</strong>：这是针对 VSCode + Volar 的优化，通过禁用 VSCode 的内置 TypeScript 语言服务，让 Volar 使用一个语言服务实例同时为 Vue 和 TypeScript 文件提供支持。</li>
<li><strong>关于 Vue CLI 和 ts-loader</strong>：解释了为什么在基于 webpack 的项目中，使用 ts-loader 进行类型检查不是理想的解决方案，并建议迁移到 Vite 或者使用 Vue CLI 的新选项来执行类型检查。</li>
<li><strong>常见使用说明</strong>：包括如何使用 <code>defineComponent</code> API 来定义组件，以及如何在单文件组件中使用 TypeScript 和 TSX。</li>
<li><strong>泛型组件</strong>：介绍了如何在单文件组件和渲染函数/JSX 组件中使用泛型。</li>
</ol>
<p>这个页面为开发者提供了关于如何在 Vue.js 项目中集成 TypeScript 的全面指南，包括工具链、配置、IDE 支持和最佳实践。如果您有任何具体问题或需要进一步的帮助，请告诉我。</p>
</div>
<p>注意⚠️：在使用了 <code>&lt;script lang=&quot;ts&quot;&gt;</code> 或 <code>&lt;script setup lang=&quot;ts&quot;&gt;</code> 后，<code>&lt;template&gt;</code> 在绑定表达式中也支持 TypeScript。这对需要在模板表达式中执行类型转换的情况下非常有用：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// &#x3C;!-- 出错，因为 x 可能是字符串 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  {{ x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) }}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{{ (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>与 Volar Takeover 模式差异：前者 Vue 文件需要手动添加 ts 校验标识声明，后者自动集成校验</p>
<h3 id="typescript-与组合式-api" tabindex="-1">TypeScript 与组合式 API <a class="header-anchor" href="#typescript-与组合式-api" aria-label="Permalink to &quot;TypeScript 与组合式 API&quot;">&ZeroWidthSpace;</a></h3>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>您提供的链接是 Vue.js 官方文档中关于 TypeScript 与组合式 API 的部分。在 Vue 3 中，TypeScript 提供了强大的类型支持，使得开发者可以在使用组合式 API（Composition API）时享受到类型检查的好处。这个页面详细介绍了如何在 Vue 3 中使用 TypeScript 来为组件的 <code>props、emits、ref、reactive、computed</code>、事件处理函数、<code>provide/inject</code> 以及模板引用等进行类型标注。</p>
<p>以下是一些关键点的概述：</p>
<ol>
<li><strong>为组件的 props 标注类型</strong>：可以通过 <code>defineProps</code> 函数或者基于类型的声明来为 props 设置类型。基于类型的声明允许编译器根据类型参数推导出等价的运行时选项。</li>
<li><strong>Props 解构默认值</strong>：在基于类型的声明中，可以使用 <code>withDefaults</code> 编译器宏来为 props 提供默认值。</li>
<li><strong>复杂的 prop 类型</strong>：可以通过基于类型的声明来指定复杂的 prop 类型，例如使用对象类型。</li>
<li><strong>为组件的 emits 标注类型</strong>：可以通过运行时声明或基于类型的声明来为 emits 函数设置类型。</li>
<li><strong>为 ref() 标注类型</strong>：ref 会根据初始化时的值推导类型，也可以通过泛型参数来指定更复杂的类型。</li>
<li><strong>为 reactive() 标注类型</strong>：reactive 也会从其参数中推导类型，可以通过接口或泛型参数来显式标注类型。</li>
<li><strong>为 computed() 标注类型</strong>：computed 会从计算函数的返回值上推导出类型。</li>
<li><strong>为事件处理函数标注类型</strong>：在处理原生 DOM 事件时，应该为事件处理函数的参数正确地标注类型。</li>
<li><strong>为 provide/inject 标注类型</strong>：使用 <code>InjectionKey</code> 接口来同步注入值的类型，并通过泛型参数显式声明注入值的类型。</li>
<li><strong>为模板引用标注类型</strong>：可以通过显式指定泛型参数和初始值来为模板引用创建类型，或者使用 <code>ComponentPublicInstance</code> 类型来获取组件实例的公共属性。</li>
</ol>
<p>这个页面还提到了一些 TypeScript 的语法限制，例如在 Vue 3.2 及以下版本中，泛型类型参数的限制，以及在 3.3 版本中对这些限制的改进。</p>
<p>如果您有关于这个页面的具体问题或者需要更详细的解释，请告诉我，我会尽力帮助您。</p>
</div>
<p>简单的 props 使用：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  foo: { type: String, required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  bar: Number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">props.foo </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">props.bar </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// number | undefined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：<strong>这被称之为“运行时声明”，因为传递给 <code>defineProps()</code> 的参数会作为运行时的 <code>props</code> 选项使用</strong>
优化：通过泛型声明</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;{</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}>()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 或者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 从另一个源文件支持导入，但需要 V3.3 版本才支持</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { Props } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './foo'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：<strong>这被称之为“基于类型的声明”。编译器会尽可能地尝试根据类型参数推导出等价的运行时选项</strong>。在这种场景下，这里第二个例子中编译出的运行时选项和第一个是完全一致的
<strong>基于类型的声明或者运行时声明可以择一使用，但是不能同时使用</strong></p>
<p><code>Props</code> 解构默认值：<code>withDefaults</code></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  labels</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> withDefaults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(), {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  msg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  labels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'one'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'two'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>注意⚠️：这将被编译为等效的运行时 <code>props default</code> 选项。此外，<code>withDefaults</code> 帮助程序为默认值提供类型检查，并确保返回的 props 类型删除了已声明默认值的属性的可选标志</p>
<p>为组件的 emits 标注类型：<strong>在 <code>&lt;script setup&gt;</code> 中，emit 函数的类型标注也可以通过运行时声明或是类型声明进行：</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 运行时</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'change'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'update'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 基于选项</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  change</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 返回 `true` 或 `false`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 表明验证通过或失败</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 返回 `true` 或 `false`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 表明验证通过或失败</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 基于类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'change'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'update'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}>()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 3.3+: 可选的、更简洁的语法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;{</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  change</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  update</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}>()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 另一种写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  emits: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'change'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'change'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// &#x3C;-- 类型检查 / 自动补全</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>类型参数：</p>
<ol>
<li>一个可调用的函数类型，但是写作一个包含<a href="https://www.typescriptlang.org/docs/handbook/2/functions.html#call-signatures" target="_blank" rel="noreferrer">调用签名</a>的类型字面量。它将被用作返回的 emit 函数的类型。</li>
<li>一个类型字面量，其中键是事件名称，值是数组或元组类型，表示事件的附加接受参数。上面的示例使用了具名元组，因此每个参数都可以有一个显式的名称</li>
</ol>
<p>为 <code>ref()</code> 标注类型：</p>
<ol>
<li>默认基本类型可以自动推导；</li>
<li>复杂类型使用 <code>Ref</code> 写法或泛型方式：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { Ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> year</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'2020'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 或</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 得到的类型：Ref&#x3C;string | number></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> year</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'2020'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">year.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2020</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 成功！</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 注意⚠️：没有初始化默认值将推导为 undefined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 推导得到的类型：Ref&#x3C;number | undefined></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>()</span></span></code></pre>
</div><p>为 <code>reactive()</code> 标注类型：</p>
<ol>
<li>隐式推导类型；</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { reactive } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 推导得到的类型：{ title: string }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> book</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Vue 3 指引'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 显示标注</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { reactive } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  year</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> book</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Book</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Vue 3 指引'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span></code></pre>
</div><p>注意⚠️：<strong>不推荐使用 <code>reactive()</code> 的泛型参数，因为处理了深层次 ref 解包的返回值与泛型参数的类型不同</strong></p>
<p>为 <code>computed()</code> 标注类型：默认从计算函数返回值推导类型</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref, computed } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 推导得到的类型：ComputedRef&#x3C;number></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> count.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// => TS Error: Property 'split' does not exist on type 'number'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> double.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 显示标注</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 若返回值不是 number 类型则会报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>为事件处理函数标注类型：
原生 DOM 事件处理：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // `event` 隐式地标注为 `any` 类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(event.target.value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改为</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((event.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @change</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"handleChange"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>为 <code>provide/inject</code> 标注类型：
<strong>Vue 提供了一个 InjectionKey 接口，它是一个继承自 Symbol 的泛型类型，可以用来在提供者和消费者之间同步注入值的类型：</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { provide, inject } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { InjectionKey } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> InjectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(key, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 若提供的是非字符串值会导致错误</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(key) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// foo 的类型：string | undefined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 泛型声明使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类型：string | undefined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 提供默认值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'bar'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类型：string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 强制转换类型值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span></code></pre>
</div><p>为模版引用标注类型：<strong>模板引用需要通过一个显式指定的泛型参数和一个初始值 <code>null</code> 来创建：</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref, onMounted } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">HTMLInputElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  el.value?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"el"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：在访问 <code>el.value</code> 时使用可选链或类型守卫。这是因为直到组件被挂载前，这个 <code>ref</code> 的值都是初始的 <code>null</code>，并且在由于 <code>v-if</code> 的行为将引用的元素卸载时也可以被设置为 <code>null</code></p>
<p>为组件模版引用标注类型：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> MyModal.vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> isContentShown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (isContentShown.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineExpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  open</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>为了获取 <code>MyModal</code> 的类型，我们首先需要通过 <code>typeof</code> 得到其类型，再使用 TypeScript 内置的 <code>InstanceType</code> 工具类型来获取其实例类型：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> App.vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> MyModal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './MyModal.vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> modal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">InstanceType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> MyModal> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> openModal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  modal.value?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：<strong>如果组件的具体类型无法获得，或者你并不关心组件的具体类型，那么可以使用 <code>ComponentPublicInstance</code>。这只会包含所有组件都共享的属性，比如 $el</strong>：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ComponentPublicInstance } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ComponentPublicInstance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div><h3 id="typescript-与选项式-api" tabindex="-1">TypeScript 与选项式 API <a class="header-anchor" href="#typescript-与选项式-api" aria-label="Permalink to &quot;TypeScript 与选项式 API&quot;">&ZeroWidthSpace;</a></h3>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>您提供的链接是 Vue.js 官方文档中关于 TypeScript 与选项式 API 的部分。在这部分内容中，Vue.js 提供了如何在 TypeScript 环境中使用选项式 API 的指导，包括如何为组件的 <code>props、emits</code>、计算属性和事件处理函数标注类型，以及如何扩展全局属性和自定义选项。</p>
<p>以下是一些关键点：</p>
<ol>
<li><strong>为组件的 props 标注类型</strong>：</li>
</ol>
<ul>
<li>使用 <code>defineComponent()</code> 来包装组件，以便 Vue 可以推导出 props 的类型。</li>
<li>对于更复杂的 props 类型，可以使用 <code>PropType</code> 工具类型来指定。</li>
</ul>
<ol start="2">
<li><strong>为组件的 emits 标注类型</strong>：</li>
</ol>
<ul>
<li>提供一个对象来声明组件触发的事件及其参数类型，以确保类型安全。</li>
</ul>
<ol start="3">
<li><strong>为计算属性标记类型</strong>：</li>
</ol>
<ul>
<li>计算属性的类型通常会自动推导，但在某些情况下，可能需要显式标注类型。</li>
</ul>
<ol start="4">
<li><strong>为事件处理函数标注类型</strong>：</li>
</ol>
<ul>
<li>在处理 DOM 事件时，应为事件处理函数的参数正确标注类型，以避免类型错误。</li>
</ul>
<ol start="5">
<li><strong>扩展全局属性</strong>：</li>
</ol>
<ul>
<li>Vue 提供了 <code>ComponentCustomProperties</code> 接口，可以通过 TypeScript 模块扩展来支持全局属性。</li>
</ul>
<ol start="6">
<li><strong>扩展自定义选项</strong>：</li>
</ol>
<ul>
<li>对于某些插件提供的自定义组件选项，可以通过扩展 <code>ComponentCustomOptions</code> 接口来提供类型支持。</li>
</ul>
<p>这些指导有助于开发者在 TypeScript 环境中更安全、更高效地使用 Vue.js 的选项式 API。如果您有关于这部分内容的具体问题或需要进一步的解释，请告诉我，我会尽力帮助您。</p>
</div>
<p>注意⚠️：虽然 Vue 的确支持在选项式 API 中使用 TypeScript，但在使用 TypeScript 的前提下<strong>更推荐使用组合式 API，因为它提供了更简单、高效和可靠的类型推导</strong></p>
<p>为组件 props 标注类型：
选项式 API 中对 props 的类型推导需要用 <code>defineComponent()</code> 来包装组件。有了它，Vue 才可以通过 props 以及一些额外的选项，比如 <code>required: true</code> 和 default 来推导出 props 的类型：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 启用了类型推导</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  props: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    name: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    id: [Number, String],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    msg: { type: String, required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    metadata: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.name </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类型：string | undefined</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.id </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类型：number | string | undefined</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.msg </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类型：string</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.metadata </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类型：any</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 或者 使用 PropType 这个工具类型来标记更复杂的 props 类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { PropType } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  author</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  year</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  props: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    book: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 提供相对 `Object` 更确定的类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      type: Object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> PropType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 也可以标记函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    callback: Function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> PropType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.book.title </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// string</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.book.year </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// number</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // TS Error: argument of type 'string' is not</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // assignable to parameter of type 'number'</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">?.(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'123'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>注意⚠️：如果你的 TypeScript 版本低于 4.7，在使用函数作为 prop 的 validator 和 default 选项值时需要格外小心——确保使用箭头函数：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { PropType } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  year</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  props: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    bookA: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      type: Object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> PropType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 如果你的 TypeScript 版本低于 4.7，确保使用箭头函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Arrow Function Expression'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      validator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">book</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">book.title</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>为组件的 <code>emits</code> 标注类型：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  emits: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    addBook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">payload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">bookName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 执行运行时校验</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> payload.bookName.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    onSubmit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'addBook'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        bookName: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">123</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 类型错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'non-declared-event'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类型错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>为计算属性标记类型：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Hello!'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 根据返回值默认推导类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  computed: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '!'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.greeting </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类型：string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 显示标注类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Hello!'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  computed: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 显式标注返回类型</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '!'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 标注一个可写的计算属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    greetingUppercased: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.greeting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">newValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> newValue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>注意⚠️：<strong>在某些 TypeScript 因循环引用而无法推导类型的情况下，可能必须进行显式的类型标注</strong></p>
<p>为事件处理函数标注类型：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // `event` 隐式地标注为 `any` 类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(event.target.value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 修改为</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // handleChange(event: Event) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //   console.log((event.target as HTMLInputElement).value)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @change</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"handleChange"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>扩展全局属性：
某些插件会通过 <a href="https://cn.vuejs.org/api/application.html#app-config-globalproperties" target="_blank" rel="noreferrer"><code>app.config.globalProperties</code></a> 为所有组件都安装全局可用的属性。举例来说，我们可能为了请求数据而安装了 this.$http，或者为了国际化而安装了 this.$translate。为了使 TypeScript 更好地支持这个行为，Vue 暴露了一个被设计为可以通过 <a href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation" target="_blank" rel="noreferrer">TypeScript 模块扩展</a>来扩展的 ComponentCustomProperties 接口：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> axios </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'axios'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ComponentCustomProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">    $http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> axios</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    $translate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>类型扩展的位置：
将这些类型扩展放在一个 <code>.ts</code> 文件，或是一个影响整个项目的 <code>*.d.ts</code> 文件中。无论哪一种，都应确保在 <code>tsconfig.json</code> 中包括了此文件。对于库或插件作者，这个文件应该在 <code>package.json</code> 的 types 属性中被列出
为了利用模块扩展的优势，你需要确保将扩展的模块放在 <a href="https://www.typescriptlang.org/docs/handbook/modules.html" target="_blank" rel="noreferrer">TypeScript 模块</a> 中。 也就是说，该文件需要包含至少<strong>一个顶级的 import 或 export，即使它只是 export {}。如果扩展被放在模块之外，它将覆盖原始类型，而不是扩展!</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 不工作，将覆盖原始类型。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ComponentCustomProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    $translate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正常工作。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ComponentCustomProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    $translate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>扩展自定义选项：
某些插件，比如 <code>vue-router</code>，提供了一些自定义的组件选项，比如 <code>beforeRouteEnter：</code></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  beforeRouteEnter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 声明</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { Route } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue-router'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ComponentCustomOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    beforeRouteEnter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">from</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">next</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="进阶主题" tabindex="-1">进阶主题 <a class="header-anchor" href="#进阶主题" aria-label="Permalink to &quot;进阶主题&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="使用-vue-的多种方式" tabindex="-1">使用 Vue 的多种方式 <a class="header-anchor" href="#使用-vue-的多种方式" aria-label="Permalink to &quot;使用 Vue 的多种方式&quot;">&ZeroWidthSpace;</a></h3>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>您提供的链接是 Vue.js 的官方文档页面，标题为“使用 Vue 的多种方式”。这个页面详细介绍了 Vue.js 如何根据不同的使用场景和需求，以多种方式被集成和使用。以下是一些关键点的概述：</p>
<ol>
<li><strong>独立脚本</strong>：Vue.js 可以作为一个单独的 JavaScript 文件使用，无需构建步骤。这适用于后端已经渲染了大部分 HTML 或前端逻辑不复杂的场景。Vue.js 提供了一个精简版本 <code>petite-vue</code>，专为渐进式增强现有 HTML 设计。</li>
<li><strong>作为 Web Component 嵌入</strong>：Vue.js 可以用来构建标准的 Web Components，这些组件可以嵌入到任何 HTML 页面中，无论页面是如何渲染的。这种方式允许在不关心最终使用场景的情况下使用 Vue.js。</li>
<li><strong>单页面应用 (SPA)</strong>：对于需要丰富交互性、深度会话和复杂状态逻辑的应用，Vue.js 提供了核心功能库和全面的工具链支持，以构建现代的单页应用。这包括客户端路由、快速构建工具、IDE 支持、浏览器开发工具、TypeScript 支持和测试工具。</li>
<li><strong>全栈 / SSR</strong>：为了解决纯客户端 SPA 在首屏加载和 SEO 方面的问题，Vue.js 提供了服务端渲染 (SSR) 的 API。这允许服务器直接返回渲染好的 HTML，改善了应用的性能表现。</li>
<li><strong>JAMStack / SSG</strong>：对于静态数据，Vue.js 支持静态站点生成 (SSG)，可以将整个应用预渲染为 HTML 并作为静态文件部署。这提高了站点性能并简化了部署。Vue.js 支持单页和多页 SSG，前者在初始页面加载后激活为 SPA，后者每次导航加载新页面。</li>
<li><strong>Web 之外的应用</strong>：Vue.js 不仅限于 Web 应用，还可以与 Electron 或 Tauri 结合构建桌面应用，与 Ionic Vue 结合构建移动端应用，使用 Quasar 开发跨平台应用，或者使用 Vue 的自定义渲染 API 构建特定环境（如终端命令行）的应用。</li>
</ol>
<p>这个页面还提到了 Vue.js 生态中的一些工具和框架，如 Nuxt.js、Astro 和 VitePress，它们提供了额外的功能和便利，以支持不同的开发需求。如果您有关于 Vue.js 的具体问题或需要更详细的信息，请告诉我，我会尽力帮助您。</p>
</div>
<ol>
<li>独立脚本：</li>
</ol>
<ul>
<li>Vue 可以以一个单独 JS 文件的形式使用，无需构建步骤！如果你的后端框架已经渲染了大部分的 HTML，或者你的前端逻辑并不复杂，不需要构建步骤，这是最简单的使用 Vue 的方式。在这些场景中你可以将 Vue 看作一个更加声明式的 jQuery 替代品</li>
<li>petite-vue</li>
</ul>
<ol start="2">
<li>作为 Web Component 嵌入：</li>
</ol>
<p>用 Vue 来<a href="https://cn.vuejs.org/guide/extras/web-components.html" target="_blank" rel="noreferrer">构建标准的 Web Component</a>，这些 Web Component 可以嵌入到任何 HTML 页面中，无论它们是如何被渲染的。这个方式让你能够在不需要顾虑最终使用场景的情况下使用 Vue：因为生成的 Web Component 可以嵌入到旧应用、静态 HTML，甚至用其他框架构建的应用中</p>
<ol start="3">
<li>单页面应用（SPA）：</li>
</ol>
<p>一些应用在前端需要具有丰富的交互性、较深的会话和复杂的状态逻辑。构建这类应用的最佳方法是使用这样一种架构：Vue 不仅控制整个页面，还负责处理抓取新数据，并在无需重新加载的前提下处理页面切换。这种类型的应用通常称为单页应用 (Single-Page application，缩写为 SPA)
建议💡：SPA 一般要求后端提供 API 数据接口，但你也可以将 Vue 和如 <a href="https://inertiajs.com/" target="_blank" rel="noreferrer">Inertia.js</a> 之类的解决方案搭配使用，在保留侧重服务端的开发模型的同时获得 SPA 的益处</p>
<ol start="4">
<li>全栈/SSR：</li>
</ol>
<p>Vue 提供了一系列 API，支持将一个 Vue 应用在服务端渲染成 HTML 字符串。这能让服务器直接返回渲染好的 HTML，让用户在 JavaScript 下载完毕前就看到页面内容。Vue 之后会在客户端对应用进行“激活 (hydrate)”使其重获可交互性。这被称为<a href="https://cn.vuejs.org/guide/scaling-up/ssr.html" target="_blank" rel="noreferrer">服务端渲染 (SSR)</a>，它能够极大地改善应用在 Web 核心指标上的性能表现，如<a href="https://web.dev/lcp/" target="_blank" rel="noreferrer">最大内容绘制 (LCP)</a>
Vue 生态中有一些针对此类场景的、基于 Vue 的上层框架，比<strong>如 <strong><a href="https://nuxt.com/" target="_blank" rel="noreferrer"><strong>NuxtJS</strong></a></strong>，能让你用 Vue 和 JavaScript 开发一个全栈应用</strong></p>
<ol start="5">
<li>JAMStack/SSG：</li>
</ol>
<p>如果所需的数据是静态的，那么服务端渲染可以提前完成。这意味着我们可以将整个应用预渲染为 HTML，并将其作为静态文件部署。这增强了站点的性能表现，也使部署变得更容易，因为我们无需根据请求动态地渲染页面。Vue 仍可通过激活在客户端提供交互。这一技术通常被称为静态站点生成 (SSG)，也被称为 <a href="https://jamstack.org/what-is-jamstack/" target="_blank" rel="noreferrer">JAMStack</a></p>
<ol start="6">
<li>Web 之外：</li>
</ol>
<p>尽管 Vue 主要是为构建 Web 应用而设计的，但它绝不仅仅局限于浏览器。你还可以：</p>
<ul>
<li>配合 <a href="https://www.electronjs.org/" target="_blank" rel="noreferrer">Electron</a> 或 <a href="https://tauri.app/" target="_blank" rel="noreferrer">Tauri</a> 构建桌面应用</li>
<li>配合 <a href="https://ionicframework.com/docs/vue/overview" target="_blank" rel="noreferrer">Ionic Vue</a> 构建移动端应用</li>
<li>使用 <a href="https://quasar.dev/" target="_blank" rel="noreferrer">Quasar</a> 用同一套代码同时开发桌面端和移动端应用</li>
<li>使用 <a href="https://tresjs.org/" target="_blank" rel="noreferrer">TresJS</a> 构建 3D WebGL 体验</li>
<li>使用 Vue 的<a href="https://cn.vuejs.org/api/custom-renderer.html" target="_blank" rel="noreferrer">自定义渲染 API</a> 来构建自定义渲染器，比如针对<a href="https://github.com/vue-terminal/vue-termui" target="_blank" rel="noreferrer">终端命令行</a>的！</li>
</ul>
<h3 id="组合式-api-常见问答" tabindex="-1">组合式 API 常见问答 <a class="header-anchor" href="#组合式-api-常见问答" aria-label="Permalink to &quot;组合式 API 常见问答&quot;">&ZeroWidthSpace;</a></h3>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>组合式 API（Composition API）是 Vue.js 3 中引入的一种新的编程范式，它允许开发者以函数的方式组织组件逻辑，而不是传统的选项式 API（Options API）。以下是组合式 API 的一些关键点：</p>
<ol>
<li><strong>定义</strong>：组合式 API 是一组 API，包括响应式 API（如 <code>ref</code> 和 <code>reactive</code>）、生命周期钩子（如 <code>onMounted</code> 和 <code>onUnmounted</code>）以及依赖注入（如 <code>provide</code> 和 <code>inject</code>）。它在 Vue 3 中是内置的，而在 Vue 2.7 及之前的版本中，可以通过安装 <code>@vue/composition-api</code> 插件来使用。</li>
<li><strong>优势</strong>：</li>
</ol>
<ul>
<li><strong>更好的逻辑复用</strong>：通过组合函数，可以更简洁高效地复用逻辑，解决了 mixins 的缺陷。</li>
<li><strong>更灵活的代码组织</strong>：组合式 API 使得相关逻辑可以集中在一起，便于理解和维护。</li>
<li><strong>更好的类型推导</strong>：对于使用 TypeScript 的开发者，组合式 API 提供了更好的类型支持，减少了类型标注的需求。</li>
<li><strong>更小的生产包体积</strong>：由于组合式 API 的组件模板被编译为内联函数，减少了对 <code>this</code> 上下文的依赖，从而减小了打包体积。</li>
</ul>
<ol start="3">
<li><strong>与选项式 API 的关系</strong>：组合式 API 并不是要取代选项式 API，而是提供了另一种选择。两者可以在同一组件中混合使用，但通常推荐在一个项目中保持一致性。</li>
<li><strong>与 Class API 的关系</strong>：Vue.js 3 不再推荐使用 Class API，因为组合式 API 提供了更好的 TypeScript 集成和逻辑复用能力。</li>
<li><strong>与 React Hooks 的对比</strong>：组合式 API 提供了与 React Hooks 类似的逻辑组织能力，但解决了 Hooks 在性能和使用上的一些问题。例如，组合式 API 的函数只在组件创建时调用一次，而 Hooks 在每次组件更新时都会重新调用。</li>
<li><strong>使用场景</strong>：组合式 API 可以覆盖所有状态逻辑方面的需求，并且可以与少量的选项式 API（如 <code>props</code>、<code>emits</code>、<code>name</code>、<code>inheritAttrs</code>）一起使用。从 Vue 3.3 开始，可以通过配置编译时标记来移除对选项式 API 的支持，进一步减小生产包体积。</li>
<li><strong>实践建议</strong>：虽然组合式 API 提供了更多的灵活性，但它并不会自动组织代码。开发者需要运用良好的 JavaScript 编码实践来保持代码的清晰和可维护性。</li>
</ol>
<p>这个页面还提供了一个示例，展示了如何使用组合式 API 来创建一个简单的计数器组件。如果您对如何使用组合式 API 或者有其他具体问题，欢迎继续提问。</p>
</div>
<p><strong>什么是组合式 API：</strong>
<strong>组合式 API (Composition API) 是一系列 API 的集合</strong>，使我们可以使用函数而不是声明选项的方式书写 Vue 组件。它是一个概括性的术语，涵盖了以下方面的 API：</p>
<ul>
<li><a href="https://cn.vuejs.org/api/reactivity-core.html" target="_blank" rel="noreferrer"><strong>响应式 API</strong></a><strong>：例如 <code>ref() 和 reactive()</code>，使我们可以直接创建响应式状态、计算属性和侦听器。</strong></li>
<li><a href="https://cn.vuejs.org/api/composition-api-lifecycle.html" target="_blank" rel="noreferrer"><strong>生命周期钩子</strong></a><strong>：例如 <code>onMounted() 和 onUnmounted()</code>，使我们可以在组件各个生命周期阶段添加逻辑。</strong></li>
<li><a href="https://cn.vuejs.org/api/composition-api-dependency-injection.html" target="_blank" rel="noreferrer"><strong>依赖注入</strong></a><strong>：例如 <code>provide() 和 inject()</code>，使我们可以在使用响应式 API 时，利用 Vue 的依赖注入系统</strong></li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref, onMounted } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 响应式状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 更改状态、触发更新的函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  count.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 生命周期钩子</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`计数器初始值为 ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}。`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button @click</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"increment"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">点击了：{{ count }} 次</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：组合式 API 是 Vue 3 及 <a href="https://blog.vuejs.org/posts/vue-2-7-naruto.html" target="_blank" rel="noreferrer">Vue 2.7</a> 的内置功能。对于更老的 Vue 2 版本，可以使用官方维护的插件 <a href="https://github.com/vuejs/composition-api" target="_blank" rel="noreferrer"><code>@vue/composition-api</code></a>。在 Vue 3 中，组合式 API 基本上都会配合 <a href="https://cn.vuejs.org/api/sfc-script-setup.html" target="_blank" rel="noreferrer"><code>&lt;script setup&gt;</code></a> 语法在单文件组件中使用</p>
<p><strong>为什么要有组合式 API：</strong></p>
<ol>
<li>更好的逻辑复用：通过组合函数逻辑复用，更加高效简洁，替代 <code>mixins</code></li>
</ol>
<p>三方工具组合式函数，比如 VueUse，集成一套简洁清晰的机制，例如<a href="https://cn.vuejs.org/guide/extras/reactivity-in-depth.html#immutable-data" target="_blank" rel="noreferrer">不可变数据</a>、<a href="https://cn.vuejs.org/guide/extras/reactivity-in-depth.html#state-machines" target="_blank" rel="noreferrer">状态机</a>与 <a href="https://cn.vuejs.org/guide/extras/reactivity-in-depth.html#rxjs" target="_blank" rel="noreferrer">RxJS</a></p>
<ol start="2">
<li>更灵活的代码组织：</li>
</ol>
<p>选项式 API 的这个组件承担了以下几个逻辑关注点：</p>
<ul>
<li>追踪当前文件夹的状态，展示其内容</li>
<li>处理文件夹的相关操作 (打开、关闭和刷新)</li>
<li>支持创建新文件夹</li>
<li>可以切换到只展示收藏的文件夹</li>
<li>可以开启对隐藏文件夹的展示</li>
<li>处理当前工作目录中的变更</li>
</ul>
<CustomImage src='/growth-record/frame/vue/vue3study15.webp' /><p>组合式 API 重构后：</p>
<CustomImage src='/growth-record/frame/vue/vue3study16.webp' /><p>将同一逻辑关注点放在同一组处理</p>
<ol>
<li>更好的类型推导：</li>
</ol>
<p><strong>组合式 API 主要利用基本的变量和函数</strong>，它们本身就是类型友好的。<strong>用组合式 API 重写的代码可以享受到完整的类型推导，不需要书写太多类型标注</strong>。大多数时候，用 TypeScript 书写的组合式 API 代码和用 JavaScript 写都差不太多！这也让许多纯 JavaScript 用户也能从 IDE 中享受到部分类型推导功能</p>
<ol start="4">
<li>更小的生产包体积：</li>
</ol>
<ul>
<li><strong><code>&lt;script setup&gt;</code> 形式书写的组件模板被编译为了一个内联函数，和 <code>&lt;script setup&gt;</code> 中的代码位于同一作用域</strong>。不像选项式 API 需要依赖 this 上下文对象访问属性，被编译的模板可以直接访问 <code>&lt;script setup&gt;</code> 中定义的变量，无需从实例中代理</li>
<li><strong>对代码压缩更友好，因为本地变量的名字可以被压缩，但对象的属性名则不能</strong></li>
</ul>
<p>与选项式 API 的关系：
组合式 API 不像选项式 API 那样会手把手教你该把代码放在哪里。但反过来，它却<strong>让你可以像编写普通的 JavaScript 那样来编写组件代码</strong>。这意味着你能够，并且应该在<strong>写组合式 API 的代码时也运用上所有普通 JavaScript 代码组织的最佳实践。如果你可以编写组织良好的 JavaScript，你也应该有能力编写组织良好的组合式 API 代码</strong></p>
<p>组合式 API 是否覆盖了所有场景：
组合式 API 能够覆盖所有状态逻辑方面的需求。<strong>除此之外，只需要用到一小部分选项：props，emits，name 和 inheritAttrs</strong>
注意⚠️：从 3.3 开始你可以直接通过 <code>&lt;script setup&gt;</code> 中的 defineOptions 来设置组件名或 inheritAttrs 属性</p>
<p>可以在同一个组件中使用两种 API：一个选项式 API 的组件中通过 <a href="https://cn.vuejs.org/api/composition-api-setup.html" target="_blank" rel="noreferrer">setup()</a> 选项来使用组合式 API。
然而，我们只推荐你在一个已经基于选项式 API 开发了很久、但又需要和基于组合式 API 的新代码或是第三方库整合的项目中这样做</p>
<p>和 React Hooks 相比：</p>
<h3 id="深入响应式系统" tabindex="-1">深入响应式系统 <a class="header-anchor" href="#深入响应式系统" aria-label="Permalink to &quot;深入响应式系统&quot;">&ZeroWidthSpace;</a></h3>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>您提供的链接是 Vue.js 官方文档中关于响应式系统深入解析的部分。在这部分内容中，Vue.js 详细介绍了其响应式系统的工作原理，包括响应性的定义、如何在 JavaScript 中实现响应性、Vue 中响应性的实现细节、运行时与编译时响应性的区别、响应性调试方法，以及如何与外部状态系统集成等。</p>
<p>响应性是 Vue.js 的核心特性之一，它允许开发者声明式地处理数据变化，而不需要手动操作 DOM。Vue.js 使用 Proxy 对象来实现响应式系统，这样当数据发生变化时，Vue.js 能够自动追踪依赖并更新视图。</p>
<p>在 Vue 3 中，响应式系统是基于 Proxy 的，而在 Vue 2 中则是基于 <code>Object.defineProperty</code>。Vue.js 的响应式系统允许开发者通过简单的 API（如 ref 和 computed）来创建响应式数据，并通过 watchEffect 或 watch 来监听数据变化。</p>
<p>文档还提到了响应性调试的钩子，如 renderTracked 和 renderTriggered，这些钩子可以帮助开发者在开发过程中更好地理解组件的响应性行为。此外，文档还探讨了如何将 Vue 的响应性系统与外部状态管理库（如 Immer、XState、RxJS）集成，以及与信号（signal）的联系，这些都是现代前端开发中常见的概念。</p>
<p>如果您有关于 Vue.js 响应式系统的具体问题或需要更详细的解释，请告诉我，我会尽力帮助您。</p>
</div>
<ul>
<li><strong>Vue 最标志性的功能就是其低侵入性的响应式系统</strong>。组件状态都是由响应式的 JavaScript 对象组成的。当更改它们时，视图会随即自动更新</li>
<li>状态管理更加简单直观</li>
</ul>
<p>注意⚠️：响应性是一种可以使我们声明式地处理变化的编程范式</p>
<p>Vue 中的响应性是如何工作的：
无法追踪局部变量的读写，但是可以追踪对象属性的读写
在 JavaScript 中有两种劫持 property 访问的方式：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get" target="_blank" rel="noreferrer">getter</a> / <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set" target="_blank" rel="noreferrer">setters</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">Proxies</a>。Vue 2 使用 getter / setters 完全是出于支持旧版本浏览器的限制。而在 Vue 3 中则使用了 Proxy 来创建响应式对象，仅将 getter / setter 用于 ref，伪代码说明：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      track</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(target, key)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> target[key]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      target[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(target, key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> refObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      track</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(refObject, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'value'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> newValue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(refObject, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'value'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> refObject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// track 内部</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 这会在一个副作用就要运行之前被设置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 我们会在后面处理它</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> activeEffect</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> track</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (activeEffect) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> effects</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getSubscribersForProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(target, key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    effects.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(activeEffect)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><code>reactive() </code>的局限性：</p>
<ul>
<li>当你将一个响应式对象的属性<strong>赋值或解构到一个本地变量时</strong>，访问或赋值该变量是<strong>非响应式的</strong>，因为它将不再触发源对象上的 get / set 代理。注意这种“断开”只影响变量绑定——如果变量指向一个对象之类的非原始值，那么对该对象的修改仍然是响应式的</li>
<li>从 <code>reactive()</code> 返回的代理尽管行为上表现得像原始对象，但我们通过使用 === 运算符还是能够比较出它们的不同</li>
</ul>
<p>运行时 VS 编译时响应性：
<strong>Vue 的响应式系统基本是基于运行时的。追踪和触发都是在浏览器中运行时进行的</strong>。<strong>运行时响应性的优点是，它可以在没有构建步骤的情况下工作，而且边界情况较少</strong>。另一方面，这使得它受到了 JavaScript 语法的制约，导致需要使用一些例如 Vue ref 这样的值的容器</p>
<p>响应性调试：仅会在开发模式下工作
生命周期钩子使用 dugger 调试：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { onRenderTracked, onRenderTriggered } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onRenderTracked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  debugger</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onRenderTriggered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  debugger</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>计算属性调试：
向 <code>computed()</code> 传入第二个参数，是一个包含了 onTrack 和 onTrigger 两个回调函数的对象：</p>
<ul>
<li>onTrack 将在响应属性或引用作为依赖项被跟踪时被调用。</li>
<li>onTrigger 将在侦听器回调被依赖项的变更触发时被调用。</li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> plusOne</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> count.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  onTrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 当 count.value 被追踪为依赖时触发</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    debugger</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  onTrigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 当 count.value 被更改时触发</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    debugger</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 访问 plusOne，会触发 onTrack</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(plusOne.value)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 更改 count.value，应该会触发 onTrigger</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">count.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span></span></code></pre>
</div><p>侦听器调试：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(source, callback, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  onTrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    debugger</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  onTrigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    debugger</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(callback, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  onTrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    debugger</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  onTrigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    debugger</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>与外部状态系统集成：
注意⚠️：Vue 的响应性系统是通过深度转换普通 JavaScript 对象为响应式代理来实现的。这种深度转换在一些情况下是不必要的，在和一些外部状态管理系统集成时，甚至是需要避免的 (例如，当一个外部的解决方案也用了 Proxy 时)
将 Vue 的响应性系统与外部状态管理方案集成的大致思路是：将外部状态放在一个 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowref" target="_blank" rel="noreferrer">shallowRef</a> 中。一个浅层的 ref 中只有它的 .value 属性本身被访问时才是有响应性的，而不关心它内部的值。当外部状态改变时，替换此 ref 的 .value 才会触发更新</p>
<p>不可变数据结构：
<a href="https://en.wikipedia.org/wiki/Persistent_data_structure" target="_blank" rel="noreferrer">不可变数据结构</a>通过永不更改状态对象来解决这个问题。与 Vue 不同的是，它会创建一个新对象，保留旧的对象未发生改变的一部分。在 JavaScript 中有多种不同的方式来使用不可变数据，但我们推荐使用 <a href="https://immerjs.github.io/immer/" target="_blank" rel="noreferrer">Immer</a> 搭配 Vue，因为它使你可以在保持原有直观、可变的语法的同时，使用不可变数据</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> produce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'immer'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { shallowRef } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useImmer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">baseState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> shallowRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(baseState)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> update</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">updater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    state.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> produce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(state.value, updater)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [state, update]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>状态机：
<a href="https://en.wikipedia.org/wiki/Finite-state_machine" target="_blank" rel="noreferrer"><strong>状态机</strong></a><strong>是一种数据模型，用于描述应用可能处于的所有可能状态，以及从一种状态转换到另一种状态的所有可能方式</strong>。虽然对于简单的组件来说，这可能有些小题大做了，但它的确可以使得复杂的状态流更加健壮和易于管理</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { createMachine, interpret } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'xstate'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { shallowRef } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useMachine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> machine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createMachine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(options)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> shallowRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(machine.initialState)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> service</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> interpret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(machine)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">newState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (state.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> newState))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> send</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(event)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [state, send]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>RxJS：
<a href="https://rxjs.dev/" target="_blank" rel="noreferrer">RxJS</a> 是<strong>一个用于处理异步事件流的库</strong>。<a href="https://vueuse.org/" target="_blank" rel="noreferrer">VueUse</a> 库提供了 <a href="https://vueuse.org/rxjs/readme.html" target="_blank" rel="noreferrer">@vueuse/rxjs</a> 扩展来支持连接 RxJS 流与 Vue 的响应性系统</p>
<p>与信号（signal）的联系：
很多其他框架已经引入了与 Vue 组合式 API 中的 ref 类似的响应性基础类型，并称之为“信号”：</p>
<ul>
<li><a href="https://www.solidjs.com/docs/latest/api#createsignal" target="_blank" rel="noreferrer">Solid 信号</a></li>
<li><a href="https://github.com/angular/angular/discussions/49090" target="_blank" rel="noreferrer">Angular 信号</a></li>
<li><a href="https://preactjs.com/guide/v10/signals/" target="_blank" rel="noreferrer">Preact 信号</a></li>
<li><a href="https://qwik.builder.io/docs/components/state/#usesignal" target="_blank" rel="noreferrer">Qwik 信号</a></li>
</ul>
<p>API 设计权衡：
与 Vue 的 ref 相比，Solid 和 Angular 基于 getter 的 API 风格在 Vue 组件中使用时提供了一些有趣的权衡：</p>
<ul>
<li><code>() 比 .value</code> 略微省事，但更新值却更冗长；</li>
<li>没有 ref 解包：总是需要通过 () 来访问值。这使得值的访问在任何地方都是一致的。这也意味着你可以将原始信号作为组件的参数传递下去。</li>
</ul>
<h3 id="渲染机制" tabindex="-1">渲染机制 <a class="header-anchor" href="#渲染机制" aria-label="Permalink to &quot;渲染机制&quot;">&ZeroWidthSpace;</a></h3>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>您提供的链接是 Vue.js 的官方文档页面，详细介绍了 Vue.js 的渲染机制。这个页面涵盖了 Vue.js 如何将模板转换为真实的 DOM 节点，以及如何高效地更新这些节点。以下是一些关键点的概述：</p>
<ol>
<li><strong>虚拟 DOM (Virtual DOM)</strong>: Vue.js 使用虚拟 DOM 来表示 UI，它是一个在内存中的轻量级表示，用于与实际的 DOM 保持同步。虚拟 DOM 的主要优势是允许开发者以声明式的方式构建 UI，同时将 DOM 操作的复杂性留给框架处理。</li>
<li><strong>渲染管线</strong>: Vue.js 在组件挂载时会经历编译、运行时渲染和响应式更新的过程。编译阶段将模板转换为渲染函数，运行时渲染器根据渲染函数创建 DOM 节点，并在依赖变化时更新 DOM。</li>
<li><strong>模板 vs. 渲染函数</strong>: Vue.js 默认推荐使用模板，因为它更接近 HTML，易于理解和维护。然而，对于高度动态的逻辑，渲染函数提供了更大的灵活性。Vue.js 允许开发者在需要时直接编写渲染函数。</li>
<li><strong>带编译时信息的虚拟 DOM</strong>: Vue.js 的编译器在编译模板时会应用静态分析，留下编译时信息，这些信息帮助运行时渲染器更高效地处理更新。例如，静态提升、更新类型标记和树结构打平都是 Vue.js 编译器用来提高性能的优化手段。</li>
<li><strong>静态提升</strong>: Vue.js 会识别模板中的静态内容，并在渲染函数外部创建这些节点，这样在后续的渲染过程中就可以跳过这些静态节点，减少不必要的 DOM 操作。</li>
<li><strong>更新类型标记</strong>: Vue.js 在编译时会为每个动态绑定的元素推断出更新类型，这些类型在运行时用于确定如何更新 DOM。这种标记减少了在更新过程中需要执行的操作。</li>
<li><strong>树结构打平</strong>: Vue.js 会将模板中的区块（block）打平为一个数组，这样在重渲染时只需要遍历这个数组，而不是整个树，从而提高性能。</li>
<li><strong>对 SSR 激活的影响</strong>: Vue.js 的这些优化也提升了服务器端渲染（SSR）的性能，因为它们允许更高效的部分激活和更新。</li>
</ol>
<p>这个页面提供了对 Vue.js 渲染机制的深入理解，对于想要了解 Vue.js 如何工作以及如何优化性能的开发者来说非常有用。如果您有关于这个主题的具体问题，欢迎继续提问。</p>
</div>
<p>（一）虚拟 DOM：
<strong>虚拟 DOM (Virtual DOM，简称 VDOM) 是一种编程概念，意为将目标所需的 UI 通过数据结构“虚拟”地表示出来，保存在内存中，然后将真实的 DOM 与之保持同步</strong>。这个概念是由 <a href="https://reactjs.org/" target="_blank" rel="noreferrer">React</a> 率先开拓，随后被许多不同的框架采用，当然也包括 Vue</p>
<p>如果我们有两份虚拟 DOM 树，渲染器将会有比较地遍历它们，找出它们之间的区别，并应用这其中的变化到真实的 DOM 上。这个过程被称为更新 (patch)，又被称为“比对”(diffing) 或“协调”(reconciliation)</p>
<p>虚拟 DOM 好处：</p>
<ul>
<li>让开发者能够灵活、声明式地创建、检查和组合所需 UI 的结构</li>
<li>把具体的 DOM 操作留给渲染器去处理</li>
</ul>
<p>（二）渲染管线：
Vue 组件挂载会发生的事情：</p>
<ol>
<li>编译：Vue 模板被编译为渲染函数：即用来返回虚拟 DOM 树的函数。这一步骤可以通过构建步骤提前完成，也可以通过使用运行时编译器即时完成。</li>
<li>挂载：运行时渲染器调用渲染函数，遍历返回的虚拟 DOM 树，并基于它创建实际的 DOM 节点。这一步会作为<a href="https://cn.vuejs.org/guide/extras/reactivity-in-depth.html" target="_blank" rel="noreferrer">响应式副作用</a>执行，因此它会追踪其中所用到的所有响应式依赖。</li>
<li>更新：当一个依赖发生变化后，副作用会重新运行，这时候会创建一个更新后的虚拟 DOM 树。运行时渲染器遍历这棵新树，将它与旧树进行比较，然后将必要的更新应用到真实 DOM 上去。</li>
</ol>
<CustomImage src='/growth-record/frame/vue/vue3study17.webp' /><p>（三）模版 vs 渲染函数：
<strong>Vue 模板会被预编译成虚拟 DOM 渲染函数</strong>。Vue 也提供了 API 使我们可以不使用模板编译，直接手写渲染函数。在处理高度动态的逻辑时，渲染函数相比于模板更加灵活，因为你可以完全地使用 JavaScript 来构造你想要的 vnode</p>
<p>推荐使用模版原因：</p>
<ol>
<li>模板更贴近实际的 HTML。这使得我们能够更方便地重用一些已有的 HTML 代码片段，能够带来更好的可访问性体验、能更方便地使用 CSS 应用样式，并且更容易使设计师理解和修改。</li>
<li>由于其确定的语法，更容易对模板做静态分析。这使得 Vue 的模板编译器能够应用许多编译时优化来提升虚拟 DOM 的性能表现 (下面我们将展开讨论)</li>
</ol>
<p>（四）带编译时信息的虚拟 DOM：
虚拟 DOM 最受诟病的地方之一：这种有点暴力的更新过程通过牺牲效率来换取声明式的写法和最终的正确性（前期版本）</p>
<p>编译器可以静态分析模板并在生成的代码中留下标记，使得运行时尽可能地走捷径。与此同时，我们仍旧保留了边界情况时用户想要使用底层渲染函数的能力。我们称这种混合解决方案为带编译时信息的虚拟 DOM</p>
<ol>
<li>静态提升；</li>
<li>更新类型标记；</li>
<li>树结构打平；</li>
<li>对 SSR 激活的影响；</li>
</ol>
<h3 id="渲染函数-jsx" tabindex="-1">渲染函数 &amp; JSX <a class="header-anchor" href="#渲染函数-jsx" aria-label="Permalink to &quot;渲染函数 &amp; JSX&quot;">&ZeroWidthSpace;</a></h3>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>您提供的链接是 Vue.js 官方文档中关于渲染函数和 JSX 的部分。在 Vue.js 中，渲染函数（render function）是一种允许你使用 JavaScript 来编写组件的渲染逻辑的方式，这在需要更精细控制 DOM 结构或者使用 TypeScript 时非常有用。JSX 是一种 JavaScript 的语法扩展，它允许你以类似 XML 的方式编写组件，使得组件的结构更加清晰。</p>
<p>以下是一些关键点：</p>
<ol>
<li><strong>创建 Vnodes</strong>：Vue 提供了 <code>h()</code> 函数（或 <code>createVNode()</code>）来创建虚拟 DOM 节点（Vnodes）。这些节点可以是 HTML 标签、组件或者文本节点。</li>
<li><strong>声明渲染函数</strong>：在组合式 API 中，你可以在 <code>setup()</code> 钩子中返回渲染函数。在选项式 API 中，你可以使用 <code>render</code> 选项来声明渲染函数。</li>
<li><strong>Vnodes 必须唯一</strong>：在组件树中，每个 Vnode 必须具有唯一的 <code>key</code> 属性，以确保它们在更新时能够正确地被识别。</li>
<li><strong>JSX / TSX</strong>：Vue 支持 JSX，这是一种允许你在 JavaScript 中编写类似 HTML 的语法。从 Vue 3.4 开始，Vue 不再隐式注册全局命名空间，你需要在 TypeScript 配置中指定 <code>&quot;jsx&quot;: &quot;preserve&quot;</code> 来启用 JSX。</li>
<li><strong>渲染函数案例</strong>：文档提供了一些例子，展示了如何使用渲染函数和 JSX 来实现与模板相同的功能，例如条件渲染、列表渲染、事件处理等。</li>
<li><strong>组件</strong>：在渲染函数中，你可以直接使用导入的组件，而不需要在组件中注册。动态组件也可以直接使用。</li>
<li><strong>插槽</strong>：在渲染函数中，插槽可以通过 <code>slots</code> 对象来访问。你可以传递插槽函数或者包含插槽函数的对象给组件。</li>
<li><strong>函数式组件</strong>：函数式组件是一种没有状态的组件定义方式，它们接收 props 并返回 Vnodes。函数式组件在渲染过程中不会创建组件实例，也不会触发生命周期钩子。</li>
<li><strong>类型标注</strong>：对于函数式组件，你可以使用 TypeScript 来标注类型，确保类型安全。</li>
</ol>
<p>如果你有关于渲染函数或 JSX 的具体问题，或者需要更多细节，请告诉我，我会根据你的需求提供帮助。</p>
</div>
<p>使用 h() 函数：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { h } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> vnode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">  'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, class: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'bar'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// props</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    /* children */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 除了类型必填以外，其他的参数都是可选的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// attribute 和 property 都能在 prop 中书写</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// Vue 会自动将它们分配到正确的位置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { class: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'bar'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, innerHTML: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 像 `.prop` 和 `.attr` 这样的的属性修饰符</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 可以分别通过 `.` 和 `^` 前缀来添加</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'.name'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'some-name'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'^width'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'100'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类与样式可以像在模板中一样</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 用数组或对象的形式书写</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { class: [foo, { bar }], style: { color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'red'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 事件监听器应以 onXxx 的形式书写</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {} })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// children 可以是一个字符串</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 没有 props 时可以省略不写</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'span'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// children 数组可以同时包含 vnodes 与字符串</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'span'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 获取到的 vnode 信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> vnode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }, [])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">vnode.type </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 'div'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">vnode.props </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// { id: 'foo' }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">vnode.children </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">vnode.key </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 注意：完整的 VNode 接口包含其他内部属性，但是强烈建议避免使用这些没有在这里列举出的属性。这样能够避免因内部属性变更而导致的不兼容性问题</span></span></code></pre>
</div><p><strong>h() 是 hyperscript 的简称——意思是“能生成 HTML (超文本标记语言) 的 JavaScript”</strong>。这个名字来源于许多虚拟 DOM 实现默认形成的约定。一个更准确的名称应该是 createVnode()，但当你需要多次使用渲染函数时，一个简短的名字会更省力</p>
<p>声明渲染函数：
<strong>当组合式 API 与模板一起使用时，setup() 钩子的返回值是用于暴露数据给模板</strong>。然而当我们使用渲染函数时，可以直接把渲染函数返回：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { ref, h } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  props: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 返回渲染函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, props.msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> count.value)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 返回字符串</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">     // return () => 'hello world!'</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 使用数组返回多个根节点</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // return () => [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //   h('div'),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //   h('div'),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //   h('div')</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：请确保返回的是一个函数而不是一个值！setup() 函数在每个组件中只会被调用一次，而返回的渲染函数将会被调用多次</p>
<p>Vnodes 必须唯一：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'p'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hi'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 啊哦，重复的 vnodes 是无效的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    p,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    p</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  ])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 优化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'p'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hi'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>JSX/TSX：
<a href="https://facebook.github.io/jsx/" target="_blank" rel="noreferrer">JSX</a> 是 JavaScript 的一个类似 XML 的扩展：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> vnode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>注意⚠️：在 JSX 表达式中，使用大括号来嵌入动态值：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> vnode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">={</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">dynamicId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}>hello, {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">userName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}&#x3C;/div></span></span></code></pre>
</div><p>如果你之前使用过 JSX 语法，那么请注意 Vue 的 JSX 转换方式与 React 中 JSX 的转换方式不同，因此你不能在 Vue 应用中使用 React 的 JSX 转换。与 React JSX 语法的一些明显区别包括：</p>
<ul>
<li>可以使用 HTML attributes 比如 class 和 for 作为 props - 不需要使用 className 或 htmlFor。</li>
<li>传递子元素给组件 (比如 slots) 的<a href="https://cn.vuejs.org/guide/extras/render-function.html#passing-slots" target="_blank" rel="noreferrer">方式不同</a>。</li>
</ul>
<p>渲染函数案例：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ok"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">yes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-else></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">no</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 模版转成渲染函数的结果：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [ok.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'div'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'yes'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'span'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'no'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// jsx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{ok.value ? &#x3C;div>yes&#x3C;/div> : &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>no</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>函数式组件：
<strong>函数式组件是一种定义自身没有任何状态的组件的方式。它们很像纯函数：接收 props，返回 vnodes。函数式组件在渲染过程中不会创建组件实例 (也就是说，没有 this)，也不会触发常规的组件生命周期钩子</strong>
用一个普通的函数而不是一个选项对象来创建函数式组件。该函数实际上就是该组件的渲染函数。
函数式组件的签名与 <code>setup()</code> 钩子相同：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">slots</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">attrs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>函数式组件可以像普通组件一样被注册和使用。如果你将一个函数作为第一个参数传入 <code>h</code>，它将会被当作一个函数式组件来对待</p>
<p>标注类型：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 具名函数式组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { SetupContext } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FComponentProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Events</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  sendMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FComponentProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> SetupContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{() => context.emit(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'sendMessage'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, props.message)}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        {</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} {' '}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">FComponent.props </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  message: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">FComponent.emits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  sendMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'string'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 匿名函数式组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { FunctionalComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FComponentProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Events</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  sendMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FunctionalComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">FComponentProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  context</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{() => context.emit(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'sendMessage'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, props.message)}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        {</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} {' '}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">FComponent.props </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  message: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">FComponent.emits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  sendMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'string'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h3 id="vue-与-web-components" tabindex="-1">Vue 与 Web Components <a class="header-anchor" href="#vue-与-web-components" aria-label="Permalink to &quot;Vue 与 Web Components&quot;">&ZeroWidthSpace;</a></h3>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>您提供的链接是 Vue.js 官方文档中关于 Vue 与 Web Components 的部分。Web Components 是一组 Web 原生 API，允许开发者创建可复用的自定义元素。Vue.js 提供了对 Web Components 的良好支持，无论是将自定义元素集成到 Vue 应用中，还是使用 Vue 来构建和分发自定义元素。</p>
<p>在 Vue 中使用自定义元素时，需要注意以下几点：</p>
<ol>
<li><strong>跳过组件解析</strong>：Vue 默认会将非原生 HTML 标签当作 Vue 组件处理。要让 Vue 识别某个元素为自定义元素，需要在编译时配置 <code>compilerOptions.isCustomElement</code>。</li>
<li><strong>传递 DOM 属性</strong>：由于 DOM attribute 只能为字符串值，Vue 3 会自动检查属性是否存在于 DOM 对象上，并倾向于将其设置为 DOM 对象的属性。如果自定义元素无法正确定义或反射某个属性，可以使用 <code>v-bind</code> 绑定和 <code>.prop</code> 修饰符来设置。</li>
<li><strong>使用 Vue 构建自定义元素</strong>：Vue 提供了 <code>defineCustomElement</code> 方法，它与 <code>defineComponent</code> 类似，但返回的是继承自 <code>HTMLElement</code> 的自定义元素构造器。自定义元素在注册后，会在其 <code>shadow root</code> 上挂载 Vue 组件实例。</li>
<li><strong>属性和事件</strong>：自定义元素的 props 会被定义为属性，并自动处理 attribute 和属性的反射。事件通过 <code>CustomEvents</code> 发送，额外的事件参数会被暴露在 <code>detail</code> 属性中。</li>
<li><strong>插槽</strong>：在自定义元素中，插槽的使用与 Vue 组件中的插槽类似，但不支持作用域插槽。传递具名插槽时应使用 <code>slot</code> attribute。</li>
<li><strong>Provide / Inject API</strong>：在 Vue 定义的自定义元素中，Provide / Inject API 可以正常工作，但依赖关系只在自定义元素之间起作用。</li>
<li><strong>将 SFC 编译为自定义元素</strong>：Vue 单文件组件（SFC）可以编译为自定义元素，但需要在生产环境构建时处理样式。</li>
<li><strong>基于 Vue 构建自定义元素库</strong>：使用 Vue 构建的自定义元素依赖于 Vue 的运行时，这可能会增加打包大小。如果自定义元素将在 Vue 应用中使用，可以考虑将 Vue 外部化。</li>
<li><strong>Web Components 和 TypeScript</strong>：为了给注册为自定义元素的 Vue 组件提供类型支持，可以通过 Vue 模板或 JSX 中的 <code>GlobalComponents</code> 接口来注册全局组件的类型。</li>
<li><strong>Web Components vs. Vue Components</strong>：虽然 Web Components 提供了基础的组件化能力，但 Vue 提供了更高级的功能，如声明式的模板系统、响应式状态管理、服务器端渲染（SSR）等。Vue 的组件模型设计为更内聚的系统，而完全使用 Web Components 可能需要构建自己的框架，这会带来维护负担。</li>
</ol>
<p>如果您有关于 Vue.js 或 Web Components 的具体问题，欢迎提问，我会尽力帮助您。</p>
</div>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" target="_blank" rel="noreferrer">Web Components</a> 是一组 web 原生 API 的统称，允许开发者创建可复用的自定义元素 (custom elements)</p>
<p><strong>Vue 和 Web Components 是互补的技术</strong>，Vue 为使用和创建自定义元素提供了出色的支持。无论你是将自定义元素集成到现有的 Vue 应用中，还是使用 Vue 来构建和分发自定义元素都很方便</p>
<p>在 Vue 中使用自定义元素
在 Vue 应用中使用自定义元素基本上与使用原生 HTML 元素的效果相同，但需要留意以下几点：</p>
<ol>
<li>跳过组件解析：默认情况下，Vue 会将任何非原生的 HTML 标签优先当作 Vue 组件处理，而将“渲染一个自定义元素”作为后备选项，需要进行自定义配置</li>
<li>传递 DOM 属性：</li>
</ol>
<p>使用 Vue 构建自定义元素：
使用自定义元素的好处：可以使用任何框架，甚至是不使用框架的场景下使用。当你面向的最终用户可能使用了不同的前端技术栈，或是当你希望将最终的应用与它使用的组件实现细节解耦时，它们会是理想的选择</p>
<ol>
<li>defineCustomElement：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineCustomElement } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> MyVueElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineCustomElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 这里是同平常一样的 Vue 组件选项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  props: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  emits: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`...`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // defineCustomElement 特有的：注入进 shadow root 的 CSS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  styles: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`/* inlined css */`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 注册自定义元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 注册之后，所有此页面中的 `&#x3C;my-vue-element>` 标签</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 都会被升级</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">customElements.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'my-vue-element'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, MyVueElement)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 你也可以编程式地实例化元素：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// （必须在注册之后）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyVueElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 初始化 props（可选）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div><ol start="2">
<li>生命周期：</li>
</ol>
<ul>
<li>当该元素的 <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks" target="_blank" rel="noreferrer">connectedCallback</a> 初次调用时，一个 Vue 自定义元素会在内部挂载一个 Vue 组件实例到它的 shadow root 上。</li>
<li>当此元素的 disconnectedCallback 被调用时，Vue 会在一个微任务后检查元素是否还留在文档中。
<ul>
<li>如果元素仍然在文档中，那么说明它是一次移动操作，组件实例将被保留；</li>
<li>如果该元素不再存在于文档中，那么说明这是一次移除操作，组件实例将被销毁</li>
</ul>
</li>
</ul>
<ol start="3">
<li>xxx</li>
</ol>
<p>基于 Vue 构建自定义元素：
Web Components 和 TypeScript
通过 Vue 模板和/或 <a href="https://www.typescriptlang.org/docs/handbook/jsx.html#intrinsic-elements" target="_blank" rel="noreferrer">JSX</a> 中的 <a href="https://github.com/vuejs/language-tools/blob/master/packages/vscode-vue/README.md#usage" target="_blank" rel="noreferrer">GlobalComponents接口</a> 来注册全局组件的类型：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineCustomElement } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// vue 单文件组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> CounterSFC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './src/components/counter.ce.vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 将组件转换为 web components</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineCustomElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(CounterSFC)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 注册全局类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> GlobalComponents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    'Counter'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Counter,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>Web Components VS Vue Components：
自定义元素和 Vue 组件之间确实存在一定程度的功能重叠：它们都允许我们定义具有数据传递、事件发射和生命周期管理的可重用组件。然而，Web Components 的 API 相对来说是更底层的和更基础的。要构建一个实际的应用，我们需要相当多平台没有涵盖的附加功能：</p>
<ul>
<li>一个声明式的、高效的模板系统；</li>
<li>一个响应式的，利于跨组件逻辑提取和重用的状态管理系统；</li>
<li>一种在服务器上呈现组件并在客户端“激活”(hydrate) 组件的高性能方法 (SSR)，这对 SEO 和 <a href="https://web.dev/vitals/" target="_blank" rel="noreferrer">LCP 这样的 Web 关键指标</a>非常重要。原生自定义元素 SSR 通常需要在 Node.js 中模拟 DOM，然后序列化更改后的 DOM，而 Vue SSR 则尽可能地将其编译为拼接起来的字符串，这会高效得多</li>
</ul>
<h3 id="动画技巧" tabindex="-1">动画技巧 <a class="header-anchor" href="#动画技巧" aria-label="Permalink to &quot;动画技巧&quot;">&ZeroWidthSpace;</a></h3>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>您提供的链接是 Vue.js 官方文档中的“动画技巧”页面。在 Vue.js 中，动画可以通过多种方式实现，包括基于 CSS class 的动画、状态驱动的动画以及基于侦听器的动画。以下是这些动画技巧的简要概述：</p>
<ol>
<li><strong>基于 CSS class 的动画</strong>：</li>
</ol>
<ul>
<li>对于不涉及 DOM 进入或离开的元素，可以通过动态添加 CSS class 来触发动画。例如，可以使用 Vue 的 <code>ref</code> 和 <code>setTimeout</code> 来实现一个简单的抖动动画。</li>
</ul>
<ol start="2">
<li><strong>状态驱动的动画</strong>：</li>
</ol>
<ul>
<li>可以通过动态插值来实现过渡效果，例如在用户交互时动态地给元素绑定样式。这可以通过绑定 <code>style</code> 属性并使用计算属性来实现，如鼠标移动时改变元素的背景颜色。</li>
</ul>
<ol start="3">
<li><strong>基于侦听器的动画</strong>：</li>
</ol>
<ul>
<li>利用 Vue 的 <code>watch</code> API，可以基于某些状态的变化来触发动画。例如，可以使用 <code>gsap</code> 库（GreenSock Animation Platform）来平滑地改变数字值，从而创建动画效果。</li>
</ul>
<p>页面还提到了 Vue 提供的 <code>&lt;Transition&gt;</code> 和 <code>&lt;TransitionGroup&gt;</code> 组件，这些组件用于处理元素的进入、离开和列表顺序变化的过渡效果。此外，还有 <code>&lt;KeepAlive&gt;</code> 和 <code>&lt;Teleport&gt;</code> 组件，分别用于优化组件的缓存和实现组件的远程挂载。</p>
<p>如果您有关于 Vue.js 动画的具体问题或需要进一步的帮助，请告诉我，我会尽力为您提供帮助。</p>
</div>
<p>基于 CSS class 的动画：
<a href="https://play.vuejs.org/#eNqlVn2P2zQY/ypWN2k90abtvYwp9A4YDA3E4ID9AaJI58ZOml1iW7bTa+/U787Pdl67bkJCqtL4ef09r87T6Fulom3FR/FoaRKdK0sMt5W6WYm8VFJb8kQ0p4nNt3xCElmqynJGDiTVsiQvoPmilWR7Qcs8MTWvOUYfDGRWIpHCWLLhlHH9lufZxpJrsjifO17BLcnN95pmWS4y0FNaGN7oGEth/hpQdjGZT8geT3JouAk4DcSxF+n78NIDp4ezYzS31G5gpIluPD4j1zfkaSUIDNtKC3L3bj6Zk58vzt2fez5/6ts8/Pb8KYl2B5CTaH8AxiP+3Ur03eJpubC30uQ2l+ITvoMs2zt2tCfTQRg9AVoq7mxA8gaJ+Zqck5hc9tB7a4RYTYVJpS5jcuffC2r52GGF5qy2c1C7M6AlLr8BcloJ5BYofRlcjcb8LNjk8MqjZENFxtl7WSUbbuD/mPT3/B8gQjnJsMhWV57oDUc7b0zRjP/ZEV3wgfgX8AzgSPF/saRk3OGpzSCrHsmgZb4g4xoZqlCjRW68dFekGmcrsh9IfFSlRXTV1Mk5dRaOnPbK0lTkqCBS+RzU2D8R0KnBcvR2QCkm2LVCIAPMpHn7L+PUE7Z7xePOrlEaTieEVZo6wDH5co7xTXXu8cfk/JWfY6fs0xkiXM7CJsIOwsHyUrlGxYmQJcu3dcIKasz1asRcaHRd8NUoML4pZWU4kw8C3LZlW651beDJJ9leuZRbDm5osKHmaZbXqpS3GEoy1OKCneJ5tYJTb3LI9dEiXrPN2lDX4JGHnNkNDlhCOG18DXC8eoljrQQ15TZa7Jx2Gw7iaV4UoD27+OFq8foKCsuZk2yczeCteUeiW8fBBsQdPvKOL2fgnhKs9xo8xcbuCxfW0aqDkbe8KGRnonlbznqVxtEbICaRijNQorbQoa3XNLnPtKwEmyaykDomz9I0/cqz5G5qNhQt4O6JS7Uji5d46GxNse3cBeJ+0eLqzIv7jMZuq6udJ4SkojsvGwqKrtPC2dvkjHHhiSXVmCkoQorQykpPVXWgMZYvgsGd5MmW7+yUFnkGRoJ8cO3JKbIzNfkjpmYBoB3tocZwMZ97IhpFT12zJCAKKYLVtdQozFRTllcmJq+8BUxQtM5Cljo0dG1kgRsmoJEKqfGvBU9hMbw/TnPBuLtjazOh8BjwqC7jsdVBjK36ImSCMobxDwnqCpM/emINHaSBr+bmG1a0qQi+FvpJCok75+XHeVvLggXD6GrXSWih0WQUvlSmJVX4KpECXz3e36pmmNUobrYmVkv3AePomANrlYlns4SJyNzvFVowYnw7Gwg2ewzeLLpXpHl25Mvd9XnB9a/KJXHok2I2Hn7yNHc71rsVOhue3J+gfzC7gO1Wc7TIFmuw5WG5ZRzD6Nhv/vgFHdhjlpJVbml+hvk79y3jp9aJvcawAXZPzqP90acORX1v3uzQJKYJqrneww2xGuFj8bvPhN7BvYgu2iwe/gXi/YZq" target="_blank" rel="noreferrer">状态驱动的动画：</a>
<a href="https://play.vuejs.org/#eNp9U01v2zAM/SuELk0Bxw5W7OI5GbahA7ZDN2w96uLYjKPWlgSLTtKl/u+j5I90Q9FLTD2Sj0+Pyll8sjY+dChSkbmiVZbAIXV2I7VqrGkJztDiLuKfvCB1wAiOORV76GHXmgauuPdqrq1cbkfch5yQujDaEeiu2WILa0+2WF1PMB0RNZYBH/gXZ6lhLE9hJXXPxVKHoYtLKvLhQl/DegOhA8LwmMxi5IxYedm1OSmjmSh+H82sd+Hru5+fYQV+AkAvNX+zZHCB788HwsbWOSGfALJSHaCoc+fWUpTYGCkCDnD/ZBHymT5T2nYEh2VjSqzjAeaeIZACkrEvszPfVlXLKb85nydjxma+1ld1wpKdg77PEr8ebk9YEUdZ8kInHx091T6ML6SDRzujaXlEVe0pha2pyw8z6tQfTOEdNgyxE2zDSCIiMSx32bC9D85ofiqBTY4JJ0U67UAKvwUPSLEnsi5Nkk7bxyouTJP43Ec2patRitHzngeQ49ewU9V/9NxiVY3tD+t3+O+YvK7N8XvAqO0wPIfQs8fi8RX8wZ0GVT9bdNgeWMCco7ytkIb07e87PHE8Jye5byR/oTN15zUOZZ87XbLsF3VB7bfgltLVvbs9EWo3XcoLDW6Eein4L/Xljatf5N7EN7OL/V9oL0Vh" target="_blank" rel="noreferrer">基于侦听器的动画：</a>
动画库：<a href="https://gsap.com/" target="_blank" rel="noreferrer">gsap</a>/<a href="http://dynamicsjs.com/" target="_blank" rel="noreferrer">dynamics.js</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 29 本《这里是中国》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/zhelishizhongguo.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/zhelishizhongguo.html</guid>
            <pubDate>Sat, 16 Dec 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[国内第一部全视野中国地理科普著作 庆祝中华人民共和国成立70周年，提升国民视野，传承核心价值观 书架上的中国纪录片，文化传承 1 本书 =3 年日夜对内容的精心打磨 1 本书 =365 处极美风光的瞬间捕捉 1 本书 =519 页充满温情的中国故事 1 本书 =1000 小时绘制 53 幅专业地图 中国这片广袤的土地，到处是景致，处处有故事。这本书以广阔的地理视角和宏大的时间尺度，解读中国故事；以唯美的照片、专业的地图、深情的文字，描绘祖国山河，让我们在享受视觉盛宴的同时，了解中国的过去、现在，以及充满希望的未来。]]></description>
            <content:encoded><![CDATA[<h1 id="第-29-本《这里是中国》" tabindex="-1">第 29 本《这里是中国》 <a class="header-anchor" href="#第-29-本《这里是中国》" aria-label="Permalink to &quot;第 29 本《这里是中国》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>国内第一部全视野中国地理科普著作</p>
<p>庆祝中华人民共和国成立70周年，提升国民视野，传承核心价值观</p>
<p>书架上的中国纪录片，文化传承</p>
<p>1 本书 =3 年日夜对内容的精心打磨</p>
<p>1 本书 =365 处极美风光的瞬间捕捉</p>
<p>1 本书 =519 页充满温情的中国故事</p>
<p>1 本书 =1000 小时绘制 53 幅专业地图</p>
<p>中国这片广袤的土地，到处是景致，处处有故事。这本书以广阔的地理视角和宏大的时间尺度，解读中国故事；以唯美的照片、专业的地图、深情的文字，描绘祖国山河，让我们在享受视觉盛宴的同时，了解中国的过去、现在，以及充满希望的未来。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《这里是中国》
星球研究所 中国青藏高原研究会
5个笔记</p>
<p>◆  点评</p>
<p>2023/12/16 认为好看
读完给我感觉很震惊，书中有很多自然景色或名胜古迹等的照片，结合地理行成过程和当地历史发展娓娓道来，讲解清晰易懂。令我印象深刻的，都是这些山水旖旎，风光秀丽，令人心旷神怡。正如文中所说：“什么是中国？世界上本没有中国，是中国人造就了中国”。感叹中国大自然地理壮观，惊叹其历史进程发展的神奇，不愧为了解地理及历史的好书，大大丰富了补充了校园时代地理课知识，更是加大了我对这些城市旅游的欲望，也期待下一部系列书😄</p>
<p>◆  推荐序 中国需要好的地理科普</p>
<blockquote>
<blockquote>
<p>科普不是简单地罗列或转述科学知识，它需要与大众生活相结合，并在此基础上发挥无限创造力，让知识变得有趣。</p>
</blockquote>
</blockquote>
<p>◆  序 可以实现的理想</p>
<p>2023/12/4 发表想法
我也希望有一天可以踏遍中国山川江河，领略文人墨客的踪迹，欣赏大自然的鬼斧神工。旅行不能停，🉐在路上</p>
<blockquote>
<blockquote>
<p>我有一个梦想，我希望：
有一天，要将中国的雪山看遍。
有一天，要将中国的江河看遍。
有一天，要将中国的城市看遍。
……</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我有一个梦想，我希望：
有一天，要将中国的雪山看遍。
有一天，要将中国的江河看遍。
有一天，要将中国的城市看遍。
……</p>
</blockquote>
</blockquote>
<p>◆  第一级阶梯</p>
<blockquote>
<blockquote>
<p>一切磨难皆是修炼，一切毁灭皆是创造。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/zhelishizhongguo.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[Three.js 学习参考]]></title>
            <link>https://super456.github.io/posts/growth-record/base/javascript/three-learning-reference.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/javascript/three-learning-reference.html</guid>
            <pubDate>Mon, 11 Dec 2023 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="three-js-学习参考" tabindex="-1">Three.js 学习参考 <a class="header-anchor" href="#three-js-学习参考" aria-label="Permalink to &quot;Three.js 学习参考&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="教程" tabindex="-1">教程 <a class="header-anchor" href="#教程" aria-label="Permalink to &quot;教程&quot;">&ZeroWidthSpace;</a></h2>
<CustomImage src='/growth-record/base/javascript/three-01.png' /><CustomImage src='/growth-record/base/javascript/three-02.webp' /><p>官方中文教程：</p>
<ul>
<li><a href="https://threejs.org/docs/index.html#manual/zh/introduction/Creating-a-scene" target="_blank" rel="noreferrer">three.js docs</a></li>
<li><a href="http://www.webgl3d.cn/" target="_blank" rel="noreferrer">Three.js中文网</a></li>
<li><a href="https://juejin.cn/post/7020396322062598181" target="_blank" rel="noreferrer">Three.js基础入门（一） - 掘金</a></li>
<li><a href="https://space.bilibili.com/236087412" target="_blank" rel="noreferrer">爱吃土豆丝嗯的个人空间-爱吃土豆丝嗯个人主页-哔哩哔哩视频</a></li>
<li><a href="https://space.bilibili.com/40018594" target="_blank" rel="noreferrer">老陈打码的个人空间-老陈打码个人主页-哔哩哔哩视频</a></li>
<li><a href="https://space.bilibili.com/374230437" target="_blank" rel="noreferrer">Jedi_Hongbin的个人空间-Jedi_Hongbin个人主页-哔哩哔哩视频</a></li>
</ul>
<p>封装框架：</p>
<ul>
<li><a href="https://tresjs.org/" target="_blank" rel="noreferrer">https://tresjs.org/</a></li>
</ul>
<h2 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">&ZeroWidthSpace;</a></h2>
<p>参考的效果：可视化机房管理系统</p>
<ul>
<li><a href="https://www.hightopo.com/demo/3DRoom/index.html" target="_blank" rel="noreferrer">https://www.hightopo.com/demo/3DRoom/index.html</a></li>
</ul>
<p>简单的案例学习：个人 3D 简历网站</p>
<ul>
<li><a href="https://github.com/bosombaby/base-resume" target="_blank" rel="noreferrer">https://github.com/bosombaby/base-resume</a></li>
</ul>
<p>基础入门操作：</p>
<ul>
<li><a href="https://xie.infoq.cn/article/496564e0db4268c1e9f129110" target="_blank" rel="noreferrer">『Three.js』起飞！_JavaScript_德育处主任_InfoQ写作社区</a></li>
<li><a href="https://xie.infoq.cn/article/6db75bd9e2ce573c9f87e9145" target="_blank" rel="noreferrer">Three.js 入门指南_WebGL_devpoint_InfoQ写作社区</a></li>
<li><a href="https://blog.csdn.net/mxdmojingqing/article/details/78044520" target="_blank" rel="noreferrer">用Three.js实现简单布局的3D房间_threejs画户型-CSDN博客</a></li>
<li><a href="https://blog.csdn.net/yy729851376/article/details/124449614" target="_blank" rel="noreferrer">Three.js - 绘制一个有房子的场景（二十三）_three.js 代码构建房屋_nie-ny的博客-CSDN博客</a></li>
<li><a href="https://xie.infoq.cn/article/471456fbe82ac589e21ae52ce" target="_blank" rel="noreferrer">60个令人兴奋的ThreeJS网站示例_three.js_3D建模设计_InfoQ写作社区</a></li>
<li><a href="https://xie.infoq.cn/article/b979ef0d8c2b028b8d19ef5d6" target="_blank" rel="noreferrer">“程”风破浪的开发者｜THREE.JS实现看房自由（VR看房）_前端_知心宝贝_InfoQ写作社区</a></li>
<li><a href="https://xie.infoq.cn/article/4df129122a750981b6a5c172e?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">THREE.JS实现炫酷的3D简历网站_前端_知心宝贝_InfoQ写作社区</a></li>
<li><a href="https://juejin.cn/post/7283776161527447589" target="_blank" rel="noreferrer">threejs 小游戏《迷你都市》 - 掘金</a></li>
<li><a href="https://www.yisu.com/zixun/169768.html" target="_blank" rel="noreferrer">three.js如何搭建室内场景 - web开发 - 亿速云</a></li>
<li><a href="https://github.com/fengtianxi001/MF-TurbineMonitor" target="_blank" rel="noreferrer">GitHub - fengtianxi001/MF-TurbineMonitor: 🎖 模仿图扑的3D风机可视化大屏</a></li>
</ul>
<p>优秀案例参考：</p>
<ul>
<li><a href="https://juejin.cn/post/7235906062301085757" target="_blank" rel="noreferrer">基于vue3+threejs实现可视化大屏 - 掘金</a>
里面有很多跟模型交互相关的示例，你可以详细看看这个项目</li>
<li><a href="https://gitee.com/303711888/threejs-park/tree/master" target="_blank" rel="noreferrer">cyl/threejs-park</a></li>
<li><a href="https://github.com/alwxkxk/iot-visualization-examples" target="_blank" rel="noreferrer">https://github.com/alwxkxk/iot-visualization-examples</a></li>
<li><a href="https://github.com/h-huan/ThreeTest" target="_blank" rel="noreferrer">GitHub - h-huan/ThreeTest: threejs practices 3D room</a></li>
</ul>
<p>简单的 3D 省市地图学习：</p>
<ul>
<li><a href="https://github.com/1023byte/3Dmap" target="_blank" rel="noreferrer">https://github.com/1023byte/3Dmap</a></li>
<li><a href="https://www.bilibili.com/video/BV1vm4y1872Z/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=59ef88925a159f981edad5ce1c4ec076" target="_blank" rel="noreferrer">three.js 实现机房可视化 源码_哔哩哔哩_bilibili</a></li>
<li><a href="https://juejin.cn/post/6844903918409875469" target="_blank" rel="noreferrer">一步步带你实现web全景看房——three.js - 掘金</a></li>
<li><a href="https://juejin.cn/post/7020422904248533029" target="_blank" rel="noreferrer">Three.js基础+案例（二） - 掘金</a></li>
<li><a href="https://juejin.cn/post/7250375753598844983" target="_blank" rel="noreferrer">用Three.js搞个炫酷的3D区块地图 - 掘金</a></li>
</ul>
<p>很好的入门学习案例及代码封装：</p>
<ul>
<li><a href="https://juejin.cn/post/7137192060045492231?searchId=202310222330488A52D603110948D68447" target="_blank" rel="noreferrer">Vue+Three.js可视化实战 - 掘金</a></li>
<li><a href="https://mp.weixin.qq.com/s/a0Ei_fv1fHjKrA1eWfapvA" target="_blank" rel="noreferrer">Vue3 + Three.js + antvG2 实战智慧城市</a></li>
</ul>
<h2 id="三方库" tabindex="-1">三方库 <a class="header-anchor" href="#三方库" aria-label="Permalink to &quot;三方库&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>可视化控制 3D 参数：<a href="https://github.com/dataarts/dat.gui" target="_blank" rel="noreferrer">https://github.com/dataarts/dat.gui</a></li>
<li>监测页面帧率：<a href="https://github.com/mrdoob/stats.js/" target="_blank" rel="noreferrer">https://github.com/mrdoob/stats.js/</a></li>
</ul>
<h2 id="可视化平台搭建" tabindex="-1">可视化平台搭建 <a class="header-anchor" href="#可视化平台搭建" aria-label="Permalink to &quot;可视化平台搭建&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://www.thingjs.com/guide/" target="_blank" rel="noreferrer">ThingJS - 物联网3D可视化开发平台 - 数字孪生可视化平台</a></li>
<li><a href="https://le5le.com/" target="_blank" rel="noreferrer">乐吾乐 - 数据如此美轮美奂</a></li>
<li><a href="https://www.hightopo.com/index.html" target="_blank" rel="noreferrer">图扑软件 - 构建先进 2D 和 3D 可视化所需要的一切</a></li>
</ul>
<h2 id="blender-教程" tabindex="-1">Blender 教程 <a class="header-anchor" href="#blender-教程" aria-label="Permalink to &quot;Blender 教程&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://www.bilibili.com/video/BV1qq4y1772P/?vd_source=59ef88925a159f981edad5ce1c4ec076" target="_blank" rel="noreferrer">Blender完全入门教程 | 一个教程学会Blender，最佳入门教程_哔哩哔哩_bilibili</a></li>
<li><a href="https://xie.infoq.cn/article/a137e32104a6d5db4cb961494" target="_blank" rel="noreferrer">如何用Three.js + Blender打造一个web 3D展览馆_three.js_vivo互联网技术_InfoQ写作社区</a></li>
<li><a href="https://juejin.cn/post/7105929809770840078" target="_blank" rel="noreferrer">因交友不慎，导致肝了一周的3D教室，利用3D建模结合Three.js的技术只为带你们梦回当年。逝世就逝世吧！ - 掘金</a></li>
<li><a href="https://www.66152.com/answer/202202/499652.html" target="_blank" rel="noreferrer">教程向 Blender小技巧_有图有真相</a></li>
<li><a href="https://www.bilibili.com/video/BV13o4y1W7X4/?spm_id_from=333.337.search-card.all.click&amp;vd_source=59ef88925a159f981edad5ce1c4ec076" target="_blank" rel="noreferrer">不愧是国外公认讲的最好的【Blender教程】技术大佬带你从零基础入门到精通，油管千万级收藏，学Blender看这个就够了！持续更新中~_哔哩哔哩_bilibili</a></li>
</ul>
<h2 id="素材" tabindex="-1">素材 <a class="header-anchor" href="#素材" aria-label="Permalink to &quot;素材&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://www.cpengx.cn/" target="_blank" rel="noreferrer">麒跃科技_老陈打码-让学习更简单！</a></li>
<li><a href="https://www.shuzixs.com/#/home" target="_blank" rel="noreferrer">数字像素 -可视化设计、开发、互动综合服务平台</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[TypeScript 优化技巧]]></title>
            <link>https://super456.github.io/posts/growth-record/base/javascript/typescript-optimization-tips.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/javascript/typescript-optimization-tips.html</guid>
            <pubDate>Thu, 07 Dec 2023 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="typescript-优化技巧" tabindex="-1">TypeScript 优化技巧 <a class="header-anchor" href="#typescript-优化技巧" aria-label="Permalink to &quot;TypeScript 优化技巧&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="基础语法" tabindex="-1">基础语法 <a class="header-anchor" href="#基础语法" aria-label="Permalink to &quot;基础语法&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>使用<strong>块级注释</strong>，编辑器在其他地方引用之后也可自动展示注释内容：</li>
</ol>
<CustomImage src='/growth-record/base/javascript/commonsummary.webp' /><h3 id="枚举" tabindex="-1">枚举 <a class="header-anchor" href="#枚举" aria-label="Permalink to &quot;枚举&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>将枚举对象的 value 作为类型对象的 key，再设置单独的类型对象信息，这样做有一个好处是，对象信息类型和枚举对象都能够其他地方复用</li>
</ol>
<CustomImage src='/growth-record/base/javascript/tsopttrips01.webp' /><p>第一步优化：</p>
<CustomImage src='/growth-record/base/javascript/tsopttrips02.webp' /><p>第二步优化：</p>
<CustomImage src='/growth-record/base/javascript/tsopttrips03.webp' /><ol start="2">
<li>获取枚举值对应 key 的 value 联合类型：</li>
</ol>
<CustomImage src='/growth-record/base/javascript/tsopttrips04.webp' /><h2 id="学习资料" tabindex="-1">学习资料 <a class="header-anchor" href="#学习资料" aria-label="Permalink to &quot;学习资料&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://juejin.cn/post/7073738558124589063" target="_blank" rel="noreferrer">ts 枚举(enum) 中的类型操作技巧 - 掘金</a></li>
<li><a href="https://github.com/labs42io/clean-code-typescript" target="_blank" rel="noreferrer">GitHub - labs42io/clean-code-typescript: Clean Code concepts adapted for TypeScript</a></li>
<li><a href="https://github.com/pipiliang/clean-code-typescript" target="_blank" rel="noreferrer">GitHub - pipiliang/clean-code-typescript: TypeScript 代码整洁之道</a></li>
<li><a href="https://juejin.cn/post/7077536309804859428" target="_blank" rel="noreferrer">几个一看就会的 TypeScript 小技巧 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6919478002925453320#heading-4" target="_blank" rel="noreferrer">TypeScript 中提升幸福感的 10 个高级技巧 - 掘金</a></li>
<li><a href="https://www.yuque.com/wangxiaocuo/coding-blog/mklpidm1gf6ef80a?view=doc_embed" target="_blank" rel="noreferrer">TypeScript 内置工具类型</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 28 本《循序渐进 Vue.js 3 前端开发》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/xunxujianjinVue3.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/xunxujianjinVue3.html</guid>
            <pubDate>Wed, 06 Dec 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[本书以一个多年前端“老司机”的视角，循序渐进地介绍当前流行的前端框架Vue.js 3的新特性、各项功能及其在商业开发中的应用。全书共15章，第1~6章介绍Vue.js 3的模板、组件、交互处理等基础知识；第7章介绍Vue.js 3框架的响应式原理及组合式API；第8章介绍使用Vue.js 3框架开发前端动画效果；第9章介绍开发大型项目必备的脚手架工具VueCli和Vite；第10章介绍基于Vue.js 3的UI框架Element Plus；第11~13章分别介绍网络请求框架vue-axios、路由管理框架Vue Router、状态管理框架Vuex；第14章和第15章介绍两个相对完整的项目的开发，即学习网站和电商后台系统。本书试图介绍Vue.js 3全家桶及周边框架和工具的综合应用，旨在使读者通过阅读本书开发自己的应用程序。本书还在各章安排了小型范例和练习题，并提供了教学视频、源代码及PPT课件。
本书既可以入门，也可以进阶，适合Vue.js 3初学者和前端开发人员使用，也可以作为网课、培训机构与大中专院校的教学用书。]]></description>
            <content:encoded><![CDATA[<h1 id="第-28-本《循序渐进-vue-js-3-前端开发》" tabindex="-1">第 28 本《循序渐进 Vue.js 3 前端开发》 <a class="header-anchor" href="#第-28-本《循序渐进-vue-js-3-前端开发》" aria-label="Permalink to &quot;第 28 本《循序渐进 Vue.js 3 前端开发》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>本书以一个多年前端“老司机”的视角，循序渐进地介绍当前流行的前端框架Vue.js 3的新特性、各项功能及其在商业开发中的应用。全书共15章，第1~6章介绍Vue.js 3的模板、组件、交互处理等基础知识；第7章介绍Vue.js 3框架的响应式原理及组合式API；第8章介绍使用Vue.js 3框架开发前端动画效果；第9章介绍开发大型项目必备的脚手架工具VueCli和Vite；第10章介绍基于Vue.js 3的UI框架Element Plus；第11~13章分别介绍网络请求框架vue-axios、路由管理框架Vue Router、状态管理框架Vuex；第14章和第15章介绍两个相对完整的项目的开发，即学习网站和电商后台系统。本书试图介绍Vue.js 3全家桶及周边框架和工具的综合应用，旨在使读者通过阅读本书开发自己的应用程序。本书还在各章安排了小型范例和练习题，并提供了教学视频、源代码及PPT课件。</p>
<p>本书既可以入门，也可以进阶，适合Vue.js 3初学者和前端开发人员使用，也可以作为网课、培训机构与大中专院校的教学用书。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《循序渐进Vue.js 3前端开发实战》
张益珲
49个笔记</p>
<p>◆  点评</p>
<p>2023/12/6 认为一般
总体感觉一般，讲的很基础，也算比较全面去做一个 Vue 项目了。可惜的是，很多知识点蜻蜓点水，讲的不够全和深入，特别是框架源码部分就只是简单提一下。可能比较适合刚入门或者对官方文档不了解、不理解、不熟悉的人吧。而且很多代码示例没有用 Vue3 组合式 API 来写，还是用 Vue2 的选项式写法，感觉怪怪的。
但也有好的地方，基础掌握不好的还是可以查漏补缺的，可以学习到一些东西，还有每章的知识点问题练习，也是考验对知识点的理解与扩展学习吧</p>
<p>◆  第1章 从前端基础到Vue.js 3</p>
<blockquote>
<blockquote>
<p>前端技术的发展经历了静态页面阶段、Ajax阶段、MVC阶段，最终发展到了SPA阶段。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>HTML是一种编程语言，是一种描述性的网页编程语言。HTML的全称为Hyper Text Markup Language，我们通常也将其称为超文本标记语言，所谓超文本，是指其除了可以用来描述文本信息外，还可以描述超出基础文本范围的图片、音频、视频等信息</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>HTML是一种标记语言，其定义了一套标记标签用来描述和控制网站的渲染。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>基本的选择器有通用选择器、标签选择器、类选择器和id选择器。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>。所谓渐进式，是指其被设计为可以自底向上逐层应用。</p>
</blockquote>
</blockquote>
<p>◆  第2章 Vue模板应用</p>
<blockquote>
<blockquote>
<p>我们使用v-for对对象进行遍历时，指令中的第1个参数为遍历的对象中的属性的值，第2个参数为遍历的对象中的属性的名字，第3个参数为遍历的索引</p>
</blockquote>
</blockquote>
<p>◆  第4章 处理用户交互</p>
<blockquote>
<blockquote>
<p>当我们在页面上触发了一个单击事件时，事件首先会从父组件开始依次传递到子组件，这一过程通常被形象地称为事件捕获，当事件传递到最上层的子组件时，其还会逆向地再进行一轮传递，从子组件依次向下传递，这一过程被称为事件冒泡</p>
</blockquote>
</blockquote>
<p>◆  第5章 组件基础</p>
<blockquote>
<blockquote>
<p>插槽的核心作用是将组件内部的元素抽离到外部进行实现，在进行自定义组件的设计时，良好的插槽逻辑可以使组件的使用更加灵活</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>插槽中也支持任意的标签内容或其他组件</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>具名插槽是指为插槽设置一个具体的名称，在使用组件时，可以通过插槽的名称来设置插槽的内容。由于具名插槽可以非常明确地指定插槽内容的位置，因此当一个组件要支持多个插槽时，通常需要使用具名插槽</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>component是一个特殊的标签，其通过is属性来指定要渲染的组件名称</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>组件使得HTML元素进行了模板化，使得HTML代码可以拥有更强的复用性。同时，通过外部属性，组件可以根据需求灵活地进行定制，灵活性强。在实际开发中，运用组件可以提高开发效率，同时使得代码更加结构化，更易维护</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>组件插槽是指在组件内部预定义一些插槽点，在调用组件时，外部可以通过HTML嵌套的方式来设置插槽点的内容。在实际应用中，编写容器类组件离不开组件插槽，其将某些依赖外部的内容交由使用方自己去处理，使得组件的职责更加清晰</p>
</blockquote>
</blockquote>
<p>◆  第6章 组件进阶</p>
<blockquote>
<blockquote>
<p>renderTriggered、renderTracked、beforeUpdate和updated方法。当组件中的HTML元素发生渲染或更新时，会调用这些方法</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Props的这种只读性能是Vue单向数据流特性的一种体现。所有的外部属性Props都只允许父组件的数据流动到子组件中，子组件的数据则不允许流向父组件</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>所谓数据注入，是指父组件可以向其所有子组件提供数据，不论在层级结构上此子组件的层级有多深</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>当混入对象与组件中定义了相同的选项时，Vue可以非常智能地对这些选项进行合并。不冲突的配置将完整合并，冲突的配置会以组件中自己的配置为准</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>生命周期函数的这些配置项的混入与属性类的配置项的混入略有不同，不重名的生命周期函数会被完整混入组件，重名的生命周期函数被混入组件时，在函数触发时，会先触发Mixin对象中的实现，再触发组件内部的实现，这类似于面向对象编程中子类对父类方法的覆写</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>生命周期钩子的本质是方法，只是这些方法由Vue系统自动调用，在组件从创建到销毁的整个过程中，生命周期方法会在其对应的时机被触发。通过实现生命周期方法，我们可以将一些业务逻辑加到组件的挂载、卸载、更新等过程中</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>可以从常用的配置项说起，如进行全局组件的注册、配置异常与警告的捕获、进行全局自定义指令的注册等</p>
</blockquote>
</blockquote>
<p>◆  第7章 Vue响应式编程</p>
<blockquote>
<blockquote>
<p>注意，watchEffect在setup方法中被调用后，其会和当前组件的生命周期绑定在一起，组件卸载时会自动停止监听，如果需要手动停止监听</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>watch是一个与watchEffect类似的方法，与watchEffect方法相比，watch方法能够更加精准地监听指定的响应式数据的变化</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>watch方法比watchEffect方法强大的地方在于，其可以分别获取到变化前的值和变化后的值，十分方便地做某些与值的比较相关的业务逻辑。从写法上来说，watch方法也支持同时监听多个数据源</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>组合式API的使用能够帮助我们更好地梳理复杂组件的逻辑分布，能够从代码层面上将分离的相关逻辑点进行聚合，更适合进行复杂模块组件的开发</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>setup方法是组合式API功能的入口方法，如果使用组合式API模式进行组件开发，则逻辑代码都要编写在setup方法中。需要注意，setup方法会在组件创建之前被执行，即对应组件的生命周期方法beforeCreate方法调用之前被执行。由于setup方法特殊的执行时机，除了可以访问组件的传参外部属性props之外，在其内部我们不能使用this来引用组件的其他属性，在setup方法的最后，我们可以将定义的组件所需要的数据、函数等内容暴露给组件的其他选项（比如生命周期函数、业务方法、计算属性等）</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>去掉了beforeCreate和created两个生命周期方法，这是因为从逻辑上来说，setup方法的执行时机与这两个生命周期方法的执行时机基本是一致的，在setup方法中直接编写逻辑代码即可</p>
</blockquote>
</blockquote>
<p>◆  第8章 动画</p>
<blockquote>
<blockquote>
<p>对于组件的加载或卸载过程，有一系列的生命周期函数会被调用。对于Vue中的转场动画来说，也可以注册一系列的函数来对其过程进行监听</p>
</blockquote>
</blockquote>
<p>2023/12/3 发表想法
然而大部分人都只关注了第一步，可能因为工期紧张或自身能力有限等问题，没有给用户最优的使用体验，但希望我们可以始于初心，成于匠心，持续不断地做好、完善自己的代码和产品，才能赢得客户的信任和自身能力的提升</p>
<blockquote>
<blockquote>
<p>对于前端网页开发来说，功能实现仅仅是开发产品的第一步，如何给用户以最优的使用体验才是工程师的核心关注点</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>对于前端网页开发来说，功能实现仅仅是开发产品的第一步，如何给用户以最优的使用体验才是工程师的核心关注点</p>
</blockquote>
</blockquote>
<p>◆  第9章 构建工具Vue CLI的使用</p>
<blockquote>
<blockquote>
<p>使用命令的方式创建的管理项目与使用图形化页面的方式创建的管理项目的功能是一样的，可以根据自己的习惯来进行选择。总体来说，使用命令的方式更加便捷，而使用图形化页面的方式更加直观</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>项目工程中有一个名为App.vue的文件，这其实使用了Vue中单文件组件的定义方法，即将组件定义在单独的文件中，以便于开发和维护</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>图形化工具中不仅可以对项目进行编译、运行和调试，还提供了许多分析报表，比如资源体积、运行速度、依赖项等，非常好用</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Vue CLI非常适合大型商业项目的开发，它是构建大型Vue项目不可或缺的工具，Vue CLI主要包括工程脚手架、带热重载模块的开发服务器、插件系统、用户界面等功能。与Vue CLI类似，Vite也是一个提供项目脚手架和开发服务器的构建工具。不同的是，Vite不是基于Webpack的，它有一套自己的开发服务器，并且Vite本身并不像Vue CLI那样功能完善且强大，它只专注于提供基本构建的功能和开发服务器。因此，Vite更加小巧迅捷，其开发服务器比基于Webpack的开发服务器快10倍左右，这对开发者来说太重要了，开发服务器的响应速度会直接影响开发者的编程体验和开发效率。对于非常大型的项目来说，可能会有成千上万个JavaScript模块，这时构建效率的速度差异就会非常明显</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Vue CLI是一个基于Vue.js进行快速开发的完整系统，其提供了一套可交互式的项目脚手架，无论是项目开发过程中的环境配置、插件和依赖管理，还是工程的构建打包与部署，使用Vue CLI工具都可以极大地简化开发者需要做的工作。Vue CLI也提供了一套完全图形化的管理工具，开发者使用起来更加方便直观。另外，其还配套了一个vue-cli-service服务，可以帮助开发者方便地在开发环境中运行工程</p>
</blockquote>
</blockquote>
<p>◆  第12章 Vue路由管理</p>
<blockquote>
<blockquote>
<p>router-link组件是一个自定义的链接组件，它比常规的a标签要强大很多，其允许在不重新加载页面的情况下更改页面的URL。router-view用来渲染与当前URL对应的组件，我们可以将其放在任何位置，例如带顶部导航栏的应用，其页面主体内容部分就可以放置router-view组件，通过导航栏上按钮的切换来替换内容组件</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>beforeRouteUpdate函数在路由将要更新时会调用，其会传入两个参数，to是更新后的路由对象，from是更新前的路由对象</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>路由视图命名是指对router-view组件进行命名，router-view组件用来定义路由组件的出口，前面我们讲过，路由支持嵌套，router-view可以进行嵌套。通过嵌套，允许我们的Vue应用中出现多个router-view组件。但是对于有些场景，可能需要同级地展示多个路由视图，例如顶部导航区和主内容区两部分都需要使用路由组件，这时候就需要同级地使用router-view组件，要定义同级的每个router-view要展示的组件，可以对其进行命名</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>别名提供了一种路由路径映射的方式，也就是说我们可以自由地将组件映射到一个任意的路径上，而不用受到嵌套结构的限制</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>需要注意，别名和重定向并不完全一样，别名不会改变用户在浏览器中输入的路径本身，对于多级嵌套的路由来说，可以使用别名在路径上对其进行简化。如果原路由有参数配置，一定要注意别名也需要对应地包含这些参数。在为路由配置别名时，alias属性可以直接设置为别名字符串，也可以设置为数组同时配置一组别名</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>使用属性的方式进行参数传递</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>props还有一种更强大的使用方式，可以直接将其设置为一个函数，函数中返回要传递到组件的外部属性对象，这种方式动态性很好</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>更多时候，我们会在beforeEach方法中返回一个路由配置对象来决定要跳转的页面，这种方式更加灵活，例如可以将登录态校验的逻辑放在全局的前置守卫中处理，非常方便</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>与定义全局前置守卫类似，也可以注册全局的导航后置回调。与前置守卫不同的是，后置回调不会改变导航本身，但是其对页面的分析和监控十分有用</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>beforeRouteEnter是组件的导航前置守卫，在通过路由将要切换到当前组件时被调用，在这个函数中，可以做拦截操作，也可以做重定向操作，需要注意此方法只有在第一次切换此组件时会被调用，路由参数的变化不会重复调用此方法。beforeRouteUpdate方法在当前路由发生变化时会被调用，例如路由参数的变化等都可以在此方法中捕获到。beforeRouteLeave方法会在将要离开当前页面时被调用。还有一点需要特别注意，在beforeRouteEnter方法中不能使用this来获取当前组件实例，因为在导航守卫确认通过前，新的组件还没有被创建。如果一定要在导航被确认时使用当前组件实例处理一些逻辑，可以通过next参数注册回调方法</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>下面来总结Vue Router导航跳转的全过程。第1步：导航被触发，可以通过router-link组件触发，也可以通过$router.push或直接改变URL触发。第2步：在将要失活的组件中调用beforeRouteLeave守卫函数。第3步：调用全局注册的beforeEach守卫。第4步：如果当前使用的组件没有变化，调用组件内的beforeRouteUpdate守卫。第5步：调用在定义路由时配置的beforeEnter守卫函数。第6步：解析异步路由组件。第7步：在被激活的组件中调用beforeRouteEnter守卫。第8步：导航被确认。第9步：调用全局注册的afterEach守卫。第10步：触发DOM更新，页面进行更新。第11步：调用组件的beforeRouteEnter函数汇总next参数注册的回调函数。</p>
</blockquote>
</blockquote>
<p>◆  第13章 Vue状态管理</p>
<blockquote>
<blockquote>
<p>来思考下面两种状况：（1）有多个组件依赖于同一个状态。（2）多个组件都可能触发动作变更一个状态</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Action与Mutation类似，不同的是，Action并不会直接修改状态数据，而是对Mutation进行包装，通过提交Mutation来实现状态的改变。这样在Action定义的方法中，允许我们包含任意的一步操作</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Vuex的状态管理功能主要解决了Vue组件间的通信问题，让跨层级共享数据或平级组件共享数据变得非常容易</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/xunxujianjinVue3.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 27 本《啊呜一口，吃掉烦恼》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/awuyikou.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/awuyikou.html</guid>
            <pubDate>Mon, 04 Dec 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[本书中的漫画展现了一个蛋蛋视角的人类的世界，在复杂的成人社会里，它像是一个避难所，里面所有的感情都直白而纯粹。将人类世界的情感藏在很小很小的事情里，构成了一种无与伦比的温暖，能轻易地触动每一个阅读的人内心最柔软的地方 漫画深入纯文字有时难以把握的生活肌理与内心世界，把很多人生感悟，用有趣的对话展现出来，释放直击心灵的治愈力，唤起人们满满对生活的热爱，给更多生活在焦虑、压力之下的人带去安慰和力量]]></description>
            <content:encoded><![CDATA[<h1 id="第-27-本《啊呜一口-吃掉烦恼》" tabindex="-1">第 27 本《啊呜一口，吃掉烦恼》 <a class="header-anchor" href="#第-27-本《啊呜一口-吃掉烦恼》" aria-label="Permalink to &quot;第 27 本《啊呜一口，吃掉烦恼》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>本书中的漫画展现了一个蛋蛋视角的人类的世界，在复杂的成人社会里，它像是一个避难所，里面所有的感情都直白而纯粹。将人类世界的情感藏在很小很小的事情里，构成了一种无与伦比的温暖，能轻易地触动每一个阅读的人内心最柔软的地方</p>
<p>漫画深入纯文字有时难以把握的生活肌理与内心世界，把很多人生感悟，用有趣的对话展现出来，释放直击心灵的治愈力，唤起人们满满对生活的热爱，给更多生活在焦虑、压力之下的人带去安慰和力量</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《啊呜一口，吃掉烦恼》
Yolk
1个笔记</p>
<p>◆  点评</p>
<p>2023/12/4 认为好看
很喜欢的一本漫画书📖，蛋蛋的故事充满奇思妙想，每个故事都充满力量，很温馨、浪漫，让我感觉到温暖，我也要成为一个温暖的人。而且有很多暖心治愈的话鼓励你前行，比如：“不要因为别人的一句话，就丢掉整天的快乐呀”、“不用太勉强自己，你已经很棒了”、“其实，就算在人生中摔了，一跤也没什么的大不了的”。</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/awuyikou.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 25 本《生活百般滋味，人生需要笑对》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/shenghuobaibanziwei.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/shenghuobaibanziwei.html</guid>
            <pubDate>Thu, 30 Nov 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[人间多少事，都付笑谈中！我们面对生活的艰辛、压力、孤单、思念、幸福、离别以及捉摸不透的爱情、难以割舍的亲情、酒肉与忠肝义胆的友情……关于情感的一切，都在这本充满笑谈和治愈的小书中。 本书从看破了就要说破、爱情是人生的50%、理想的世界、人生何处不哲学、我要找人吵一架、五颜六色的忧伤、小白长得真像大白、一千零一个奇妙夜、一碗心灵乌鸡汤等，通过一幅幅诙谐的漫画、一句句哲理的箴言，将人生的百般滋味跃然纸上，力透纸背。 该书由周鱼老师配文、bobo老师亲笔漫画创作。内文进行新颖的编排设计，内容丰富精彩，是读者和作者粉丝们喜欢的治愈读物，人生的欢乐之书。轻松、温暖、无厘头的奇思妙想，带来充满无限乐趣的想象空间，看懂后定能会心一笑，发现藏在每个角落里的快乐并回味无穷。]]></description>
            <content:encoded><![CDATA[<h1 id="第-25-本《生活百般滋味-人生需要笑对》" tabindex="-1">第 25 本《生活百般滋味，人生需要笑对》 <a class="header-anchor" href="#第-25-本《生活百般滋味-人生需要笑对》" aria-label="Permalink to &quot;第 25 本《生活百般滋味，人生需要笑对》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>人间多少事，都付笑谈中！我们面对生活的艰辛、压力、孤单、思念、幸福、离别以及捉摸不透的爱情、难以割舍的亲情、酒肉与忠肝义胆的友情……关于情感的一切，都在这本充满笑谈和治愈的小书中。</p>
<p>本书从看破了就要说破、爱情是人生的50%、理想的世界、人生何处不哲学、我要找人吵一架、五颜六色的忧伤、小白长得真像大白、一千零一个奇妙夜、一碗心灵乌鸡汤等，通过一幅幅诙谐的漫画、一句句哲理的箴言，将人生的百般滋味跃然纸上，力透纸背。</p>
<p>该书由周鱼老师配文、bobo老师亲笔漫画创作。内文进行新颖的编排设计，内容丰富精彩，是读者和作者粉丝们喜欢的治愈读物，人生的欢乐之书。轻松、温暖、无厘头的奇思妙想，带来充满无限乐趣的想象空间，看懂后定能会心一笑，发现藏在每个角落里的快乐并回味无穷。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《生活百般滋味 人生需要笑对》
周鱼
2个笔记</p>
<p>◆  点评</p>
<p>2023/11/30 认为好看
很治愈的漫画文案书，读完内心暖暖的，希望我们都可以笑对人生，纵马踏花向自由</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/shenghuobaibanziwei.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 18 本《从你的全世界路过》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/congnidequanshijieluguo.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/congnidequanshijieluguo.html</guid>
            <pubDate>Sun, 19 Nov 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[我希望写一本书，你可以留在枕边、放进书架，或者送给最重要的那个人。 从你的全世界路过，随便打开一篇就可以了。 就像山野开出花时，栽它的孩童不知去了何方，云彩之间互不告别，第二天就是他乡。 车顶大雪静谧，车内年轻人安然醉倒。 如果有机会，请你喝一杯酒，在列车轰鸣声中，飞驰进无边无际的夜晚。 留下开去往事的轨道，对我来说，就是写小说的意义。]]></description>
            <content:encoded><![CDATA[<h1 id="第-18-本《从你的全世界路过》" tabindex="-1">第 18 本《从你的全世界路过》 <a class="header-anchor" href="#第-18-本《从你的全世界路过》" aria-label="Permalink to &quot;第 18 本《从你的全世界路过》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>我希望写一本书，你可以留在枕边、放进书架，或者送给最重要的那个人。</p>
<p>从你的全世界路过，随便打开一篇就可以了。</p>
<p>就像山野开出花时，栽它的孩童不知去了何方，云彩之间互不告别，第二天就是他乡。</p>
<p>车顶大雪静谧，车内年轻人安然醉倒。</p>
<p>如果有机会，请你喝一杯酒，在列车轰鸣声中，飞驰进无边无际的夜晚。</p>
<p>留下开去往事的轨道，对我来说，就是写小说的意义。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《从你的全世界路过（修订本）》
张嘉佳
88个笔记</p>
<p>◆  点评</p>
<p>2023/11/19 认为好看
青春亦如此，诗酒趁年华</p>
<p>很喜欢作者的文字优美，平淡朴实，真诚且舒适。这本书在我大学图书馆的时候看过一次，但是没有来的急看，这次看了之后，内心是有很多波澜的。即被故事温暖、感动到了，也被回忆起之前生活的点点滴滴，可能历史总是惊人的相似吧，这样也许我可以懂一点你吧。</p>
<p>文中有太多的故事我都很喜欢，也在感慨，作者的人生经历真丰富呀。喜欢茅十八和荔枝的爱情故事，虽然一段不友好的爱情结局，折磨人的从来不是离别，而是一次次回忆吧。喜欢作者大学这样铁血柔情的舍友，“如果可以，无论要去哪里，剩下的碳烤生蚝请让我打包”。也被猪头的爱情责任担当给感动，年轻就该有的冲动。也被刘欣欣收养的流浪狗大黑，一段温馨的伙伴关系，但突然善终感到莫名的心酸。等等还有很多，值得反复阅读，细细品味</p>
<p>文中有很多我特别喜欢的句子，因为被莫名的戳中，有感动也有心酸，也许这就是生活，这就是人生；比如说到坚强：“所有人的坚强，都是柔软生的茧”，说到爱情：“故事的开头总是这样，适逢其会，猝不及防。故事的结局总是这样，花开两朵，天各一方”、“我觉得这个世界美好无比。晴时满树花开，雨天一湖涟漪，阳光席卷城市，微风穿越指间，入夜每个电台播放的情歌，沿途每条山路铺开的影子！全部都是你不经意写的一字一句，留我年复一年朗读。这世界是你的遗嘱，而我是你唯一的遗物”，很喜欢这段话讲旅行的意义的话，给我很大的启发：“美食和风景的意义，不是逃避，不是躲藏，不是获取，不是记录，而是在想象之外的环境里，去改变自己的世界观，从此慢慢改变心中真正觉得重要的东西。就算过几天就得回去，依旧上班，依旧吵闹，依旧心烦，可是我对世界有了新的看法。就算什么改变都没有发生，至少，人生就像一本书，我的这本也比别人多了几张彩页，这就是旅行的意义”等等，还有很多，作者的文笔真的很好，有一种温暖人心的力量</p>
<p>感谢能阅读到这本书，给了我很多不一样的感受，体会人间冷暖，爱恨情仇。最后用作者的话结尾吧：有人心心念念，有人心不在焉，转眼好几年。世事如书，我偏爱你这一句，愿做个逗号，待在你的脚边。但你有自己的朗读者，而我只是个摆渡人</p>
<p>“下雨打伞，天冷穿衣，感谢你从我的全世界路过。”</p>
<p>你好，陌生人🙂</p>
<p>◆  序</p>
<blockquote>
<blockquote>
<p>我从一些人的世界路过，一些人从我的世界路过。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>所有人的坚强，都是柔软生的茧。</p>
</blockquote>
</blockquote>
<p>◆  第一夜 初恋 从你的全世界路过</p>
<p>2023/9/10 发表想法
这是对于茅十八和荔枝的爱情故事感慨之余，也是对别人的和自己劝诫吧
这一段文字吸引我的是，这种比喻，确实形象化了，也感受的爱情中的美好记忆消失的过程。但更多的是被这种沙化过程的惋惜，因为过来人的经历确实舍不得，但好像又无力回天那种，真的改变不了什么，只能默默接受吧，等待时间吧
一段不友好的爱情结局，折磨人的从来不是离别，而是一次次回忆吧。将这记忆比作沙城，慢慢随着时间腐蚀着一切，然后烟消云散。可能这就是告诉我们不要停留在记忆里，可以偶尔回到，终究还是要面对现实，但不要忘了往前走，即使是为了和你擦肩而过，至少是在变好的路上</p>
<blockquote>
<blockquote>
<p>个人的记忆就是座城市，时间腐蚀着一切建筑，把高楼和道路全部沙化。如果你不往前走，就会被沙子掩埋。
沙城，不在任何一个地方，它只是你的记忆。
偶尔梦里回到沙城，那些路灯和脚印在视野中逐渐清晰，而你无法碰触，一旦双手陷入，整座城市就轰隆隆地崩塌。把你的喜笑颜开，把你的碧海蓝天，把关于我们之间所有的影子埋葬。
如果你不往前走，就会被沙子掩埋。所以我们泪流满面，步步回头，可是只能往前走。
哪怕往前走，是和你擦肩而过。</p>
</blockquote>
</blockquote>
<p>2023/9/10 发表想法
想起了高中睡在我下铺的同学，真的是晚自习后回到宿舍一小时以上的电话粥，当时不懂为啥他们两这么能聊，哈哈哈</p>
<blockquote>
<blockquote>
<p>那时候的男生宿舍，熄灯以后，总有人站在门外，光膀子穿条内裤煲电话粥。他们扭动身体，发出呵呵呵呵的笑声，窃窃私语。</p>
</blockquote>
</blockquote>
<p>2023/9/10 发表想法
青春时候的爱情不就是这样子的嘛，对于自己喜欢的人，在自己眼里都是最好的，为了她可以奋不顾身，却又很无奈</p>
<blockquote>
<blockquote>
<p>当天夜里，猪头破天荒地去操场跑步。我站在一边，看着他不惜体力地跑。一圈两圈三圈，他累瘫在草地上。</p>
</blockquote>
</blockquote>
<p>2023/9/10 发表想法
羡慕这样的大学舍友，因为我的大学舍友及关系真的不咋滴，大学时候没有什么感情，毕业后更别说联系了。但那就是年纪最好的时光呀，却不是最好的青春
很感动有这样的舍友，因为他们在作者的眼里是那么的重要且有趣。猪头的爱情，很有血性和担当，真的就是为了爱情敢偷心爱女孩子的水壶的人。为了心爱人的清白打工赚钱来还，最终也感动了别人，有情人终成眷属吧。很多时候，年轻就该为了追求自己想要的，敢敢的冲动一次，真的就那么一次，美好的事情就发生了，我们还年轻呀，难道不该冲动吗</p>
<blockquote>
<blockquote>
<p>他举起杯子，笑了，说：“一旦下雨，路上就有肮脏和泥泞，每个人都得踩过去。可是，我有一条命，我愿意努力工作，拼命赚钱，要让这个世界的一切苦难和艰涩，从此再也没有办法伤害到她。”
他一字一句地说：“那时候我就是这么想的，以后我也会一直这么做的。”
我大醉，想起自己端着泡面，站在阳台上，看校园的漫天大雪里，猪头打着伞，身边依偎着小巧的崔敏，他们互相依靠，一步步穿越青春。
十年醉了太多次，身边换了很多人，桌上换过很多菜，杯里洒过很多酒。
那是最骄傲的我们，那是最浪漫的我们，那是最无所顾忌的我们。
那是我们光芒万丈的青春。
如果可以，无论要去哪里，剩下的炭烤生蚝请让我打包。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>他举起杯子，笑了，说：“一旦下雨，路上就有肮脏和泥泞，每个人都得踩过去。可是，我有一条命，我愿意努力工作，拼命赚钱，要让这个世界的一切苦难和艰涩，从此再也没有办法伤害到她。”
他一字一句地说：“那时候我就是这么想的，以后我也会一直这么做的。”
我大醉，想起自己端着泡面，站在阳台上，看校园的漫天大雪里，猪头打着伞，身边依偎着小巧的崔敏，他们互相依靠，一步步穿越青春。
十年醉了太多次，身边换了很多人，桌上换过很多菜，杯里洒过很多酒。
那是最骄傲的我们，那是最浪漫的我们，那是最无所顾忌的我们。
那是我们光芒万丈的青春。
如果可以，无论要去哪里，剩下的炭烤生蚝请让我打包。</p>
</blockquote>
</blockquote>
<p>2023/9/10 发表想法
这句话是有很多愧疚和希冀的，我想作者也是不知道这种结局，不过也是无能为力那个时候，只能想好好弥补她吧，不过给他送早餐的那个她，可以记一辈子</p>
<blockquote>
<blockquote>
<p>我心想，如果可以，在离云朵最近的地方，开一个小卖部，等校花同学回来，就请她做老板娘。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>你的长相决定了他人对你的态度，他人对你的态度决定了你的性格，你的性格决定了一生的路。</p>
</blockquote>
</blockquote>
<p>2023/9/10 发表想法
说的有点玄学，通俗一点讲就是一个天平的两端，一端重了，另一端就会被翘起吧，命运就是这样，一边人幸福了，也有另一边人就会受苦，只是你看不到</p>
<blockquote>
<blockquote>
<p>世界上，总有一个人和你刚见面，两人就互相吸引，莫名觉得是一个整体。
这就是你的反向人。
为什么叫反向人呢？
你们的运气是共同的整体。两人相加是一百，那么你占五十，那么他也占五十。如果你占九十，那么他就只剩下十。</p>
</blockquote>
</blockquote>
<p>2023/9/10 发表想法
哈哈哈，被逗到了</p>
<blockquote>
<blockquote>
<p>就怕碰到了，还是异性。
可怕死了，赶紧吃个夜宵睡个好觉，不求及格，好歹能过五十。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>青春是丛林，是荒原，是阳光炙热的奔跑，是大雨滂沱的伫立。</p>
</blockquote>
</blockquote>
<p>2023/9/10 发表想法
我喜欢曾经那个无忧无虑的小孩👶🏻，也喜欢现在不完美却努力生活的自己</p>
<blockquote>
<blockquote>
<p>我们喜欢《七龙珠》。我们喜欢北条司。我们喜欢猫眼失忆后的那一片海。我们喜欢马拉多纳。我们喜欢陈百强。我们喜欢《今宵多珍重》。我们喜欢乔峰。我们喜欢杨过在流浪中一天比一天冷清。我们喜欢远离四爷的程淮秀。我们喜欢《笑看风云》，郑伊健捧着陈松伶的手，在他哭泣的时候我们泪如雨下。我们喜欢夜晚。我们喜欢自己的青春。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>让你不耐烦的声声召唤，都发自弱势的一方。</p>
</blockquote>
</blockquote>
<p>2023/9/10 发表想法
不知道为啥，特别心酸🍋，也许我能懂一点</p>
<blockquote>
<blockquote>
<p>我知道自己喜欢你。
但我不知道自己将来在哪里。
因为我知道，无论哪里，你都不会带我去。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>靠着树干坐下，
头顶满树韶光，
枝叶的罅隙里斜斜透着记忆，
落满一地思念。
醒来拍拍裤管，
向不知名的地方去。</p>
</blockquote>
</blockquote>
<p>◆  第二夜 表白 我希望有个如你一般的人</p>
<blockquote>
<blockquote>
<p>我希望有个如你一般的人。
如这山间清晨一般明亮清爽的人，
如奔赴古城道路上阳光一般的人，
温暖而不炙热，
覆盖我所有肌肤。
由起点到夜晚，
由山野到书房，
一切问题的答案都很简单。
我希望有个如你一般的人，
贯彻未来，
数遍生命的公路牌。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>总会有人对你点点头，贯彻未来，数遍生命的公路牌。</p>
</blockquote>
</blockquote>
<p>2023/10/4 发表想法
来之不易的东西，会变得尤其珍贵，难道不是吗</p>
<blockquote>
<blockquote>
<p>我说：“我换个理解，吃货也能吃出道理来的。比如吧，现在女生动不动就想找一个男人，一个房子车子工作全部落实完毕的男人，物质生活已经接近完善的男人。可是这种现成的经济条件，就好比一锅死虾子，它们没有经受过苦难，直接软趴趴煎好盛在你碗里。它们虽然表皮明亮，然而肉质疏松，气味难闻，吃着吃着就哭了，第二天还会拉肚子。”
朋友说：“嗯，我的太太就这样。我在想，比如吧，两个人共同还贷，迎来的房屋，你打开门的刹那，才会满心欢喜，充满感激与珍惜地去打造这个家。”
其实我明白，他们相逢后，女生一门心思抓住这个尚算富裕的男人，通过各种手段，两人结合了。
三年前，朋友一家三口，和项目投资人一家，共同去泰国旅行。
他给太太在免税店买了一堆奢侈品，太太一高兴，同意集体去观看人妖表演。
表演结束后，人妖排成一长队，欢送客人。朋友非常兴奋，对着其中最美的一个人妖飞吻，打招呼，大叫“我爱你”。
太太翻脸了。
她说：“你什么意思？”
朋友说：“我能有什么意思，我能干什么？”</p>
</blockquote>
</blockquote>
<p>2023/10/4 发表想法
好好珍惜眼前人，特别是同甘共苦，在你落魄无助时候帮你的人</p>
<blockquote>
<blockquote>
<p>虾子要吃活着烧的，痛出来的鲜美，才足够颠倒众生。</p>
</blockquote>
</blockquote>
<p>2023/10/4 发表想法
你可以不认同，不喜欢，可以自由的表达自己的想法观点，但也要做到起码的互相尊重。因为，我也喜欢这样的你</p>
<blockquote>
<blockquote>
<p>看到小清新不要说矫情。看到没意义的段子不要说脑残。看到文艺范不要说装蒜。看到诗歌不要说无病呻吟。看到意识流不要说故弄玄虚。
每个人有自己的表达方式，如果你不喜欢，只能说明不是为你准备的。
你可以不接受，这是一种自由。但不屑和抨击，翻到另外一个世界观，只能说明你的无知和武断。
大家都要尊重各自的表达。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>看到小清新不要说矫情。看到没意义的段子不要说脑残。看到文艺范不要说装蒜。看到诗歌不要说无病呻吟。看到意识流不要说故弄玄虚。
每个人有自己的表达方式，如果你不喜欢，只能说明不是为你准备的。
你可以不接受，这是一种自由。但不屑和抨击，翻到另外一个世界观，只能说明你的无知和武断。
大家都要尊重各自的表达。</p>
</blockquote>
</blockquote>
<p>2023/10/4 发表想法
好美，原来我希望我能只是习惯了身边有你的样子。</p>
<blockquote>
<blockquote>
<p>我希望起身时，你会轻轻帮我掸掉衣服上不容易发现的灰尘。我希望写字时，手边的茶杯里一直是我喜欢的温度。我希望点烟时，你告诉我离今天的份额还有几根。我希望沉默时，你一言不发在身边我们却不会觉得尴尬。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我希望起身时，你会轻轻帮我掸掉衣服上不容易发现的灰尘。我希望写字时，手边的茶杯里一直是我喜欢的温度。我希望点烟时，你告诉我离今天的份额还有几根。我希望沉默时，你一言不发在身边我们却不会觉得尴尬。</p>
</blockquote>
</blockquote>
<p>2023/10/4 发表想法
青春是美好的但不完美的，有太多的故事，只能靠青春来回忆了</p>
<blockquote>
<blockquote>
<p>青春总是这样，每处随便碰触一下，就是痛楚。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>雨过天晴，终要好天气。世间予我千万种满心欢喜，沿途逐枝怒放，全部遗漏都不要紧，得你一枝配我胸襟就好。</p>
</blockquote>
</blockquote>
<p>2023/10/4 发表想法
好感人，我很喜欢你，但我不适合你，不想耽误你，你会好起来的。😭</p>
<blockquote>
<blockquote>
<p>“其实我很喜欢你啊。但我知道你永远不会喜欢我，如果我是你女朋友，你总有一天也会离开我。我是个很傻的人，不懂你们的世界，所以我永远没有办法走进你心里。可我比谁都相信，你会好起来的，比以前还要好，好到吓死我。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“其实我很喜欢你啊。但我知道你永远不会喜欢我，如果我是你女朋友，你总有一天也会离开我。我是个很傻的人，不懂你们的世界，所以我永远没有办法走进你心里。可我比谁都相信，你会好起来的，比以前还要好，好到吓死我。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>是在秋天认识你的。夏天就要过去，所以，你应该在十年前的这个地方等我。你是退潮带来的月光，你是时间卷走的书签，你是溪水托起的每一页明亮。我希望秋天覆盖轨道，所有的站牌都写着八月未完。在季节的列车上，如果你要提前下车，请别推醒装睡的我。这样我可以沉睡到终点，假装不知道你已经离开。</p>
</blockquote>
</blockquote>
<p>◆  第三夜 执着 一路陪你笑着逃亡</p>
<blockquote>
<blockquote>
<p>想了解一个人，
比起他说话的内容，
其实他说话的方式与途径更重要。
你的欲望，
决定着你说话或者做事的方式与途径。
欲望，就是最基本元素。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>想了解一个人究竟在想什么，比起他所做的内容，其实他所做的方式与途径更重要。
这就是了解一个人的基本元素。</p>
</blockquote>
</blockquote>
<p>2023/10/5 发表想法
这也许就是为了配上了，我奋不顾身的努力吧</p>
<blockquote>
<blockquote>
<p>他猛烈地喜欢低一届的学妹，身为旷课霸王，居然连陪女生上通宵自习这种丧心病狂的事情都干得出来。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>美食和风景的意义，
不是逃避，不是躲藏，
不是获取，不是记录，
而是在想象之外的环境里，
去改变自己的世界观，
从此慢慢改变心中真正觉得重要的东西。</p>
</blockquote>
</blockquote>
<p>2023/10/5 发表想法
很喜欢这句话，满足了我对旅行的所有认可和内心想法。这就是我为啥喜欢出去旅行的原因，人生短暂，总要多去看看外面的世界，多精彩呀。用心感受不一样的人文景观，享受一切顺其自然的相遇，感谢旅行中慢慢改变的自己</p>
<blockquote>
<blockquote>
<p>美食和风景的意义，不是逃避，不是躲藏，不是获取，不是记录，而是在想象之外的环境里，去改变自己的世界观，从此慢慢改变心中真正觉得重要的东西。
就算过几天就得回去，依旧上班，依旧吵闹，依旧心烦，可是我对世界有了新的看法。
就算什么改变都没有发生，至少，人生就像一本书，我的这本也比别人多了几张彩页。
这就是旅行的意义。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>美食和风景的意义，不是逃避，不是躲藏，不是获取，不是记录，而是在想象之外的环境里，去改变自己的世界观，从此慢慢改变心中真正觉得重要的东西。
就算过几天就得回去，依旧上班，依旧吵闹，依旧心烦，可是我对世界有了新的看法。
就算什么改变都没有发生，至少，人生就像一本书，我的这本也比别人多了几张彩页。
这就是旅行的意义。</p>
</blockquote>
</blockquote>
<p>2023/10/5 发表想法
这个时候，有个人在身边陪伴你，听你倾诉，陪你喜怒哀乐，便胜却人间无数</p>
<blockquote>
<blockquote>
<p>再难过，有好基友陪在身边，就可以顺利逃亡。</p>
</blockquote>
</blockquote>
<p>◆  第四夜 温暖 那些细碎而美好的存在</p>
<blockquote>
<blockquote>
<p>会说话的人分两种。第一种会说话，是指能判断局势，分门别类，看起来不经意，却能恰好说到对方心坎里。第二种会说话，是指话很多，但没一句动听的，整个就像弹匣打不光的AK47，比如胡言。</p>
</blockquote>
</blockquote>
<p>2023/10/14 发表想法
人生嘛，所谓的平平淡淡也是要经过起伏的阅历，一点一滴积累之后幡然醒悟出来的，而不是一种只会安慰自己的借口</p>
<blockquote>
<blockquote>
<p>老和尚说终归要见山是山，但你们经历见山不是山了吗？不趁着年轻拔腿就走，去刀山火海，不入世就自以为出世，以为自己活佛涅槃来的？我的平平淡淡是苦出来的，你们的平平淡淡是懒惰，是害怕，是贪图安逸，是一条不敢见世面的土狗。女人留不住就不会去追？</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>老和尚说终归要见山是山，但你们经历见山不是山了吗？不趁着年轻拔腿就走，去刀山火海，不入世就自以为出世，以为自己活佛涅槃来的？我的平平淡淡是苦出来的，你们的平平淡淡是懒惰，是害怕，是贪图安逸，是一条不敢见世面的土狗。女人留不住就不会去追？</p>
</blockquote>
</blockquote>
<p>2023/10/14 发表想法
人间清醒，哈哈哈</p>
<blockquote>
<blockquote>
<p>钱花完可以再赚，吃亏了可以再来，年轻没了怎么办？当过兵才能退伍，不打仗就别看不起牺牲。你会不会说话？会说话，就去长沙，告诉人家，你想娶她。”
老太太抖出一张发</p>
</blockquote>
</blockquote>
<p>2023/10/14 发表想法
好感动。父母在，尚有归处。珍惜父母在身边的日子</p>
<blockquote>
<blockquote>
<p>老太太说：“我年纪大了，本来想你结婚后，每天包粽子给你们小两口吃。吃到你们腻了，我也可以走了。你是我儿子，走错路不怕，走错就回家，你妈我一时半会儿死不了，回来的时候我在家。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>老太太说：“我年纪大了，本来想你结婚后，每天包粽子给你们小两口吃。吃到你们腻了，我也可以走了。你是我儿子，走错路不怕，走错就回家，你妈我一时半会儿死不了，回来的时候我在家。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>伤心欲笑，痛出望外，泪无葬身之地，哀莫过于心不死。</p>
</blockquote>
</blockquote>
<p>2023/10/29 发表想法
最美的地方永远在心里，只有过当时有那么一个环境可以宣泄出来，让你感觉拥有了这个世界一样</p>
<blockquote>
<blockquote>
<p>“现在我特别后悔小时候没学点儿乐器。一个人坐在海边，如果你会弹吉他，或者会吹口琴，那就能独自坐一天。因为可以在最美的地方，创造一个完全属于自己的世界。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>“现在我特别后悔小时候没学点儿乐器。一个人坐在海边，如果你会弹吉他，或者会吹口琴，那就能独自坐一天。因为可以在最美的地方，创造一个完全属于自己的世界。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我们喜欢计算，又算不清楚，那就不要算了，而有条路一定是对的，那就是努力变好，好好工作，好好生活，好好做自己，然后面对整片海洋的时候，你就可以创造一个完全属于自己的世界。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>这世界上有很多东西，细小而琐碎，却在你不经意的地方，支撑你度过很多道坎。</p>
</blockquote>
</blockquote>
<p>2023/10/29 发表想法
过好自己的人生，没什么大不了的</p>
<blockquote>
<blockquote>
<p>遇到事情的时候，就问自己，会不会死？
不会。那去他妈的。
会。哎哟那不能搞。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>遇到事情的时候，就问自己，会不会死？
不会。那去他妈的。
会。哎哟那不能搞。</p>
</blockquote>
</blockquote>
<p>◆  第五夜 争吵 有时候我们失控</p>
<blockquote>
<blockquote>
<p>而那些如流星般划过我生命的少年，有的黯然颓落，有的光芒万丈，从这里依次登场。</p>
</blockquote>
</blockquote>
<p>2023/11/12 发表想法
经历过的人也许都知道，一个人熬过来的日子，成长很多，弥足珍贵。希望我都是苦尽甘来的人，沐光而行，一路花开🌸</p>
<blockquote>
<blockquote>
<p>总有一段路，你是会一边哭一边走完的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>总有一段路，你是会一边哭一边走完的。</p>
</blockquote>
</blockquote>
<p>◆  第六夜 放手 我是爱情末等生</p>
<p>2023/11/12 发表想法
也许为了心安，也许为了与自己和解，也许为了勇于面对自己，面对现实</p>
<blockquote>
<blockquote>
<p>那天我明白了一件事情。最大的勇气，就是守护满地的破碎。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>那天我明白了一件事情。最大的勇气，就是守护满地的破碎。</p>
</blockquote>
</blockquote>
<p>2023/11/14 发表想法
虽然没养过狗狗🐶，但看到这样的结局还是会心酸，也被感动到。狗狗一直都是人类忠诚的伙伴，能善终，对于狗和主人来说都是幸福的</p>
<blockquote>
<blockquote>
<p>我送她一张卡片，上面写着：我希望和你在一起，如果不可以，那我就在你看不见的地方，永远陪着你。
刘欣欣说：“谢谢你，我喜欢梅茜，你要替我告诉它。”
我点点头。
她前脚走，店长后脚冲进来，喊：“老板你个蠢货，又送酒，本店越来越接近倒闭了！”
我说：“没啊，人家给东西了，你看。”
欣欣送我一张照片，是她的全家福，男孩女孩抱着一条大黑狗，老太太笑得合不拢嘴。
照片背面有行清秀的字迹：一家人。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>很久之后我才明白，
原来人生中，
真的有见一面，
就再也看不到了。</p>
</blockquote>
</blockquote>
<p>2023/11/14 发表想法
很幸运我也是农村长大的孩子👶🏻，也有过这样的童年。回想起来真的美滋滋的，虽然那时候过得不富裕，但无忧无虑的玩耍和一群小伙伴，漫山遍野的跑，很开心，还有很多趣事……多好呀，也许我真的好想能够回到过去，哈哈哈😁</p>
<blockquote>
<blockquote>
<p>我觉得童年一定是要属于农村的。稻田、河流、村庄的炊烟、金灿灿的油菜花。抓知了、摸田螺、偷鸭子，率领三百条草狗在马路上冲锋。疯子、神棍、村长、叫卖的货郎、赶集的大婶、赤脚被拿着刀的老婆追一条街的大叔……</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>很久之后我才明白，原来人生中，真的有见一面，就再也看不到了。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>对这个世界绝望是轻而易举的，
对这个世界挚爱是举步维艰的。</p>
</blockquote>
</blockquote>
<p>2023/11/16 发表想法
这个世界很美好，我们要多去看看</p>
<blockquote>
<blockquote>
<p>对这个世界绝望是轻而易举的，对这个世界挚爱是举步维艰的。
你要学会前进，人群川流不息，在身边像晃动的电影胶片，你怀揣自己的颜色，往一心要到的地方。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>对这个世界绝望是轻而易举的，对这个世界挚爱是举步维艰的。
你要学会前进，人群川流不息，在身边像晃动的电影胶片，你怀揣自己的颜色，往一心要到的地方。</p>
</blockquote>
</blockquote>
<p>◆  第七夜 怀念 我青春里没有返程的旅行</p>
<p>2023/11/18 发表想法
之前网络上有一句很火的话，叫做“以大多数人的努力程度之低，根本轮不到拼天赋。”我也承认天赋的重要性，但我们只是普通人，周围有天赋的人屈指可数或者我们根本接触不到这些人。所以呀，人总是会低估自己而高估别人。我们只能靠自身的努力去改变自己，相信我们可以做到的，哪怕成长得慢一点，那也是在进步。只要你不放弃，一直坚持走下去，终将会得偿所愿，苦尽甘来，加油吧</p>
<blockquote>
<blockquote>
<p>一切技能最后都靠天赋，勤学苦练只能变成机器人，跟麦当劳的流水线差不多。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一切技能最后都靠天赋，勤学苦练只能变成机器人，跟麦当劳的流水线差不多。</p>
</blockquote>
</blockquote>
<p>2023/11/18 发表想法
突然让我想起了泰戈尔的一段话：不要着急，最好的总会在最不经意的时候出现，纵使伤心，也不要愁眉不展，因为你不知道谁会爱上你的笑容。对于世界而言，你是一个人，对于某个人，你是他的整个世界。</p>
<blockquote>
<blockquote>
<p>我觉得这个世界美好无比。晴时满树花开，雨天一湖涟漪，阳光席卷城市，微风穿越指间，入夜每个电台播放的情歌，沿途每条山路铺开的影子，全部是你不经意写的一字一句，留我年复一年朗读。这世界是你的遗嘱，而我是你唯一的遗物。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我觉得这个世界美好无比。晴时满树花开，雨天一湖涟漪，阳光席卷城市，微风穿越指间，入夜每个电台播放的情歌，沿途每条山路铺开的影子，全部是你不经意写的一字一句，留我年复一年朗读。这世界是你的遗嘱，而我是你唯一的遗物。</p>
</blockquote>
</blockquote>
<p>2023/11/18 发表想法
也许我们总是容易被别人一句话感动，而为自己的深情买单吧。也许我没什么特别的，只是特别喜欢你而已吧</p>
<blockquote>
<blockquote>
<p>我们喜欢说，我喜欢你，好像我一定会喜欢你一样，好像我出生后就为了等你一样，好像我无论牵挂谁，思念都将坠落在你身边一样。
而在人生中，因为我一定会喜欢你，所以真的有些道路是要跪着走完的，就为了坚持说，我喜欢你。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我们喜欢说，我喜欢你，好像我一定会喜欢你一样，好像我出生后就为了等你一样，好像我无论牵挂谁，思念都将坠落在你身边一样。
而在人生中，因为我一定会喜欢你，所以真的有些道路是要跪着走完的，就为了坚持说，我喜欢你。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我们在年少时不明白，有些乐章一旦开始，唱的就是曲终人散。</p>
</blockquote>
</blockquote>
<p>2023/11/18 发表想法
要好好的活着，要活得好好的</p>
<blockquote>
<blockquote>
<p>我们身边没有战争，没有瘟疫，没有武器，没有硝烟和末日，却总有些时候会对着自己喊，对着重要的人喊，要活着啊浑蛋，要活得好好的啊浑蛋。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我们身边没有战争，没有瘟疫，没有武器，没有硝烟和末日，却总有些时候会对着自己喊，对着重要的人喊，要活着啊浑蛋，要活得好好的啊浑蛋。</p>
</blockquote>
</blockquote>
<p>2023/11/18 发表想法
因为青春时候的我们，总是无所顾忌，敢爱敢恨，勇往直前，却不懂得珍惜当下。直到错过了，回忆起往事，才会耿耿于怀吧。青春的遗憾，靠时间是弥补不了的吗</p>
<blockquote>
<blockquote>
<p>青春原来那么容易说好。大家说好，时间说不好。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>青春原来那么容易说好。大家说好，时间说不好。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>这让我们欣喜，看着孤独的日，守着暗淡的夜，并且要以岁月为马，奔腾到彼岸，找到和你周长、角度、裂口都相互衔接的故事。然后捧着书籍，晒着月光，心想：做怎样的跋山涉水，等怎样的蹉跎时光，都不重要，重要的是对面有谁在等你。</p>
</blockquote>
</blockquote>
<p>2023/11/18 发表想法
因为错过我们才会对未来更有期待，才会变得更努力的去追求自己想要的东西，让自己慢慢变好</p>
<blockquote>
<blockquote>
<p>不能错过那么好的肉夹馍，因为我已经错过更好的东西。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我家里很穷，我很想请大家吃一顿好的，可是我家里真的很穷，学费还欠着一些，爸爸说等麦子熟了，留几袋，再杀一头猪，就能还清学费。我说，爸爸，都不去学校了，干吗还要还学费。爸爸说，这个是欠的，就算书不念，欠的也得还。张嘉佳，我特别想请你吃一顿好的，特别好的那种，哪怕是肯德基，贵成那样我还是会请你。我不是坏人，无论我请不请你吃，你将来一定会很优秀，成为伟大的作家。等麦子熟了，我会偷偷留一袋，卖掉请你吃饭。</p>
</blockquote>
</blockquote>
<p>2023/11/19 发表想法
拍大学毕业照的时候，我就知道，有些人这辈子已经见过最后一面了，有点惋惜，但却无能为力。可能这就是人生吧，好好珍惜当下。</p>
<blockquote>
<blockquote>
<p>我的时间很多，可是就算少一天，我还是会舍不得。我的朋友很多，可是就算少一个，我还是会舍不得。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我的时间很多，可是就算少一天，我还是会舍不得。我的朋友很多，可是就算少一个，我还是会舍不得。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>故事开头总是这样，
适逢其会，猝不及防。
故事的结局总是这样，
花开两朵，天各一方。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>难过是因为舍不得。舍不得就不愿意倾诉，连一句安慰都不想听到。身处喧嚣，皮肤以内是沉默的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>照顾好自己，爱自己才能爱好别人。如果你压抑，痛苦，忧伤，不自由，又怎么可能在心里腾出温暖的房间，让重要的人住在里面。如果一颗心千疮百孔，住在里面的人就会被雨水打湿。</p>
</blockquote>
</blockquote>
<p>◆  后记</p>
<blockquote>
<blockquote>
<p>无论你想留在哪一天，天总会亮的。
都要储存起来。在轨道尽头，一人一只耳机听到的音乐。在盛夏夜晚，顺着你的脸颊流淌到我肩膀的月光。雨水打破灯光，等待拥抱睡眠。而时间漫过鹅卵石，就快淹没我们的影子。那么都要储存起来，就算杳无音信，也能离线收听。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我们都是普通人，我们距离坚强很远，我们终究敏感脆弱，可我们坚信我们是会找到出路的。
对此永不怀疑。</p>
</blockquote>
</blockquote>
<p>◆  终点</p>
<blockquote>
<blockquote>
<p>曾经一个女孩松开我的手，要去寻找行李，寻找另外一种人生，离开时最后说的话，也是这句，张嘉佳，你要加油。
空无一人的山顶，我喝醉过，心想，多么多么爱你。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>失败的婚姻，只有表面上的对错，而当事人是知道的，里面布满了细细密密的裂痕。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>其实我们都知道，她是不用还的，我是还不起的。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>有人心心念念，有人心不在焉，转眼好几年。
世事如书，偏爱你这一句，愿做个逗号，留在你的脚边。
从你的全世界路过，翻山越岭，才翻到末篇，希望有个如你一般的人，入夜安眠。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>就像山野开出花时，栽它的孩童不知去了何方。云彩之间互不告别，第二天就是他乡。描绘着心底的痕迹，一步步落入谷底，又一步步回到原地。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/congnidequanshijieluguo.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 21 本《可复制的沟通力：樊登的 10 堂表达课》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/kefuzhidegoutongli.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/kefuzhidegoutongli.html</guid>
            <pubDate>Sat, 18 Nov 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[樊登老师认为，沟通的技巧和修自行车的手艺一样，是要学习的。光学还不够，还要练习才行。
沟通的目的是尊重与合作，而非输赢。作为中央电视台前主持人、“樊登读书”App“言值”担当，樊登老师在本书中提炼出沟通的两大原理，梳理了沟通的十个维度，系统阐述了提升沟通力的方法与技巧。
本书有两大亮点：一是知识结构化，多学科支撑，层层探明沟通机理，让你知其然更知其所以然；二是内容场景化，覆盖了90%沟通中常见的问题，让每个人都能即学即用，成为高效沟通者。]]></description>
            <content:encoded><![CDATA[<h1 id="第-21-本《可复制的沟通力-樊登的-10-堂表达课》" tabindex="-1">第 21 本《可复制的沟通力：樊登的 10 堂表达课》 <a class="header-anchor" href="#第-21-本《可复制的沟通力-樊登的-10-堂表达课》" aria-label="Permalink to &quot;第 21 本《可复制的沟通力：樊登的 10 堂表达课》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>樊登老师认为，沟通的技巧和修自行车的手艺一样，是要学习的。光学还不够，还要练习才行。</p>
<p>沟通的目的是尊重与合作，而非输赢。作为中央电视台前主持人、“樊登读书”App“言值”担当，樊登老师在本书中提炼出沟通的两大原理，梳理了沟通的十个维度，系统阐述了提升沟通力的方法与技巧。</p>
<p>本书有两大亮点：一是知识结构化，多学科支撑，层层探明沟通机理，让你知其然更知其所以然；二是内容场景化，覆盖了90%沟通中常见的问题，让每个人都能即学即用，成为高效沟通者。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>待补充点评🚀...</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/kefuzhidegoutongli.jpeg" length="0" type="image/jpeg"/>
        </item>
        <item>
            <title><![CDATA[Naive UI 组件库源码分析]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/naive-ui-source-code.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/naive-ui-source-code.html</guid>
            <pubDate>Thu, 16 Nov 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[# Naive UI 组件库源码分析
## 介绍
2023 年 11 月 14 号开始研究这个组件库源码，目的是学习一些公共组件的写法（组件设计与实现）、TypeScript写法（基本写法与类型体操）、代码优化技巧等，期待学有所成吧

GitHub 仓库：
[GitHub - tusen-ai/naive-ui: A Vue 3 Component Library. Fairly Complete. Theme Customizable. Uses TypeScript. Fast.](https://github.com/tusen-ai/naive-ui)

## 特点

1. 超过 80+ 组件，组件丰富；
2. 教程文档很全，啥配置都有说明；
3. Naive UI 支持 tree shaking，组件、语言、主题均可 tree-shaking；
4. 推荐周边使用的框架：一些推荐的宝藏 Admin  管理后台库（安排看起来）：

| **资源** | **描述** |
| ]]></description>
            <content:encoded><![CDATA[<h1 id="naive-ui-组件库源码分析" tabindex="-1">Naive UI 组件库源码分析 <a class="header-anchor" href="#naive-ui-组件库源码分析" aria-label="Permalink to &quot;Naive UI 组件库源码分析&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">&ZeroWidthSpace;</a></h2>
<p>2023 年 11 月 14 号开始研究这个组件库源码，目的是学习一些公共组件的写法（组件设计与实现）、TypeScript写法（基本写法与类型体操）、代码优化技巧等，期待学有所成吧</p>
<p>GitHub 仓库：
<a href="https://github.com/tusen-ai/naive-ui" target="_blank" rel="noreferrer">GitHub - tusen-ai/naive-ui: A Vue 3 Component Library. Fairly Complete. Theme Customizable. Uses TypeScript. Fast.</a></p>
<h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>超过 80+ 组件，组件丰富；</li>
<li>教程文档很全，啥配置都有说明；</li>
<li>Naive UI 支持 tree shaking，组件、语言、主题均可 tree-shaking；</li>
<li>推荐周边使用的框架：一些推荐的宝藏 Admin  管理后台库（安排看起来）：</li>
</ol>
<table>
<thead>
<tr>
<th><strong>资源</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/jekip/naive-ui-admin" target="_blank" rel="noreferrer">Naive UI Admin</a></td>
<td>免费开源的中后台模板</td>
</tr>
<tr>
<td><a href="https://github.com/qingqingxuan/admin-work" target="_blank" rel="noreferrer">Admin Work</a></td>
<td>一款免费开源、功能强大、方便易用、漂亮的中后台管理系统模板</td>
</tr>
<tr>
<td><a href="https://github.com/zce/fearless" target="_blank" rel="noreferrer">zce/fearless</a></td>
<td>一个基于 Vue.js 3.x &amp; TypeScript &amp; Vite 的管理平台脚手架，包含基本的身份认证和鉴权</td>
</tr>
<tr>
<td><a href="https://github.com/WalkAlone0325/tsx-naive-admin" target="_blank" rel="noreferrer">tsx-naive-admin</a></td>
<td>基于 Vue 3 + Naive UI + TSX + Vite 的后台管理基本模板</td>
</tr>
<tr>
<td><a href="https://github.com/honghuangdc/soybean-admin" target="_blank" rel="noreferrer">Soybean Admin</a></td>
<td>一个基于 Vue3 + Vite + Naive UI + TypeScript 的漂亮清爽的中后台模版</td>
</tr>
<tr>
<td><a href="https://gitee.com/dromara/go-view" target="_blank" rel="noreferrer">GoView</a></td>
<td>开源、精美、便捷的「数据可视化」低代码开发平台</td>
</tr>
<tr>
<td><a href="https://github.com/zclzone/vue-naive-admin" target="_blank" rel="noreferrer">Vue Naive Admin</a></td>
<td>基于 Vue3 + Vite4 + Pinia + Unocss + Naive UI 的轻量级后台管理模板</td>
</tr>
<tr>
<td><a href="https://github.com/kirklin/celeris-web" target="_blank" rel="noreferrer">Celeris Web</a></td>
<td>一个基于 Vue 3 和 Vite 的免费开源前端框架，具有 Naive UI 组件和 TypeScript 支持，采用 Monorepo 结构。它还集成了 OpenAI，为现代 Web 开发提供自然语言处理能力。</td>
</tr>
</tbody>
</table>
<ol start="5">
<li>推荐免费的图标库：<a href="https://www.xicons.org/#/" target="_blank" rel="noreferrer">https://www.xicons.org/#/</a></li>
</ol>
<h2 id="感受" tabindex="-1">感受 <a class="header-anchor" href="#感受" aria-label="Permalink to &quot;感受&quot;">&ZeroWidthSpace;</a></h2>
<p>不好的地方：</p>
<ol>
<li>部分函数钩子没有写注释；</li>
<li>组件 ref 实例没有写 TS 声明；</li>
<li>computed 计算属性变量没有写 TS 声明；</li>
<li>模版标签行内样式比较多；</li>
</ol>
<p>好处：</p>
<ol>
<li>组件文件写法都是统一这种格式：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'SiteHeader'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  return {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><ol start="2">
<li>css 样式写法很工整，没有嵌套写法，命令很规范；</li>
</ol>
<h2 id="组件设计与实现" tabindex="-1">组件设计与实现 <a class="header-anchor" href="#组件设计与实现" aria-label="Permalink to &quot;组件设计与实现&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>一个组件的实现目录：</li>
</ol>
<CustomImage src='/growth-record/frame/vue/naive-source-01.webp' /><p>index.ts 导出文件为：组件的 props 属性对象、props 的类型、默认组件实例内容</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 比如</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> NAlert, alertProps } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './src/Alert'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { AlertProps } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './src/Alert'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 具体值：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> alertProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">export type AlertProps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">export default </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({})</span></span></code></pre>
</div><ol>
<li>组件传入属性引用类型声明（PropType，变量赋值属性，用于类型推导）：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    clsPrefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: String,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: Boolean,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    onClear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: Function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> PropType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MouseEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span></code></pre>
</div><ol>
<li>直接解构使用对应的响应式 ref 变量：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> mergedContainerRef</span></span></code></pre>
</div><ol>
<li>watchEffect 直接监听一个方法：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> mountStyle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> finalThemeHash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> hashClassPrefix</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> hashValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> hashRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> hashRef.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> themeHash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> mergedThemeHashRef?.value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (themeHash) finalThemeHash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '-'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> themeHash</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (hashValue) finalThemeHash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '-'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> hashValue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">themeOverrides</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">builtinThemeOverrides</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> props</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (themeOverrides) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      finalThemeHash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '-'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(themeOverrides))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (builtinThemeOverrides) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      finalThemeHash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '-'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(builtinThemeOverrides))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    themeClassRef.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> finalThemeHash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    renderCallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> cssVars</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> cssVarsRef.value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> style </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> cssVars) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        style </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}: ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">cssVars</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">[</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">};`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`.${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">finalThemeHash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, style).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        id: finalThemeHash,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        ssr: ssrAdapter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      renderCallback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    mountStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span></code></pre>
</div><h2 id="tsx-写法" tabindex="-1">TSX 写法 <a class="header-anchor" href="#tsx-写法" aria-label="Permalink to &quot;TSX 写法&quot;">&ZeroWidthSpace;</a></h2>
<p>注意：使用单括号解析动态参数值</p>
<h3 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>动态解析 class 写法：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">div class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">clsPrefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}-base-clear`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 多类写法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">  `${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">clsPrefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}-base-close`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  absolute </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;&#x26;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">clsPrefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}-base-close--absolute`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  disabled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;&#x26;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">clsPrefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}-base-close--disabled`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  round </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;&#x26;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">clsPrefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}-base-close--round`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]}</span></span></code></pre>
</div><ol start="2">
<li>使用 default 函数表达式：</li>
</ol>
<div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>...&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"icon"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">clsPrefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}-base-clear__placeholder`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="3">
<li>setup 内，第一形参用不上的时候，声明使用下划线处理：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(_, { slot }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> isMountedRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useIsMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"icon-switch-transition"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> appear</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{isMountedRef.value}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    	{ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Transition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h3 id="参考实现" tabindex="-1">参考实现 <a class="header-anchor" href="#参考实现" aria-label="Permalink to &quot;参考实现&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">clsPrefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">clsPrefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}-base-clear`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">NIconSwitchTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        {{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">            key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"dismiss"</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">            class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">clsPrefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}-base-clear__clear`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">            onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.onClear}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">            onMousedown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.handleMouseDown}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">            data-clear</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            ></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">resolveSlot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$slots.icon, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">              &#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">NBaseIcon</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> clsPrefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{clsPrefix}></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                {{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">                default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">ClearIcon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">              }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">              &#x3C;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">NBaseIcon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            ])}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"icon"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">clsPrefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}-base-clear__placeholder`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$slots.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">placeholder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">?.()}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">NIconSwitchTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol>
<li>图标组件：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { h, defineComponent, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> PropType, toRef } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useStyle } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '../../../_mixins'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> style </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './styles/index.cssr'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'BaseIcon'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  props: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    role: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ariaLabel: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ariaDisabled: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      type: Boolean,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      default: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ariaHidden: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      type: Boolean,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      default: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    clsPrefix: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      type: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    onClick: Function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> PropType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MouseEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    onMousedown: Function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> PropType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MouseEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    onMouseup: Function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> PropType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MouseEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    useStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'-base-icon'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, style, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(props, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'clsPrefix'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">i</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">clsPrefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}-base-icon`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{this.onClick}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        onMousedown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{this.onMousedown}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        onMouseup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{this.onMouseup}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{this.role}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{this.ariaLabel}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">hidden</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{this.ariaHidden}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        aria</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">disabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{this.ariaDisabled}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      ></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        {</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">$slots</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><ol start="2">
<li>最简单的一个标签渲染写法：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { h, defineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'ArrowBack'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">svg xmlns</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"http://www.w3.org/2000/svg"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> viewBox</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"0 0 24 24"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">path d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"M0 0h24v24H0V0z"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> fill</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"none"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">path d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"M19 11H7.83l4.88-4.88c.39-.39.39-1.03 0-1.42-.39-.39-1.02-.39-1.41 0l-6.59 6.59c-.39.39-.39 1.02 0 1.41l6.59 6.59c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L7.83 13H19c.55 0 1-.45 1-1s-.45-1-1-1z"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      &#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">svg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><h2 id="typescript-写法" tabindex="-1">TypeScript 写法 <a class="header-anchor" href="#typescript-写法" aria-label="Permalink to &quot;TypeScript 写法&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>导入所有 API 中，针对某个 API 类型声明导入处理：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { h, defineComponent, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> PropType, toRef } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span></code></pre>
</div><ol start="2">
<li>Vue 相关常用 TS 类型声明（注意前缀 type 关键词）：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { PropType, CSSProperties, VNode, HTMLAttributes } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 或者合并跟 Vue 所有属性写法，注意 type 关键词</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  h,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  ref,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  onMounted,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  computed,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  defineComponent,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> PropType,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  toRef,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  provide,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  nextTick,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> WatchStopHandle,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> CSSProperties,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  watch,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  onBeforeUnmount,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ComponentPublicInstance,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ComputedRef,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span></code></pre>
</div><p>PropType 使用场景：用于直接赋值的变量内部声明 TS 方便类型推导：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> scrollbarProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  trigger: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type: String </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> PropType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'none'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hover'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 方便类型推导</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    default: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hover'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Scrollbar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Scrollbar'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  props: scrollbarProps, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 直接赋值给变量</span></span></code></pre>
</div><ol start="3">
<li>通过入参类型推断具体类型：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> formatLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> (</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">offset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">attachPx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FormatLengthOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span></code></pre>
</div><ol start="4">
<li>返回值类型设置运用 is：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> isDocument</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> is</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> node.nodeName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '#document'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="5">
<li>从对象映射获取指定类型的数据写法：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> SmallerSizeMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  tiny</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'mini'</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  small</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'tiny'</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  medium</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'small'</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  large</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'medium'</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  huge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'large'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> SmallerSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> SmallerSizeMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> SmallerSizeMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> smallerSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> SmallerSizeMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> SmallerSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(size){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'tiny'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'mini'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'small'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'tiny'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'medium'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'small'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'large'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'medium'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'huge'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'large'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">size</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">} has no smaller size.`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="6">
<li>获取对象对应 key 值的类型写法：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> keysOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>>(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="7">
<li>结合模板字符串使用动态的 TS 类型 key 值：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Extract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">keyof </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`internal${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><ol start="8">
<li>常量只读属性的设置：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> anchorLinkProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  title: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  href: String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span></span></code></pre>
</div><h2 id="代码优化技巧" tabindex="-1">代码优化技巧 <a class="header-anchor" href="#代码优化技巧" aria-label="Permalink to &quot;代码优化技巧&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>函数点击事件命名：handleXXX</li>
<li>findIndex 命中索引判断：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> collectionArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">findIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">collectionElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> collectionElement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> element</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">index) collectionArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(index, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div><p>find 遍历代码优化技巧：巧用解构对象形式判断值</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> showDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> vNode.dirs?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> dir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> vShow)</span></span></code></pre>
</div><ol start="3">
<li>ts/js 文件中，导出的变量或函数放在文件最底部</li>
</ol>
<CustomImage src='/growth-record/frame/vue/naive-source-02.webp' /><ol start="4">
<li>返回对象使用原来的对象变量整合 Object.assign 即可，不会产生新的变量占用空间</li>
</ol>
<CustomImage src='/growth-record/frame/vue/naive-source-03.webp' /><ol start="5">
<li>没太看懂这两行代码的作用：</li>
</ol>
<CustomImage src='/growth-record/frame/vue/naive-source-04.webp' /><h2 id="公共服务" tabindex="-1">公共服务 <a class="header-anchor" href="#公共服务" aria-label="Permalink to &quot;公共服务&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="工具或钩子" tabindex="-1">工具或钩子 <a class="header-anchor" href="#工具或钩子" aria-label="Permalink to &quot;工具或钩子&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>封装 <strong>Composables 组合式函数</strong>写法：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/** 注释说明 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> funciton useIsMobile () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  const breakpointRef = useBreakpoint()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  return useMemo(() => {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    return breakpointRef.value === 'xs'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>相关学习资料：</p>
<ul>
<li><a href="https://cn.vuejs.org/guide/reusability/composables.html" target="_blank" rel="noreferrer">组合式函数 | Vue.js</a></li>
</ul>
<p>使用方法讲解：</p>
<ul>
<li><a href="https://juejin.cn/post/7108065151013617678" target="_blank" rel="noreferrer">Vue3中的Composables组合式函数 - 掘金</a></li>
</ul>
<ol start="2">
<li>工具钩子函数 index.ts 直接将导入的函数钩子再导出写法（注意 export）：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  useInjectionCollection,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  useInjectionElementCollection,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  useInjectionInstanceCollection</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './use-collection'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useDeferredTrue } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './use-deferred-true'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useAdjustedTo } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './use-adjusted-to'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useHoudini } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './use-houdini'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useOnResize } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './use-resize'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  useLockHtmlScroll,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  lockHtmlScrollRightCompensationRef</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './use-lock-html-scroll'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useIsComposing } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './use-is-composing'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { useReactivated } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './use-reactivated'</span></span></code></pre>
</div><h2 id="有趣的-npm-插件" tabindex="-1">有趣的 npm 插件 <a class="header-anchor" href="#有趣的-npm-插件" aria-label="Permalink to &quot;有趣的 npm 插件&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>帮助 Vue3 写组合式函数的包：</li>
</ol>
<p><a href="https://www.npmjs.com/package/vooks" target="_blank" rel="noreferrer">vooks</a>
官方教程文档：<a href="https://vooks-07akioni.vercel.app/" target="_blank" rel="noreferrer">https://vooks-07akioni.vercel.app/</a></p>
<ol start="2">
<li>自动引入 API：</li>
</ol>
<p><a href="https://www.npmjs.com/package/unplugin-auto-import" target="_blank" rel="noreferrer">unplugin-auto-import</a></p>
<ol start="3">
<li>自动加载组件：插件会自动解析模版中用到组件，并导入组件</li>
</ol>
<p><a href="https://www.npmjs.com/package/unplugin-vue-components" target="_blank" rel="noreferrer">unplugin-vue-components</a></p>
<ol start="4">
<li>vueuc：<a href="https://github.com/07akioni/vueuc" target="_blank" rel="noreferrer">https://github.com/07akioni/vueuc</a></li>
</ol>
<h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>使用默认导出 naive 值和其他导出 NThemeEditor 值写法</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> naive, { NThemeEditor } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '../src/index'</span></span></code></pre>
</div><ol>
<li>当一个 ts 文件只有一个变量值时，导出也只需要一个默认变量值即可，写法：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> zhCN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> NLocale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> zhCN</span></span></code></pre>
</div><p>导入的时候，想重新定义一个变量接收写法：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> zhCN } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '...'</span></span></code></pre>
</div><ol>
<li>导入 CSS 资源文件写法，默认导入整个文件所有内容：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './styles/demo.css'</span></span></code></pre>
</div><ol>
<li>函数依赖注入写法（自给自足）：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> i18n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> localeReactive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'i18n'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    locale: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(localeReactive, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'locale'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">locale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> localeReactive</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> data[locale][key]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">i18n.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">provide</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">localeRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> localeReactive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    localeReactive.locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> localeRef.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'i18n'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, localeReactive)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>官方文档：
<a href="https://cn.vuejs.org/api/composition-api-dependency-injection.html#inject" target="_blank" rel="noreferrer">组合式 API：依赖注入 | Vue.js</a></p>
<ol start="5">
<li>路由文件设置，国际化设置</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'enComponents'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/en-US/:theme/components'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'../pages/Layout.vue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: enComponentRoutes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'zhComponents'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/zh-CN/:theme/components'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'../pages/Layout.vue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: zhComponentRoutes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'not-found'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/:pathMatch(.*)*'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    redirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'home'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: navigator.language </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'zh-CN'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'zh-CN'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'en-US'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        theme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'os-theme'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span></code></pre>
</div><ol start="6">
<li>computed get/set 重写监听对象发生变化修改另一个值的写法：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// display mode</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> _displayModeRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(window.localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'mode'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'debug'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> displayModeRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> _displayModeRef.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    _displayModeRef.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 同时修改某个值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    window.localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'mode'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 24 本《Vue.js 设计与实现》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/vueshejiyushixian.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/vueshejiyushixian.html</guid>
            <pubDate>Sun, 12 Nov 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[本书基于 Vue.js 3，从规范出发，以源码为基础，并结合大量直观的配图，循序渐进地讲解Vue.js 中各个功能模块的实现，细致剖析框架设计原理。全书共 18 章，分为六篇，主要内容包括：框架设计概览、响应系统、渲染器、组件化、编译器和服务端渲染等。通过阅读本书，对 Vue.js 2/3 具有上手经验的开发人员能够进一步理解 Vue.js 框架的实现细节，没有Vue.js 使用经验但对框架设计感兴趣的前端开发人员，能够快速掌握 Vue.js 的设计原理]]></description>
            <content:encoded><![CDATA[<h1 id="第-24-本《vue-js-设计与实现》" tabindex="-1">第 24 本《Vue.js 设计与实现》 <a class="header-anchor" href="#第-24-本《vue-js-设计与实现》" aria-label="Permalink to &quot;第 24 本《Vue.js 设计与实现》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>本书基于 Vue.js 3，从规范出发，以源码为基础，并结合大量直观的配图，循序渐进地讲解Vue.js 中各个功能模块的实现，细致剖析框架设计原理。全书共 18 章，分为六篇，主要内容包括：框架设计概览、响应系统、渲染器、组件化、编译器和服务端渲染等。通过阅读本书，对 Vue.js 2/3 具有上手经验的开发人员能够进一步理解 Vue.js 框架的实现细节，没有Vue.js 使用经验但对框架设计感兴趣的前端开发人员，能够快速掌握 Vue.js 的设计原理</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《Vue.js设计与实现》
霍春阳著
83个笔记</p>
<p>◆  点评</p>
<p>2023/11/12 认为好看
真的很不错的一本技术书📗，作者引用到很多框架源码跟实践理论一起讲解，基本每行代码都有注释，深入浅出，娓娓道来，基本都能看懂，学习起来特别印象深刻。看完了脑子里回想起来还能理解整个框架的设计与原理，特别是一些代码，因为我也琢磨了比较久去研究为啥要这么做🤔
工作中用了几年了这个框架，但是对框架底层的设计与原理了解甚少，平时接触一些技术博客和官方文档而已，刚好有一本书可以讲解学习。从第一篇框架设计到第四篇组件化的讲解，不仅从高纬度了解一个架构层面的设计与演进，还可以从底层学习了解响应式系统的方案实现过程、渲染器设计中 Diff 算法优化过程、组件的实现原理等很细节的技术知识，让我对这个框架有了更深的了解。代码也涉及到了一些算法的讲解学习，比如最长子序列、递归下降算法等，第五篇编译器和服务端渲染接触和使用比较少，看起来有点费劲，可能对这方面的知识掌握的不多吧，后续还得加强学习才是
总的来说，对 Vue3 框架有了更深的学习和对一个框架的设计与实现有了了解，收获满满，做了很多笔记学习，不过也有一些理解不到位的，因为自身能力有限问题，对一些代码原理设计衔接理解不是很透彻。但也激发了我想看框架源码的欲望，可以对着这本书一起再学习一遍，也期待这本书可以再看一遍，说不定会有不一样的学习收获呢</p>
<p>◆  前言</p>
<p>2023/7/29 发表想法
学习一门新的框架、技术、编程语言等，首先了解其设计思想，不仅可以帮助我们体会到作者创作的设计灵感过程，也能激发自己去想想为啥作者要这样设计，有什么好处呢等问题。可以更深刻的了解这个东西的全貌及学习底层的原理，对解决问题能力有非常好的提升和有机会让自己去组织设计一个新东西的时候，也许会有很多借鉴的思想吧</p>
<blockquote>
<blockquote>
<p>理解 Vue.js 3.0 的核心设计思想非常重要。它不仅能够让我们更加从容地面对复杂问题，还能够指导我们在其他领域进行架构设计。</p>
</blockquote>
</blockquote>
<p>◆  第一篇 框架设计概览</p>
<p>2023/7/29 发表想法
不识庐山真面目，只缘身在此山中。对框架有一个全局的视角很重要，由上至下，由浅入深</p>
<blockquote>
<blockquote>
<p>作为学习者，我们在学习框架的时候，也应该从全局的角度对框架的设计拥有清晰的认知，否则很容易被细节困住，看不清全貌。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>涉及 DOM 的运算要远比JavaScript 层面的计算性能差</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>innerHTML 创建页面的性能：HTML 字符串拼接的计算量 + innerHTML 的DOM 计算量</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>使用 innerHTML 更新页面的过程是重新构建 HTML 字符串，再重新设置 DOM 元素的 innerHTML 属性</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Vue.js 3 是一个编译时 + 运行时的框架，它在保持灵活性的基础上，还能够通过编译手段分析用户提供的内容，从而进一步提升更新性能。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在开发环境中为用户提供友好的警告信息的同时，不会增加生产环境代码的体积</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>实现 Tree-Shaking，必须满足一个条件，即模块必须是 ESM（ES Module），因为 Tree-Shaking 依赖 ESM 的静态结构</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Tree-Shaking 中的第二个关键点——副作用。如果一个函数调用会产生副作用，那么就不能将其移除。什么是副作用？简单地说，副作用就是，当调用函数的时候会对外部产生影响，例如修改了全局变量</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>ESM 格式的资源有两种：用于浏览器的 esm-browser.js 和用于打包工具的 esm-bundler.js。它们的区别在于对预定义常量 <strong>DEV</strong> 的处理，前者直接将 <strong>DEV</strong> 常量替换为字面量 true 或 false，后者则将 <strong>DEV</strong> 常量替换为 process.env.NODE_ENV !=='production' 语句</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Vue.js 3 是一个声明式的 UI 框架，意思是说用户在使用 Vue.js 3 开发页面时是声明式地描述 UI 的</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>使用 JavaScript 对象来描述 UI 的方式，其实就是所谓的虚拟 DOM</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Vue.js 3 除了支持使用模板描述 UI 外，还支持使用虚拟 DOM 描述 UI。其实我们在 Vue.js 组件中手写的渲染函数就是使用虚拟 DOM 来描述 UI 的</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>其实 h 函数的返回值就是一个对象，其作用是让我们编写虚拟 DOM 变得更加轻松</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>h 函数就是一个辅助创建虚拟 DOM 的工具函数，仅此而已</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>渲染器的作用就是把虚拟 DOM 渲染为真实 DOM</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>渲染器的精髓都在更新节点的阶段</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>组件就是一组 DOM 元素的封装</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>编译器的作用其实就是将模板编译为渲染函数</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>对于编译器来说，模板就是一个普通的字符串，它会分析该字符串并生成一个功能与之相同的渲染函数</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>无论是使用模板还是直接手写渲染函数，对于一个组件来说，它要渲染的内容最终都是通过渲染函数产生的，然后渲染器再把渲染函数返回的虚拟 DOM 渲染为真实 DOM，这就是模板的工作原理，也是 Vue.js 渲染页面的流程</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>组件的实现依赖于渲染器，模板的编译依赖于编译器</p>
</blockquote>
</blockquote>
<p>◆  第二篇 响应系统</p>
<blockquote>
<blockquote>
<p>WeakMap 经常用于存储那些只有当 key 所引用的对象存在时（没有被回收）才有价值的信息</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在 Vue.js 中，watch 函数的回调函数接收第三个参数 onInvalidate，它是一个函数，类似于事件监听器，我们可以使用 onInvalidate 函数注册一个回调，这个回调函数会在当前副作用函数过期时执行</p>
</blockquote>
</blockquote>
<p>2023/8/19 发表想法
这一章中有非常多的干货，我看完都还没好好消化，主要把响应式数据底层原理讲解很透彻，自己也跟着作者举例写的代码，照猫画虎跟着做了一遍，但对整体的设计及思路需要慢慢琢磨一下。其中，副作用函数的运用及响应式数据的应用，包括 computed/watch 等的设计实现，让我印象深刻。作者也提到开发遇到的几个问题，比如 Set 数据遍历问题，watch 竞态问题等，让我对响应式数据的设计有更好的理解，特别是作者画的响应式数据结构关系图：WeakMap 配合 Map，Map 与 Set 之间的依赖关系，特别喜欢，让我对响应式数据结构有更好的理解和学习</p>
<blockquote>
<blockquote>
<p>在本章中，我们首先介绍了副作用函数和响应式数据的概念，以及它们之间的关系。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一个响应式数据最基本的实现依赖于对“读取”和“设置”操作的拦截，从而在副作用函数与响应式数据之间建立联系。当“读取”操作发生时，我们将当前执行的副作用函数存储到“桶”中；当“设置”操作发生时，再将副作用函数从“桶”里取出并执行。这就是响应系统的根本实现原理。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我们还遇到了遍历 Set 数据结构导致无限循环的新问题，该问题产生的原因可以从ECMA 规范中得知，即“在调用 forEach 遍历 Set 集合时，如果一个值已经被访问过了，但这个值被删除并重新添加到集合，如果此时 forEach 遍历没有结束，那么这个值会重新被访问。”解决方案是建立一个新的 Set 数据结构用来遍历。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>响应系统的可调度性。所谓可调度，指的是当 trigger 动作触发副作用函数重新执行时，有能力决定副作用函数执行的时机、次数以及方式。为了实现调度能力，我们为 effect 函数增加了第二个选项参数，可以通过 scheduler 选项指定调用器，这样用户可以通过调度器自行完成任务的调度。我们还讲解了如何通过调度器实现任务去重，即通过一个微任务队列对任务进行缓存，从而实现去重。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>计算属性实际上是一个懒执行的副作用函数，我们通过 lazy 选项使得副作用函数可以懒执行。被标记为懒执行的副作用函数可以通过手动方式让其执行。利用这个特点，我们设计了计算属性，当读取计算属性的值时，只需要手动执行副作用函数即可。当计算属性依赖的响应式数据发生变化时，会通过 scheduler 将 dirty 标记设置为 true，代表“脏”。这样，下次读取计算属性的值时，我们会重新计算真正的值。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>watch 的实现原理。它本质上利用了副作用函数重新执行时的可调度性。一个 watch 本身会创建一个 effect，当这个 effect 依赖的响应式数据发生变化时，会执行该 effect 的调度器函数，即 scheduler</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>过期的副作用函数，它会导致竞态问题。为了解决这个问题，Vue.js 为 watch 的回调函数设计了第三个参数，即 onInvalidate。它是一个函数，用来注册过期回调。每当 watch 的回调函数执行之前，会优先执行用户通过onInvalidate 注册的过期回调。这样，用户就有机会在过期回调中将上一次的副作用标记为“过期”，从而解决竞态问题。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>什么是 Proxy 呢？简单地说，使用 Proxy 可以创建一个代理对象。它能够实现对其他对象的代理，这里的关键词是其他对象，也就是说，Proxy 只能代理对象，无法代理非对象值，例如字符串、布尔值等。那么，代理指的是什么呢？所谓代理，指的是对一个对象基本语义的代理。它允许我们拦截并重新定义对一个对象的基本操作</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>实际上，根据ECMAScript 规范，在 JavaScript 中有两种对象，其中一种叫作常规对象（ordinary object），另一种叫作异质对象（exotic object）</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在ECMAScript 规范中使用 [[xxx]] 来代表内部方法或内部槽</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如何区分一个对象是普通对象还是函数呢？一个对象在什么情况下才能作为函数调用呢？答案是，通过内部方法和内部槽来区分对象，例如函数对象会部署内部方法 [[Call]]，而普通对象则不会</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>，Map 和 Set 这两个数据类型的操作方法相似。它们之间最大的不同体现在，Set 类型使用 add(value) 方法添加元素，而 Map 类型使用set(key, value) 方法设置键值对，并且 Map 类型可以使用 get(key) 方法读取相应的值</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>可迭代协议指的是一个对象实现了 Symbol.iterator 方法，而迭代器协议指的是一个对象实现了 next 方法。但一个对象可以同时实现可迭代协议和迭代器协议</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>ref 本质上是一个“包裹对象”。因为JavaScript 的 Proxy 无法提供对原始值的代理，所以我们需要使用一层对象作为包裹，间接实现原始值的响应式方案。由于“包裹对象”本质上与普通对象没有任何区别，因此为了区分 ref 与普通响应式对象，我们还为“包裹对象”定义了一个值为true 的属性，即 __v_isRef，用它作为 ref 的标识</p>
</blockquote>
</blockquote>
<p>◆  第三篇 渲染器</p>
<blockquote>
<blockquote>
<p>渲染器的作用是把虚拟DOM 渲染为特定平台上的真实元素。在浏览器平台上，渲染器会把虚拟 DOM 渲染为真实 DOM 元素</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>虚拟 DOM 和真实 DOM 的结构一样，都是由一个个节点组成的树型结构。所以，我们经常能听到“虚拟节点”这样的词，即 virtual node，有时会简写成 vnode。虚拟 DOM 是树型结构，这棵树中的任何一个 vnode 节点都可以是一棵子树，因此 vnode 和vdom 有时可以替换使用</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>渲染器把虚拟 DOM 节点渲染为真实 DOM 节点的过程叫作挂载，通常用英文mount 来表达</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>没有选择使用 setAttribute 函数，而是直接将属性设置在DOM 对象上，即 el[key] = vnode.props[key]。实际上，无论是使用 setAttribute 函数，还是直接操作 DOM 对象，都存在缺陷</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>DOM Properties 与 HTML Attributes 的名字不总是一模一样的</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在浏览器中为一个元素设置 class 有三种方式，即使用 setAttribute、el.className 或el.classList</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>el.className 的性能最优</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>屏蔽所有绑定时间晚于事件触发时间的事件处理函数的执行</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Vue.js 3 是如何用vnode 来描述多根节点模板的呢？答案是，使用 Fragment</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>渲染Fragment 与渲染普通元素的区别在于，Fragment 本身并不渲染任何内容，所以只需要处理它的子节点即可</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>当新旧 vnode 的子节点都是一组节点时，为了以最小的性能开销完成更新操作，需要比较两组子节点，用于比较的算法就叫作 Diff 算法</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>key 属性就像虚拟节点的“身份证”号，只要两个虚拟节点的 type 属性值和 key 属性值都相同，那么我们就认为它们是相同的，即可以进行 DOM 的复用</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在旧 children 中寻找具有相同 key 值节点的过程中，遇到的最大索引值。如果在后续寻找的过程中，存在索引值比当前遇到的最大索引值还要小的节点，则意味着该节点需要移动</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Diff 算法用来计算两组子节点的差异，并试图最大程度地复用 DOM 元素</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>简单 Diff 算法的核心逻辑是，拿新的一组子节点中的节点去旧的一组子节点中寻找可复用的节点。如果找到了，则记录该节点的位置索引。我们把这个位置索引称为最大索引。在整个更新过程中，如果一个节点的索引值小于最大索引，则说明该节点对应的真实DOM 元素需要移动</p>
</blockquote>
</blockquote>
<p>2023/10/31 发表想法
双端 Diff 算法确实对性能优化提升了很多。作者也讲解很通俗易懂，用到了很多图形说明算法执行的流程。加深了我对这一块的了解，也激发了我想看源码的动机。之前也有刷过类似的算法题目，可能对原理不熟悉，看这一部分的时候有点似曾相识的感觉。所以说学号算法还是对编程思维有很大好处的，学好之后，说不定就有场景可以用上了呢</p>
<blockquote>
<blockquote>
<p>双端 Diff 算法指的是，在新旧两组子节点的四个端点之间分别进行比较，并试图找到可复用的节点。相比简单 Diff 算法，双端 Diff 算法的优势在于，对于同样的更新场景，执行的DOM 移动操作次数更少</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>双端 Diff 算法指的是，在新旧两组子节点的四个端点之间分别进行比较，并试图找到可复用的节点。相比简单 Diff 算法，双端 Diff 算法的优势在于，对于同样的更新场景，执行的DOM 移动操作次数更少</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>什么是一个序列的递增子序列。简单来说，给定一个数值序列，找到它的一个子序列，并且该子序列中的值是递增的，子序列中的元素在原序列中不一定连续。一个序列可能有很多个递增子序列，其中最长的那一个就称为最长递增子序列。举个例子，假设给定数值序列 [ 0, 8, 4, 12 ]，那么它的最长递增子序列就是 [0, 8,12]。当然，对于同一个数值序列来说，它的最长递增子序列可能有多个，例如 [0,4, 12] 也是本例的答案之一</p>
</blockquote>
</blockquote>
<p>◆  第四篇 组件化</p>
<blockquote>
<blockquote>
<p>setup 函数主要用于配合组合式 API，为用户提供一个地方，用于建立组合逻辑、创建响应式数据、创建通用函数、注册生命周期钩子等能力</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>setup 函数的返回值可以是两种类型，如果返回函数，则将该函数作为组件的渲染函数；如果返回数据对象，则将该对象暴露到渲染上下文中</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在异步组件中，“异步”二字指的是，以异步的方式加载并渲染一个组件</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>函数式组件允许使用一个普通函数定义组件，并使用该函数的返回值作为组件要渲染的内容。函数式组件的特点是：无状态、编写简单且直观</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在 Vue.js 3 中使用函数式组件，主要是因为它的简单性，而不是因为它的性能好。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一个函数式组件本质上就是一个普通函数，该函数的返回值是虚拟 DOM</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>因为对于函数式组件来说，它无须初始化 data 以及生命周期钩子。从这一点可以看出，函数式组件的初始化性能消耗小于有状态组件</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>KeepAlive 组件的实现需要渲染器层面的支持。这是因为被 KeepAlive 的组件在卸载时，我们不能真的将其卸载，否则就无法维持组件的当前状态了。正确的做法是，将被 KeepAlive 的组件从原容器搬运到另外一个隐藏的容器中，实现“假卸载”。当被搬运到隐藏容器中的组件需要再次被“挂载”时，我们也不能执行真正的挂载逻辑，而应该把该组件从隐藏容器中再搬运到原容器。这个过程对应到组件的生命周期，其实就是 activated 和 deactivated</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>KeepAlive 组件、Teleport 组件和 Transition 组件。它们的共同特点是，与渲染器的结合非常紧密，因此需要框架提供底层的实现与支持</p>
</blockquote>
</blockquote>
<p>◆  第五篇 编译器</p>
<blockquote>
<blockquote>
<p>编译器将源代码翻译为目标代码的过程叫作编译（compile）</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>完整的编译过程通常包含词法分析、语法分析、语义分析、中间代码生成、优化、目标代码生成等步骤</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Vue.js 模板编译器会首先对模板进行词法分析和语法分析，得到模板 AST。接着，将模板AST 转换（transform）成 JavaScript AST。最后，根据 JavaScript AST 生成JavaScript 代码，即渲染函数代码</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>你可能或多或少听说过关于 Context（上下文）的内容，我们可以把 Context 看作程序在某个范围内的“全局变量”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在编写 Vue.js 应用时，我们也可以通过 provide/inject 等能力，向一整棵组件树提供数据。这些数据可以称为上下文</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>解析器本质上是一个状态机</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在Vue.js 模板中，文本节点所包含的 HTML 实体不会被浏览器解析</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>文本插值是 Vue.js 模板中用来渲染动态数据的常用方法</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>默认情况下，插值以字符串 {{ 开头,并以字符串 }} 结尾。我们通常将这两个特殊的字符串称为定界符。定界符中间的内容可以是任意合法的 JavaScript 表达式</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>编译优化指的是编译器将模板编译为渲染函数的过程中，尽可能多地提取关键信息，并以此指导生成最优代码的过程</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Vue.js 3 的编译器会将编译时得到的关键信息“附着”在它生成的虚拟 DOM 上，这些信息会通过虚拟 DOM 传递给渲染器。最终，渲染器会根据这些关键信息执行“快捷路径”，从而提升运行时的性能</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>静态提升。它能够减少更新时创建虚拟 DOM 带来的性能开销和内存占用</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Vue.js 3 还提出了 Block 的概念，一个 Block 本质上也是一个虚拟节点，但与普通虚拟节点相比，会多出一个 dynamicChildren 数组</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>静态提升：能够减少更新时创建虚拟 DOM 带来的性能开销和内存占用</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>预字符串化：在静态提升的基础上，对静态节点进行字符串化。这样做能够减少创建虚拟节点产生的性能开销以及内存占用。● 缓存内联事件处理函数：避免造成不必要的组件更新。● v-once 指令：缓存全部或部分虚拟节点，能够避免组件更新时重新创建虚拟DOM 带来的性能开销，也可以避免无用的 Diff 操作</p>
</blockquote>
</blockquote>
<p>◆  第六篇 服务端渲染</p>
<blockquote>
<blockquote>
<p>客户端渲染（client-side rendering，CSR），以及服务端渲染（server-side rendering，SSR）</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>所谓快照，指的是在当前数据状态下页面应该呈现的内容</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/vueshejiyushixian.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 23 本《半小时漫画世界名著（全 3 册）》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/banxiaoshimanhuashijiemingzhu.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/banxiaoshimanhuashijiemingzhu.html</guid>
            <pubDate>Fri, 10 Nov 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[孩子不爱读名著，原因有三：字太多；情节太复杂；不知道作者想要表达啥。陈磊（笔名：混子哥）领衔的半小时漫画团队，通过诙谐语言和手绘漫画，不仅让砖头一样厚的名著瞬间变得轻松有趣，还能给孩子讲透名著背后的历史、社会、思想、人性。 《简•爱》实际上是一个孤女的逆袭之路。 《格列佛游记》本质上是一部对英国现实社会的辛辣讽刺剧； 《老人与海》本质上是硬汉老头儿的四次不认命故事。 …… 翻开本书，一个半小时了解24部世界名著的精华，像追剧一样追完《简•爱》《小王子》《老人与海》《堂吉诃德》《哈姆雷特》《悲惨世界》《海底两万里》《战争与和平》《钢铁是怎样炼成的》《鲁滨孙漂流记》《汤姆•索亚历险记》……]]></description>
            <content:encoded><![CDATA[<h1 id="第-23-本《半小时漫画世界名著-全-3-册-》" tabindex="-1">第 23 本《半小时漫画世界名著（全 3 册）》 <a class="header-anchor" href="#第-23-本《半小时漫画世界名著-全-3-册-》" aria-label="Permalink to &quot;第 23 本《半小时漫画世界名著（全 3 册）》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>孩子不爱读名著，原因有三：字太多；情节太复杂；不知道作者想要表达啥。陈磊（笔名：混子哥）领衔的半小时漫画团队，通过诙谐语言和手绘漫画，不仅让砖头一样厚的名著瞬间变得轻松有趣，还能给孩子讲透名著背后的历史、社会、思想、人性。</p>
<p>《简•爱》实际上是一个孤女的逆袭之路。</p>
<p>《格列佛游记》本质上是一部对英国现实社会的辛辣讽刺剧；</p>
<p>《老人与海》本质上是硬汉老头儿的四次不认命故事。
……</p>
<p>翻开本书，一个半小时了解24部世界名著的精华，像追剧一样追完《简•爱》《小王子》《老人与海》《堂吉诃德》《哈姆雷特》《悲惨世界》《海底两万里》《战争与和平》《钢铁是怎样炼成的》《鲁滨孙漂流记》《汤姆•索亚历险记》……</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《半小时漫画世界名著（全3册）》
陈磊•半小时漫画团队
8个笔记</p>
<p>◆  点评</p>
<p>2023/11/10 认为好看
很轻松的阅读名著，理清了很多故事情节人物关系，学到了很多</p>
<p>◆  半小时漫画世界名著</p>
<blockquote>
<blockquote>
<p>每本名著的背后，都是一段厚重的历史。而所有名著加起来，就是一整段世界文明的发展史。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>读历史，知作者，解深意；
捋关系，巧记忆，知情节；
多总结，常分析，懂人性。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>地狱象征着现实，用来惩罚罪人的灵魂。炼狱是用来赎罪的，获得进天堂的资格。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>4月23日是世界读书日，选择这一天的原因之一，就是因为它是莎士比亚的诞辰。而且，莎士比亚去世的日子也是4月23日，可以说是一个神奇的巧合。</p>
</blockquote>
</blockquote>
<p>◆  半小时漫画世界名著.3</p>
<p>2023/11/2 发表想法
生存法则这样，没得选。但也要适应，不要成为金钱的奴隶就好了</p>
<blockquote>
<blockquote>
<p>最终异化为一个个只为赚钱而存在的“工具人”。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>最终异化为一个个只为赚钱而存在的“工具人”。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人就是机器和工具，一旦失去利用价值，就会被彻底地抛弃。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/banxiaoshimanhuashijiemingzhu.jpeg" length="0" type="image/jpeg"/>
        </item>
        <item>
            <title><![CDATA[TypeScript 常用总结]]></title>
            <link>https://super456.github.io/posts/growth-record/base/javascript/typescript-common-summary.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/javascript/typescript-common-summary.html</guid>
            <pubDate>Thu, 02 Nov 2023 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="typescript-常用总结" tabindex="-1">TypeScript 常用总结 <a class="header-anchor" href="#typescript-常用总结" aria-label="Permalink to &quot;TypeScript 常用总结&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="一、学习路径" tabindex="-1">一、学习路径 <a class="header-anchor" href="#一、学习路径" aria-label="Permalink to &quot;一、学习路径&quot;">&ZeroWidthSpace;</a></h2>
<p>入门、进阶、探索</p>
<h4 id="_1、各个阶段的界定-以及对应的进阶路径" tabindex="-1">1、各个阶段的界定，以及对应的进阶路径 <a class="header-anchor" href="#_1、各个阶段的界定-以及对应的进阶路径" aria-label="Permalink to &quot;1、各个阶段的界定，以及对应的进阶路径&quot;">&ZeroWidthSpace;</a></h4>
<h4 id="_2、社区工具类型库" tabindex="-1">2、社区工具类型库： <a class="header-anchor" href="#_2、社区工具类型库" aria-label="Permalink to &quot;2、社区工具类型库：&quot;">&ZeroWidthSpace;</a></h4>
<p>type-fest、utility-types、type-zoo</p>
<h4 id="_3、类型练习" tabindex="-1">3、类型练习 <a class="header-anchor" href="#_3、类型练习" aria-label="Permalink to &quot;3、类型练习&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li><a href="https://github.com/type-challenges/type-challenges/blob/master/README.zh-CN.md" target="_blank" rel="noreferrer">type-challenge</a></li>
<li><a href="https://www.typescriptlang.org/play" target="_blank" rel="noreferrer">TS Playground - An online editor for exploring TypeScript and JavaScript</a></li>
</ul>
<h2 id="二、第三方库引用" tabindex="-1">二、第三方库引用 <a class="header-anchor" href="#二、第三方库引用" aria-label="Permalink to &quot;二、第三方库引用&quot;">&ZeroWidthSpace;</a></h2>
<h4 id="_1、官方支持" tabindex="-1">1、官方支持 <a class="header-anchor" href="#_1、官方支持" aria-label="Permalink to &quot;1、官方支持&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li><a href="https://www.typescriptlang.org/dt/search?search=" target="_blank" rel="noreferrer">type search</a></li>
<li>npm 搜 @types/xxx</li>
</ul>
<h4 id="_2、手动声明库" tabindex="-1">2、手动声明库 <a class="header-anchor" href="#_2、手动声明库" aria-label="Permalink to &quot;2、手动声明库&quot;">&ZeroWidthSpace;</a></h4>
<p>1、types/xxx.d.ts
2、declare module 'xxx'</p>
<h2 id="学习资料" tabindex="-1">学习资料 <a class="header-anchor" href="#学习资料" aria-label="Permalink to &quot;学习资料&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://juejin.cn/post/6844904184894980104?searchId=20240420113831367239CEE57D1BF530CE" target="_blank" rel="noreferrer">⼀⽂读懂 TypeScript 泛型及应⽤( 7.8K字)</a></li>
<li><a href="https://juejin.cn/post/7058868160706904078" target="_blank" rel="noreferrer">如何在项目中用好 TypeScript 🤔 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6844903939079405576" target="_blank" rel="noreferrer">Vue3.0之前你必须知道的TypeScript实战技巧 - 掘金</a></li>
<li><a href="https://www.designcise.com/web/tutorial/what-is-the-correct-typescript-return-type-for-javascripts-settimeout-function#using-number-as-the-return-type" target="_blank" rel="noreferrer">What’s the Correct TypeScript Return Type for setTimeout()?</a></li>
<li><a href="https://mp.weixin.qq.com/s/i3OjJQ_PVGMCeeRgUFoPpA" target="_blank" rel="noreferrer">类型体操的9种类型运算、4种类型套路总结</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[TypeScript 面试知识点]]></title>
            <link>https://super456.github.io/posts/growth-record/base/javascript/typescript-interview.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/javascript/typescript-interview.html</guid>
            <pubDate>Thu, 02 Nov 2023 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="typescript-面试知识点" tabindex="-1">TypeScript 面试知识点 <a class="header-anchor" href="#typescript-面试知识点" aria-label="Permalink to &quot;TypeScript 面试知识点&quot;">&ZeroWidthSpace;</a></h1>
<h3 id="一、知识考察" tabindex="-1">一、知识考察 <a class="header-anchor" href="#一、知识考察" aria-label="Permalink to &quot;一、知识考察&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="_1、基础" tabindex="-1">1、基础 <a class="header-anchor" href="#_1、基础" aria-label="Permalink to &quot;1、基础&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>基础类型</li>
<li>高级类型（交叉类型、联合类型、字面量类型、索引类型、映射类型、条件类型）</li>
<li>枚举</li>
<li>函数</li>
<li>接口</li>
<li>类</li>
<li>泛型</li>
<li>类型检查（类型断言、类型推断、类型兼容、类型保护）</li>
<li>interface 与 type 区别</li>
<li>声明文件</li>
<li>重载</li>
</ul>
<h4 id="_2、进阶" tabindex="-1">2、进阶 <a class="header-anchor" href="#_2、进阶" aria-label="Permalink to &quot;2、进阶&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>模块</li>
<li>命名空间</li>
<li>声明合并</li>
<li>声明文件</li>
<li>编译工具</li>
<li>编译配置</li>
<li>检查工具</li>
<li>单元测试</li>
</ul>
<h4 id="_3、真题" tabindex="-1">3、真题 <a class="header-anchor" href="#_3、真题" aria-label="Permalink to &quot;3、真题&quot;">&ZeroWidthSpace;</a></h4>
<h3 id="二、加分项" tabindex="-1">二、加分项 <a class="header-anchor" href="#二、加分项" aria-label="Permalink to &quot;二、加分项&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="_1、原理" tabindex="-1">1、原理 <a class="header-anchor" href="#_1、原理" aria-label="Permalink to &quot;1、原理&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>TSC 编译原理（抽象语法树、扫描器、解析器、绑定器、检查器、发射器）</li>
</ul>
<h3 id="三、项目亮点" tabindex="-1">三、项目亮点 <a class="header-anchor" href="#三、项目亮点" aria-label="Permalink to &quot;三、项目亮点&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="_1、实战" tabindex="-1">1、实战 <a class="header-anchor" href="#_1、实战" aria-label="Permalink to &quot;1、实战&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>TypeScript 的项目实践经验</li>
</ul>
<h4 id="_2、真题" tabindex="-1">2、真题 <a class="header-anchor" href="#_2、真题" aria-label="Permalink to &quot;2、真题&quot;">&ZeroWidthSpace;</a></h4>
<h3 id="四、个人学习" tabindex="-1">四、个人学习 <a class="header-anchor" href="#四、个人学习" aria-label="Permalink to &quot;四、个人学习&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>如何让你的 TS 水平超越要求</li>
</ul>
<h3 id="五、参考资料" tabindex="-1">五、参考资料 <a class="header-anchor" href="#五、参考资料" aria-label="Permalink to &quot;五、参考资料&quot;">&ZeroWidthSpace;</a></h3>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[TypeScript 学习笔记]]></title>
            <link>https://super456.github.io/posts/growth-record/base/javascript/typescript-study.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/javascript/typescript-study.html</guid>
            <pubDate>Thu, 02 Nov 2023 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="typescript-学习笔记ts" tabindex="-1">TypeScript 学习笔记ts <a class="header-anchor" href="#typescript-学习笔记ts" aria-label="Permalink to &quot;TypeScript 学习笔记ts&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="语言介绍" tabindex="-1">语言介绍 <a class="header-anchor" href="#语言介绍" aria-label="Permalink to &quot;语言介绍&quot;">&ZeroWidthSpace;</a></h2>
<p>TypeScript 与 JavaScript 发展史：</p>
<CustomImage src='/growth-record/base/javascript/tsstudy03.webp' /><p>TypeScript 与 JavaScript 对比：</p>
<CustomImage src='/growth-record/base/javascript/tsstudy04.webp' /><p>类型的概念：类型就是人为添加的一种编程约束和用户提示</p>
<p>运行时做的叫做<strong>动态类型检查</strong>，运行之前的编译期做的叫做<strong>静态类型检查</strong></p>
<p>动态类型检查：源码中不保留类型信息，对某个变量赋什么值、做什么操作都是允许的，写代码很灵活，但有类型不安全隐患，⽐如对 string 做了乘除，对 Date 对象调⽤了 exec ⽅法，这些都是运⾏时才能检查出来的错误</p>
<p>静态类型的优点：</p>
<ul>
<li>有利于代码的静态分析；</li>
<li>有利于发现错误；</li>
<li>IDE 支持；</li>
<li>提供代码文档；</li>
<li>有利于重构代码；</li>
</ul>
<p>静态类型的缺点：</p>
<ul>
<li>丧失代码灵活性；</li>
<li>增加编程工作量；</li>
<li>更高的学习成本；</li>
<li>引入独立的编译步骤；</li>
<li>兼容性问题；</li>
</ul>
<CustomImage src='/growth-record/base/javascript/tsstudy05.webp' /><h2 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="类型声明" tabindex="-1">类型声明 <a class="header-anchor" href="#类型声明" aria-label="Permalink to &quot;类型声明&quot;">&ZeroWidthSpace;</a></h3>
<p>TypeScript 规定，变量只有赋值后才能使用，否则就会报错</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(x) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><h3 id="类型推断" tabindex="-1">类型推断 <a class="header-anchor" href="#类型推断" aria-label="Permalink to &quot;类型推断&quot;">&ZeroWidthSpace;</a></h3>
<p>类型声明不是必须的，如果没有，TypeScript 会自己推断类型</p>
<h3 id="编译" tabindex="-1">编译 <a class="header-anchor" href="#编译" aria-label="Permalink to &quot;编译&quot;">&ZeroWidthSpace;</a></h3>
<p>JavaScript 的运行环境（浏览器和 Node.js）不认识 TypeScript 代码。所以，TypeScript 项目要想运行，必须先转为 JavaScript 代码，这个代码转换的过程就叫做“编译”（compile）</p>
<ul>
<li>官方提供编译器；</li>
<li>类型检查只是编译时的类型检查，而不是运行时的类型检查；</li>
<li>一旦代码编译为 JavaScript，运行时就不再检查类型；</li>
</ul>
<h3 id="值与类型" tabindex="-1">值与类型 <a class="header-anchor" href="#值与类型" aria-label="Permalink to &quot;值与类型&quot;">&ZeroWidthSpace;</a></h3>
<p>TypeScript 代码只涉及类型，不涉及值。所有跟“值”相关的处理，都由 JavaScript 完成</p>
<p><strong>TypeScript 项目里面，其实存在两种代码，一种是底层的“值代码”，另一种是上层的“类型代码”。前者使用 JavaScript 语法，后者使用 TypeScript 的类型语法</strong>
它们是可以分离的，TypeScript 的编译过程，实际上就是把 <strong>“类型代码”全部拿掉</strong>，只保留“值代码”</p>
<h3 id="typescript-playground" tabindex="-1">TypeScript Playground <a class="header-anchor" href="#typescript-playground" aria-label="Permalink to &quot;TypeScript Playground&quot;">&ZeroWidthSpace;</a></h3>
<p>官方在线编译练习页面：
<a href="https://www.typescriptlang.org/play/" target="_blank" rel="noreferrer">TS Playground - An online editor for exploring TypeScript and JavaScript</a></p>
<h3 id="tsc-编译器" tabindex="-1">tsc 编译器 <a class="header-anchor" href="#tsc-编译器" aria-label="Permalink to &quot;tsc 编译器&quot;">&ZeroWidthSpace;</a></h3>
<p>TypeScript 官方提供的编译器叫做 tsc，可以将 TypeScript 脚本编译成 JavaScript 脚本</p>
<p>TypeScript 脚本文件使用 <code>.ts</code> 后缀名，JavaScript 脚本文件使用 <code>.js</code> 后缀名。tsc 的作用就是把 <code>.ts</code> 脚本转变成 <code>.js</code> 脚本</p>
<p>tsc 使用</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 安装</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">npm install </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">g typescript</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 查看版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">tsc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 查看帮助</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">tsc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">help</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 编译某个文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">tsc app.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 命令参数，制定编译后 JavaScript 版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">tsc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">target es2015 app.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 编译报错停止生成对应文件的参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">tsc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">noEmitOnError app.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 只校验类型是否正确，不会生成 JavaScript 文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">tsc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">noEmit app.ts</span></span></code></pre>
</div><p><code>tsconfig.json</code> 配置</p>
<p>ts-node 模块：便捷方式运行 TypeScript 代码查看结果
<a href="https://github.com/TypeStrong/ts-node" target="_blank" rel="noreferrer"><strong>ts-node</strong></a> <strong>是一个非官方的 npm 模块，可以直接运行 TypeScript 代码</strong></p>
<h3 id="三种特殊类型" tabindex="-1">三种特殊类型 <a class="header-anchor" href="#三种特殊类型" aria-label="Permalink to &quot;三种特殊类型&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="any" tabindex="-1">any <a class="header-anchor" href="#any" aria-label="Permalink to &quot;any&quot;">&ZeroWidthSpace;</a></h4>
<p>表示没有任何限制，该类型的变量可以赋予任意类型的值
特点：</p>
<ul>
<li>相当于关闭这个类型检查；</li>
<li>顶层类型（top type）；</li>
<li>污染其他变量（<strong>它可以赋值给其他任何类型的变量（因为没有类型检查），导致其他变量出错</strong>）；</li>
</ul>
<p>使用场景：</p>
<ul>
<li>出于特殊原因，需要关闭某些变量的类型检查；</li>
<li>适配老项目，快速迁移；</li>
</ul>
<p>类型推断为 any 就会报错的配置：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">tsc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">noImplicitAny app.ts</span></span></code></pre>
</div><p>但有个隐患：使用 let 和 var 命令声明变量，但不赋值也不指定类型，是不会报错的</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span></code></pre>
</div><p>所以：建议使用 let 和 var 声明变量时，<strong>如果不赋值，就一定要显式声明类型，否则可能存在安全隐患</strong></p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 不报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 123</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 不报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">y.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 不报错</span></span></code></pre>
</div><p>污染其他具有正确类型的变量，把错误留到运行时，这就是不宜使用 any 类型的另一个主要原因</p>
<h4 id="unknown" tabindex="-1">unknown <a class="header-anchor" href="#unknown" aria-label="Permalink to &quot;unknown&quot;">&ZeroWidthSpace;</a></h4>
<p>表示类型不确定，可能是任意类型，但是它的使用有一些限制，不像 any 那样自由，可以视为严格版的 any</p>
<p><strong>凡是需要设置 any 类型的地方都应该优先考虑设为 unknown 类型、除了 any 外其他所有类型的全集</strong></p>
<p>跟 any 相似之处：所有类型的值都可以分配给 unknown 类型、顶层类型</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'Hello World'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span></code></pre>
</div><p>跟 any 不同之处：</p>
<ul>
<li>不能直接使用——unknown 类型的变量，不能直接赋值给其他类型的变量（除了 any 类型和 unknown 类型），<strong>避免污染变量问题，从而跟 any 类型不一样</strong></li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><ul>
<li>不能直接调用 unknown 类型的变量的方法和属性</li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { foo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">v1.foo  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">v2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">v3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><ul>
<li>unknown 类型能够进行的运算是有限的，只能进行比较运算（运算符：<code>==、===、!=、!==、||、&amp;&amp;、?</code>）、取反运算（运算符：<code>!</code>）、<code>typeof</code> 运算符合 <code>instanceof</code> 运算符这几种</li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 正确</span></span></code></pre>
</div><p>使用 unknown 类型变量的方法：类型缩小——缩小 unknown 变量的类型范围，确保不会出错（明确 unknown 类型变量的实际类型，才允许使用它，防止像 any 一样乱用，变量污染）</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类型缩小</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'number'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'string'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  a.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="never" tabindex="-1">never <a class="header-anchor" href="#never" aria-label="Permalink to &quot;never&quot;">&ZeroWidthSpace;</a></h4>
<p>不存在任何属于“空类型”的值，这样的类型的成为 never，即不可能有这样的值
特点：</p>
<ul>
<li>never 类型的变量可以赋值给任意类型（空集是任何集合的子集）；</li>
<li>唯一一个底层类型；</li>
</ul>
<p>使用场景：一些类型运算中，保证类型运算的完整性</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'string'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'number'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    x; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// never 类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-label="Permalink to &quot;基本类型&quot;">&ZeroWidthSpace;</a></h2>
<p>JavaScript 语言（注意，不是 TypeScript）将值分成 8 种类型。</p>
<ul>
<li>boolean</li>
<li>string</li>
<li>number</li>
<li>bigint</li>
<li>symbol</li>
</ul>
<p>以上 5 种为原始类型，其中 symbol、bigint 类型无法获取它们的包装对象（即 Symbol() 和 BigInt() 不能作为构造函数使用）</p>
<ul>
<li>object（复合类型：对象、数组和函数）</li>
<li>undefined（特殊值类型）</li>
<li>null（特殊值类型）</li>
</ul>
<p>注意类型名称都是小写
<strong>特殊：undefined 和 null 即可以作为值，也可以作为类型，取决于怎么使用他们</strong></p>
<p>注意：</p>
<ul>
<li>bigint 与 number 类型不兼容</li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">bigint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">bigint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 3.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// bigint 赋值给整数和小数都会报错</span></span></code></pre>
</div><ul>
<li>bigint 类型是 ES2020 标准引入的。如果使用这个类型，TypeScript 编译的目标 JavaScript 版本不能低于 ES2020（即编译参数 target 不低于 es2020）</li>
</ul>
<p>如果没有声明类型的变量，被赋值为 undefined 或 null，在关闭编译设置 noImplicitAny 和 strictNullChecks 时，它们的类型会被推断为 any</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 关闭 noImplicitAny 和 strictNullChecks</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// any</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// any</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// any</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// any</span></span></code></pre>
</div><h3 id="包装对象类型" tabindex="-1">包装对象类型 <a class="header-anchor" href="#包装对象类型" aria-label="Permalink to &quot;包装对象类型&quot;">&ZeroWidthSpace;</a></h3>
<p>包装对象：指的是这些类型变量（<code>boolean、string、number</code>）需要时，会自动产生的对象</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 'e'</span></span></code></pre>
</div><p>包装对象类型与字面量类型</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 字面量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 包装对象</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Boolean 和 boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">String 和 string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Number 和 number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">BigInt 和 bigint</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Symbol 和 symbol</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> s1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> s2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> s3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> s4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p>大写类型包含包装类型和字面量类型，小写类型只包含字面量，不包含包装对象</p>
<p>建议只使用小写类型，不使用大写类型。因为绝大部分使用原始类型的场合，都是使用字面量，不使用包装对象。而且，TypeScript 把很多内置方法的参数，定义成小写类型，使用大写类型会报错</p>
<h3 id="object-类型与-object-类型" tabindex="-1">Object 类型与 object 类型 <a class="header-anchor" href="#object-类型与-object-类型" aria-label="Permalink to &quot;Object 类型与 object 类型&quot;">&ZeroWidthSpace;</a></h3>
<p>Object 广义对象：<strong>所有可以转成对象的值，都是 Object 类型，几乎所有的值</strong>。<code>{}</code> （空对象）为 Object 类型的简写形式</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 或 let obj: {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hi'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { foo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p>object 侠义对象：字面量表是，只包含<strong>对象、数组和函数</strong>，不包括原始类型的值</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { foo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hi'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p>使用对象类型，只希望包含真正的对象，不希望包含原始类型。所以，<strong>建议总是使用小写类型 object，不使用大写类型 Object</strong></p>
<p><strong>注意，无论是大写的 Object 类型，还是小写的 object 类型，都只包含 JavaScript 内置对象原生的属性和方法，用户自定义的属性和方法都不存在于这两个类型之中</strong></p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> o1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { foo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> o2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { foo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">o1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">o1.foo </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">o2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">o2.foo </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><h3 id="undefined-和-null-的特殊性" tabindex="-1">undefined 和 null 的特殊性 <a class="header-anchor" href="#undefined-和-null-的特殊性" aria-label="Permalink to &quot;undefined 和 null 的特殊性&quot;">&ZeroWidthSpace;</a></h3>
<p>undefined 和 null 即是值，又是类型
作为值：任何其他类型的变量都可以赋值为 undefined 或 null</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span></code></pre>
</div><p>并不是类型里面包含了 undefined 或 null，而是故意这样设计的，目的为了跟 JavaScript 行为保持一致</p>
<p>JavaScript 的行为是，变量如果等于 undefined 就表示还没有赋值，如果等于 null 就表示值为空。所以，TypeScript 就允许了任何类型的变量都可以赋值为这两个值</p>
<p>TypeScript 提供了一个编译选项 strictNullChecks。只要打开这个选项，undefined 和null 就不能赋值给其他类型的变量（除了 any 类型和 unknown 类型），而且 undefined 和 null 这种值不能相互赋值，但是赋值给 any 或 unknown 却没有限制</p>
<h3 id="值类型" tabindex="-1">值类型 <a class="header-anchor" href="#值类型" aria-label="Permalink to &quot;值类型&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'world'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// x 的类型是 "https"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'https'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// y 的类型是 string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'https'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// x 的类型是 { foo: number }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { foo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// JavaScript 里面，const变量赋值为对象时，属性值是可以改变的</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><h3 id="联合类型" tabindex="-1">联合类型 <a class="header-anchor" href="#联合类型" aria-label="Permalink to &quot;联合类型&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> setting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> gender</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'male'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'female'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> rainbowColor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'赤'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'橙'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'黄'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'绿'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'青'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'蓝'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'紫'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>
</div><p>“类型缩小”是 TypeScript 处理联合类型的标准方法，凡是遇到可能为多种类型的场合，都需要先缩小类型，再进行处理。实际上，联合类型本身可以看成是一种“类型放大”（type widening），处理时就需要“类型缩小”（type narrowing）</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> printId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'string'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(id.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  scheme</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'http'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'https'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (scheme) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'http'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'https'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h3 id="交叉类型" tabindex="-1">交叉类型 <a class="header-anchor" href="#交叉类型" aria-label="Permalink to &quot;交叉类型&quot;">&ZeroWidthSpace;</a></h3>
<p>指的多个类型组成的一个新类型，使用符号 <code>&amp;</code> 表示</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  bar: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'world'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span></code></pre>
</div><h3 id="type-命令" tabindex="-1">type 命令 <a class="header-anchor" href="#type-命令" aria-label="Permalink to &quot;type 命令&quot;">&ZeroWidthSpace;</a></h3>
<p>type 命令用来定义一个类型的别名
别名可以让类型的名字变得更有意义，也能增加代码的可读性，还可以使复杂类型用起来更方便，便于以后修改变量的类型</p>
<p>特点：</p>
<ul>
<li>别名不允许重名；</li>
<li>别名的作用域是块级作用域；</li>
<li>别名支持使用表达式，也可以在定义一个别名时，使用另一个别名，即别名允许嵌套</li>
<li>type 命令属于类型相关代码，编译 JavaScript 的时候会全部删除</li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'red'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'blue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'red'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'blue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 作用域问题不会报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> World</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "world"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Greeting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `hello ${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">World</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 别名嵌套</span></span></code></pre>
</div><h3 id="typeof-运算符" tabindex="-1">typeof 运算符 <a class="header-anchor" href="#typeof-运算符" aria-label="Permalink to &quot;typeof 运算符&quot;">&ZeroWidthSpace;</a></h3>
<p>JavaScript 语言中，typeof 运算符是一个一元运算符，返回一个字符串，代表操作数的类型</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// "undefined"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// "boolean"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1337</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// "number"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "foo"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// "string"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// "object"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> parseInt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// "function"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// "symbol"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 127</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">n</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // "bigint"</span></span></code></pre>
</div><p>同一段代码可能存在两种 typeof 运算符，一种用在值相关的 JavaScript 代码部分（值运算），另一种用在类型相关的 TypeScript 代码部分（类型运算）</p>
<p>由于编译时不会进行 JavaScript 的值运算，所以TypeScript 规定，<strong>typeof 的参数只能是标识符，不能是需要运算的表达式</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> typeof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p><strong>typeof 命令的参数不能是类型</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyAge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Age </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><h3 id="块级类型声明" tabindex="-1">块级类型声明 <a class="header-anchor" href="#块级类型声明" aria-label="Permalink to &quot;块级类型声明&quot;">&ZeroWidthSpace;</a></h3>
<p>TypeScript 支持块级类型声明，即类型可以声明在代码块（用大括号表示）里面，并且只在当前代码块有效（<strong>块级作用域</strong>）</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 可以重复声明</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h3 id="类型的兼容" tabindex="-1">类型的兼容 <a class="header-anchor" href="#类型的兼容" aria-label="Permalink to &quot;类型的兼容&quot;">&ZeroWidthSpace;</a></h3>
<p>TypeScript 为这种情况定义了一个专门术语。如果类型 A 的值可以赋值给类型 B，那么类型 A 就称为类型 B 的子类型（subtype）</p>
<p>TypeScript 的一个规则是，凡是可以使用父类型的地方，都可以使用子类型，但是反过来不行</p>
<h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">&ZeroWidthSpace;</a></h2>
<p>两种声明写法</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 字面量定义</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 泛型定义</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'2'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 注意联合类型的使用，需要搭配括号，跟优先级有关</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)[];</span></span></code></pre>
</div><p>TypeScript 允许使用方括号读取数组成员的类型</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Names</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 也可以写成这样</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span></code></pre>
</div><p>数组类型推断
<strong>前提条件是初始值为空的数组</strong>
如果没有声明数组类型，数组会根据添加的元素进行类型推断</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">arr </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 推断为 any[]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">arr </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 推断类型为 number[]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'abc'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">arr </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 推断类型为 (string|number)[]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 注意⚠️：类型不为空的数组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 推断类型为 number[]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'abc'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p>只读数组，const 断言</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 只读数组与数组的父类型关系</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:readonly</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(arr) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[])</span></span></code></pre>
</div><p>注意⚠️：readonly 与数组的泛型写法不能一起使用</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:readonly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// TypeScript 专门的泛型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ReadonlyArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span></code></pre>
</div><p>通过使用 const 断言来使用只读数组</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 报错</span></span></code></pre>
</div><p>多维数组</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 数组成员类型为：number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> multi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[][] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]];</span></span></code></pre>
</div><h2 id="元组" tabindex="-1">元组 <a class="header-anchor" href="#元组" aria-label="Permalink to &quot;元组&quot;">&ZeroWidthSpace;</a></h2>
<p>成员类型写在方括号里面的就是元组，写在外面的就是数组</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 元组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span></code></pre>
</div><p><strong>元组必须显式给出类型声明</strong>
元组成员的类型可以添加问号后缀（<code>?</code>），表示该成员是可选的</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span></code></pre>
</div><p>注意⚠️：可选成员必须放在尾部（必须放在必选成员之后）</p>
<p><strong>元组的成员是有限的，越界的成员会报错，但是可以通过扩展符使用不限制成员数量</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> NamedNums</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">NamedNums</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'A'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">NamedNums</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'B'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 扩展符的使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> t1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> t2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> t3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span></code></pre>
</div><p>如果不确定元组成员的类型和数量</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Tuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]]</span></span></code></pre>
</div><p>元组的成员可以添加成员名，这个成员名是<strong>说明性的</strong>，可以任意取名，没有实际作用</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span></code></pre>
</div><p>元组可以通过方括号，读取成员类型</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Tuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// number</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 获取所有成员的类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Tuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> TupleEl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// string|number|Date</span></span></code></pre>
</div><h3 id="只读元组" tabindex="-1">只读元组 <a class="header-anchor" href="#只读元组" aria-label="Permalink to &quot;只读元组&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法二</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]></span></span></code></pre>
</div><p>只读元组不能替代元组</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> distanceFromOrigin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> point </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">distanceFromOrigin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(point); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用断言解决</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">distanceFromOrigin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(point </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span></code></pre>
</div><h3 id="成员数量的推断" tabindex="-1">成员数量的推断 <a class="header-anchor" href="#成员数量的推断" aria-label="Permalink to &quot;成员数量的推断&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>如果没有可选成员和扩展运算符，TypeScript 会推断出元组的成员数量（即元组长度）</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (point.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：使用了扩展符就将无法退出成员的数量（TypeScript 内部会把元组当做数组处理）</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> myTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'a'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'b'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'c'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (myTuple.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h3 id="扩展运算符与成员数量" tabindex="-1">扩展运算符与成员数量 <a class="header-anchor" href="#扩展运算符与成员数量" aria-label="Permalink to &quot;扩展运算符与成员数量&quot;">&ZeroWidthSpace;</a></h3>
<p>扩展运算符（...）将数组（注意，不是元组）转换成一个逗号分隔的序列，这时 TypeScript 会认为这个序列的成员数量是不确定的，因为数组的成员数量是不确定的</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">arr) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p>解决这个问题的一个方法，就是把成员数量不确定的数组，写成成员数量确定的元组，再使用扩展运算符（补充类型注解）</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 将上面的写法改成这样</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">arr) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span></code></pre>
</div><p>还有一种更简单的写法，使用断言 <code>const</code> （值类型）</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span></span></code></pre>
</div><p>既可以当做数组，也可以当做元组使用</p>
<h2 id="symbol-类型" tabindex="-1">Symbol 类型 <a class="header-anchor" href="#symbol-类型" aria-label="Permalink to &quot;Symbol 类型&quot;">&ZeroWidthSpace;</a></h2>
<p>Symbol 是 ES2015 新引入的一种原始类型的值。它类似于字符串，但是<strong>每一个 Symbol 值都是独一无二的，与其他任何值都不相等</strong></p>
<p>使用</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// false</span></span></code></pre>
</div><p>symbol 类型包含所有的 Symbol 值，但是无法表示某一个具体的 Symbol 值
unique symbol 表示单个的、某个具体的 Symbol 值，该类型声明的变量不能修改，只能用 const 声明</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unique</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unique</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span></code></pre>
</div><p><strong>const 命令为变量赋值 Symbol 值时，变量类型默认就是 unique symbol，所以类型可以省略不写</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unique</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 等同于</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span></code></pre>
</div><p>注意⚠️：声明两个都是 unique symbol 的类型变量，值类型都是不相同的，也不能相互赋值</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unique</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unique</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p>写成相同的类型声明：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unique</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span></code></pre>
</div><p>Symbol.for() 的使用可以创建声明不同类型的但值相等的变量</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unique</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Symbol.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unique</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Symbol.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span></code></pre>
</div><p><strong>unique symbol 类型是 symbol 类型的子类型，所以可以将前者赋值给后者，但是反过来就不行</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unique</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unique</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p><strong>unique symbol 类型的一个作用，就是用作属性名</strong>，这可以保证不会跟其他属性名冲突。如果要把某一个特定的 Symbol 值当作属性名，那么它的类型只能是 unique symbol，不能是 symbol</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unique</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [x]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [y]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>unique symbol 类型也可以用作类（class）的属性值，但只能赋值给类的 readonly static 属性</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unique</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>类型推断中有一个注意点：如果 const 变量赋值给另一个 symbol 类型的变量，则推断类型为 symbol，而不是 unique symbol</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类型为 symbol</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> x1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类型为 symbol</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x1;</span></span></code></pre>
</div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>Symbol 值是独一无二的，每个值都是不相等的；</li>
<li>unique symbol 表示单个的、某个具体的 Symbol 值，声明后不能修改，只能用 const 声明，是 symbol 的子类型。使用场景：用做属性名；</li>
<li>默认类型推断 let 声明的 symbol 变量跟 const 声明的 symbol，之间赋值都会被推断为 symbol 类型；</li>
</ul>
<h2 id="函数类型" tabindex="-1">函数类型 <a class="header-anchor" href="#函数类型" aria-label="Permalink to &quot;函数类型&quot;">&ZeroWidthSpace;</a></h2>
<h4 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">&ZeroWidthSpace;</a></h4>
<p>函数的类型声明，需要在声明函数时，给出参数的类型和返回值的类型</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello '</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> txt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意：返回值的类型通常不用写，TypeScript 默认可以推断出来。但如果防止返回值类型被修改或者为了文档考虑，建议写上</p>
<p>如果一个变量被赋值为一个函数，声明写法有两种：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello '</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> txt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法二</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">txt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello '</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> txt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span></code></pre>
</div><p>函数类型里面的参数名与实际参数名，可以不一致</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span></code></pre>
</div><p>函数的实际参数个数，可以少于类型指定的参数个数，但是不能多于，即 TypeScript 允许省略参数</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> myFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">myFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">myFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> c; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p>如果一个变量要套用另一个函数类型，有一个小技巧，就是使用 typeof 运算符（返回类型），<strong>注意：这是一个很有用的技巧，任何需要类型的地方，都可以使用 typeof 运算符从一个值获取类型</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> myAdd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:typeof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>函数类型声明还可以采用对象的写法：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法公式，注意：间隔是冒号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (参数列表): 返回值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>适用场景：声明函数属性类型</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> f;</span></span></code></pre>
</div><p>Interface 写法，跟对象声明写法一样</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Myfn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Myfn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b</span></span></code></pre>
</div><h4 id="function-类型" tabindex="-1">Function 类型 <a class="header-anchor" href="#function-类型" aria-label="Permalink to &quot;Function 类型&quot;">&ZeroWidthSpace;</a></h4>
<p>任何函数都是属于这个类型，相当于 any 收窄为具体的函数类型，Function 类型的值都可以直接执行</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：Function 类型的函数可以接受任意数量的参数，每个参数的类型都是 any，返回值的类型也是any，代表没有任何约束，<strong>所以不建议使用这个类型，给出函数详细的类型声明会更好</strong></p>
<h4 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">&ZeroWidthSpace;</a></h4>
<p>写法：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> repeat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">times</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(times)</span></span></code></pre>
</div><p>注意返回值的声明位置：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> people</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'alice'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'bob'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'jan'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({name})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span></code></pre>
</div><h4 id="可选参数" tabindex="-1">可选参数 <a class="header-anchor" href="#可选参数" aria-label="Permalink to &quot;可选参数&quot;">&ZeroWidthSpace;</a></h4>
<p>如果函数的某个参数可以省略，则在参数名后面加问号表示</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// OK</span></span></code></pre>
</div><p>**参数名带有问号，表示该参数的类型实际上是 原始类型 | undefined，它有可能为undefined，**但是类型设置为 number | undefined 表是要么传入一个数值或 undefined，如果省略就会报错
函数的可选参数只能在参数列表的尾部，跟在必选参数的后面
养成习惯：可选参数永远放在尾部
如果函数参数多个情况下，前面的参数有可能为空，只能显示注明类型包括 undefined，传参时也要传入 undefined</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> myFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">    a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">    b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>
</div><p>用到的可选参数记得判断该参数是否为 undefined，防止误用报错（建议设置默认值）：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> myFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">myFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="参数默认值" tabindex="-1">参数默认值 <a class="header-anchor" href="#参数默认值" aria-label="Permalink to &quot;参数默认值&quot;">&ZeroWidthSpace;</a></h4>
<p>设置了默认值的参数，就是可选的。如果不传入该参数，它就会等于默认值，类型声明可以根据默认值推断出来（<strong>注意⚠️：设置了默认值，参数传 undefined，也会触发默认值</strong>）</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [x, y];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">createPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// [0, 0]</span></span></code></pre>
</div><p><strong>注意⚠️：可选参数跟默认值不能同时使用</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p>具有默认值的参数如果不位于参数列表的末尾，调用时不能省略，如果要触发默认值，必须显式传入 undefined</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span></code></pre>
</div><h4 id="参数解构" tabindex="-1">参数解构 <a class="header-anchor" href="#参数解构" aria-label="Permalink to &quot;参数解构&quot;">&ZeroWidthSpace;</a></h4>
<p>参数解构可以结合类型别名（type 命令）一起使用，代码会看起来简洁一些</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ABC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> c);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="rest-参数" tabindex="-1">rest 参数 <a class="header-anchor" href="#rest-参数" aria-label="Permalink to &quot;rest 参数&quot;">&ZeroWidthSpace;</a></h4>
<p>rest 参数表示函数剩余的所有参数，它可以是数组（剩余参数类型相同），也可能是元组（剩余参数类型不同）</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// rest 参数为数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> joinNumbers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">nums</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// rest 参数为元组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>注意⚠️：元组需要声明每一个剩余参数的类型。如果元组里面的参数是可选的，则要使用可选参数</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// m 是 rest 类型数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> multiply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类型嵌套</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]]) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 结构</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">times</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(times);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 等同于</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  times</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(times);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="readonly-只读参数" tabindex="-1">readonly 只读参数 <a class="header-anchor" href="#readonly-只读参数" aria-label="Permalink to &quot;readonly 只读参数&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> arraySum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:readonly</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="void-类型" tabindex="-1">void 类型 <a class="header-anchor" href="#void-类型" aria-label="Permalink to &quot;void 类型&quot;">&ZeroWidthSpace;</a></h4>
<p>void 类型表示函数没有返回值</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'xx'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：允许返回 undefined 或 null</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>如果打开 strictNullChecks 编译选项，那么 void 类型只允许返回 undefined。如果返回 null，就会报错。这是因为 JavaScript 规定，如果函数没有返回值，就等同于返回 undefined</p>
<p>注意⚠️：如果变量、对象方法、函数参数是一个返回值为 void 类型的函数，那么并不代表不能赋值为有返回值的函数。恰恰相反，该变量、对象方法和函数参数可以接受返回任意值的函数，这时并不会报错（<strong>原因：这个返回值不重要或者不产生作用</strong>）</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> voidFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">voidFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span></code></pre>
</div><p>因为这时 TypeScript 认为，这里的 void 类型只是表示该函数的返回值没有利用价值，或者说不应该使用该函数的返回值。只要不用到这里的返回值，就不会报错</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">src.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ret.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(el));</span></span></code></pre>
</div><p><strong>注意⚠️：push() 有返回值，表示插入新元素后数组的长度。但是，对于 forEach() 方法来说，这个返回值是没有作用的，根本用不到，所以 TypeScript 不会报错</strong>
反例：使用到了这个返回值</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> voidFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">voidFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 报错</span></span></code></pre>
</div><p><strong>注意⚠️：这种情况仅限于变量、对象方法和函数参数，函数字面量如果声明了返回值是 void 类型，还是不能有返回值</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span></code></pre>
</div><p>如果函数运行结果是抛出错误，也允许返回值写成 void</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> throwErr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'something wrong'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>除了函数，其他变量声明为 void 类型没有多大意义（可以作为一个变量类型声明），因为这时只能赋值为 undefined 或者 null（假定没有打开strictNullChecks)</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 没有打开 strictNullChecks 的情况下</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span></span></code></pre>
</div><h4 id="never-类型" tabindex="-1">never 类型 <a class="header-anchor" href="#never-类型" aria-label="Permalink to &quot;never 类型&quot;">&ZeroWidthSpace;</a></h4>
<p>never 类型表示肯定不会出现的值。它用在函数的返回值，就表示某个函数肯定不会返回值，即函数不会正常的执行结束，<strong>never 是唯一一个底层类型，所有其他类型都包括这个类型</strong>
<strong>使用场景：</strong></p>
<ol>
<li>抛出错误的函数：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> never</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>注意，只有抛出错误，才是 never 类型。如果显式用 return 语句返回一个 Error 对象，返回值就不是 never 类型</strong>
另外，由于抛出错误的情况属于 never 类型或 void 类型，所以无法从返回值类型中获知，抛出的是哪一种错误</p>
<ol start="2">
<li>无限执行的函数：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> sing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> funciton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (): never {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>注意⚠️：never 类型不同于 void 类型。前者表示函数没有执行结束，不可能有返回值；后者表示函数正常执行结束，但是不返回值，或者说返回 undefined</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> sing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'sing'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> sing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">never</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'sing'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>如果一个函数抛出了异常或者陷入了死循环，那么该函数无法正常返回一个值，因此该函数的返回值类型就是 never。如果程序中调用了一个返回值类型为 never 的函数，那么就意味着程序会在该函数的调用位置终止，永远不会继续执行后续的代码</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> neverReturns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">never</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    neverReturns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  x; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 推断为 string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>省略 never 类型声明的情况：一个函数在某些情况下是正常返回值的，另一些情况下会抛出错误</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> sometimesThrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Something went wrong'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> sometimesThrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span></code></pre>
</div><h4 id="局部类型" tabindex="-1">局部类型 <a class="header-anchor" href="#局部类型" aria-label="Permalink to &quot;局部类型&quot;">&ZeroWidthSpace;</a></h4>
<p>函数内部允许声明其他类型，该类型只在函数内部有效，称为局部类型</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> newTxt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hello '</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> txt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> newTxt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> newTxt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'world'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><h4 id="高阶函数" tabindex="-1">高阶函数 <a class="header-anchor" href="#高阶函数" aria-label="Permalink to &quot;高阶函数&quot;">&ZeroWidthSpace;</a></h4>
<p>一个函数的返回值是一个函数，那么前一个函数就称为高阶函数（higher-order function）</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">someValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">multiplier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> someValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> multiplier;</span></span></code></pre>
</div><h4 id="函数重载" tabindex="-1">函数重载 <a class="header-anchor" href="#函数重载" aria-label="Permalink to &quot;函数重载&quot;">&ZeroWidthSpace;</a></h4>
<p>有些函数可以<strong>接受不同类型</strong>或<strong>不同个数的参数</strong>，并且根据参数的不同，会有<strong>不同的函数行为</strong>。这种根据参数类型不同，执行不同逻辑的行为，称为函数重载（function overload）</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'abc'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 'cba'</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// [3, 2, 1]</span></span></code></pre>
</div><p><strong>注意⚠️：到这里并没有结束，后面还必须对函数 reverse() 给予完整的类型声明</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  stringOrArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> stringOrArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'string'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> stringOrArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> stringOrArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 前两行类型声明列举了重载的各种情况。第三行是函数本身的类型声明，它必须与前面已有的重载声明兼容</span></span></code></pre>
</div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'number'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'number'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(y)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">x, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">y];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'wrong parameters'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>注意⚠️：重载的各个类型描述与函数的具体实现之间，不能有其他代码，否则报错</strong></p>
<p><strong>重载声明的排序很重要</strong>，因为 TypeScript 是按照顺序进行检查的，一旦发现符合某个类型声明，就不再往下检查了，<strong>所以类型最宽的声明应该放在最后面，防止覆盖其他类型声明</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hi'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p>对象的方法也可以实现重载：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  #data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.#data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(value);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.#data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>函数重载可以用来精确描述函数参数与返回值之间的关系：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'a'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">HTMLAnchorElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'canvas'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">HTMLCanvasElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'table'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">HTMLTableElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>可以通过对象声明表示：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> CreateElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'a'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HTMLAnchorElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'canvas'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HTMLCanvasElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'table'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HTMLTableElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>建议：一般函数重载存在比较复杂的类型声明关系，**优先使用联合类型替代函数重载，除非多个参数之间、或者某个参数与返回值之间，存在对应关系。**相对来说，使用联合类型比使用函数重载会简洁很多</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法二</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">&ZeroWidthSpace;</a></h4>
<p>JavaScript 语言是使用构造函数，生成对象的实例的。构造函数最大的特点就是，必须使用 new 命令调用</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  numLegs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> AnimalConstructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">AnimalConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Animal);</span></span></code></pre>
</div><p>构造函数类型声明（注意：new 命令）：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)： object;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 如果既可以当做普通函数，又可以当做构造函数，声明写法如下：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">&ZeroWidthSpace;</a></h3>
<h2 id="对象类型" tabindex="-1">对象类型 <a class="header-anchor" href="#对象类型" aria-label="Permalink to &quot;对象类型&quot;">&ZeroWidthSpace;</a></h2>
<h4 id="基本使用-1" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用-1" aria-label="Permalink to &quot;基本使用&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span></code></pre>
</div><p>注意⚠️：属性的类型可以用分号结尾，也可以用逗号结尾</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 属性类型以分号结尾</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 属性类型以逗号结尾</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 最后一个属性后面，可以写分号或逗号，也可以不写</span></span></code></pre>
</div><p>对象的方法描述函数：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 或者写成</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // add: (x:number, y:number) => number;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span></code></pre>
</div><p><strong>对象类型可以使用方括号读取属性的类型：</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'name'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span></code></pre>
</div><p>interface 命令写法：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">MyObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法二</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyObj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">MyObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span></code></pre>
</div><p><strong>注意⚠️：TypeScript 不会区分对象自身的属性和继承的属性，一律视为对象的属性</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 继承的属性</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  prop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 自身属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  prop: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="可选属性" tabindex="-1">可选属性 <a class="header-anchor" href="#可选属性" aria-label="Permalink to &quot;可选属性&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span></code></pre>
</div><p>**注意⚠️：可选属性等同于允许赋值为 undefined **</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  firstName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  lastName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 等同于</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  firstName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  lastName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span></code></pre>
</div><p>TypeScript 提供编译设置 ExactOptionalPropertyTypes，只要同时打开这个设置和 strictNullChecks，可选属性就不能设为 undefined</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 打开 ExactOptionsPropertyTypes 和 strictNullChecks</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p><strong>注意⚠️：可选属性与允许设为 undefined 的必选属性是不等价的</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ObjA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ObjB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><h4 id="只读属性" tabindex="-1">只读属性 <a class="header-anchor" href="#只读属性" aria-label="Permalink to &quot;只读属性&quot;">&ZeroWidthSpace;</a></h4>
<p>属性名前面加上 readonly 关键字，表示这个属性是只读属性，不能修改
<strong>注意⚠️：只读属性只能在对象初始化期间赋值，此后就不能修改属性</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p><strong>但是⚠️，如果属性是一个对象，readonly 修饰符并不禁止修改该对象的属性，只是禁止完全替换掉该对象</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Home</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> resident</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">    age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Home</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  resident: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Vicky'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">42</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h.resident.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">h.resident </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Kate'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">23</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p><strong>高端操作：另一个需要注意的地方是，如果一个对象有两个引用，即两个变量对应同一个对象，其中一个变量是可写的，另一个变量是只读的，那么从可写变量修改属性，会影响到只读变量</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ReadonlyPerson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Vicky'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ReadonlyPerson</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> w;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">w.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">r.age </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 43</span></span></code></pre>
</div><p><strong>注意⚠️：另一种声明只读属性：赋值时，在对象后面加上只读断言 <code>as const</code>，对象后面加上就变成只读对象，不能修改属性</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> myUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'xxx'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">myUser.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '1111'</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 报错</span></span></code></pre>
</div><p>注意，上面的 as const 属于 TypeScript 的类型推断，如果变量明确地声明了类型，那么 TypeScript 会以声明的类型为准</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> myUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Sabrina"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">myUser.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "Cynthia"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span></code></pre>
</div><h4 id="属性名的索引类型" tabindex="-1">属性名的索引类型 <a class="header-anchor" href="#属性名的索引类型" aria-label="Permalink to &quot;属性名的索引类型&quot;">&ZeroWidthSpace;</a></h4>
<p>使用属性名表达式的写法来描述类型</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // property 表示属性名，这个是可以随便起的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">property</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'a'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  bar: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'b'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  baz: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'c'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">property</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">property</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyArr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">MyArr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 或者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">MyArr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span></code></pre>
</div><p>对象可以有多种类型索引，比如数值索引和字符串索引。但是数值索引不能与字符串索引发生冲突，必须服从后者，这是因为在 JavaScript 语言内部，所有的数值属性名都会自动转为字符串属性名
同样地，可以既声明属性名索引，也声明具体的单个属性名。如果单个属性名符合属性名索引的范围，两者不能有冲突，否则报错</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>注意⚠️：慎重使用，属性名的声明太宽泛了，约束太少。另外，属性名的数值索引不宜用来声明数组，因为采用这种方式声明数组，就不能使用各种数组方法以及 length属性，因为类型里面没有定义这些东西</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyArr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">MyArr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 报错</span></span></code></pre>
</div><h4 id="解构赋值" tabindex="-1">解构赋值 <a class="header-anchor" href="#解构赋值" aria-label="Permalink to &quot;解构赋值&quot;">&ZeroWidthSpace;</a></h4>
<p>解构赋值用于直接从对象中提取属性</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  price</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> product;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 解构赋值类型的写法，跟为对象声明类型是一样的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  price</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> product</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: foo, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: bar }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> draw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  xPos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  yPos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> myShape </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> shape; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> xPos; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：目前没法为解构变量指定类型，因为对象解构里面的冒号，JavaScript 指定了其他用途</p>
<h4 id="结构类型原则" tabindex="-1">结构类型原则 <a class="header-anchor" href="#结构类型原则" aria-label="Permalink to &quot;结构类型原则&quot;">&ZeroWidthSpace;</a></h4>
<p>只要对象 B 满足对象 A 的<strong>结构特征（跟类型名无关）</strong>，TypeScript 就认为对象 B 兼容对象 A 的类型，这称为“结构类型”原则，<strong>简单说 B 包含 A，使用 A 的地方可以使用 B 替代</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span></code></pre>
</div><p><strong>如果类型 B 可以赋值给类型 A，TypeScript 就认为 B 是 A 的子类型，A 是 B 的父类型。子类型满足父类型的所有特征，同时还具有自己的特征。凡是可以使用父类型的地方，都可以使用子类型，即子类型兼容父类型</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">MyObj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj[n]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错，所有兼容的 MyObj 对象都可以使用，可能为 any</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(v);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> sum;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改：使用明确的属性值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">MyObj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj.y);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="严格字面量检查" tabindex="-1">严格字面量检查 <a class="header-anchor" href="#严格字面量检查" aria-label="Permalink to &quot;严格字面量检查&quot;">&ZeroWidthSpace;</a></h4>
<p><strong>如果对象使用字面量表示（直接字面量赋值），会触发 TypeScript 的严格字面量检查</strong>（strict object literal checking）。如果字面量的结构跟类型定义的不一样（比如多出了未定义的属性），就会报错</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  z: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span></code></pre>
</div><p>如果等号右边不是字面量，而是一个变量，根据结构类型原则，是不会报错的</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> myPoint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  z: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> myPoint; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span></code></pre>
</div><p>TypeScript 对字面量进行严格检查的目的，主要是防止拼写错误。一般来说，字面量大多数来自手写，容易出现拼写错误，或者误用 API</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  darkMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'我的网页'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  darkmode: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 如果为了规避严格字面量检查，可以使用中间变量赋值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> myOptions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'我的网页'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  darkmode: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> myOptions;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用类型断言规避严格字面量检查报错问题</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'我的网页'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  darkmode: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 设置允许多余的属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { foo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, baz: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 不能有多余的属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computeDistance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/*...*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">computeDistance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, z: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错，编译器选项suppressExcessPropertyErrors，可以关闭多余属性检查</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">computeDistance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span></code></pre>
</div><h4 id="最小可选属性规则" tabindex="-1">最小可选属性规则 <a class="header-anchor" href="#最小可选属性规则" aria-label="Permalink to &quot;最小可选属性规则&quot;">&ZeroWidthSpace;</a></h4>
<p>弱类型检查，防止一个类型对象都是可选属性，任意对象都满足的情况问题</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> opts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { d: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> opts; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p><strong>报错原因是，如果某个类型的所有属性都是可选的，那么该类型的对象必须至少存在一个可选属性，不能所有可选属性都不存在。这就叫做“最小可选属性规则”</strong>
如果想规避这条规则，要么在类型里面增加一条索引属性（<code>[propName: string]: someType</code>），要么使用类型断言（<code>opts as Options</code>）</p>
<h4 id="空对象" tabindex="-1">空对象 <a class="header-anchor" href="#空对象" aria-label="Permalink to &quot;空对象&quot;">&ZeroWidthSpace;</a></h4>
<p>空对象是 TypeScript 的一种特殊值，也是一种特殊类型</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// const obj:{} = {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj.prop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 123</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 错误</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> pt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">pt.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">pt.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> pt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用分布声明一个对象，使用扩展运算符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> pt0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> pt1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> pt2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> pt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">pt0, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">pt1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">pt2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span></code></pre>
</div><p><strong>注意⚠️：空对象没有自定义属性，所以对自定义属性赋值就会报错。空对象只能使用继承的属性，即继承自原型对象 Object.prototype 的属性</strong></p>
<p><strong>空对象作为类型</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 等同于</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// let d:Object;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>
</div><p>各种类型的值（除了null 和 undefined）都可以赋值给空对象类型，跟 Object 类型的行为是一样的
<strong>因为 Object 可以接受各种类型的值，而空对象是 Object 类型的简写，所以它不会有严格字面量检查，赋值时总是允许多余的属性，只是不能读取这些属性</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Empty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {myProp: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, anotherProp: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">b.myProp </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错 变量b的类型是空对象，视同Object类型，不会有严格字面量检查，但是读取多余的属性会报错</span></span></code></pre>
</div><p>如果想强制使用没有任何属性的对象，可以采用下面的写法：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> WithoutProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> never</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> WithoutProperties</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { prop: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span></code></pre>
</div><p><strong><code>[key: string]: never</code> 表示字符串属性名是不存在的，因此其他对象进行赋值时就会报错</strong></p>
<h3 id="总结-2" tabindex="-1">总结 <a class="header-anchor" href="#总结-2" aria-label="Permalink to &quot;总结&quot;">&ZeroWidthSpace;</a></h3>
<h2 id="interface-接口" tabindex="-1">Interface 接口 <a class="header-anchor" href="#interface-接口" aria-label="Permalink to &quot;Interface 接口&quot;">&ZeroWidthSpace;</a></h2>
<p>interface 是对象的模板，可以看作是一种类型约定，中文译为“接口”。使用了某个模板的对象，就拥有了指定的类型结构</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  firstName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  lastName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>方括号运算符可以取出 interface 某个属性的类型</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'a'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// string</span></span></code></pre>
</div><p>表示对象的常见 5 种语法形式：</p>
<ul>
<li>对象属性</li>
<li>对象的属性索引</li>
<li>对象方法</li>
<li>函数</li>
<li>构造函数</li>
</ul>
<ol>
<li>对象属性：（注意⚠️：属性之间使用分号或逗号分隔，最后一个属性结尾的分号或逗号可以省略）</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="2">
<li>对象的属性索引：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>注意：属性索引共用 string、number、symbol 三种类型</strong></p>
<p>一个接口中，最多只能定义一个字符串索引。<strong>字符串索引会约束该类型中所有名字为字符串的属性</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyObj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 编译错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>属性的数值索引，指的是数组的类型</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [prop：number]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'a'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'b'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span></code></pre>
</div><p>如果一个 interface 同时定义了字符串索引和数值索引，那么数值索引必须服从于字符串索引。因为在 JavaScript 中，<strong>数值属性名最终是自动转换成字符串属性名</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错，数值索引必须兼容字符串索引的类型声明</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="3">
<li>对象的方法：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法二</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法三</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>或属性名使用表达式：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'f'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [f](</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>类型方法重载：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意：由于没有给出重载的实现方法，需要额外在对象外部给出函数方法的实现</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'boolean'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'string'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'string'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'wrong parameters'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  f: MyFunc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="4">
<li>函数：声明独立的函数</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)： number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="5">
<li>构造函数：内部使用  new 关键字，表示构造函数</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ErrorConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h3 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>interface 继承 interface，使用 extends 关键字，会从继承的接口里面拷贝属性，这样就不用书写重复属性类型声明</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Circle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  radius</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 多重继承，相当于多个父接口的合并</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Circle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  radius</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>注意⚠️：子接口与父接口存在同名属性情况下，子接口会覆盖父接口的属性。而且，子接口与父接口的同名属性类型必须是兼容，不能有冲突，否则会报错：</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>而且，多重继承时，如果多个父接口存在同名属性，那么这些同名属性不能有类型冲突，否则会报错：</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Baz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="2">
<li>interface 继承 type：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Country</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  capital</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> CountryWithPop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Country</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  population</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>注意⚠️：type 声明的是对象才可以继承</strong></p>
<ol start="3">
<li>interface 继承 class</li>
</ol>
<p>继承 class 的所有成员属性</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>注意⚠️：某些类拥有私有成员和保护成员，interface 可以继承这样的类，但是意义不大</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  protected</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错，对象不能实现这些成员</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错，这个 class 与 A 之间无法构成父子类关系</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h3 id="接口合并" tabindex="-1">接口合并 <a class="header-anchor" href="#接口合并" aria-label="Permalink to &quot;接口合并&quot;">&ZeroWidthSpace;</a></h3>
<p>多个同名接口会合并成一个接口（注意⚠️：同一个属性有多个类型声明，不能有类型冲突）</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>为了兼容 JavaScript 的行为。JavaScript 开发者常常对全局对象或者外部库，添加自己的属性和方法。那么，只要使用 interface 给出这些自定义属性和方法的类型，就能自动跟原始的 interface 合并，使得扩展外部类型非常方便
使用举例：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// Web 网页开发经常会对windows对象和document对象添加自定义属性，但是 TypeScript 会报错，因为原始定义没有这些属性。解决方法就是把自定义属性写成 interface，合并进原始定义</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">document.foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>
</div><p>同名接口合并中，同名方法有不同的类型声明，会发生函数重载（<strong>注意⚠️：顺序很重要，越靠后定义，优先级越高，排在函数重载的越前面</strong>）：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Cloner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Cloner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Sheep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Sheep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Cloner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 等同于</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Cloner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Sheep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Sheep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>但有一个例外，同名方法中，如果有一个参数是字面量类型，字面量类型有更高的优先级：</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 等同于</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// createElement 方法可以根据不同的参数生成不同的 HTML 节点对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tagName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tagName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "div"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HTMLDivElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tagName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "span"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HTMLSpanElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tagName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tagName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "canvas"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HTMLCanvasElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 等同于，参数为字面量的类型声明会排到最前面，返回具体的 HTML 节点对象。类型越不具体的参数，排在越后面，返回通用的 HTML 节点对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tagName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "canvas"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HTMLCanvasElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tagName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "div"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HTMLDivElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tagName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "span"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HTMLSpanElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tagName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tagName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意：如果使用了联合类型声明，对应的同名属性也是联合类型</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Circle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  area</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> bigint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  area</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Circle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">s.area;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// bigint | number</span></span></code></pre>
</div><h3 id="interface-与-type-的异同" tabindex="-1">interface 与 type 的异同 <a class="header-anchor" href="#interface-与-type-的异同" aria-label="Permalink to &quot;interface 与 type 的异同&quot;">&ZeroWidthSpace;</a></h3>
<p>很多对象类型既可以用 interface 表示，也可以用 type 表示。而且，两者往往可以换用，几乎所有的 interface 命令都可以改写 type 命令</p>
<h4 id="相同点" tabindex="-1">相同点 <a class="header-anchor" href="#相同点" aria-label="Permalink to &quot;相同点&quot;">&ZeroWidthSpace;</a></h4>
<ol>
<li>都能为对象类型起名：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Country</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  capital</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Country</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  capital</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意：跟 class 定义一个类，同时定义一个对象类型不一样，class 会创造一个值，编译后依然存在，只想要一个类型的话，最好使用 type 或 interface</p>
<h4 id="不同点" tabindex="-1">不同点 <a class="header-anchor" href="#不同点" aria-label="Permalink to &quot;不同点&quot;">&ZeroWidthSpace;</a></h4>
<ol>
<li>type 能够表示非对象类型，而 interface 只能表示对象类型（包括数组、函数等）；</li>
<li>interface 可以继承，type 不支持继承（可以使用 &amp; 运算符合并，重新定义一个类型）；</li>
</ol>
<p><strong>注意⚠️：继承时， type 和 interface 可以换用，interface 也可以继承 type（两种方式写法不一样）</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> = { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> numebr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span></code></pre>
</div><ol start="3">
<li>同名 interface 会自动合并，而 type 会报错，type 不允许同名多次定义，说明 interface 是开放的，可以添加属性，type 则是封闭的，不能添加属性，只能定义新的 type；</li>
<li>interface 不能包含属性映射，但是 type 可以：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> PointCopy1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> PointCopy2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [Key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> keyof Point]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span></code></pre>
</div><ol start="5">
<li>this 关键字只能用于 interface：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">： </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Calculator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> num</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="6">
<li>type 可以扩展原始数据类型，interface 不行：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'new'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'new'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="7">
<li>interface 无法表达某些复杂类型（比如交叉类型和联合类型），但是 type 可以：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> AorB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> AorBwithName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> AorB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span></code></pre>
</div><p><strong>综上所述：如果有复杂的类型运算，那么没有其他选择只能使用 type；一般情况下，interface 灵活性比较高，便于扩充类型或自动合并，建议优先使用</strong></p>
<h3 id="总结-3" tabindex="-1">总结 <a class="header-anchor" href="#总结-3" aria-label="Permalink to &quot;总结&quot;">&ZeroWidthSpace;</a></h3>
<h2 id="class-类型" tabindex="-1">Class 类型 <a class="header-anchor" href="#class-类型" aria-label="Permalink to &quot;Class 类型&quot;">&ZeroWidthSpace;</a></h2>
<h4 id="基本使用-2" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用-2" aria-label="Permalink to &quot;基本使用&quot;">&ZeroWidthSpace;</a></h4>
<p>类的属性可以在顶层声明，也可以在构造方法内部声明</p>
<ol>
<li>顶层声明属性：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 不声明，默认是 any</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 声明给初始值，不声明类型，自动推断</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 非空断言</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>TypeScript strictPropertyInitialization 设置默认初始化值</p>
<ol start="2">
<li>readonly 只读修饰符：</li>
</ol>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'bar'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'bar'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确，设置只读属性的初始值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'bar'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确，修改只读属性的初始值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>注意⚠️：构造方法修改只读属性的值也是可以的。或者说，如果两个地方都设置了只读属性的值，以构造方法为准。在其他方法修改只读属性都会报错</strong></p>
<ol start="3">
<li>方法的类型</li>
</ol>
<p>类的方法就是普通函数，跟函数的声明方式一致，可以使用参数默认值和函数重载</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> point.x,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> point.y</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 参数默认值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 函数重载</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">xs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>注意⚠️：构造方法不能返回值类型，否则报错，因为总是返回实例对象</strong></p>
<p>1.4 存储器方法
存取器是特殊的类方法，包括取值器（读取属性）和存值器（写入属性）</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  _name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">._name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">._name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 如果只设置 get 则默认只读</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  _name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">._name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">c.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'bar'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span></code></pre>
</div><p>get 和 set 方法，TypeScript 5.1 版之前必须类型兼容，之后可以不兼容，但是可访问性必须一致，要么都为公开方法，要么都为私有方法</p>
<p>1.5 属性索引
可以定义属性索引</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[s] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>注意⚠️：由于类的方法是一种特殊属性（属性值为函数的属性），所以属性索引的类型定义也涵盖了方法。如果一个对象同时定义了属性索引和方法，那么前者必须包含后者的类型</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 属性存储器视同属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> isInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 不会报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="类的-interface-接口" tabindex="-1">类的 interface 接口 <a class="header-anchor" href="#类的-interface-接口" aria-label="Permalink to &quot;类的 interface 接口&quot;">&ZeroWidthSpace;</a></h4>
<ol>
<li>implements 关键字</li>
</ol>
<p>interface 接口或 type 别名，可以用对象的形式，为 class 指定一组检查条件。然后，类使用 implements 关键字，表示当前类满足这些<strong>外部类型条件</strong>的限制</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Country</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  capital</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 或者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Country</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  capital</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyCountry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Country</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  capital</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>注意⚠️：interface 只是指定检查条件，如果不满足这些条件就会报错，它并不能代替 class 自身的类型声明</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// s 的类型是 any，不能替代自身的类型声明</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">b.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类可以定义接口没有声明的方法和属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyPoint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>implements 关键字后面，不仅可以是接口，也可以是另一个类，这时后面的类将会被当做接口处理</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  move</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyCar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 不可省略</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  move</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {};   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 不可省略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>注意⚠️：interface 描述的是类的对外接口，也就是实例的公开属性和公开方法，不能定义私有的属性和方法。这是因为 TypeScript 设计者认为，私有属性是类的内部实现，接口作为模板，不应该涉及类的内部代码写法</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> member</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ol start="2">
<li>实现多个接口</li>
</ol>
<p>类可以实现多个接口（相当于接受多重限制），每个接口之间使用逗号隔离</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Car</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MotorVehicle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Flyable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Swimmable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>建议：同时实现多个接口并不是一个好的方法，容易使代码难以维护管理，推荐以下方法改造：</p>
<ul>
<li>类的继承</li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Car</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MotorVehicle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> SecretCar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Car</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Flyable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Swimmable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 也可以修改</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MotorVehicle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Flyable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Swimmable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> SuperCar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MotoVehicle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Flyable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Swimmable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> SecretCar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> SuperCar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ul>
<li>接口的继承</li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>注意⚠️：发生多重实现时（即一个接口同时实现多个接口），不同接口不能有互相冲突的属性</strong></p>
<ol start="3">
<li>类与接口的合并</li>
</ol>
<p>注意⚠️：不允许有两个同名的类，如果有一个类和一个接口同名，那么接口就会被合并到类里面</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a.x </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a.y </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 10</span></span></code></pre>
</div><p>注意：合并进类的非空属性，可能为 undefined，没有赋值</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a.y </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// undefined</span></span></code></pre>
</div><h4 id="class-类型-1" tabindex="-1">Class 类型 <a class="header-anchor" href="#class-类型-1" aria-label="Permalink to &quot;Class 类型&quot;">&ZeroWidthSpace;</a></h4>
<ol>
<li>实例类型</li>
</ol>
<p><strong>类本身就是一种类型，但是它代表该类的实例类型，而不是 class 的自身类型</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> green</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'green'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 其他写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MotorVehicle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Car</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MotorVehicle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> c1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Car</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法二</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> c2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">MotorVehicle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span></code></pre>
</div><p>TypeScript 有三种方法可以为对象类型起名：type、interface 和 class</p>
<p>获取一个类的自身类型：typeof 运算符</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 错误</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  PointClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> PointClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(x, y);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改为</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  PointClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Point,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> PointClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(x, y);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>JavaScript 中，<strong>类只是构造函数的一种语法糖，本质上是构造函数的另一种写法</strong>。所以，类的自身类型可以写成构造函数的形式</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 如上代码可以修改为</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  PointClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 或者对象形式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // PointClass: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // new (x:number, y:number): Point</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // }</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> PointClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(x, y);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 抽离出来</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> PointConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="结构类型原则-1" tabindex="-1">结构类型原则 <a class="header-anchor" href="#结构类型原则-1" aria-label="Permalink to &quot;结构类型原则&quot;">&ZeroWidthSpace;</a></h4>
<p>Class 也遵循“结构类型原则”。一个对象只要满足 Class 的实例结构，就跟该 Class 属于同一个类型</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">arg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  amount: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(bar); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span></code></pre>
</div><p>如果两个类的实例结构相同，那么这两个类就是兼容的，可以用在对方的使用场合</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> cust</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Customer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span></code></pre>
</div><p>总之，只要 A 类具有 B 类的结构，哪怕还有额外的属性和方法，TypeScript 也认为 A 兼容 B 的类型</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 其他对象跟类的使用结构也是如此</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'John'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span></code></pre>
</div><p>空类不包含任何成员，任何其他类都可以看作与空类结构相同。因此，凡是类型为空类的地方，所有类（包括对象）都可以使用</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({});</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(window);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(fn);</span></span></code></pre>
</div><p>注意⚠️：确定两个类的兼容关系时，只检查实例成员，不考虑静态成员和构造方法</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  static</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span></code></pre>
</div><p>如果类中存在私有成员（private）或保护成员（protected），那么确定兼容关系时，TypeScript 要求私有成员和保护成员来自同一个类，这意味着两个类需要存在继承关系</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 情况一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'a'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 情况二</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  protected</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'a'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  protected</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'b'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span></code></pre>
</div><h4 id="类的继承" tabindex="-1">类的继承 <a class="header-anchor" href="#类的继承" aria-label="Permalink to &quot;类的继承&quot;">&ZeroWidthSpace;</a></h4>
<p>类（这里又称“子类”）可以使用 extends 关键字继承另一个类（这里又称“基类”）的所有属性和方法
子类可以覆盖基类的同名方法：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 注意⚠️：一般使用 super 关键词代替基类的常见做法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`Hello, ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 但是子类的同名方法不能与基类的类型定义冲突</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Hello, world!'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 报错</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`Hello, ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>子类与基类的可访问性设置：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  protected</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  protected</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  protected</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  protected</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>注意⚠️：extends 关键词后面不一定是类名，可以是表达式，只要它的类型有构造函数就可以</strong></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 例一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 例二</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 例三</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'Hello from A'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'Hello from B'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Greeter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> GreeterConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Greeter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getGreeterBase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">GreeterConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getGreeterBase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>例三，执行之后也是一个表达式</p>
<p>只设置了类型、没有设置初值的顶层属性，有一个比较重要的说明：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  animalStuff</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Dog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  dogStuff</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> AnimalHouse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  resident</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.resident </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> animal;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> DogHouse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> AnimalHouse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  resident</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">dog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(dog);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 如果编译代码 target 大于等于 ES2022</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> dog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  animalStuff: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'animal'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  dogStuff: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'dog'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> dogHouse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> DogHouse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(dog);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(dogHouse.resident) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 注意这里拿不到基类的值：undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改如下：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> DogHouse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> AnimalHouse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  declare</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> resident</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">dog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(dog);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="可访问性修饰符" tabindex="-1">可访问性修饰符 <a class="header-anchor" href="#可访问性修饰符" aria-label="Permalink to &quot;可访问性修饰符&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>public：默认修饰符，如果省略不写，实际上就带有改修饰符，类的属性和方法默认都是外部可访问的；</li>
<li>private：修饰符表示私有成员，只能用在当前类的内部，类的实例和子类都不能使用该成员；</li>
<li>protected：修饰符表示该成员是保护成员，只能在类的内部使用该成员，实例无法使用该成员，但是子类内部可以使用；</li>
</ul>
<h3 id="总结-4" tabindex="-1">总结 <a class="header-anchor" href="#总结-4" aria-label="Permalink to &quot;总结&quot;">&ZeroWidthSpace;</a></h3>
<h2 id="泛型" tabindex="-1">泛型 <a class="header-anchor" href="#泛型" aria-label="Permalink to &quot;泛型&quot;">&ZeroWidthSpace;</a></h2>
<p>使用方式：<code>类型名&lt;泛型列表&gt;</code></p>
<h4 id="_1、常见命名规则" tabindex="-1">1、常见命名规则 <a class="header-anchor" href="#_1、常见命名规则" aria-label="Permalink to &quot;1、常见命名规则&quot;">&ZeroWidthSpace;</a></h4>
<p>惯例：类型参数名称是单个大写字母：用于区分类型变量和普通类或接口名称之间的区别</p>
<ul>
<li><code>T(Type)</code>：类型参数名；</li>
<li><code>K(Key)</code>：对象的键类型；</li>
<li><code>V(Value)</code>：对象的值类型；</li>
<li><code>P(Property)</code>：对象的属性类型；</li>
<li><code>R(Result)</code>：类型推导的结果类型；</li>
</ul>
<h4 id="_2、泛型条件" tabindex="-1">2、泛型条件 <a class="header-anchor" href="#_2、泛型条件" aria-label="Permalink to &quot;2、泛型条件&quot;">&ZeroWidthSpace;</a></h4>
<p><code>T extends U ? X : Y</code></p>
<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 字符串或数字判断</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> IsStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'super'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'super456'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> IsNum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 123</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 123456</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 对象类型收窄</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> IsObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// Exclude</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Exclude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">U</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> U</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> never</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Exclude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// => (1 extends 1 | 3 ? never : 1) | (2 extends 1 | 3 ? never : 2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// => never | 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// => 2</span></span></code></pre>
</div><h4 id="_3、泛型推断-infer" tabindex="-1">3、泛型推断 infer <a class="header-anchor" href="#_3、泛型推断-infer" aria-label="Permalink to &quot;3、泛型推断 infer&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FunctionParamType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> infer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> P</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> T</span></span></code></pre>
</div><p>实际案例：</p>
<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> GetAge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getAge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> GetAge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FunctionParamType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">GetAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// Person</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> TestString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FunctionParamType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// string</span></span></code></pre>
</div><h3 id="分布式条件类型" tabindex="-1">分布式条件类型 <a class="header-anchor" href="#分布式条件类型" aria-label="Permalink to &quot;分布式条件类型&quot;">&ZeroWidthSpace;</a></h3>
<p><em>泛型参数与裸类型参数</em></p>
<h4 id="_1、理解分布式条件类型" tabindex="-1">1、理解分布式条件类型 <a class="header-anchor" href="#_1、理解分布式条件类型" aria-label="Permalink to &quot;1、理解分布式条件类型&quot;">&ZeroWidthSpace;</a></h4>
<h4 id="_2、从-typescript-源码层面看分布式判断" tabindex="-1">2、从 TypeScript 源码层面看分布式判断 <a class="header-anchor" href="#_2、从-typescript-源码层面看分布式判断" aria-label="Permalink to &quot;2、从 TypeScript 源码层面看分布式判断&quot;">&ZeroWidthSpace;</a></h4>
<h4 id="_3、条件类型在工具类型中的重要作用" tabindex="-1">3、条件类型在工具类型中的重要作用 <a class="header-anchor" href="#_3、条件类型在工具类型中的重要作用" aria-label="Permalink to &quot;3、条件类型在工具类型中的重要作用&quot;">&ZeroWidthSpace;</a></h4>
<h3 id="typescript-内置工具类型" tabindex="-1">TypeScript 内置工具类型 <a class="header-anchor" href="#typescript-内置工具类型" aria-label="Permalink to &quot;TypeScript 内置工具类型&quot;">&ZeroWidthSpace;</a></h3>
<CustomImage src='/growth-record/base/javascript/tsstudy01.webp' /><ul>
<li><code>Partial&lt;T&gt;</code>：将传入属性变成可选；</li>
<li><code>Required&lt;T&gt;</code>：将传入属性变成必选；</li>
<li><code>Readonly&lt;T&gt;</code>：将传入属性变成只读；</li>
<li><code>Record&lt;T, U&gt;</code>：将 T 作为属性，U 作为类型生成新的对象类型；</li>
<li><code>Pick&lt;T, U&gt;</code>：从 T 抽取包含 U 的属性；</li>
<li><code>Omit&lt;T, U&gt;</code>：从 T 删除包含 U 的属性；</li>
<li><code>Exclude&lt;T, U&gt;</code>：从 T 中过滤 U 不存在的属性；</li>
<li><code>Extract&lt;T, U&gt;</code>：从 T 中过滤存在 U 的属性；</li>
</ul>
<p><strong>函数相关</strong>：</p>
<ul>
<li>Parameters：函数参数作为元组类型返回；</li>
<li>ReturnType：获取函数的返回类型；</li>
<li>ConstructorParameters：把构建函数作为一个元素类型返回；</li>
</ul>
<p>常见 React 类型：</p>
<CustomImage src='/growth-record/base/javascript/tsstudy02.png' /><h4 id="_1、typescript-内置工具类型的进阶实现" tabindex="-1">1、TypeScript 内置工具类型的进阶实现 <a class="header-anchor" href="#_1、typescript-内置工具类型的进阶实现" aria-label="Permalink to &quot;1、TypeScript 内置工具类型的进阶实现&quot;">&ZeroWidthSpace;</a></h4>
<p>Partial、Required：</p>
<ol>
<li>面向实际项目需求的工具类型；</li>
<li>递归的 Deep 实现；</li>
<li>更细粒度的部分修饰；</li>
</ol>
<p>Pick、Omit：</p>
<ol>
<li>通过映射类型与索引类型实现接口裁剪；</li>
<li>更严格的 Omit；</li>
<li>基于键值类型的接口与裁剪，以及更严格的类型比较；</li>
</ol>
<p>Exclude 与 Extract：</p>
<ol>
<li>又见分布式条件类型；</li>
<li>交、并、补、差集；</li>
<li>对象键名的交、并、补、差集；</li>
<li>类型层面的对象合并；</li>
</ol>
<p>待更新🚀...</p>
<h2 id="学习资料" tabindex="-1">学习资料 <a class="header-anchor" href="#学习资料" aria-label="Permalink to &quot;学习资料&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">TypeScript 官方文档</a></li>
<li><a href="https://wangdoc.com/typescript/" target="_blank" rel="noreferrer">TypeScript 教程-阮一峰</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue 优化技巧]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/optimization-tips.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/optimization-tips.html</guid>
            <pubDate>Sun, 29 Oct 2023 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vue-优化技巧" tabindex="-1">Vue 优化技巧 <a class="header-anchor" href="#vue-优化技巧" aria-label="Permalink to &quot;Vue 优化技巧&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="基础优化" tabindex="-1">基础优化 <a class="header-anchor" href="#基础优化" aria-label="Permalink to &quot;基础优化&quot;">&ZeroWidthSpace;</a></h2>
<p>class 动态值为数组时，这个数组可以是字符串值域对象值的组合</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   // 字符串</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">   'foo bar'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   // 对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     baz: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ]</span></span></code></pre>
</div><p>watch 初始化执行函数替换</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 原代码：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getLimitData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">},</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">		refresh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(val) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (val) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">				this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getLimitData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">},</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 优化代码：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">	refresh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">	 	// handler: 'getLimitData', // 适合监听值改变就调用（包括空值情况）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">		// deep: true, // 该回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">		handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">oldVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">			val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;&#x26;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getLimitData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 前提 val 属于基本类型（数字特殊，已知这个 val 是布尔类型）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    immediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 该回调将会在侦听开始之后被立即调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="学习资料" tabindex="-1">学习资料 <a class="header-anchor" href="#学习资料" aria-label="Permalink to &quot;学习资料&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://juejin.cn/post/6844903677262561293" target="_blank" rel="noreferrer">Vue 应用性能优化指南 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7005880217684148231#heading-17" target="_blank" rel="noreferrer">我在项目中用实际用到的22个Vue优化技巧 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7277089907974422588?utm_source=gold_browser_extension" target="_blank" rel="noreferrer">妙用computed拦截v-model，面试管都夸我细 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6902420248851382285" target="_blank" rel="noreferrer">使用Vue自定义指令实现右键菜单</a></li>
<li><a href="https://juejin.cn/post/6901466994478940168" target="_blank" rel="noreferrer">基于Vue的前端架构，我做了这15点</a></li>
<li><a href="https://juejin.cn/post/6844903910881116174" target="_blank" rel="noreferrer">vue文档里你没捡起来的宝藏 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7098688018663342111" target="_blank" rel="noreferrer">25个 Vue 技巧,学了这么久才知道还能这么用 - 掘金</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[从《关于语雀 23 日故障的公告》学习复盘]]></title>
            <link>https://super456.github.io/posts/growth-record/other/softSkills/yuque-bug-study.html</link>
            <guid>https://super456.github.io/posts/growth-record/other/softSkills/yuque-bug-study.html</guid>
            <pubDate>Fri, 27 Oct 2023 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="从《关于语雀-23-日故障的公告》学习复盘" tabindex="-1">从《关于语雀 23 日故障的公告》学习复盘 <a class="header-anchor" href="#从《关于语雀-23-日故障的公告》学习复盘" aria-label="Permalink to &quot;从《关于语雀 23 日故障的公告》学习复盘&quot;">&ZeroWidthSpace;</a></h1>
<p><a name="VSrry"></a></p>
<h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">&ZeroWidthSpace;</a></h2>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>为啥要写这篇复盘的分析了，一呢我也是程序员，我知道生产事故对用户的造成的影响和损失，特别是严重的事故问题，所以我也会特别重视自己写的代码，敬畏生产吧；二是想学习一下大厂比较官方正式生产事故复盘说明，以备不时之需（程序员都希望自己写的代码没有任何 bug），可以当机立断，快速应对问题，解决问题，做好对内复盘、对外公告等事情，不至于手忙脚乱，不知所措的好，特此有感而发的记录</p>
<p>事情的前因后果简单地说：在 2023 年 10 月 23 日下午，具体时间两点钟左右开始陆续有群友反馈语雀网站崩了，访问不了，到三点多一点语雀公众号发通知确定是系统崩了（图一），当天晚上系统恢复通知（图二）。到 24 日晚上语雀公众发公众通知说明问题原因及补偿措施一文学习语雀团队是如何对生产事故</p>
</div>
<CustomImage src="/growth-record/other/softSkills/yuque-bug-study01.webp" /> <br />图一<br /><CustomImage src="/growth-record/other/softSkills/yuque-bug-study02.webp" /><br />图二<br />复盘分为几个步骤进行说明，条理清晰和循序渐进<p><a name="n5eSd"></a></p>
<h2 id="第一步-交代问题及道歉" tabindex="-1">第一步：交代问题及道歉 <a class="header-anchor" href="#第一步-交代问题及道歉" aria-label="Permalink to &quot;第一步：交代问题及道歉&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>10 月 23 日语雀出现重大服务故障，且持续 7 个多小时才完全恢复</p>
</blockquote>
<p>先说明发生了什么问题，以及最终结果（什么时候恢复、多久恢复使用等用语，时间影响范围）</p>
<blockquote>
<p>给用户使用造成极大不便，对此我们深感抱歉</p>
</blockquote>
<p>然后向用户诚恳的道歉，语言一定要承认自己错了</p>
<blockquote>
<p>经过复盘，我们在这里向大家进一步说明故障原因、修复过程和改进措施。</p>
</blockquote>
<p>如果可以的话，进一步说明事故的前因后果，增加道歉的心意及事故问题的前因后果、后续如何改进，希望得到用户的认可和谅解。增加用户的同理心和共鸣感</p>
<p><a name="vTfjD"></a></p>
<h2 id="第二步-说明事故原因" tabindex="-1">第二步：说明事故原因 <a class="header-anchor" href="#第二步-说明事故原因" aria-label="Permalink to &quot;第二步：说明事故原因&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>10 月 23 日下午，服务语雀的数据存储运维团队在进行升级操作时，由于新的运维升级工具 bug，导致华东地区生产环境存储服务器被误下线。受其影响，语雀数据服务发生严重故障，造成大面积的服务中断</p>
</blockquote>
<p>说明时间（不用太具体），事故是怎么造成的</p>
<p><a name="puVGu"></a></p>
<h2 id="第三步-具体过程" tabindex="-1">第三步：具体过程 <a class="header-anchor" href="#第三步-具体过程" aria-label="Permalink to &quot;第三步：具体过程&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<ul>
<li>14:07 数据存储运维团队收到监控系统报警，定位到原因是存储在升级中因新的运维工具 bug 导致节点机器下线；</li>
<li>14:15 联系硬件团队尝试将下线机器重新上线；</li>
<li>15:00 确认因存储系统使用的机器类别较老，无法直接操作上线，立即调整恢复方案为从备份系统中恢复存储数据；</li>
<li>15:10 开始新建存储系统，从备份中开始恢复数据，由于语雀数据量庞大，此过程历时较长；</li>
<li>19 点完成数据恢复；同时为保障数据完整性，在完成恢复后，用时 2 个小时进行数据校验；</li>
<li>21 点存储系统通过完整性校验，开始和语雀团队联调；</li>
<li>22 点恢复语雀全部服务。</li>
</ul>
</blockquote>
<p>从事故的发现、修复解决、验证、恢复上线的几个角度简单明了说明在做的哪些事情</p>
<blockquote>
<p>用户所有数据均未丢失。</p>
</blockquote>
<p>最重要一点就是必须说明强调用户关心的核心——数据没问题。镇定剂，防止用户恐慌或投诉
<a name="ddlF2"></a></p>
<h2 id="第四步-改进措施" tabindex="-1">第四步：改进措施 <a class="header-anchor" href="#第四步-改进措施" aria-label="Permalink to &quot;第四步：改进措施&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>技术变更操作的“可监控，可灰度，可回滚”的系统化建设和流程审计，从同 Region 多副本容灾升级为两地三中心的高可用能力，设计足够的数据和系统冗余实现快速恢复，并进行定期的容灾应急演练。只有这样，才能提升严重基础设施故障时的恢复速度，并从根本上避免这类故障再次出现</p>
</blockquote>
<p>官方术语，作为一个专业的、成熟的、靠谱的技术团队必备说明，特别是专有术语的应用，可以起到锦上添花的作用</p>
<blockquote>
<p>1、升级硬件版本和机型，实现离线后的快速上线。该措施在本次故障修复中已完成；
2、运维团队加强运维工具的质量保障与测试，杜绝此类运维 bug 再次发生；
3、缩小运维动作灰度范围，增加灰度时间，提前发现 bug；
4、从架构和高可用层面改进服务，为语雀增加存储系统的异地灾备。</p>
</blockquote>
<p>从根本上避免这次事故的发生，及采取的措施角度进一步说明。由小到大的顺序改进措施</p>
<p><a name="UhWho"></a></p>
<h2 id="第五部-赔偿方案" tabindex="-1">第五部：赔偿方案 <a class="header-anchor" href="#第五部-赔偿方案" aria-label="Permalink to &quot;第五部：赔偿方案&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>针对语雀个人用户，我们赠送 6 个月的会员服务。操作流程：进入工作台「账户设置」，点击左侧「会员信息」，在会员信息页面点击「立即领取」，即可获得赠送服务</p>
</blockquote>
<p>C 端产品一般都比较重视这一块，防止用户流失或口碑不好，给用户一点补偿和心理安慰</p>
<p><a name="FtydR"></a></p>
<h2 id="第六步-再次道歉" tabindex="-1">第六步：再次道歉 <a class="header-anchor" href="#第六步-再次道歉" aria-label="Permalink to &quot;第六步：再次道歉&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>这次的故障让我们深切地感受到了用户对语雀的依赖以及语雀肩上的重大责任。再次向所有语雀用户表达我们诚挚的歉意</p>
</blockquote>
<p>首尾呼应，再次增加道歉的心意</p>
<blockquote>
<p>我们将持续提升语雀的服务质量和服务稳定性，不辜负每一位用户的信任！</p>
</blockquote>
<p>表达团队做好的决心</p>
<p><a name="Wh2QW"></a></p>
<h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">&ZeroWidthSpace;</a></h2>
<p>总体是很中规中矩的公告说明，跟我工作中生产事故的复盘基本差不多。公告中每一个步骤顺序和阐述的内容措辞，都是很专业的，不是虽然敷衍了事的。很有借鉴和参考价值，万一真的需要自己做生产事故复盘的时候，说不定可以参考下这篇文章，当然希望用不到最好了</p>
<p>总而言之，生产事故，作为一个程序员是最不想发生的，但有些事情不是自己的控制范围或能力范围，很难避免的。所以我们要做的就是写好每一行代码，重视自己所做的事情，敬畏生产。当然，如果真的不可避免或不知道的情况下发生了，也不要慌乱，首先先解决问题，紧急上线。然后在进行复盘分析，避免类似的事情再次发生。还有我们都是普通的程序员，不是天才，不要完美主义心态，不然会给自己很大的压力，做好该做的事情，力所能及的做好自己</p>
<p>原文阅读：<br /><a href="https://mp.weixin.qq.com/s/WFLLU8R4bmiqv6OGa-QMcw" target="_blank" rel="noreferrer">关于语雀 23 日故障的公告</a></p>
<p>还有一个号主对此次事件的解读（评论有点意思）：<br /><a href="https://mp.weixin.qq.com/s/Nykpf0-UW9ig36snxIrlwA" target="_blank" rel="noreferrer">语雀，这波故障，放眼整个互联网也是炸裂般的存在。</a></p>
<CustomImage src="/growth-record/other/softSkills/yuque-bug-study03.webp" /><br />想想好像确实是这么一回事，哈哈哈<p>推荐阅读：<br /><a href="https://mp.weixin.qq.com/s/M-ZYHR0_GZcA-iwuDJy_XQ" target="_blank" rel="noreferrer">语雀 P0 事故复盘，这 9 个字亮了！</a></p>
<p><a href="https://mp.weixin.qq.com/s/XpxK0-amqraM31B6BfamOg" target="_blank" rel="noreferrer">关于“语雀故障” 的思考：可监控！可灰度！可回滚！</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 19 本《这样读书就够了》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/zheyangdushujiugoule.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/zheyangdushujiugoule.html</guid>
            <pubDate>Sat, 07 Oct 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[知识焦虑时代，每个人都明白学习的重要性，但大部分人都有读不完、没时间、看不懂的困惑。 针对如何处理繁杂信息、如何高效迭代知识、如何将常识学以致用的问题，高级学习者的杀手锏是： 1. 具备高效能学习力，把知识拆为自己的能力。 2. 构建个人知识体系，让一切学习助力我成为专家。 本书是拆书帮创始人赵周基于《这样读书就够了》第一版的完善之作。拆书法与成人教育学的五大公理一脉相承，强调以学习者为中心，关联经验，聚焦实际问题的解决。落到实处即是供组织学习的“RIA现场学习”和供个人学习的“便签学习法”。 这本书将让你收获更高级的学习方法。通过便签法的使用和拆书家的讲解，学习者能快速直击一本书的精髓，并将其转化成工作和生活中用得上的能力。 拆书帮曾服务无数企业、商学院、读书会，它所提供的不只是针对知识的解读，更是对学习者反思力和行动力的催化。学习力是一切能力的基础。拥有学习力，你就拥有了对生活的掌控力。]]></description>
            <content:encoded><![CDATA[<h1 id="第-19-本《这样读书就够了》" tabindex="-1">第 19 本《这样读书就够了》 <a class="header-anchor" href="#第-19-本《这样读书就够了》" aria-label="Permalink to &quot;第 19 本《这样读书就够了》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>知识焦虑时代，每个人都明白学习的重要性，但大部分人都有读不完、没时间、看不懂的困惑。</p>
<p>针对如何处理繁杂信息、如何高效迭代知识、如何将常识学以致用的问题，高级学习者的杀手锏是：</p>
<ol>
<li>具备高效能学习力，把知识拆为自己的能力。</li>
<li>构建个人知识体系，让一切学习助力我成为专家。</li>
</ol>
<p>本书是拆书帮创始人赵周基于《这样读书就够了》第一版的完善之作。拆书法与成人教育学的五大公理一脉相承，强调以学习者为中心，关联经验，聚焦实际问题的解决。落到实处即是供组织学习的“RIA现场学习”和供个人学习的“便签学习法”。</p>
<p>这本书将让你收获更高级的学习方法。通过便签法的使用和拆书家的讲解，学习者能快速直击一本书的精髓，并将其转化成工作和生活中用得上的能力。</p>
<p>拆书帮曾服务无数企业、商学院、读书会，它所提供的不只是针对知识的解读，更是对学习者反思力和行动力的催化。学习力是一切能力的基础。拥有学习力，你就拥有了对生活的掌控力。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>看了简介和前言，阅读前对本书的期望学习目标：</p>
<ul>
<li>高效读一本书的步骤是什么（拆书法）？整理自己的阅读学习方法论；</li>
<li>本书知识如何跟工作生活相结合使用，学以致用，还是说只是单纯的讲大道理，堆鸡汤文学呢；</li>
<li>学习力是什么，如何培养，如何使用，如何一步一步锻炼自己，成就自己的；</li>
</ul>
<p>不经让我想起一句话：读书不是唯一的出路，保持学习才是。</p>
<p>待补充点评🚀...</p>
<p>语雀笔记：</p>
<ul>
<li><a href="https://www.yuque.com/super456/qoriag/vzvgo278tff3r228" target="_blank" rel="noreferrer">20230607 引言</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/lak4x3noby455oas" target="_blank" rel="noreferrer">20230610 读书为什么这么难</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/giw66om4hgqpyase" target="_blank" rel="noreferrer">20230611 从“读书”到“拆书”</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/zsxs9g7x99r32gk1" target="_blank" rel="noreferrer">20230624 学习者的不同境界</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/hzo1v3b835xhepvt" target="_blank" rel="noreferrer">20230901</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/wly3og92otmk2dm2" target="_blank" rel="noreferrer">20230902</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/azvde3sltdf1kvnb" target="_blank" rel="noreferrer">第四章</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/fl7n4powzigwpc4k" target="_blank" rel="noreferrer">第五章 打造学习力的三个维度</a></li>
</ul>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/zheyangdushujiugoule.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 22 本《好诗好在哪里》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/haoshihaozainali.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/haoshihaozainali.html</guid>
            <pubDate>Tue, 03 Oct 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[好诗好在哪里？听都靓讲解古诗名句的美妙诗意！
李白：任世人厌我、妒我、恨我、爱我、笑我、哭我，我只当风曾来过。
那个扶摇直上九万里的大鹏飞至半空跌落，是因为没有力气吗？它激起的风还能传承万世呢，终究是这天地小啊！孔子曾为死去的麒麟哭泣，这大鹏呢，谁会为他哭一场？李白的诗，磅礴大气与清新明丽兼具。但回看他一生的岁月，宦海浮沉荣辱似乎都未能配得上他诗里的酣畅淋漓，不知道在生命最后写下《临终歌》的那一刻，他是否释怀，有无失落？
杜甫：要有多勇敢和坚定，才能义无反顾扑向生命中一场又一场大火。
何谓“诗史”？他当天的感慨，成为了千百年间后世回望的坐标。那个年代的历史是脆弱的，没有相机、录音笔，往往无从说起。那个年代的历史又是坚强的，总有人以血泪作笔墨，一字一句镌刻于时光之上，流传至此，生生不息。
纳兰性德：人不应该活在某时某刻的光环下，人应该活出自我。
很多人无法理解，像纳兰这样功成名就的贵公子，为什么后来不得善终？生在高墙内，飘在红尘中，身不由己，哭笑蹉跎，都不免零落成泥。人终其一生，不是为了成为史书上一则璀璨的注脚，而是按照你的意愿，去成为日照金山的落雪，成为月下茅檐的新燕。不用事与愿违来搪塞人生，愿我们都能勇敢坦荡地做自己，让死水沸腾。
翻开本书，读懂好诗背后的美妙诗意。]]></description>
            <content:encoded><![CDATA[<h1 id="第-22-本《好诗好在哪里》" tabindex="-1">第 22 本《好诗好在哪里》 <a class="header-anchor" href="#第-22-本《好诗好在哪里》" aria-label="Permalink to &quot;第 22 本《好诗好在哪里》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>好诗好在哪里？听都靓讲解古诗名句的美妙诗意！</p>
<p>李白：任世人厌我、妒我、恨我、爱我、笑我、哭我，我只当风曾来过。</p>
<p>那个扶摇直上九万里的大鹏飞至半空跌落，是因为没有力气吗？它激起的风还能传承万世呢，终究是这天地小啊！孔子曾为死去的麒麟哭泣，这大鹏呢，谁会为他哭一场？李白的诗，磅礴大气与清新明丽兼具。但回看他一生的岁月，宦海浮沉荣辱似乎都未能配得上他诗里的酣畅淋漓，不知道在生命最后写下《临终歌》的那一刻，他是否释怀，有无失落？</p>
<p>杜甫：要有多勇敢和坚定，才能义无反顾扑向生命中一场又一场大火。</p>
<p>何谓“诗史”？他当天的感慨，成为了千百年间后世回望的坐标。那个年代的历史是脆弱的，没有相机、录音笔，往往无从说起。那个年代的历史又是坚强的，总有人以血泪作笔墨，一字一句镌刻于时光之上，流传至此，生生不息。</p>
<p>纳兰性德：人不应该活在某时某刻的光环下，人应该活出自我。</p>
<p>很多人无法理解，像纳兰这样功成名就的贵公子，为什么后来不得善终？生在高墙内，飘在红尘中，身不由己，哭笑蹉跎，都不免零落成泥。人终其一生，不是为了成为史书上一则璀璨的注脚，而是按照你的意愿，去成为日照金山的落雪，成为月下茅檐的新燕。不用事与愿违来搪塞人生，愿我们都能勇敢坦荡地做自己，让死水沸腾。</p>
<p>翻开本书，读懂好诗背后的美妙诗意。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《好诗好在哪里》
都靓
26个笔记</p>
<p>◆  点评</p>
<p>2023/10/3 认为一般
总体读完来说，感觉差点什么。有些诗人生平讲解有点敷衍简单叙事了，有些诗词讲解的不够有深度，别无他意。我也喜欢诗词，所以开始看这本书时候是有期望的。但，作者还是写的不错的，学到很多知识和风景见闻</p>
<p>◆  陶渊明：我与我周旋久，宁做我</p>
<blockquote>
<blockquote>
<p>这正应了《世说新语》中的那句“我与我周旋久，宁做我”。</p>
</blockquote>
</blockquote>
<p>◆  王维：松风拂我面，世事欲辨已忘言</p>
<blockquote>
<blockquote>
<p>时来天地皆同力，运去英雄不自由。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>孰知不向边庭苦，纵死犹闻侠骨香</p>
</blockquote>
</blockquote>
<p>◆  元稹：一生浮沉，与君共度</p>
<blockquote>
<blockquote>
<p>诚知此恨人人有，贫贱夫妻百事哀。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>元稹听闻后，写下名句：“垂死病中惊坐起，暗风吹雨入寒窗。”</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一生浮沉，与君共度。</p>
</blockquote>
</blockquote>
<p>◆  李商隐：良辰未必有佳期</p>
<blockquote>
<blockquote>
<p>李白写自我，王维写自然，杜甫写天下，白居易写生活，而李商隐写爱情</p>
</blockquote>
</blockquote>
<p>◆  李煜：梦里不知身是客，一晌贪欢</p>
<blockquote>
<blockquote>
<p>窗外雨潺潺，春意阑珊。罗衾不耐五更寒。梦里不知身是客，一晌贪欢。
独自莫凭栏，无限江山。别时容易见时难。流水落花春去也，天上人间。（《浪淘沙令》）</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>春花秋月何时了，往事知多少。小楼昨夜又东风，故国不堪回首月明中。
雕栏玉砌应犹在，只是朱颜改。问君能有几多愁？恰似一江春水向东流。</p>
</blockquote>
</blockquote>
<p>◆  苏东坡：任生命之风四面吹拂</p>
<blockquote>
<blockquote>
<p>十年生死两茫茫。不思量，自难忘。千里孤坟，无处话凄凉。纵使相逢应不识，尘满面，鬓如霜。
夜来幽梦忽还乡。小轩窗，正梳妆。相顾无言，惟有泪千行。料得年年断肠处，明月夜，短松冈。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人苦不自知</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人类的一切愤怒，本质上都是对自己无能的痛苦。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>夜饮东坡醒复醉，归来仿佛三更。家童鼻息已雷鸣。
敲门都不应，倚杖听江声。
长恨此身非我有，何时忘却营营？夜阑风静縠纹平。
小舟从此逝，江海寄余生。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>莫听穿林打叶声，何妨吟啸且徐行。竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。
料峭春风吹酒醒，微冷，山头斜照却相迎。回首向来萧瑟处，归去，也无风雨也无晴。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>这是苏轼告诉你的第一重境界：不要活在别人的声音和定义中，要找到你自在的方式，而后低头赶路，敬事如仪。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>所以，你要一次次，千千万万次，鼓励自己、认可自己、支持自己，挽狂澜于既倒，扶大厦之将倾。谁怕？！这是反问吗？这其实是对自己莫大的鼓励。一蓑烟雨任平生，风雨既然要来，那我们就走进风雨中。这是苏轼的第二重感受：找到前行的勇气，做自己人生忠实的战友。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>这是苏轼的第三重感受：保持自省，虽身处微凉，却心向光明。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人生如逆旅，我亦是行人。</p>
</blockquote>
</blockquote>
<p>◆  王安石：明月照我还</p>
<blockquote>
<blockquote>
<p>一个一生都在贯彻自己信念的人，就足够值得敬佩。</p>
</blockquote>
</blockquote>
<p>◆  秦观：吾爱吾师</p>
<blockquote>
<blockquote>
<p>《鹊桥仙》：
纤云弄巧，飞星传恨，银汉迢迢暗度。金风玉露一相逢，便胜却人间无数。
柔情似水，佳期如梦，忍顾鹊桥归路！两情若是久长时，又岂在朝朝暮暮。</p>
</blockquote>
</blockquote>
<p>◆  李清照：看取晚来风势，故应难看梅花</p>
<blockquote>
<blockquote>
<p>桃李春风一杯酒，江湖夜雨十年灯</p>
</blockquote>
</blockquote>
<p>◆  陆游：念念不忘即是一生回响</p>
<blockquote>
<blockquote>
<p>未如意事常八九，可与人言无二三。</p>
</blockquote>
</blockquote>
<p>◆  唐伯虎：花落花开年复年</p>
<blockquote>
<blockquote>
<p>桃花坞里桃花庵，桃花庵里桃花仙。桃花仙人种桃树，又摘桃花换酒钱。
酒醒只在花前坐，酒醉还来花下眠。半醒半醉日复日，花落花开年复年。
但愿老死花酒间，不愿鞠躬车马前。车尘马足贵者趣，酒盏花枝贫者缘。
若将富贵比贫者，一在平地一在天。若将花酒比车马，他得驱驰我得闲。
别人笑我太疯癫，我笑他人看不穿。不见五陵豪杰墓，无花无酒锄做田。</p>
</blockquote>
</blockquote>
<p>◆  纳兰性德：让我成为我</p>
<p>2023/10/3 发表想法
忠于自己，追求想要的人生</p>
<blockquote>
<blockquote>
<p>人终其一生，不是为了成为史书上一则璀璨的注脚，而是按照你的意愿，去成为日照金山的落雪，成为月下茅檐的新燕。不用事与愿违来搪塞人生，愿我们都能勇敢坦荡地做自己，让死水沸腾。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人终其一生，不是为了成为史书上一则璀璨的注脚，而是按照你的意愿，去成为日照金山的落雪，成为月下茅檐的新燕。不用事与愿违来搪塞人生，愿我们都能勇敢坦荡地做自己，让死水沸腾。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/haoshihaozainali.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 20 本《半小时漫画中国地理：西藏、青海、云南、贵州》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/banxiaoshimanhuazhongguodili.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/banxiaoshimanhuazhongguodili.html</guid>
            <pubDate>Fri, 29 Sep 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[假如全中国是个班级，地理知识就很好记。 陈磊（混子哥）领衔的半小时漫画团队通过诙谐的语言和手绘漫画的形式，轻轻松松地就把中国三十四个省级行政区的地理知识讲得清清楚楚、明明白白。如果我们把全中国看成一个“班级”，那这事儿就好理解了！ 西藏是美术课代表：穿藏袍、骑牦牛、会画画。 青海是生活管理员：能送水、能拉面、能产矿。 云南是生物课代表：采菌子、养大象、种鲜花。 贵州是进步优等生：建大桥、算数据、产好茶。 翻开本书，尽览祖国大好河山，越看越爱国！]]></description>
            <content:encoded><![CDATA[<h1 id="第-20-本《半小时漫画中国地理-西藏、青海、云南、贵州》" tabindex="-1">第 20 本《半小时漫画中国地理：西藏、青海、云南、贵州》 <a class="header-anchor" href="#第-20-本《半小时漫画中国地理-西藏、青海、云南、贵州》" aria-label="Permalink to &quot;第 20 本《半小时漫画中国地理：西藏、青海、云南、贵州》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>假如全中国是个班级，地理知识就很好记。
陈磊（混子哥）领衔的半小时漫画团队通过诙谐的语言和手绘漫画的形式，轻轻松松地就把中国三十四个省级行政区的地理知识讲得清清楚楚、明明白白。如果我们把全中国看成一个“班级”，那这事儿就好理解了！</p>
<p>西藏是美术课代表：穿藏袍、骑牦牛、会画画。</p>
<p>青海是生活管理员：能送水、能拉面、能产矿。</p>
<p>云南是生物课代表：采菌子、养大象、种鲜花。</p>
<p>贵州是进步优等生：建大桥、算数据、产好茶。</p>
<p>翻开本书，尽览祖国大好河山，越看越爱国！</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《半小时漫画中国地理：西藏、青海、云南、贵州》
陈磊·半小时漫画团队
1个笔记</p>
<p>◆  点评</p>
<p>2023/9/29 认为好看
读起来很轻松，了解了四个省的文化地理特色，之前如果云南大理但都没有了解这么多东西，长见识了</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/banxiaoshimanhuazhongguodili.jpeg" length="0" type="image/jpeg"/>
        </item>
        <item>
            <title><![CDATA[第 17 本《鲜衣怒马少年时》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/xianyinumashaonianshi.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/xianyinumashaonianshi.html</guid>
            <pubDate>Sat, 19 Aug 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[描述文章信息(string)]]></description>
            <content:encoded><![CDATA[<h1 id="第-17-本《鲜衣怒马少年时》" tabindex="-1">第 17 本《鲜衣怒马少年时》 <a class="header-anchor" href="#第-17-本《鲜衣怒马少年时》" aria-label="Permalink to &quot;第 17 本《鲜衣怒马少年时》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>唐诗里的梦想与远方，宋词里的风雅与深情，是中国人最美的记忆。我们自小就熟读很多诗词名篇，对它们的作者却知之甚少。有的诗人甚至像是只发了一条“朋友圈”，就消失在历史的汪洋里。他们都经历了什么？一首首神作的背后，有着怎样的故事？</p>
<p>本书作者选取大小李杜、王孟、元白、刘柳、苏辛 ，以及李清照、陆游等唐宋代表诗人词人，以现代的立场、开阔的视角、幽默的笔调，用小说化或者独白的方式，另类解读他们的人生故事，并对诗歌经典做个性化解读。全书史料翔实，融诗、史于一体，从隋炀帝杨广开始，到陆游为止，讲述了一部热血跌宕的历史，可以让读者更深刻地理解唐诗宋词的时代。</p>
<p>▲唐诗宋词骨灰级爱好者、诗词公号大V“少年怒马”首次出书，另类解读三十位诗词大神，这本读起来非常过瘾的“诗词小说”，展现了一个以前没见过的文学江湖。</p>
<p>▲特别附赠精美折页 ，正面为作者独创《唐诗江湖关系谱》，背面为《千里江山图》(局部）</p>
<p>▲全书双色印刷，版式美观。并精选八幅经典唐宋书法及绘画作品，包括李白与杜牧唯一传世真迹，四色精印，典藏之选。</p>
<p>▲换个角度读诗词，会发现不同的诗意：超级愤青骆宾王、千古情圣杜甫、逆袭牛人高适、完美男神王维、文艺大叔孟浩然、花间浪子温庭筠、大女主体质李清照、全能天才辛弃疾……</p>
<p>▲三十位诗词大神，涉及近三百首诗词经典。全书考据精到，融诗、史于一体，串起唐宋文坛一个个耀眼的瞬间，从隋炀帝杨广开始，到陆游为止，从中可以窥见一部起伏跌宕的热血历史。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《鲜衣怒马少年时·唐宋诗词篇（全集）》
少年怒马
10个笔记</p>
<p>◆  点评</p>
<p>2023/8/19 认为好看
很喜欢这本书📖，作者结合现代语气，网络词语等讲解唐宋诗人生活对话场景，娓娓道来，风趣幽默。不仅了解到了诗人的诗词来源，创作背景，以及了解到了很多诗人经历往来故事。对喜欢历史文化的人🈶更好的理解</p>
<p>◆  鲜衣怒马少年时：唐宋诗人的诗酒江湖</p>
<p>2023/1/17 发表想法
背后含义暗指自己的作品能否入你的法眼，一种谦虚的求教姿态，可以借鉴引用</p>
<blockquote>
<blockquote>
<p>《闺意献张水部》试探：
洞房昨夜停红烛，待晓堂前拜舅姑。
妆罢低声问夫婿，画眉深浅入时无？</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>《闺意献张水部》试探：
洞房昨夜停红烛，待晓堂前拜舅姑。
妆罢低声问夫婿，画眉深浅入时无？</p>
</blockquote>
</blockquote>
<p>2023/2/8 发表想法
一直很喜欢杜甫，但也为他感到惋惜。他用实际行动做到了无论何时何地都为国为民，就像周恩来为中华之崛起而读书、鲁迅弃医从文拯救国人一样的伟人精神</p>
<blockquote>
<blockquote>
<p>那时候的小杜还没体会到中年的焦虑、现实的艰辛，他信心满满，“会当凌绝顶，一览众山小”。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>王程应未尽，且莫顾刀环￼。”</p>
</blockquote>
</blockquote>
<p>2023/2/22 发表想法
清斯濯缨，浊斯濯足</p>
<blockquote>
<blockquote>
<p>这苟且的日子，不要也罢。
于是，王维开始了另一种生活。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>没经过风起云涌，哪来的风轻云淡？</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>每个人，在时代的滚滚巨轮下都无能为力。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>何须浅碧深红色，自是花中第一流。</p>
</blockquote>
</blockquote>
<p>◆  鲜衣怒马少年时2：唐宋诗章里的盛世残梦</p>
<p>2023/8/3 发表想法
自己也是写代码的，确实容易出现这样的现象，包括身边也有这样的人</p>
<blockquote>
<blockquote>
<p>技术型人才很容易一叶障目，手里有锤子，看什么问题都是钉子。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/xianyinumashaonianshi.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[JavaScript 优化技巧]]></title>
            <link>https://super456.github.io/posts/growth-record/base/javascript/javascript-optimization-tips.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/javascript/javascript-optimization-tips.html</guid>
            <pubDate>Sat, 19 Aug 2023 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="javascript-优化技巧" tabindex="-1">JavaScript 优化技巧 <a class="header-anchor" href="#javascript-优化技巧" aria-label="Permalink to &quot;JavaScript 优化技巧&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_1、三元运算符" tabindex="-1">1、三元运算符 <a class="header-anchor" href="#_1、三元运算符" aria-label="Permalink to &quot;1、三元运算符&quot;">&ZeroWidthSpace;</a></h2>
<p>精简 if-else 单一操作（赋值表达式）</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 方式一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (offsetTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">	this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.titleFixed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">	this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.titleFixed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改为</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.titleFixed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> offsetTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 方式二</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> hungry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> eat;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (hungry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">       eat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'yes'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">       eat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'no'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">修改为：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> hungry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> eat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> hungry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'yes'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'no'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>
</div><h2 id="_2、逻辑与运算符" tabindex="-1">2、逻辑与运算符 <a class="header-anchor" href="#_2、逻辑与运算符" aria-label="Permalink to &quot;2、逻辑与运算符&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (falg) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">	someMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改为</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">falg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;&#x26;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> someMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span></code></pre>
</div><h2 id="_3、优化判断条件" tabindex="-1">3、优化判断条件 <a class="header-anchor" href="#_3、优化判断条件" aria-label="Permalink to &quot;3、优化判断条件&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>使用 <code>includes</code> 处理多重条件</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 202</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 203</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 204</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 修改为</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">202</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">203</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">204</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">inclueds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(code)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> 	...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span></code></pre>
</div><h2 id="_4、过滤数组唯一值" tabindex="-1">4、过滤数组唯一值 <a class="header-anchor" href="#_4、过滤数组唯一值" aria-label="Permalink to &quot;4、过滤数组唯一值&quot;">&ZeroWidthSpace;</a></h2>
<p>Set 对象类型是在 ES6 中引入的，配合扩展符（<code>...</code>）一起使用，我们可以使用它来创建一个新的数组，该数组只有唯一的值。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 基本用法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> uniqueArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(array)];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(uniqueArray); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// Result: [1, 2, 3, 5]</span></span></code></pre>
</div><p>此技巧适用于包含基本类型的数组：undefined，null，boolean，string和number。（如果你有一个包含对象，函数或其他数组的数组，你需要一个不同的方法！）</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'123'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'123'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> uniqurArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(array)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(uniqurArray) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// [1, 2, 3, 5, undefined, null, true, "123"]</span></span></code></pre>
</div><p>如果需要过滤六种布尔值为空的情况：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'123'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'123'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> uniqurArrayTrue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(array)].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(item))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// const uniqurArrayTrue = [...new Set(array)].filter(Boolean)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(uniqurArrayTrue) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// [1, 2, 3, 5, true, "123"]</span></span></code></pre>
</div><h2 id="_5、数字转字符串-字符串转数字" tabindex="-1">5、数字转字符串/字符串转数字 <a class="header-anchor" href="#_5、数字转字符串-字符串转数字" aria-label="Permalink to &quot;5、数字转字符串/字符串转数字&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> num.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// number to string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(s); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// string to number</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">修改为：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ""</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 数字转字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">s; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 字符串转数字</span></span></code></pre>
</div><h2 id="_6、填充数组" tabindex="-1">6、填充数组 <a class="header-anchor" href="#_6、填充数组" aria-label="Permalink to &quot;6、填充数组&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arraySize; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  filledArray[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'goodbye'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">修改为：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> filledArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(arraysize).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({hello: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'goodbye'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}));</span></span></code></pre>
</div><h2 id="_7、对象的动态属性" tabindex="-1">7、对象的动态属性 <a class="header-anchor" href="#_7、对象的动态属性" aria-label="Permalink to &quot;7、对象的动态属性&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> dynamic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "value"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">user[dynamic] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "other value"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">修改为：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> dynamic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "value"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    [dynamic]: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"other value"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span></code></pre>
</div><h2 id="_8、删除数组重复项" tabindex="-1">8、删除数组重复项 <a class="header-anchor" href="#_8、删除数组重复项" aria-label="Permalink to &quot;8、删除数组重复项&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">67</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> outputArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> array.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> outputArray.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (array[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> outputArray[k]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      outputArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(array[j]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// tArray = [100, 23, 67, 45]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">修改为：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">67</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> outputArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(array))</span></span></code></pre>
</div><h2 id="_9、数组到对象" tabindex="-1">9、数组到对象 <a class="header-anchor" href="#_9、数组到对象" aria-label="Permalink to &quot;9、数组到对象&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"value1"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"value2"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"value3"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arrObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">i) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     arrObject[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">修改为：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"value1"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"value2"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"value3"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arrObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">arr};</span></span></code></pre>
</div><h2 id="_10、对象到数组" tabindex="-1">10、对象到数组 <a class="header-anchor" href="#_10、对象到数组" aria-label="Permalink to &quot;10、对象到数组&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  one: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  two: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> keys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> numbers) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">hasOwnProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(number)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     keys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(number);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// key = [ 'one', 'two' ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">修改为：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  one: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  two: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(numbers); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// key = [ 'one', 'two' ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(numbers);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// value = [ 1, 2 ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(numbers); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// entry = [['one' : 1], ['two' : 2]]</span></span></code></pre>
</div><h2 id="_11、初始化大小为-n-的数组并填充默认值" tabindex="-1">11、初始化大小为 N 的数组并填充默认值 <a class="header-anchor" href="#_11、初始化大小为-n-的数组并填充默认值" aria-label="Permalink to &quot;11、初始化大小为 N 的数组并填充默认值&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> defaultValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(size).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(defaultValue);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(arr); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// [0, 0, 0, 0, 0]</span></span></code></pre>
</div><h2 id="_12、函数-settimeout-封装" tabindex="-1">12、函数 settimeout 封装 <a class="header-anchor" href="#_12、函数-settimeout-封装" aria-label="Permalink to &quot;12、函数 settimeout 封装&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> onTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> timeoutId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(handler, timeout)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(timeoutId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> cancelTimeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> onTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'timeout'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">cancelTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span></code></pre>
</div><h2 id="_13、if-else" tabindex="-1">13、if-else <a class="header-anchor" href="#_13、if-else" aria-label="Permalink to &quot;13、if-else&quot;">&ZeroWidthSpace;</a></h2>
<p>举例：今天是星期几</p>
<p>初学者：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> returnWeekday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "今天是星期"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getDay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "日"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "一"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "二"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "三"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "四"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "五"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "六"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">returnWeekday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())</span></span></code></pre>
</div><p>入门：
<code>switch</code> 语句与 <code>if</code> 语句的关系最为密切，而且也是在其他语言中普遍使用的一种流控制语句。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> returnWeekday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "今天是星期"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getDay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (date) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "日"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "一"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "二"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "三"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "四"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "五"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "六"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		break</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">returnWeekday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())</span></span></code></pre>
</div><p>中级：
数组或对象优化</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> returnWeekday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "今天是星期"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getDay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> dateArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'天'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'一'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'二'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'三'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'四'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'五'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'六'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> dateArr[date]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">returnWeekday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> returnWeekday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "今天是星期"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getDay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	dateObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">		0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"天"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">		1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"一"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">		2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"二"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">		3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"三"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">		4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"四"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">		5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"五"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">		6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"六"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> dateObj[date]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">returnWeekday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 最简单字符串索引方式（类似数组下标）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> returnWeekday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "今天是星期"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "日一二三四五六"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getDay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">returnWeekday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())</span></span></code></pre>
</div><p>需求变动，返回星期几的同时，返回工作日和休息日</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> returnWeekday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "今天是星期"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getDay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	dateObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">		0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'天'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'休'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">		1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"一"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'工'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">		2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"二"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'工'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">		3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"三"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'工'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">		4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"四"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'工'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">		5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"五"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'工'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">		6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"六"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'休'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	dayType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">		'休'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">			console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'为休息日'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		},</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">		'工'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">			console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'为工作日'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> returnData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		string: string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> dateObj[date][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		method: dayType[dateObj[date][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> returnData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">returnWeekday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 16 本《番茄工作法》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/fanqiegongzuofa.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/fanqiegongzuofa.html</guid>
            <pubDate>Sat, 12 Aug 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[描述文章信息(string)]]></description>
            <content:encoded><![CDATA[<h1 id="第-16-本《番茄工作法》" tabindex="-1">第 16 本《番茄工作法》 <a class="header-anchor" href="#第-16-本《番茄工作法》" aria-label="Permalink to &quot;第 16 本《番茄工作法》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>本书介绍了时下最流行的时间管理方法之一——番茄工作法。作者根据亲身运用番茄工作法的经历，以生动的语言，传神的图画，将番茄工作法的具体理论和实践呈现在读者面前。番茄工作法简约而不简单，本书亦然。在番茄工作法一个个短短的 25 分钟内，你收获的不仅仅是效率，还会有意想不到的成就感。</p>
<p>本书适合所有志在提高工作效率的人员，尤其是软件工作人员和办公人员</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《番茄工作法图解：简单易行的时间管理方法（50万册纪念版）》
史蒂夫·诺特伯格
29个笔记</p>
<p>◆  点评</p>
<p>2023/8/12 认为好看
这本书的内容不多，而且有很多图画辅助理解，读起来通俗易懂，还是很快读完的。让我阅读这本书的原因：身边朋友的推荐和尝试新的时间管理方式，目的也是为了提高生产力，而番茄工作法恰巧比较适合我。虽然这本书加入书架很久，也只是突然想起来了，就是开始阅读。并下载了《番茄 ToDo》软件记录阅读，刚好活学活用，可以验证调整自己是否适应这样的工作方式及节奏。
这本书给我最大的阅读感受就是：标准化自己的时间管理，提高生产力。可以像工厂一样，流水线式的管理自己每天的工作时间，可以让自己的注意力得到管理和提高生产力，特别是精力也会得到比较好的放松休息，然后投入每一项工作任务，从而提高投入产出比。因为自己是码农，经常会陷入解决一项任务过多时间投入，产出却很低，因为任务的复杂度以及需求开发的工作量，需要随时调整及应变的。有时候可能因为过于压力、疲劳的精力投入，感觉大脑超负荷工作，这个时候解决问题的思路及动手能力，可以感觉出反应比较慢的。主要是缺少意识的让自己主动休息、放松身体以及大脑。也有时候容易只忙于解决工作问题，而没有任何总结思考，没有形成一种习惯去总结工作上的不足和改进，而这恰巧就是我需要的。
作者所说番茄工作法的核心是：承诺。自己列出的每日计划，要去实现，要每日回顾总结思考及改善不足，这样就可以不断地在进步，找到适合自己的方式工作，最大的去实现自身价值。作者也详细从番茄工作的一次只做一件事、方法、中断、预估、应变、团队几个方面介绍了我们能遇到的问题即解决方式，最大程度的帮我们去克服、解决这些问题，适应这种工作方式，养成稳定的工作节奏，稳定输出，可持续发展提高自己能力和工作效率。自己也用了几天，有明显的改变，是很不错的工作方式，期待一直坚持下去，有一个质的改变呢</p>
<p>◆  序言</p>
<p>2023/8/6 发表想法
迫不及待开始阅读啦，期待可以对我现阶段及以后的时间管理能有所改善，能行之有效，那将会大大受益终身了</p>
<blockquote>
<blockquote>
<p>用番茄工作法，改进运作流程、优化时间安排</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>用番茄工作法，改进运作流程、优化时间安排</p>
</blockquote>
</blockquote>
<p>◆  致中国读者</p>
<p>2023/8/6 发表想法
证明了事情太多，时间太少，大家都想高效完成和成为一个时间管理大师吧，哈哈哈</p>
<blockquote>
<blockquote>
<p>“因为我们想知道在有很多事情要做的时候，怎么把每件事都做好。”</p>
</blockquote>
</blockquote>
<p>◆  第1章 一次只做一件事</p>
<p>2023/8/6 发表想法
当开始阅读这本书的时候，我已经打开番茄ToDo软件设置25分钟时间来阅读了，活学活用</p>
<blockquote>
<blockquote>
<p>什么是番茄工作法？简单说，就是列出你当天要做的事，设置25分钟闹钟，然后从第一件事开始做。此外还要有每日回顾、做每日承诺、控制中断、预估要花的工夫等</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>什么是番茄工作法？简单说，就是列出你当天要做的事，设置25分钟闹钟，然后从第一件事开始做。此外还要有每日回顾、做每日承诺、控制中断、预估要花的工夫等</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果你愿意可以试试，照此方法读完整本书：在一段一段的25分钟周期内读书──当然要拿厨房定时器来掐时间──并且在每两个阅读周期之间，花3分钟休息放松。</p>
</blockquote>
</blockquote>
<p>2023/8/6 发表想法
这一点很重要，很多时候，我们知道自己想要做什么，而且可以罗列出很多 TO DO LIST，但是当我们做的时候，容易陷入不知所措，不知道那件事更重要，不知道优先级，从而错过了，做了很多，但是结果不如意，甚至搞反了做事的顺序导致功亏一篑。按照作者所说，包括自己平时工作也有写 Every Day Counts （每日计划）习惯，然后分析事情优先级程度，然后在全精力专注做该任务并要取得我想要的结果，一旦结果有变，比如花费的时间不符合预期等，就要多回顾分析自己的时间和精力投入问题，总结该任务事项问题以及如何改善，方便自己后续评估完成类似任务时间和避免类似的问题发生，对改善时间管理有很大的帮助</p>
<blockquote>
<blockquote>
<p>先分析真正的问题所在，即“我想达成什么结果”，然后专注于能带来该结果的活动</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>先分析真正的问题所在，即“我想达成什么结果”，然后专注于能带来该结果的活动</p>
</blockquote>
</blockquote>
<p>◆  第2章 背景</p>
<blockquote>
<blockquote>
<p>有一种精神状态称为“心流”，它具有以下特点：有明确的目标、集中、专注、自我意识消失、时间感扭曲、有直接和即时的反馈、能力水平与面对的挑战相平衡、有个人控制感、有工作本身的内在奖励、行为与认知合一</p>
</blockquote>
</blockquote>
<p>◆  第3章 方法</p>
<blockquote>
<blockquote>
<p>在每天开始时做计划；每天结束时，进行记录、处理和可视化工作；在中间的时间，对25分钟周期循环进行跟踪</p>
</blockquote>
</blockquote>
<p>2023/8/12 发表想法
坚持做好每一件事，从番茄工作法开始，加油💪🏻</p>
<blockquote>
<blockquote>
<p>番茄工作法有一定的目标导向。选择一些今天能完成的活动，这是你的承诺。如果它们得以完成，满心欣慰是回报给你的精神奖杯。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>番茄工作法有一定的目标导向。选择一些今天能完成的活动，这是你的承诺。如果它们得以完成，满心欣慰是回报给你的精神奖杯。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>长期的精神紧张会导致工作记忆能力和集中力下降。由此，工作的快乐变成焦虑，灵感变成敏感，我们还更容易发怒。</p>
</blockquote>
</blockquote>
<p>2023/8/12 发表想法
有时候适当时间的放松脑子，比一直埋头苦干强太多了</p>
<blockquote>
<blockquote>
<p>因为在间歇的时候，你知道自己在上一个番茄钟已经达成了目标。更重要的是，一整天你都会保持良好的洞察力，包括在间歇时间。</p>
</blockquote>
</blockquote>
<p>2023/8/12 发表想法
“过度学习”很喜欢这个词，是的，当我们追求高效完成工作的同时，是不是也忘记了，停下来思考，怎么样还可以做的更好，这个时候，锻炼自己的理解和思考的能力，慢慢积累起来的</p>
<blockquote>
<blockquote>
<p>不要在番茄钟进行的过程中切换活动。如果番茄钟进行一半，你当前的工作已经完成，就用剩下的时间进行“过度学习”。例如我提前做完事情后，就会再回顾一下所做的或重复一下所学的，看看刚才的工作是否可以改进，或看是否能透过字里行间发现新结论……直到番茄钟响铃</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不要在番茄钟进行的过程中切换活动。如果番茄钟进行一半，你当前的工作已经完成，就用剩下的时间进行“过度学习”。例如我提前做完事情后，就会再回顾一下所做的或重复一下所学的，看看刚才的工作是否可以改进，或看是否能透过字里行间发现新结论……直到番茄钟响铃</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>过度学习，指达到熟练程度后，继续学习或练习的行为</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>每天要有一个承诺：一个番茄钟，一个活动，一个目标。</p>
</blockquote>
</blockquote>
<p>◆  第4章 中断</p>
<blockquote>
<blockquote>
<p>一种慢性精神过度刺激状态，进而增加压力，影响工作成果</p>
</blockquote>
</blockquote>
<p>2023/8/12 发表想法
虽然环境及客观因素会有影响，但不要被真的打断，可以记录，但不要停止就好了</p>
<blockquote>
<blockquote>
<p>出现内部中断时要采取的策略：首先接受它，然后记录它，之后立即继续你手头的工作，避免真的被打断</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>出现内部中断时要采取的策略：首先接受它，然后记录它，之后立即继续你手头的工作，避免真的被打断</p>
</blockquote>
</blockquote>
<p>◆  第6章 应变</p>
<p>2023/8/12 发表想法
有时候灵光一闪的想法，可以记录下来，说不定就是过往的思想被提及了或者有新的东西出现了，以后也更容易被想起来吧</p>
<blockquote>
<blockquote>
<p>思想在头脑里也需要“出人头地”。和明星一样，曝光次数越多，宣传机会就越多。不断重复一个重要的结论，等到真正用得着时，它就更容易被你想起来。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>思想在头脑里也需要“出人头地”。和明星一样，曝光次数越多，宣传机会就越多。不断重复一个重要的结论，等到真正用得着时，它就更容易被你想起来。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>然后我是这样做的：在纸面中央，我画一个简图代表今天的主题。我今天的主题是什么？我今天跟同事沟通最多的是什么？今天画下最多×的活动，它们的关键词是什么？我今天参加的会议有什么主题？我今天有没有使用一些新工具和新方法？有很多的问题和很多可能的答案，我只能选择其中之一作为我今天的主题。我选择脑海中跳出来的第一个念头，它在某些方面非常突出。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>番茄工作法是守则。它提供简单而具体的最佳实践，容易上手</p>
</blockquote>
</blockquote>
<p>◆  附录A 图灵社区专访史蒂夫·诺特伯格</p>
<blockquote>
<blockquote>
<p>对我而言，分享番茄工作法的经验简直易如反掌。像大多数人一样，我努力去完成当天必须完成的事。番茄工作法帮助我开始工作，帮助我保持以可持续的步伐前进，它还帮助我每半小时有一个时间点来做出决策</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在英语中，效率(efficiency)和效能(effectiveness)是不一样的。有效率的人，浪费的时间和精力最少。有效能的人，能够产出预期的结果</p>
</blockquote>
</blockquote>
<p>◆  附录B “休息”和“间歇”有何区别</p>
<blockquote>
<blockquote>
<p>“25分钟专注，5分钟间歇”，保持节奏，稳定输出，间歇是为了下一个开始。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/fanqiegongzuofa.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 15 本《现代 JavaScript 库开发：原理、技术与实战》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/xiandaiJavaScriptkukaifa.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/xiandaiJavaScriptkukaifa.html</guid>
            <pubDate>Sun, 06 Aug 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[描述文章信息(string)]]></description>
            <content:encoded><![CDATA[<h1 id="第-15-本《现代-javascript-库开发-原理、技术与实战》" tabindex="-1">第 15 本《现代 JavaScript 库开发：原理、技术与实战》 <a class="header-anchor" href="#第-15-本《现代-javascript-库开发-原理、技术与实战》" aria-label="Permalink to &quot;第 15 本《现代 JavaScript 库开发：原理、技术与实战》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>开发JavaScript库是入门前端领域的重要一步。《现代JavaScript库开发：原理、技术与实战》旨在帮助前端开发者掌握现代JavaScript库的开发技术，让每个人都可以开源自己的现代JavaScript库。本书系统介绍了现代JavaScript库开发涉及的技术、原理和最佳实践，以及将库开源后如何做好维护工作。在最佳实战部分，本书选取了9个典型库作为案例，展示开发流程，代码清晰、完善。</p>
<p>《现代JavaScript库开发：原理、技术与实战》既适合对现代JavaScript库开发及开源感兴趣的前端开发者阅读，也适合想要学习前端项目开发技术的初学者阅读。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《现代JavaScript库开发：原理、技术与实战》
颜海镜 侯策
38个笔记</p>
<p>◆  点评</p>
<p>2023/8/6 认为好看
很不错的一本前端书籍📖，成为一个 JavaScript 库开发者需要了解掌握哪些技能，怎么实现开发，整个流程发展样子，作者讲解很详细，也有很多案例说明，让我对开源世界有了更好的了解。也鼓励了自己踏出第一步去做这件事情。
最后一章节，作者提供的知识全景图和技术全景图给了我很大的惊喜，因为我也在根据前面所有的阅读整理需要的知识和技术点，结果作者直接整理出来了，比我整理的更加分明，清晰。总的来说，真的开阔的技术视野和学习到了开源相关的知识，值得阅读</p>
<p>◆  推荐序1</p>
<p>2023/7/16 发表想法
加油💪🏻，吭哧吭哧向前冲吧</p>
<blockquote>
<blockquote>
<p>希望大家能够通过这本书掌握更多的JavaScript库开发技巧，并通过刻意练习自我提高，成为自己想成为的人——技术大牛！</p>
</blockquote>
</blockquote>
<p>◆  推荐序2</p>
<p>2023/7/16 发表想法
原来写一个开源库要做这么多的东西，不过真的可以学习到非常多东西。在公司所做的开发，不管是开发公共组件库还是内部的npm包，都没有这么多流程及规范，看来是不够严谨了。很喜欢这句话：为了技术交流和价值共创。是的，我们做的东西虽然很希望被别人认可，但是更重要的才是彼此之间的技术交流，吸引更多志同道合的人参与进来，发挥更大的价值创造，并传承下去</p>
<blockquote>
<blockquote>
<p>你要考虑稳定性、可维护性、安全性，编写一些攻击性测试用例，还要注重代码的可读性、易理解性。如果想扩大影响力，希望更多人参与项目维护，你必须重视库的架构设计、接囗设计、文档撰写、注释情况、代码风格等。不仅如此，你所用的工具也必须是当前最主流、最酷的。你要为库的使用者提供开发、调试、测试、构建和提交等多方面的顺滑体验。如果你能把上述一切都做得很到位，那么别人一定能从中学到很多东西，也就愿意为你的项目贡献代码了。团队内部的技术共建也是类似的，并非为了彰显什么，而是为了技术交流和价值共创。</p>
</blockquote>
</blockquote>
<p>2023/7/16 发表想法
代码只是桥梁，与此同时，建立的人与人之间的表达交流，互相学习，共同进步，对一个人的成长是非常大的。努力成为一个贡献者和创造者路上，加油，相信自己可以的</p>
<blockquote>
<blockquote>
<p>通过代码与工程师交流能加速自身成长，进而创造个人价值。作为一名开发者，不能只是开源库的使用者，要成为贡献者，甚至创造者。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>，如果你能透过工具表面的用法进一步去追究其背后的哲学，你将会有更多的收获。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>就像做产品要考虑用户体验一样，库的作者要时刻考虑使用者的体验，要时刻提醒自己站在使用者的角度进行设计。所有恰到好处的设计都是打磨出来的，也是独具匠心的。一个库其实也是一个技术产品，如果你能够做好它，其价值将远远超越解决问题本身。</p>
</blockquote>
</blockquote>
<p>◆  推荐语</p>
<p>2023/7/16 发表想法
感觉我第一个层次都没搞明白了，离第二个层次就更远了，哈哈哈。不过临摹和实践确实很重要，不懂的时候，刚入门的时候，都是这样过来的，多思考为什么这样做，还有没有其他解法说不定会有其他不同的收获呢</p>
<blockquote>
<blockquote>
<p>在前端领域，学习的层次有两个：一个是以使用者的角度去掌握知识和技能，用心的话能融汇贯通；而更深的层次是从根本原理上彻底理解知识和技能，不仅做到融汇贯通，更能达到根据当前应用场景“创造”最优解的境界。这是工匠和大师的区别，达到第二个层次无疑能让你的前端工程师之路走得更远。学习和掌握根本原理的一个较为简单的办法就是临摹和实践，这也是本书选择的道路。通过跟随作者的思路由浅入深地进行实践，你能切身体会到开源库的创作精髓，这种临摹和实践无疑会帮你扎实基础，让你在不知不觉间有所收获，得到提高。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在前端领域，学习的层次有两个：一个是以使用者的角度去掌握知识和技能，用心的话能融汇贯通；而更深的层次是从根本原理上彻底理解知识和技能，不仅做到融汇贯通，更能达到根据当前应用场景“创造”最优解的境界。这是工匠和大师的区别，达到第二个层次无疑能让你的前端工程师之路走得更远。学习和掌握根本原理的一个较为简单的办法就是临摹和实践，这也是本书选择的道路。通过跟随作者的思路由浅入深地进行实践，你能切身体会到开源库的创作精髓，这种临摹和实践无疑会帮你扎实基础，让你在不知不觉间有所收获，得到提高。</p>
</blockquote>
</blockquote>
<p>◆  前言</p>
<p>2023/7/16 发表想法
迫不及待的想看完这本书，看看自己的收获有多大呢</p>
<blockquote>
<blockquote>
<p>人人都可以开发自己的JavaScript库</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>我现身说法，开发和开源库不仅可以帮助他人解决问题，也能给自己带来很多成长。开发库的特殊要求，极大提升了我的技术深度；开发库涉及的技术非常多，极大拓宽了我的知识面；开源库使我融入了开源社区，在那里获得了很多技术之外的东西。总之，开发和开源现代JavaScript库可以带来非常大的收获，我希望每一个前端开发者都不要错过这个机会。</p>
</blockquote>
</blockquote>
<p>2023/7/16 发表想法
确实如此，虽然身处业务世界，但我也更向往开源世界，因为充满未知、好奇、学习等动力，但也希望可以贡献自己微不足道的力量</p>
<blockquote>
<blockquote>
<p>每一个前端开发者都身处两个世界，即业务世界和开源世界。大部分人熟悉业务世界，但对开源世界了解不多。所谓“技多不压身”，多了解开源世界，融入开源世界，你一定会有更多收获。</p>
</blockquote>
</blockquote>
<p>◆  第2章 构建</p>
<blockquote>
<blockquote>
<p>JavaScript社区则选择了模块方案。一个合格的模块方案需要满足以下特性：● 独立性——能够独立完成某个功能，隔绝外部环境的影响。● 完整性——能够完成某个特定功能。● 可依赖——可以依赖其他模块。● 被依赖——可以被其他模块依赖。简而言之，模块就是一个独立的空间，能引用其他模块，也能被其他模块引用。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>AMD是一种异步模块加载规范，专为浏览器端设计，其全称是Asynchronous Module Definition，中文名称是异步模块定义</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>浏览器并不支持AMD模块，在浏览器端，需要借助RequireJS才能加载AMD模块。RequireJS是使用最广泛的AMD模块加载器，但目前的新系统基本不再使用RequireJS，因为大部分库都会提供对AMD模块的支持</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>CommonJS是一种同步模块加载规范，目前主要用于Node.js环境中</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>UMD想要解决的问题和其名称所传递的意思是一致的，它并不是一种新的规范，而是对前面介绍的3种模块规范（原始模块、AMD、CommonJS）的整合，支持UMD规范的库可以在任何模块环境中工作</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>ECMAScript 2015带来了原生的模块系统——ES Module。目前，部分浏览器已经支持直接使用ES Module，而不兼容的浏览器则可以通过构建工具来使用</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>webpack方案的问题在于会生成很多冗余代码，这对于业务代码来说问题不大，但是对于库来说就不太友好了</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>对于打包的代码，rollup.js巧妙地通过将被依赖的模块放在依赖模块前面的方法来解决模块依赖问题</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>statcounter统计的不同浏览器的占比情况</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>CMAScript 2015及后续版本的兼容性情况还不容乐观，不过每一个ECMAScript 2015的特性都可以用ECMAScript 5实现，最简单的方法就是直接使用ECMAScript 5来实现库代码</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>core-js是一个ECMAScript 2015+的polyfill库，提供了不污染全局环境的使用方式</p>
</blockquote>
</blockquote>
<p>◆  第3章 测试</p>
<blockquote>
<blockquote>
<p>单元测试比较适合库开发场景，其提倡边写测试边写代码，通过测试来保证和提升代码质量</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>stateofjs网站统计的常用测试框架排行榜</p>
</blockquote>
</blockquote>
<p>◆  第4章 开源</p>
<blockquote>
<blockquote>
<p>一般的库建议选择MIT协议，如果涉及专利技术，则可以选择Apache协议</p>
</blockquote>
</blockquote>
<p>◆  第7章 安全防护</p>
<blockquote>
<blockquote>
<p>在JavaScript中，实现继承有多种方式，但是万变不离其宗，所有继承方式的背后，原理都是原型</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>JavaScript世界的设计是基于原型的，所有的系统对象也是基于原型设计的。在JavaScript中，所有的对象都是继承自Object.prototype，如果我们给Object.prototype添加属性，就会影响所有的对象</p>
</blockquote>
</blockquote>
<p>2023/7/29 发表想法
😂有点意思</p>
<blockquote>
<blockquote>
<p>一定不要扩展原型属性，这是非常错误的做法。让我们一起保卫原型，保卫JavaScript生态</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一定不要扩展原型属性，这是非常错误的做法。让我们一起保卫原型，保卫JavaScript生态</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>npm v3修复了这个问题，如果两个库的版本能够复用，就会只安装一份。图7-10所示为npm v2和npm v3安装依赖的区别</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>对于dependencies和peerDependencies中的版本号，建议使用“^”作为前缀，这样用户在使用我们的库时，可以避免重复安装依赖；对于devDependencies，建议使用固定版本号，这样可以避免每次安装时版本可能不一致的问题</p>
</blockquote>
</blockquote>
<p>◆  第9章 命令行工具</p>
<blockquote>
<blockquote>
<p>npm在v3版本时做了一些大的改动，其中最大的改动是将node_modules目录扁平化。在npm v2中，会把每个库的依赖都安装到自己的node_modules目录中，这带来了两个较大的问题：一个是会造成层级非常深；另一个是当一个库被多个库依赖时，会存在多个副本</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>如果包名中包含@，则表示这个包位于用户名下，位于用户名下的包默认是私有的，只有用户自己能访问。如果想让其他人也能访问，那么在发布时需要给npm命令添加参数--access=public</p>
</blockquote>
</blockquote>
<p>◆  第10章 工具库实战</p>
<blockquote>
<blockquote>
<p>Object.create(null)创建的对象上没有hasOwnProperty方法</p>
</blockquote>
</blockquote>
<p>◆  第12章 未来之路</p>
<blockquote>
<blockquote>
<p>SWC是基于Rust语言开发的JavaScript Compiler，其对应的工具是Babel。SWC和Babel命令可以相互替换，并且大部分的Babel插件在SWC中都可以找到对应功能</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>esbuild是基于Go语言开发的JavaScript Bundler，其对应的工具是webpack等打包工具，其最大的特点也是性能</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>其本地开发使用的是Bundless方案，在生产环境使用rollup.js打包，在底层使用esbuild单文件构建性能提升</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>在本地开发时，Vite可以做到修改文件时不需要重新打包，只重新构建修改的文件。对于大型项目来说，其性能提升是肉眼可见的。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/xiandaiJavaScriptkukaifa.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[逆向生长，保持路上]]></title>
            <link>https://super456.github.io/posts/random-thought/2023/stay-on-road.html</link>
            <guid>https://super456.github.io/posts/random-thought/2023/stay-on-road.html</guid>
            <pubDate>Sat, 15 Jul 2023 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="逆向生长-保持路上" tabindex="-1">逆向生长，保持路上 <a class="header-anchor" href="#逆向生长-保持路上" aria-label="Permalink to &quot;逆向生长，保持路上&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="目标" tabindex="-1">目标 <a class="header-anchor" href="#目标" aria-label="Permalink to &quot;目标&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>写完自我发展规划</li>
<li>制定技能体系</li>
<li>制定学习计划</li>
<li>下半年备战开始</li>
</ol>
<h2 id="每日规划" tabindex="-1">每日规划 <a class="header-anchor" href="#每日规划" aria-label="Permalink to &quot;每日规划&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>开始早起，<strong>6 点 45 分，7 点开始学习，</strong> 有严格的学习计划；</li>
<li>背单词（10 分钟）和学习粤语（5 分钟），共 15 分钟，主要为了提神；</li>
<li>周末上午务实基本功为主；</li>
<li>周末下午做项目为主，主要实践写代码或看书实践；</li>
<li>每周日下午尝试摸索新的领域学习，比如脚手架、工具链、组件库源码等研究学习，相当于搞懂一个方向的领域学习也可；</li>
<li>注意基本功和框架等学习交替，无需浪费太多时间单独研究一个方向上；</li>
<li>晚上学习算法及整理所有资源；</li>
<li><strong>每天晚上睡前回顾思考总结</strong>，10-15 分钟时间总结今天所得，哪里有什么不足，哪里需要改善，怎么样可以做的更好；</li>
<li>开始早睡，11 点 30 分躺床上培养睡意，最迟 12 点睡觉；</li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue3 学习参考]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/vue3-learning-reference.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/vue3-learning-reference.html</guid>
            <pubDate>Sat, 15 Jul 2023 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vue3-学习参考" tabindex="-1">Vue3 学习参考 <a class="header-anchor" href="#vue3-学习参考" aria-label="Permalink to &quot;Vue3 学习参考&quot;">&ZeroWidthSpace;</a></h1>
<p>大圣老师的 Vue3 学习知识点及路线：</p>
<CustomImage src='/growth-record/frame/vue/vue3learning.webp' /><p><a href="https://v3.cn.vuejs.org/" target="_blank" rel="noreferrer">中文官方文档</a></p>
<p>浏览器在线运行框架环境练习：</p>
<ul>
<li><a href="https://stackblitz.com/edit/vitejs-vite-hgrwco?file=index.html,src%2FApp.vue&amp;terminal=dev" target="_blank" rel="noreferrer">Vitejs - Vite (forked) - StackBlitz</a></li>
</ul>
<h3 id="一-新增特性" tabindex="-1">（一）新增特性 <a class="header-anchor" href="#一-新增特性" aria-label="Permalink to &quot;（一）新增特性&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="https://www.bilibili.com/video/BV1eK4y1k7BP" target="_blank" rel="noreferrer">Vue.js 作者谈 Vue 3.0 beta 现状_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>
<li><a href="https://juejin.cn/post/7077701166397653028#heading-18" target="_blank" rel="noreferrer">焕然一新的 Vue 3 中文文档要来了🎉 - 掘金</a></li>
</ul>
<p>其他新特性学习资料：</p>
<ul>
<li><a href="https://www.jianshu.com/p/51dc95aa6eea" target="_blank" rel="noreferrer">《Vue3.0抢先学》系列</a></li>
<li><a href="https://juejin.cn/post/6968094627375087653?utm_source=gold_browser_extension" target="_blank" rel="noreferrer">全面总结Vue3.0的新特性</a></li>
<li><a href="https://juejin.cn/post/7057325585705467918" target="_blank" rel="noreferrer">2022年必会Vue3.0学习 （强烈建议） - 掘金</a></li>
<li><a href="https://juejin.cn/post/6966502107230765070" target="_blank" rel="noreferrer"><code>Vue3 + &lt;script setup&gt; + Typescript</code> 使用手册 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7001897686567747598" target="_blank" rel="noreferrer">Vue3 + TS 最佳实践 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7007731144418394149/" target="_blank" rel="noreferrer">Vue3 + TSX 最佳实践？不存在的 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6950487211368251399" target="_blank" rel="noreferrer">https://juejin.cn/post/6950487211368251399</a></li>
<li><a href="https://juejin.cn/post/6920070789614501896" target="_blank" rel="noreferrer">Vue3 的学习教程汇总、源码解释项目、支持的 UI 组件库、优质实战项目 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6911175470255964174" target="_blank" rel="noreferrer">为什么我推荐使用JSX开发Vue3 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7006518993385160711" target="_blank" rel="noreferrer">还不会Vue3？一篇笔记带你快速入门 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7006108454028836895" target="_blank" rel="noreferrer">Vue3.2 setup语法糖、Composition API、状态库Pinia归纳总结 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6887359442354962445" target="_blank" rel="noreferrer">让你30分钟快速掌握vue 3 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7052531217333223437" target="_blank" rel="noreferrer">Vue3 <code>&lt;script setup lang=“ts”&gt;</code> 使用指南 - 掘金</a></li>
</ul>
<h3 id="二-源码学习" tabindex="-1">（二）源码学习 <a class="header-anchor" href="#二-源码学习" aria-label="Permalink to &quot;（二）源码学习&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="https://segmentfault.com/a/1190000042073070" target="_blank" rel="noreferrer">Vue 源码中的工具函数</a></li>
<li><a href="https://vueuse.org/" target="_blank" rel="noreferrer">VueUse Collection of Vue Composition Utilities</a></li>
<li><a href="https://mp.weixin.qq.com/s/9HWEs-quQufpodWz_6782A" target="_blank" rel="noreferrer">Vue源码探秘（一）</a></li>
<li><a href="https://vue3js.cn/start/" target="_blank" rel="noreferrer">Vue3</a></li>
<li><a href="https://kingbultsea.github.io/vue3-analysis/book/index.html" target="_blank" rel="noreferrer">介绍 · GitBook</a></li>
<li><a href="https://github.com/biaochenxuying/vue-family-mindmap" target="_blank" rel="noreferrer"> 图解 Vue、Vue-Router、Vuex 源码</a></li>
<li><a href="https://ustbhuangyi.github.io/vue-analysis/" target="_blank" rel="noreferrer">前言 | Vue.js 技术揭秘</a></li>
<li><a href="https://github.com/ygs-code/vue" target="_blank" rel="noreferrer">GitHub - ygs-code/vue: vue源码逐行注释分析+40多m的vue源码程序流程图思维导图</a></li>
</ul>
<h3 id="三-知识点学习" tabindex="-1">（三）知识点学习 <a class="header-anchor" href="#三-知识点学习" aria-label="Permalink to &quot;（三）知识点学习&quot;">&ZeroWidthSpace;</a></h3>
<p><a href="https://mp.weixin.qq.com/s/dsirWaQHH2EGGG94d58JOg" target="_blank" rel="noreferrer">大爱Vue3.3！从此父子组件双向绑定不再是烦恼！</a></p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { computed } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> useModel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> P</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> P</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> props[key]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      emit[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`update:${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">()</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, value]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>其他学习资料：</p>
<ul>
<li><a href="https://juejin.cn/post/7164159759619194893" target="_blank" rel="noreferrer">花了一天的时间，地板式扫盲了vue3所有API盲点 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7084536432731095048" target="_blank" rel="noreferrer">分享 15 个 Vue3 全家桶开发的避坑经验 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7044077808259170312" target="_blank" rel="noreferrer">Vue3又出新语法 到底何时才能折腾完？ - 掘金</a></li>
<li><a href="https://juejin.cn/post/7078865301856583717" target="_blank" rel="noreferrer">Vue3拒绝写return，用setup语法糖,让写Vue3更畅快 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7054317318343491615" target="_blank" rel="noreferrer">5个知识点，让 Vue3 开发更加丝滑 - 掘金</a></li>
<li><a href="https://github.com/su37josephxia/vue3-study" target="_blank" rel="noreferrer">https://github.com/su37josephxia/vue3-study</a></li>
</ul>
<h3 id="四-第三方依赖库学习" tabindex="-1">（四）第三方依赖库学习 <a class="header-anchor" href="#四-第三方依赖库学习" aria-label="Permalink to &quot;（四）第三方依赖库学习&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="https://www.attojs.com/" target="_blank" rel="noreferrer">VueRequest 一个 Vue 请求库</a></li>
</ul>
<h3 id="五-第三方组件库学习" tabindex="-1">（五）第三方组件库学习 <a class="header-anchor" href="#五-第三方组件库学习" aria-label="Permalink to &quot;（五）第三方组件库学习&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="https://www.naiveui.com/zh-CN/os-theme" target="_blank" rel="noreferrer">Naive UI</a></li>
<li><a href="https://e3.shengxinjing.cn/#/" target="_blank" rel="noreferrer">website</a></li>
<li><a href="https://tianyuhao.cn/v3/#/" target="_blank" rel="noreferrer">Tyh Ui | Vue3 组件库</a></li>
<li><a href="https://github.com/Maronato/vue-toastification#readme" target="_blank" rel="noreferrer">GitHub - Maronato/vue-toastification: Vue notifications made easy!</a></li>
<li><a href="https://juejin.cn/post/7075162881498562590" target="_blank" rel="noreferrer">被尤雨溪推荐，这款开箱即用的Vue3组件库做对了什么 - 掘金</a></li>
<li><a href="https://histoire.dev/" target="_blank" rel="noreferrer">Histoire</a></li>
</ul>
<h3 id="六-项目工程搭建学习" tabindex="-1">（六）项目工程搭建学习 <a class="header-anchor" href="#六-项目工程搭建学习" aria-label="Permalink to &quot;（六）项目工程搭建学习&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="https://juejin.cn/post/7041188884864040991" target="_blank" rel="noreferrer">vite + vue3 + setup + pinia + ts 项目实战 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7063024498152308750" target="_blank" rel="noreferrer">Vite+Vue3+NaiveUI+Pinia搭建一套优雅的后台管理模板，真香 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6978324260372611080" target="_blank" rel="noreferrer">[项目篇]vue3 + vite + vant + typescript - 第一天 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6881795051492474893" target="_blank" rel="noreferrer">🎉🎉🎉 一个基于vue3+vite+ts的完整项目 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7069315908597973023" target="_blank" rel="noreferrer">万字长文详解从零搭建企业级 vue3 + vite2+ ts4 框架全过程 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6924687052005081095" target="_blank" rel="noreferrer">Vue3 全家桶 + Element Plus + Vite + TypeScript + Eslint 项目配置最佳实践 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7052593172613955614" target="_blank" rel="noreferrer">Vite2+Vue3+TypeScript：搭建企业级轻量框架实践 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6951649464637636622" target="_blank" rel="noreferrer">从 0 开始手把手带你搭建一套规范的 Vue3.x 项目工程环境 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7036745610954801166" target="_blank" rel="noreferrer">Vite2 + Vue3 + TypeScript + Pinia 搭建一套企业级的开发脚手架【值得收藏】 - 掘金</a></li>
</ul>
<h3 id="七-管理后台模版学习" tabindex="-1">（七）管理后台模版学习 <a class="header-anchor" href="#七-管理后台模版学习" aria-label="Permalink to &quot;（七）管理后台模版学习&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="https://vvbin.cn/next/#/login" target="_blank" rel="noreferrer">Vben Admin</a></li>
<li><a href="https://juejin.cn/post/7052195023311339527" target="_blank" rel="noreferrer">GitHub 上 9 个美观大气的后台管理系统 - 掘金</a></li>
<li><a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noreferrer">GitHub - PanJiaChen/vue-element-admin: A magical vue admin https://panjiachen.github.io/vue-element-admin</a></li>
<li><a href="http://www.jeecg.com/" target="_blank" rel="noreferrer">http://www.jeecg.com/</a></li>
<li><a href="https://github.com/HalseySpicy/Geeker-Admin?utm_source=gold_browser_extension" target="_blank" rel="noreferrer">GitHub - HalseySpicy/Geeker-Admin: ✨✨✨ Geeker Admin，基于 Vue3.2、TypeScript、Vite2、Pinia、Element-Plus 开源的一套后台管理框架。</a></li>
<li><a href="https://element-plus-admin-doc.cn/" target="_blank" rel="noreferrer">vue-element-plus-admin</a></li>
</ul>
<h3 id="八-面试题学习" tabindex="-1">（八）面试题学习 <a class="header-anchor" href="#八-面试题学习" aria-label="Permalink to &quot;（八）面试题学习&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="https://juejin.cn/post/7073300624707682317" target="_blank" rel="noreferrer">N个Vue知识点，必会!!! 供复习 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6961222829979697165" target="_blank" rel="noreferrer">最全的 Vue 面试题+详解答案 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7017693252820303903" target="_blank" rel="noreferrer">用vue想要拿20k，面试题要这样回答（源码版） - 掘金</a></li>
<li><a href="https://juejin.cn/post/6844903895467032589" target="_blank" rel="noreferrer">深入剖析：Vue核心之虚拟DOM - 掘金</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 13 本《JavaScript 高级程序设计（第 4 版）》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/javascriptgaojichengxusheji4.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/javascriptgaojichengxusheji4.html</guid>
            <pubDate>Sat, 01 Jul 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[本书是JavaScript经典图书的新版。第4版全面、深入地介绍了JavaScript开发者必须掌握的前端开发技术，涉及JavaScript的基础特性和高级特性。书中详尽讨论了JavaScript的各个方面，从JavaScript的起源开始，逐步讲解到新出现的技术，其中重点介绍ECMAScript和DOM标准。在此基础上，接下来的各章揭示了JavaScript的基本概念，包括类、期约、迭代器、代理，等等。另外，书中深入探讨了客户端检测、事件、动画、表单、错误处理及JSON。本书同时也介绍了近几年来涌现的重要新规范，包括Fetch API、模块、工作者线程、服务线程以及大量新API。]]></description>
            <content:encoded><![CDATA[<h1 id="第-13-本《javascript-高级程序设计-第-4-版-》" tabindex="-1">第 13 本《JavaScript 高级程序设计（第 4 版）》 <a class="header-anchor" href="#第-13-本《javascript-高级程序设计-第-4-版-》" aria-label="Permalink to &quot;第 13 本《JavaScript 高级程序设计（第 4 版）》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>本书是JavaScript经典图书的新版。第4版全面、深入地介绍了JavaScript开发者必须掌握的前端开发技术，涉及JavaScript的基础特性和高级特性。书中详尽讨论了JavaScript的各个方面，从JavaScript的起源开始，逐步讲解到新出现的技术，其中重点介绍ECMAScript和DOM标准。在此基础上，接下来的各章揭示了JavaScript的基本概念，包括类、期约、迭代器、代理，等等。另外，书中深入探讨了客户端检测、事件、动画、表单、错误处理及JSON。本书同时也介绍了近几年来涌现的重要新规范，包括Fetch API、模块、工作者线程、服务线程以及大量新API。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>待补充点评🚀...</p>
<p>待补充思维导图笔记🚀...</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/javascriptgaojichengxusheji4.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[自我发展规划觉察]]></title>
            <link>https://super456.github.io/posts/random-thought/2023/self-planning-awareness.html</link>
            <guid>https://super456.github.io/posts/random-thought/2023/self-planning-awareness.html</guid>
            <pubDate>Wed, 05 Apr 2023 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="自我发展规划觉察" tabindex="-1">自我发展规划觉察 <a class="header-anchor" href="#自我发展规划觉察" aria-label="Permalink to &quot;自我发展规划觉察&quot;">&ZeroWidthSpace;</a></h1>
<p>记录自己蓦然回首，思考人生的片刻总结。居安思危，未雨绸缪，<strong>也要想清楚自己到底想要的是什么和想成为一个什么样的人</strong>。希望对未来的自己，有一个更明确的发展方向和动力，吭哧吭哧的埋头做事，抬头也有想要的星辰大海。人生就短短几十载，何不快快乐乐的潇洒走一回呢。既要有诗和远方，也要有眼前的苟且，加油 💪🏻，未来的自己肯定是特别幸福快乐的呢 😄</p>
<h2 id="里程碑" tabindex="-1">里程碑 <a class="header-anchor" href="#里程碑" aria-label="Permalink to &quot;里程碑&quot;">&ZeroWidthSpace;</a></h2>
<p>今天作为一个职业阶段分割线，回首看自己的从 18 年大三暑假实习至今，接近 5 年的工作生涯发展，看看自己到底成长了哪些东西，主要是工作上的收获，方便对未来的发展有进一步的认识和规划前行</p>
<h3 id="技能体系" tabindex="-1">技能体系 <a class="header-anchor" href="#技能体系" aria-label="Permalink to &quot;技能体系&quot;">&ZeroWidthSpace;</a></h3>
<CustomImage src="/random-thought/2023/jinengtixi.png" /><h2 id="新规划" tabindex="-1">新规划 <a class="header-anchor" href="#新规划" aria-label="Permalink to &quot;新规划&quot;">&ZeroWidthSpace;</a></h2>
<p>制定今年新的规划和战线前行，不能再跟往年一样漫无目的的工作和生活了，毕竟这几年经过疫情的洗礼，市场行情已经大不如前，虽然在回暖，但已经不能回到之前那个状态了。现在的社会已经变成一个非常内卷的时代，可能因为人才红利的原因，比你优秀的人实在太多太多了，也有很多人找不到工作，这也意味着，你也比别人付出更多的努力，且要快速成长起来。不然，未来我都觉得自己没工作了还能干啥，真的就是一无是处了，在深圳都可能待不下去了</p>
<p><strong>注意：你有一个致命的短板：普通本科学历，很多大公司都有严格的学历要求</strong></p>
<h3 id="职业发展规划" tabindex="-1">职业发展规划 <a class="header-anchor" href="#职业发展规划" aria-label="Permalink to &quot;职业发展规划&quot;">&ZeroWidthSpace;</a></h3>
<p>为明年备战跳转做准备，<strong>必须努力努力再努力才行</strong></p>
<ol>
<li>打造个人技术形象及分享：
<ul>
<li>输出掘金技术博客；</li>
<li>整理及输出语雀技术文档；</li>
</ul>
</li>
<li>为明年做准备：
<ul>
<li>八股文开始冲；</li>
<li>算法题开始做——代码随想录；</li>
</ul>
</li>
<li>看技术书籍：
<ul>
<li>红宝书（第四版）；</li>
<li>小黄书：《你不知道的 JavaScript》3 卷；</li>
<li>Vue 技术书籍 2 本；</li>
<li>现在 JavaScript 开发；</li>
</ul>
</li>
<li>技术体系学习：
<ul>
<li>Node 学习及项目实战；</li>
<li>Vue 主要技术栈熟悉及深入，<strong>源码级别（特别重要的学习，最好有输出）</strong>，必须手写过；</li>
<li>前端基本功务实巩固；</li>
<li>打包工具：Webpack、Vite；</li>
<li>浏览器工作原理、HTTP 协议；</li>
</ul>
</li>
<li>为简历打工：
<ul>
<li>项目有亮点：承担多，业务复杂，技术难点；</li>
<li>团队贡献：带新人、技术协会老大、做主题分享、代表公司参加外部技术交流会、技术文档沉淀等；</li>
<li>参与开源：给自己输出技术项目做开源、参与别人的开源项目；</li>
</ul>
</li>
</ol>
<h3 id="部门工作重心" tabindex="-1">部门工作重心 <a class="header-anchor" href="#部门工作重心" aria-label="Permalink to &quot;部门工作重心&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>工作重心放在能拿结果和能成长的内容上，因为这样才能为简历打工：
<ol>
<li>项目性能优化，动作一定要搞大，多利用分析工具之类的统计衡量，用到所有的优化手段和知识点做到极致效果，然后记录下来，最好能主题分享出去；</li>
<li>会话存档 IM 消息虚拟列表实战：优化到极致，市面上有很多参考的技术解决方案，整理学习实践运用，然后写成一篇专利；</li>
</ol>
</li>
<li>新部门要做的事情，希望在这个部门可以做影响开发者体验的事情和基建、技术选型或技术难点攻破等事情，这样对自己的成长才是最大的：
<ol>
<li>低代码平台：管理后台筛选与列表、表单、弹窗等低代码设计；</li>
<li>组件化设计与开发：设计开发公共组件库和维护；</li>
<li>基建：项目架构设计、框架、打包工具等；</li>
<li>监控与测试平台：单元测试、代码质量测试、Code Review；</li>
<li>考虑如何与 AI 相结合，提效需求速度和代码开发质量；</li>
</ol>
</li>
<li>前端俱乐部：
<ol>
<li>重点放在《前端 100 通》主题分享系列上磨炼打造这个在公司的形象；</li>
<li>准备主题分享系列第一期《HTML 那些事》主题内容分享；</li>
<li>项目性能优化可以搞一期主题分享；</li>
<li>会话存档 IM 消息虚拟列表实战也可以搞一期主题分享；</li>
</ol>
</li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[参加 7 期训练营总结]]></title>
            <link>https://super456.github.io/posts/random-thought/2023/camp-7-summary.html</link>
            <guid>https://super456.github.io/posts/random-thought/2023/camp-7-summary.html</guid>
            <pubDate>Tue, 14 Mar 2023 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="参加-7-期训练营总结" tabindex="-1">参加 7 期训练营总结 <a class="header-anchor" href="#参加-7-期训练营总结" aria-label="Permalink to &quot;参加 7 期训练营总结&quot;">&ZeroWidthSpace;</a></h1>
<p>训练营的小伙伴们，大家晚上好呀，我是纵倾，见字如面，当看到这段文字的时候，我已经准备离开这个大家庭了</p>
<p>在训练营的感受：回头看，从第 7 期加入至今第 13 期了，已经经历了 7 期，差不多 7 个月的陪伴成长，时间不长不短，有收获也有感动，在我的生命中熠熠生辉，格外亮眼。一开始参加训练营的初衷是培养自己的自律性，看看自己做一件事能够坚持多久和记录自己这段时间心路历程的变化，好为自己成长复盘和下一阶段规划提供帮助。至于打卡任务只是衡量的标准，可以随意变化的，所以并我不是为了打卡任务才进入训练营的。总体来说，训练营是超出我的预期的，有组织者，有监管的人，有存在感，能够被认可，能够找到打卡的归属感，最重要的是有一群可爱、温暖、有趣的伙伴，彼此关心、包容，互相监督、共同成长。缘分总是这么奇妙，把我们聚在一起，分享生活与工作的喜怒哀乐，分享彼此之间的美好世界。我很幸运能够在这遇见你们，一定是上天最好的安排。特别是在这个群认识了很多小伙伴，也私加了十几个人，一定是优秀的你们，吸引成为我朋友的原因，我的荣幸，倍感欣慰</p>
<p>在训练营的成长：回顾自己的所有打卡记录及总结思考，收获最大的是，不是坚持 7 点早起，花多少时间学习了；不是看了多少本书，写了多少阅读笔记；不是做了多少道算法题，输出了多少算法题解；不是背了多少个单词，学习了多少英文语句；也不是做了多少次茶话会的主题分享以及茶话会听别人分享上，成长收获了有多少。这些都是次要的，并不是我主要的成长。经过我这段时间的思考总结，最大的成长就是思维方式的转变，底层逻辑是方法论与结构化思考表达。当我做一件事的时候：怎么去有条理、结构化的思考、怎么去实现以及如何做的更好、驱动力在哪里、如何思考清晰的表达出来、如何控制自己，简单地说离认清自己更近了一步。这也许是对我自己培养起来的自律性最好的解释。也是真正意义上可以做到对自己负责了，可能这就是我收获最大的成长吧</p>
<p>在训练营当组长的感受：当组长的原因，一方面，我是想帮助别人，但我真没那么伟大，要对每个人负责或者对一部分人负责，每个人的时间和精力都是有限的，我只能最大发挥我个人的价值，能帮一点是一点，哪怕让一小部分人能够得到帮助，能够收获不一样的成长，那么我觉得我的付出也是值得的；另一方面，我想影响有影响力的人，让这一部分小伙伴可以像我一样，勇敢的站出来帮助别人，形成团结互助的氛围，这样，可以有更多的人在群里发光发热，照亮别人，带来更多的温暖</p>
<p>之所以选择暂别：今年过完年至今我是迷茫的，我迷茫的不是自己的工作和生活，我从来不担心自己的职业规划和生活方式的问题；而是思考人生的下一个阶段，我该怎么走的更有意义和价值，如何吭哧吭哧做事，一步一个脚印 👣 往前走。我想，等我心中有一个答案的时候，自然而然，就是我该出现的时候了。所以我其实还在训练营，只是肉体离开了，但灵魂没有呀。期待我的回归哈，因为在训练营我还有好多事没有完成呢</p>
<p>好啦~唠叨了这么久，该说再见啦 👋🏻👋🏻👋🏻，希望我们都能基于训练营这个平台，也要学会利用这个平台，相辅相成，才能实现共赢。即使少了“儿时竟觉星可摘，抬头不见少年郎。”的心气，但也要有“悟已往之不谏，知来者之可追，实迷途其未远，觉今是而昨非。”的豁达和追求美好的心境。愿我们温暖纯良，不舍爱与自由，加油大家 💪🏻💪🏻💪🏻</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[TypeScript 开发实战笔记]]></title>
            <link>https://super456.github.io/posts/growth-record/base/javascript/typescript-dev-practice.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/javascript/typescript-dev-practice.html</guid>
            <pubDate>Tue, 07 Mar 2023 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="typescript-开发实战笔记" tabindex="-1">TypeScript 开发实战笔记 <a class="header-anchor" href="#typescript-开发实战笔记" aria-label="Permalink to &quot;TypeScript 开发实战笔记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="开篇讲解" tabindex="-1">开篇讲解 <a class="header-anchor" href="#开篇讲解" aria-label="Permalink to &quot;开篇讲解&quot;">&ZeroWidthSpace;</a></h2>
<p>掌握类型编程思维</p>
<p>三个要点：</p>
<ol>
<li>类型检查：编译代码时进行严格的类型检查，意味着编码阶段可以发现存在的隐患；</li>
<li>语言扩展：ES6+，异步、装饰器、接口、抽象类；</li>
<li>工具属性：只是一个工具，任何可以运行 JavaScript 的终端上，无需额外的开销，想一个工具一样；</li>
</ol>
<p><strong>思维方式决定了编程习惯，编程习惯奠定了工程质量，工程质量划定了能力边界</strong></p>
<h2 id="基础篇" tabindex="-1">基础篇 <a class="header-anchor" href="#基础篇" aria-label="Permalink to &quot;基础篇&quot;">&ZeroWidthSpace;</a></h2>
<h4 id="语言类型" tabindex="-1">语言类型 <a class="header-anchor" href="#语言类型" aria-label="Permalink to &quot;语言类型&quot;">&ZeroWidthSpace;</a></h4>
<p>强类型语言定义：</p>
<CustomImage src='/growth-record/base/javascript/tskaifashizhan01.webp' /><ul>
<li>
<p>强类型语言：不允许改变变量的数据类型，除非进行强制类型转换</p>
</li>
<li>
<p>弱类型语言：变量可以被赋予不同的数据类型</p>
</li>
<li>
<p>静态类型语言：在编译阶段确定所有变量的类型</p>
</li>
<li>
<p>动态类型语言：在执行阶段确定所有变量的类型</p>
</li>
</ul>
<CustomImage src='/growth-record/base/javascript/tskaifashizhan02.webp' /><CustomImage src='/growth-record/base/javascript/tskaifashizhan03.webp' /><p>强类型语言：不允许程序在发生错误后继续执行。争议：C/C++ 是强类型还是弱类型？</p>
<p>属于弱类型语言，没有对数组越界进行检查，会导致程序崩溃</p>
<CustomImage src='/growth-record/base/javascript/tskaifashizhan04.webp' /><p>新建一个 tsc 文件配置命令：<code>tsc --init</code> 生成：<code>tsconfig.json</code> 文件</p>
<h4 id="基础类型" tabindex="-1">基础类型 <a class="header-anchor" href="#基础类型" aria-label="Permalink to &quot;基础类型&quot;">&ZeroWidthSpace;</a></h4>
<CustomImage src='/growth-record/base/javascript/tskaifashizhan05.webp' /><p>类型注解：</p>
<ul>
<li>作用：相当于强类型语言中的类型声明</li>
<li>语法：（变量/函数）: type</li>
</ul>
<p><code>undefined</code> 不是保留字，全局可以修改重新定义这个变量值，一般通过 <code>void 0</code> 确保返回是 <code>undefined</code></p>
<CustomImage src='/growth-record/base/javascript/tskaifashizhan06.webp' /><p><code>void</code> 在数组中表示么有任何返回值的类型</p>
<CustomImage src='/growth-record/base/javascript/tskaifashizhan07.webp' /><p><code>never</code> 表示永远不会有返回值，比如异常、死循环</p>
<CustomImage src='/growth-record/base/javascript/tskaifashizhan08.webp' /><h4 id="枚举" tabindex="-1">枚举 <a class="header-anchor" href="#枚举" aria-label="Permalink to &quot;枚举&quot;">&ZeroWidthSpace;</a></h4>
<p>角色判断</p>
<CustomImage src='/growth-record/base/javascript/tskaifashizhan09.webp' /><p>TS 枚举类型解决
枚举：一组有名字的常量集合，分为：常量枚举、字符串枚举、异构枚举
原理：一个对象，反向映射（常量枚举才可以）
枚举成员的值是只读不能修改</p>
<p>枚举成员值的定义：</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Char.a,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '123'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> TestEnum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'a'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'b'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'c'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// type TestTypeKey = 'A' | 'B' | 'C'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> TestTypeKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> keyof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> TestEnum</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// type TestTypeValue = 'a' | 'b' | 'c'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> TestTypeValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">TestEnum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h4 id="接口类型" tabindex="-1">接口类型 <a class="header-anchor" href="#接口类型" aria-label="Permalink to &quot;接口类型&quot;">&ZeroWidthSpace;</a></h4>
<p>变量可以传入多余字段
鸭式变形法：一只鸟看起来像鸭子，叫起来像鸭子，就可以被看成是鸭子</p>
<CustomImage src='/growth-record/base/javascript/tskaifashizhan10.webp' /><p>如果 render(变量值)，会进行类型检查：</p>
<ul>
<li>类型断言</li>
<li>索引签名：字符串索引签名和数字索引签名</li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>type 和 interface 多数情况下有相同的功能，就是定义类型。但有一些小区别：</p>
<ul>
<li>type：不是创建新的类型，只是为一个给定的类型起一个名字。type 还可以进行联合、交叉等操作，引用起来更简洁。</li>
<li>interface：创建新的类型，接口之间还可以继承、声明合并。如果可能，建议优先使用 interface。</li>
</ul>
<p>混合接口一般是为第三方类库写声明文件时会用到，很多类库名称可以直接当函数调用，也可以有些属性和方法。例子你可以看一下@types/jest/index.d.ts 里面有一些混合接口。</p>
<p>用混合接口声明函数和用接口声明类的区别是，接口不能声明类的构造函数（既不带名称的函数），但混合接口可以，其他都一样。</p>
<h4 id="函数重载" tabindex="-1">函数重载 <a class="header-anchor" href="#函数重载" aria-label="Permalink to &quot;函数重载&quot;">&ZeroWidthSpace;</a></h4>
<p>进一步匹配约束类型</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 前两条声明是重载，目的是将参数类型约束为 number 或 string；最后的实现不是重载，要遵循前面的声明，比如传 boolean 就不可以了。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">rest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">rest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">rest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> first</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> rest[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'string'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> rest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">','</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'number'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> rest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">pre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">cur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> pre)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'1'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'2'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'2'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))</span></span></code></pre>
</div><h4 id="类特性" tabindex="-1">类特性 <a class="header-anchor" href="#类特性" aria-label="Permalink to &quot;类特性&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>成员属性都是实例属性而不是原型属性；</li>
<li>成员方法都是原型方法而不是实例方法；</li>
</ul>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'test'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> pri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  protected</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> pro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  static</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> food</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'bones'</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> dog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'wangwang'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// dog.pri() // ❌</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// dog.pro() // ❌</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// dog.age = 21</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// dog.food</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'food'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Dog.food)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(dog)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Husky</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 父类的实例</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> color</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // this.pri() // ❌</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // this.pro() // ✅</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Husky'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Husky.food)</span></span></code></pre>
</div><p><strong>JS 的继承方式是原型式继承，原型上的属性和方法是所有实例共享的，不需要共享的就放在构造函数中（也就是实例自己的属性和方法）。当调用实例的属性或方法时，先看实例自身有没有，如果没有就会沿着原型链查找。</strong></p>
<ul>
<li>public：对所有都是可见的，默认访问控制符</li>
<li>protected： 修饰成员属性和方法，当前类和子类内部可以访问； 修饰构造方法， 该类不能被实例化，但可以被子类继承；只能在类本身或者子类中访问，不能在实例中访问</li>
<li>protected constructor： 类只能被继承，不能被实例化，相当于基类</li>
<li>private： 只能在类本身调用，不能被实例或者子类调用</li>
<li>private constructor： 类不能被继承，也不能被实例化</li>
<li>readonly： 修饰用来修饰只读属性， 必须设置初始值；必须要初始化，不能被修改</li>
<li>static： 修饰的成员属性和方法， 只能被当前类和子类访问， 不能被类的实例访问；只能通过类名来调用，不能用实例来访问，可以被子类继承</li>
</ul>
<h4 id="抽象类与多态" tabindex="-1">抽象类与多态 <a class="header-anchor" href="#抽象类与多态" aria-label="Permalink to &quot;抽象类与多态&quot;">&ZeroWidthSpace;</a></h4>
<p>抽象类只能被继承，无法创建实例</p>
<CustomImage src='/growth-record/base/javascript/tskaifashizhan11.webp' /><p>好处：</p>
<ul>
<li>抽离事务的共性，有利于代码抽离复用</li>
<li>实现多态：父类中定义一个抽象方法，多个子类中对这个方法有不同的实现，程序运行时根据不同的实例对象执行不同的操作，运行时绑定</li>
</ul>
<p>this 类型实现链式调用</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> WorkFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  step1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Step1'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  step2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Step2'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> workFlow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> WorkFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// workFlow.step1().step2()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyFlow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> WorkFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'next'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> myFlow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">myFlow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">step1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">step2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span></code></pre>
</div><h4 id="类与接口" tabindex="-1">类与接口 <a class="header-anchor" href="#类与接口" aria-label="Permalink to &quot;类与接口&quot;">&ZeroWidthSpace;</a></h4>
<h2 id="工程篇" tabindex="-1">工程篇 <a class="header-anchor" href="#工程篇" aria-label="Permalink to &quot;工程篇&quot;">&ZeroWidthSpace;</a></h2>
<h2 id="实战篇" tabindex="-1">实战篇 <a class="header-anchor" href="#实战篇" aria-label="Permalink to &quot;实战篇&quot;">&ZeroWidthSpace;</a></h2>
<p>待更新🚀...</p>
<h2 id="学习资料" tabindex="-1">学习资料 <a class="header-anchor" href="#学习资料" aria-label="Permalink to &quot;学习资料&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://time.geekbang.org/course/intro/100032201?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">极客时间《TypeScript 开发实战》梁宵</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 14 本《谁能拒接一只快乐的小狗呢》]]></title>
            <link>https://super456.github.io/posts/read-book/2023/shuinengjujieyizhikuailedexiaogoune.html</link>
            <guid>https://super456.github.io/posts/read-book/2023/shuinengjujieyizhikuailedexiaogoune.html</guid>
            <pubDate>Sun, 15 Jan 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[读1分钟，乐1整天
书单狗的快乐会传染，今日份快乐已加满！
34篇书单狗漫画，浓缩5%的热血、7%的可爱和88%的快乐：阅读的快乐、完成工作的快乐、穿新衣服的快乐、吃零食的快乐、喝奶茶的快乐、晒太阳的快乐，还有和喜欢的人待在一起的快乐！翻开本书，和书单狗一起快乐工作！快乐生活！快乐恋爱！]]></description>
            <content:encoded><![CDATA[<h1 id="第-14-本《谁能拒接一只快乐的小狗呢》" tabindex="-1">第 14 本《谁能拒接一只快乐的小狗呢》 <a class="header-anchor" href="#第-14-本《谁能拒接一只快乐的小狗呢》" aria-label="Permalink to &quot;第 14 本《谁能拒接一只快乐的小狗呢》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>读1分钟，乐1整天</p>
<p>书单狗的快乐会传染，今日份快乐已加满！</p>
<p>34篇书单狗漫画，浓缩5%的热血、7%的可爱和88%的快乐：阅读的快乐、完成工作的快乐、穿新衣服的快乐、吃零食的快乐、喝奶茶的快乐、晒太阳的快乐，还有和喜欢的人待在一起的快乐！翻开本书，和书单狗一起快乐工作！快乐生活！快乐恋爱！</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《谁能拒绝一只快乐小狗呢》
书单狗
17个笔记</p>
<p>◆  点评</p>
<p>2023/1/15 认为好看
阅读全程很快乐的一本书，很简单，书里漫画跟经典名句相结合，妙笔生辉，让我学到了也思考了很多东西，写了一些笔记分享出去</p>
<p>◆  小狗也要打工</p>
<blockquote>
<blockquote>
<p>培养阅读的习惯能够为你筑造一座避难所，让你逃脱几乎人世间的所有悲哀。
——毛姆《阅读是一座随身携带的避难所》</p>
</blockquote>
</blockquote>
<p>2023/1/5 发表想法
很多人都会说知足常乐，比上不足比下有余之类的话。我们也很难控制自己不去想跟别人对比或想得到的更多，因为人性是贪婪的。也许需要一点一滴正视自己，想要就去努力争取，光感叹抱怨失望只会带来更多的消极的情绪和行为。</p>
<blockquote>
<blockquote>
<p>多看看自己生活中的光明面，少看看生活中的黑暗面，多想想自己所得到的享受，少想想所缺乏的东西。</p>
</blockquote>
</blockquote>
<p>◆  快乐24小时营业</p>
<p>2023/1/6 发表想法
有时候我们过于追求所谓的快乐而忽略了平平淡淡的生活也是一种快乐🙂，也许“生活不是我们活过的日子，而是我们记住的日子，我们为了讲述而在记忆中重现的日子”吧</p>
<blockquote>
<blockquote>
<p>这份快乐，乍一看也许平淡无奇，事实上它深远而悠长。
——三毛《亲爱的三毛》</p>
</blockquote>
</blockquote>
<p>2023/1/9 发表想法
当我们老是以为现在不是我想要的生活，我想要的生活是怎么怎么样的时候，忘了最重要的就是把当下开始慢慢过成自己想要的生活了。总以为等我变好了等我有💰了我就怎么怎么样，那如果当下的生活都过不好不如意，未来还会好到哪里去呢😂</p>
<blockquote>
<blockquote>
<p>请你务必认识到，当下时刻是你所拥有的一切，把你的生活重心完全放到当下这一刻。
——埃克哈特·托利《当下的力量》</p>
</blockquote>
</blockquote>
<p>2023/1/10 发表想法
透过书本📖知识看到世界的另外一面，见自己，见众生，见天地。何乐而不为呢</p>
<blockquote>
<blockquote>
<p>读书人可以经历千种人生，不读书的人只能活一次。
——乔治·R.R. 马丁《冰与火之歌》</p>
</blockquote>
</blockquote>
<p>2023/1/10 发表想法
大概就是心存温热感，所遇皆温柔吧</p>
<blockquote>
<blockquote>
<p>一直保持温热感是一件很了不起的事。
——松浦弥太郎《写给想哭的你》</p>
</blockquote>
</blockquote>
<p>2023/1/11 发表想法
心若有爱，甘之若饴</p>
<blockquote>
<blockquote>
<p>你若爱，生活哪里都可爱。
——丰子恺《你若爱，生活哪里都可爱》</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>人生从来不像意想中那么好，也不像意想中那么坏。
——莫泊桑《一生》</p>
</blockquote>
</blockquote>
<p>◆  暗恋这件小事</p>
<p>2023/1/12 发表想法
好美的意境</p>
<blockquote>
<blockquote>
<p>你来人间一趟，你要看看太阳，和你的心上人，一起走在街上。
——海子《夏天的太阳》</p>
</blockquote>
</blockquote>
<p>2023/1/12 发表想法
也许爱情需要刚刚好...</p>
<blockquote>
<blockquote>
<p>于千万人之中遇见你所遇见的人……没有早一步，也没有晚一步。
——张爱玲《爱》</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>于千万人之中遇见你所遇见的人……没有早一步，也没有晚一步。
——张爱玲《爱》</p>
</blockquote>
</blockquote>
<p>2023/1/13 发表想法
生活也需要这简简单单的快乐</p>
<blockquote>
<blockquote>
<p>你如果，
缓缓把手举起来，
举到顶，
再突然张开五指，
那恭喜你，
你刚刚给自己放了个烟花。
——杨一午《一次最多放两个》</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不是我爱上了你，是你终结了我的理智。
——奥尔罕·帕慕克《寂静的房子》</p>
</blockquote>
</blockquote>
<p>2023/1/15 发表想法
所以只要是你，我也愿意千千万万次</p>
<blockquote>
<blockquote>
<p>不知为何，恰如其分的话总是姗姗来迟，错过最恰当的时机。
——村上春树《没有色彩的多崎作和他的巡礼之年》</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>不知为何，恰如其分的话总是姗姗来迟，错过最恰当的时机。
——村上春树《没有色彩的多崎作和他的巡礼之年》</p>
</blockquote>
</blockquote>
<p>2023/1/15 发表想法
想到初中的时候，早恋，也是写信的时候，写她的名字每一笔划都是那么的害羞和爱意满满。那个时候，真的最美的就是她的名字了☺️</p>
<blockquote>
<blockquote>
<p>单单你的名字就够我爱一世的了。
——王小波《爱你就像爱生命》</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2023/shuinengjujieyizhikuailedexiaogoune.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第十一期训练营茶话会分享]]></title>
            <link>https://super456.github.io/posts/random-thought/2023/camp-11th-share.html</link>
            <guid>https://super456.github.io/posts/random-thought/2023/camp-11th-share.html</guid>
            <pubDate>Sat, 07 Jan 2023 20:00:00 GMT</pubDate>
            <description><![CDATA[# 第十一期训练营茶话会分享
<a name="iqtYI"></a>
# 我是如何做年中 / 年终述职准备的
<a name="yj4Cs"></a>
## 前言
第 11 期第 5 次参加第 3 次分享<br />背景：因为公司有这样的规章制度在 **6 月底** 和 **12 月底** 的时候会有半年的述职复盘要求以及绩效考评（**影响第二年的升职加薪和年终奖**）<br />说明：经历过几次述职之后的一些感悟收获分享出来，拿我自己的真实案例进行讲解，但因人而异，每个公司，每个人具体情况具体分析，**我的分享只当参考就好了哈**<br />述职形式：线上 / 线下：**20 分钟讲述** + **10 分钟答疑**，4 ~ 7 个评委（直属领导、一二级部门领导、旁系领导等）<br />注意 📢：**我是偏技术侧进行准备的主题分享，团队 / 部门管理者侧会有一些不一样哈，而且可能不全面，不一定适用所有人，看个人和公司情况的**

因为时间来不及，有点遗憾本文章没有整理成 slidev 形式进行分享 **：**

- **antfu 主题分享文档（参考学习）：**

[GitHub - antfu/talks: Slides & code for my talks](https://github.com/antfu/talks)

- slidev 工具：

[https://github.com/slidevjs/slidev](https://github.com/slidevjs/slidev)
<a name="EIUGf"></a>
## 分享内容
<a name="OeYPZ"></a>
### 分享大纲

1. OKR 自评
   - 超出预期
   - 低于预期
2. 重点产出回顾
   - 重点项目
   - 价值观自评
   - 其他
3. 经验与教训
   - 做的好的
   - 待提升的
4. 下半年 / 明年工作计划
   - 下半年 / 年度工作目标
   - 重点工作计划
5. 我的总结
   - 述职前、中、后建议
<a name="w5ZbY"></a>
### OKR 自评

1. 重点阐述自己**超出预期的部分**，最好有实际情况说明（有具体数据指标说明是最好的），
   1. 定义“超出预期部分”关键点建议：
      - 高于原计划**产出价值**的；
      - 原计划没有涉及到但是做的**更多**了；
      - 重点讲述效果，不要讲太多太久，最好留在【重点产出回顾】进行详细说明，**因为超出预期部分是自己的加分项，要好好利用起来，给评委一个好印象**（就像面试过程中，肯定希望多表现自己擅长的技能的）；
   2. 举例：
      1. 性能优化：原本我只优化某一个模块的东西，做完发现其他模块甚至底层打包部署等都有类似的问题，就顺便一起优化了，优化前后对比是怎么样的，数据说明，详细内容可以在【重点产出回顾】进行说明，这里**重点讲述效果**怎么样；
      2. 技术改造升级或重构：因为业务调整或迭代升级关系，原来的技术方案不太行（开发体验不好、迭代和维护成本很高），自己在开发过程中发现这些问题，并结合业务做技术侧升级改造或重构大部分代码提升 xxx 等效果，说白了降本增效了这样；
      3. 团队建设贡献：发现团队缺少开发文档、核心业务文档（如果复杂一点的更好，比如 h5 跳小程序 /公众号授权、登录、鉴权、支付流程体系、封装 SDK 等等之类的）补充完善了都可以讲、项目组件库维护升级 / 公共组件编写了大量测试用例，增加了项目稳定性和开发体验，减少了多少 bug 等等；

2. **低于预期部分**简单说明情况，不要讲的太多太久：
   1. 特殊原因，一句话带过；
   2. 因为个人原因，说明具体原由，要有说服力，比如因为临时加了紧急项目需求，导致原定开发工期评估调整不足，后面又紧急修复处理线上问题等原因，不得已转测滞后，上线滞后进行说明等；
3. 符合预期部分，不太建议讲，**除非有特殊的产出价值可以简单说一下（业务价值或技术价值都可以）**：
   - 举例：
      - 自己优化了一些页面动画效果，过渡流畅，用户体验相比之前好很多，收到了客户的赞许等等可以进行说明；
      - 在开发体验上做了很多提升，收到了很多同事的反馈表扬等；

总结建议：

- 千万不要照着 OKR 所有内容读一遍，没有意义，评委们其实早就看过你的 OKR 了；
- OKR 最好要有实现结果的备注，比如这个 OR 完成情况（时间节点、上线情况、业绩效果等）及特殊情况说明原因等佐证；
<a name="qk6kn"></a>
### 重点产出回顾
> 从公司实际业务角度出发，突出项目重点产出及落地结果呈现，解决业务痛点和实际问题。

**这部分内容重中之重，至少要占整个述职时间的一半以上**

1. 重点项目 ❗️：
- **要事不过三**，最好不要写超过 3 个项目讲述，不要写太多太杂，挑重点的、有亮点的讲，比较大型的项目，需求内容描述不要写的太少，要有突出重点，不要就一两行文字说明完事，很容易让评委误解以为很简单的东西，当然也不是写的越多越好，能够**突出难度和亮点即可**；
- 描写的项目顺序最好是按照时间线排序由近到远，标注好上线时间结点；
- 每一项内容说明，最好有**需求背景、技术难点、业绩效果、复盘**进行说明，但要单讲做了什么项目功能而已：
   - 不建议讲太细的功能点，比如这个需求做了具体哪个模块，这个模块是干嘛的做了哪些事情，可以导出列表数据等等这些，最好是自己根据需求背景和客户使用情况进行一套流程的说明；
   - 技术难点可以多说一些，比如遇到了哪些比较难得问题，怎么解决的，然后有文档记录给团队分享出来，防止别人踩坑；
   - 业绩效果，实际业务需求上线后的效果（收益情况，上线后多少用户使用，大部分产品经理都知道的），最后如果有客户的正面反馈证据最好贴上，比如客户夸赞截图、感谢信等；
   - 复盘是指自己的做了这个项目的总结：技术难点情况、遇到的一些坑，怎么解决的，或者优化前后对比学到了什么，或者一些协作方面提升，比如通过文档记录、工具对接提升需求理解和降低团队开发盲点等等，生产事故不建议讲，除非答疑环节有评委提及在进行总结说明情况就好；
- 如果产出价值很大的（业务价值或技术价值）时间允许可以用** STAR 法则**讲解清楚更能体现做事的全链路情况，让领导知道你解决问题的方法论和收益情况也是不错的，从而认可你的能力或者觉得你的能力超出当前的职级；
   - 举例：**成果对比、成果截图**进行说明

| 指标 | 修改前系统 | 修改后系统 |
| ]]></description>
            <content:encoded><![CDATA[<h1 id="第十一期训练营茶话会分享" tabindex="-1">第十一期训练营茶话会分享 <a class="header-anchor" href="#第十一期训练营茶话会分享" aria-label="Permalink to &quot;第十一期训练营茶话会分享&quot;">&ZeroWidthSpace;</a></h1>
<p><a name="iqtYI"></a></p>
<h1 id="我是如何做年中-年终述职准备的" tabindex="-1">我是如何做年中 / 年终述职准备的 <a class="header-anchor" href="#我是如何做年中-年终述职准备的" aria-label="Permalink to &quot;我是如何做年中 / 年终述职准备的&quot;">&ZeroWidthSpace;</a></h1>
<p><a name="yj4Cs"></a></p>
<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">&ZeroWidthSpace;</a></h2>
<p>第 11 期第 5 次参加第 3 次分享<br />背景：因为公司有这样的规章制度在 <strong>6 月底</strong> 和 <strong>12 月底</strong> 的时候会有半年的述职复盘要求以及绩效考评（<strong>影响第二年的升职加薪和年终奖</strong>）<br />说明：经历过几次述职之后的一些感悟收获分享出来，拿我自己的真实案例进行讲解，但因人而异，每个公司，每个人具体情况具体分析，<strong>我的分享只当参考就好了哈</strong><br />述职形式：线上 / 线下：<strong>20 分钟讲述</strong> + <strong>10 分钟答疑</strong>，4 ~ 7 个评委（直属领导、一二级部门领导、旁系领导等）<br />注意 📢：<strong>我是偏技术侧进行准备的主题分享，团队 / 部门管理者侧会有一些不一样哈，而且可能不全面，不一定适用所有人，看个人和公司情况的</strong></p>
<p>因为时间来不及，有点遗憾本文章没有整理成 slidev 形式进行分享 <strong>：</strong></p>
<ul>
<li><strong>antfu 主题分享文档（参考学习）：</strong></li>
</ul>
<p><a href="https://github.com/antfu/talks" target="_blank" rel="noreferrer">GitHub - antfu/talks: Slides &amp; code for my talks</a></p>
<ul>
<li>slidev 工具：</li>
</ul>
<p><a href="https://github.com/slidevjs/slidev" target="_blank" rel="noreferrer">https://github.com/slidevjs/slidev</a>
<a name="EIUGf"></a></p>
<h2 id="分享内容" tabindex="-1">分享内容 <a class="header-anchor" href="#分享内容" aria-label="Permalink to &quot;分享内容&quot;">&ZeroWidthSpace;</a></h2>
<p><a name="OeYPZ"></a></p>
<h3 id="分享大纲" tabindex="-1">分享大纲 <a class="header-anchor" href="#分享大纲" aria-label="Permalink to &quot;分享大纲&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>OKR 自评
<ul>
<li>超出预期</li>
<li>低于预期</li>
</ul>
</li>
<li>重点产出回顾
<ul>
<li>重点项目</li>
<li>价值观自评</li>
<li>其他</li>
</ul>
</li>
<li>经验与教训
<ul>
<li>做的好的</li>
<li>待提升的</li>
</ul>
</li>
<li>下半年 / 明年工作计划
<ul>
<li>下半年 / 年度工作目标</li>
<li>重点工作计划</li>
</ul>
</li>
<li>我的总结
<ul>
<li>述职前、中、后建议
<a name="w5ZbY"></a></li>
</ul>
</li>
</ol>
<h3 id="okr-自评" tabindex="-1">OKR 自评 <a class="header-anchor" href="#okr-自评" aria-label="Permalink to &quot;OKR 自评&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>
<p>重点阐述自己<strong>超出预期的部分</strong>，最好有实际情况说明（有具体数据指标说明是最好的），</p>
<ol>
<li>定义“超出预期部分”关键点建议：
<ul>
<li>高于原计划<strong>产出价值</strong>的；</li>
<li>原计划没有涉及到但是做的<strong>更多</strong>了；</li>
<li>重点讲述效果，不要讲太多太久，最好留在【重点产出回顾】进行详细说明，<strong>因为超出预期部分是自己的加分项，要好好利用起来，给评委一个好印象</strong>（就像面试过程中，肯定希望多表现自己擅长的技能的）；</li>
</ul>
</li>
<li>举例：
<ol>
<li>性能优化：原本我只优化某一个模块的东西，做完发现其他模块甚至底层打包部署等都有类似的问题，就顺便一起优化了，优化前后对比是怎么样的，数据说明，详细内容可以在【重点产出回顾】进行说明，这里<strong>重点讲述效果</strong>怎么样；</li>
<li>技术改造升级或重构：因为业务调整或迭代升级关系，原来的技术方案不太行（开发体验不好、迭代和维护成本很高），自己在开发过程中发现这些问题，并结合业务做技术侧升级改造或重构大部分代码提升 xxx 等效果，说白了降本增效了这样；</li>
<li>团队建设贡献：发现团队缺少开发文档、核心业务文档（如果复杂一点的更好，比如 h5 跳小程序 /公众号授权、登录、鉴权、支付流程体系、封装 SDK 等等之类的）补充完善了都可以讲、项目组件库维护升级 / 公共组件编写了大量测试用例，增加了项目稳定性和开发体验，减少了多少 bug 等等；</li>
</ol>
</li>
</ol>
</li>
<li>
<p><strong>低于预期部分</strong>简单说明情况，不要讲的太多太久：</p>
<ol>
<li>特殊原因，一句话带过；</li>
<li>因为个人原因，说明具体原由，要有说服力，比如因为临时加了紧急项目需求，导致原定开发工期评估调整不足，后面又紧急修复处理线上问题等原因，不得已转测滞后，上线滞后进行说明等；</li>
</ol>
</li>
<li>
<p>符合预期部分，不太建议讲，<strong>除非有特殊的产出价值可以简单说一下（业务价值或技术价值都可以）</strong>：</p>
<ul>
<li>举例：
<ul>
<li>自己优化了一些页面动画效果，过渡流畅，用户体验相比之前好很多，收到了客户的赞许等等可以进行说明；</li>
<li>在开发体验上做了很多提升，收到了很多同事的反馈表扬等；</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>总结建议：</p>
<ul>
<li>千万不要照着 OKR 所有内容读一遍，没有意义，评委们其实早就看过你的 OKR 了；</li>
<li>OKR 最好要有实现结果的备注，比如这个 OR 完成情况（时间节点、上线情况、业绩效果等）及特殊情况说明原因等佐证；
<a name="qk6kn"></a></li>
</ul>
<h3 id="重点产出回顾" tabindex="-1">重点产出回顾 <a class="header-anchor" href="#重点产出回顾" aria-label="Permalink to &quot;重点产出回顾&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>从公司实际业务角度出发，突出项目重点产出及落地结果呈现，解决业务痛点和实际问题。</p>
</blockquote>
<p><strong>这部分内容重中之重，至少要占整个述职时间的一半以上</strong></p>
<ol>
<li>重点项目 ❗️：</li>
</ol>
<ul>
<li><strong>要事不过三</strong>，最好不要写超过 3 个项目讲述，不要写太多太杂，挑重点的、有亮点的讲，比较大型的项目，需求内容描述不要写的太少，要有突出重点，不要就一两行文字说明完事，很容易让评委误解以为很简单的东西，当然也不是写的越多越好，能够<strong>突出难度和亮点即可</strong>；</li>
<li>描写的项目顺序最好是按照时间线排序由近到远，标注好上线时间结点；</li>
<li>每一项内容说明，最好有<strong>需求背景、技术难点、业绩效果、复盘</strong>进行说明，但要单讲做了什么项目功能而已：
<ul>
<li>不建议讲太细的功能点，比如这个需求做了具体哪个模块，这个模块是干嘛的做了哪些事情，可以导出列表数据等等这些，最好是自己根据需求背景和客户使用情况进行一套流程的说明；</li>
<li>技术难点可以多说一些，比如遇到了哪些比较难得问题，怎么解决的，然后有文档记录给团队分享出来，防止别人踩坑；</li>
<li>业绩效果，实际业务需求上线后的效果（收益情况，上线后多少用户使用，大部分产品经理都知道的），最后如果有客户的正面反馈证据最好贴上，比如客户夸赞截图、感谢信等；</li>
<li>复盘是指自己的做了这个项目的总结：技术难点情况、遇到的一些坑，怎么解决的，或者优化前后对比学到了什么，或者一些协作方面提升，比如通过文档记录、工具对接提升需求理解和降低团队开发盲点等等，生产事故不建议讲，除非答疑环节有评委提及在进行总结说明情况就好；</li>
</ul>
</li>
<li>如果产出价值很大的（业务价值或技术价值）时间允许可以用** STAR 法则**讲解清楚更能体现做事的全链路情况，让领导知道你解决问题的方法论和收益情况也是不错的，从而认可你的能力或者觉得你的能力超出当前的职级；
<ul>
<li>举例：<strong>成果对比、成果截图</strong>进行说明</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>指标</th>
<th>修改前系统</th>
<th>修改后系统</th>
</tr>
</thead>
<tbody>
<tr>
<td>代码行数</td>
<td>20000 行</td>
<td>5000 行</td>
</tr>
<tr>
<td>业务扩展性</td>
<td></td>
<td></td>
</tr>
<tr>
<td>技术扩展性</td>
<td></td>
<td></td>
</tr>
<tr>
<td>技术可维护性（开发体验）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>未来规划</td>
<td></td>
<td></td>
</tr>
<tr>
<td>难点</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>千万不要写很空虚的词语（<strong>夸大、空谈、没有落地实施细节</strong>等），很可能评委会不喜欢，就好像面试简历写精通一样：
<ul>
<li>举例：网上抄的一些互联网黑话，或讲要打通跨部门沟通效率、提升自己的战略定位，要搞抓手和闭环什么东西等；</li>
</ul>
</li>
</ul>
<ol>
<li>价值观自评</li>
</ol>
<p>每个公司不一样，因人而异，给大家参考，主要是写结合工作中具体事项举例自身积极践行价值观的表现，举一例说明，【<strong>求真务实</strong>】原则很关键，分享 👇🏻 是汤圆姐姐很好的解读：<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/245110/1673070191539-fdc5887e-823f-4d57-a061-6d40a2185a2b.png#averageHue=%232a2a2a&amp;clientId=udb431e58-b913-4&amp;from=paste&amp;height=930&amp;id=u1a28c39d&amp;originHeight=930&amp;originWidth=1138&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=156707&amp;status=done&amp;style=none&amp;taskId=ucd5f4d6a-c18b-451c-8a36-077843b9772&amp;title=&amp;width=1138" alt="image.png"></p>
<ol start="3">
<li>其他</li>
</ol>
<p>如果有非工作业务的产出也可以写上去，但是讲的时候不能讲太久占用太多时间，挑重点的提一下就好了，<strong>可以作为一个加分项，但不是必须项，最好突出工作之外给团队做的贡献的东西，而大部分只做工作分内事的人相比会非常有优势</strong>（就好像面试简历有写开源项目一样，也是一个亮点）<br />填写建议：</p>
<ul>
<li>团队贡献：技术文档（一些开发指南文档建设、解决技术难点总结分享、业务核心流程梳理文档等等）、带新人（最好要有文档输出）、内部主题分享、解决业务开发发现痛点（自己发现或别人发现的都可以）等；</li>
<li>跨部门或公司层面的贡献：主题分享（不管是业务侧还是技术侧都可以写上去）、代表公司安排参加大会、处理公司安排的事项（比如春秋招笔试题等）、当面试官等等；</li>
<li><strong>以上有实际产出的存档说明最好</strong>，比如主题分享完的资料、有文档链接的要贴上、效果截图的贴上，作为证据说明；</li>
</ul>
<p>总结建议：</p>
<ul>
<li>可以把半年内做的事情按照项目、时间结点顺序分类整理写出来，然后根据项目需求的难易程度、项目亮点进行取舍摘取出来，不要笼笼统统写一大堆，听的人和看得人都累；</li>
<li>建议项目描写是按照业务线来整理，不太建议按照项目框架多端分类来整理，比如 A 业务线按照时间节点做了那几个重点需求，而不是写管理后台、小程序、H5 等等做了哪些重点需求；</li>
<li><strong>重点讲业务价值和技术价值方面的产出（业务价值 &gt; 技术价值：业务孵化技术，技术赋能业务，技术只是工具而已）；</strong></li>
</ul>
<p><strong>分享一下汤圆姐姐对于这一块的评价，后续大家可以借鉴一下：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/245110/1673090959198-376f550a-c323-4fb1-9887-33cf597ea8be.png#averageHue=%23373737&amp;clientId=u31789d43-1d14-4&amp;from=paste&amp;height=1014&amp;id=u2e4c187a&amp;originHeight=1014&amp;originWidth=1304&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=351362&amp;status=done&amp;style=none&amp;taskId=u409e2674-c87b-4eb0-9545-f438bfdb40c&amp;title=&amp;width=1304" alt="image.png">
<a name="KeVV3"></a></p>
<h3 id="经验与教训" tabindex="-1">经验与教训 <a class="header-anchor" href="#经验与教训" aria-label="Permalink to &quot;经验与教训&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>👍🏻 做得好的</li>
</ol>
<ul>
<li>建议写 3 ~ 5 个，但不需要全部都讲，一般时间没那么多，挑 2-3 个重点讲解即可；</li>
<li>结合实际工作场景针对自己学习到的做总结，最好有实际的案例结果展示：
<ul>
<li>举例：学习到了线上排查复杂问题的流程总结，提高解决问题的效率：截图说明，使用了哪些工具<strong>快速</strong>定位问题，然后怎么复现问题、怎么快速解决问题</li>
</ul>
</li>
</ul>
<ol start="2">
<li>💪🏻 待提升的</li>
</ol>
<ul>
<li>建议写 3 ~ 5 个，但不需要全部都讲，一般时间没那么多，挑 2-3 个重点讲解即可；</li>
<li>千万不要写让人觉得自己不能胜任工作的一些内容，比如感觉需求或遇到技术问题太难了，自己目前能力没达到，后续需要多学习加强才行之类的话；</li>
<li>重点写自己做好之后，还能做的更好的部分方面怎么去提升，比如对于需求理解，从技术调研，技术方案确定，再到实现过程结果，自己发现了哪些问题：比如偏向体系化的知识点很多，发现自己某部分掌握不是很全和有深度，需要加强某方面的学习程度，或者技术选型时候，Demo 项目没有考虑到某一复杂点的场景，这一块需要后续加强补充的；</li>
</ul>
<p>总结建议：</p>
<ul>
<li>结合实际工作场景案例进行说明，最好有实际结果证据进行说明（截图、文档链接等）；</li>
<li>不太建议讲个人学习技能的相关的事情，比如学习 React 之后没有做好什么，发现没学好什么，或者学习什么书籍没学完之类的，后面要加强自身学习动力和干劲之类的话；
<a name="hcQF1"></a></li>
</ul>
<h3 id="下半年-明年工作计划" tabindex="-1">下半年 / 明年工作计划 <a class="header-anchor" href="#下半年-明年工作计划" aria-label="Permalink to &quot;下半年 / 明年工作计划&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>下半年或明年工作目标</li>
</ol>
<ul>
<li>建议写 3 ~ 5 个，但不需要全部都讲，一般时间没那么多，挑 2-3 个重点讲解即可；</li>
<li>最好跟直属领导、对应的产品经理确认自己的未来的工作有哪些，或者说大方向有哪些，然后再明确写出来，不要靠自己瞎想猜测乱写，如果写的不切合实际会被评委说的，不要留下不好的印象；</li>
<li><strong>往大方面项目业务需求写，不要写芝麻大小的事情</strong>；</li>
<li>不要写跟自己无关的事情，比如别个同事负责的业务，自己没参与过也写上去了，盲猜后续会参与到，除非确定会参与到；</li>
<li><strong>如果可以的话，适当写一些团队贡献的事情，比如申请专利、主题分享等</strong>；</li>
</ul>
<ol start="2">
<li>重点工作计划</li>
</ol>
<ul>
<li>建议写 3 ~ 5 个，但不需要全部都讲，一般时间没那么多，挑 2-3 个重点讲解即可；</li>
<li>针对 👆🏻 工作内容挑重点的写，铺排写细致一点的工作内容，就跟 OKR 目标一样：
<ul>
<li>举例：上面 👆🏻 写到了项目框架升级，提高项目稳定性，提高开发体验等：
<ul>
<li>框架 Vue 版本升级；</li>
<li>组件库版本升级；</li>
<li>插件依赖库升级；</li>
<li>团队开发指南升级等；</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>总结建议：</p>
<ul>
<li>要以实际情况出发，或未来自己能做的更好的项目需求方向，不要用太泛或太虚的相关词语，比如打造升级产品进入行业前十什么的；</li>
<li>最好跟直属领导和相关产品经理沟通确认；
<a name="FDcoM"></a></li>
</ul>
<h3 id="我的总结" tabindex="-1">我的总结 <a class="header-anchor" href="#我的总结" aria-label="Permalink to &quot;我的总结&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>述职前准备：
<ol>
<li>平时要有写工作记录的习惯及总结，是非常受益的（<strong>多总结思考也是一种进步</strong>），不至于写汇报类工作的时候手忙脚乱查各种记录：比如日报、周报、月报不管公司有没有要求都可以写（我个人习惯是比较喜欢写日报，我飞书文档有【<strong>Every Day Counts</strong>】<strong>每一天都很重要和工作备忘录（工作事宜相关的注意事项）</strong>，目前记录有半年以上了，写每天开始工作前的 TO DO LIST，记录问题难点，比较有意思的事情吧，下班前做一个总结记录：就是哪些做完了，哪些没有做完，因为什么原因，解决的问题比较有意思的难点也会记录一下等等，有时候也会把花销最多的事项工时记录上去，比如开会花了 2 个小时，解决一个线上 bug 处理了 1 个小时等等这样）：</li>
</ol>
</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/245110/1673068772393-d66b28c4-1a91-4dfe-83de-ce3e3bf61593.png#averageHue=%23fefefe&amp;clientId=udb431e58-b913-4&amp;from=paste&amp;height=589&amp;id=u202db004&amp;originHeight=1380&amp;originWidth=450&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=193301&amp;status=done&amp;style=none&amp;taskId=u4d0a900d-cf8a-4e33-b067-6ac860d266c&amp;title=&amp;width=192" alt="image.png"></p>
<p>这个 👇🏻 是汤圆姐姐的每日工作记录：<img src="https://cdn.nlark.com/yuque/0/2023/png/245110/1673091037703-b6da950e-6969-450b-aab5-e43c88063530.png#averageHue=%23f3f1f0&amp;clientId=u31789d43-1d14-4&amp;from=paste&amp;height=47&amp;id=uea33e8f0&amp;originHeight=47&amp;originWidth=1745&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8472&amp;status=done&amp;style=none&amp;taskId=u2d745956-029d-41a0-a7b7-9c6e6107b5a&amp;title=&amp;width=1745" alt="image.png"></p>
<ol start="2">
<li>最好要有图片、表格、指标数据结合说明，最好多画一些流程图、架构图、业务图，表格数据前后对比等，不要整篇下来基本都是纯文字，哪怕贴出上线后产品实际图也行（可以<strong>参考语雀或飞书的模板库案例</strong>，非常多详细的案例，很容易模仿做出一个来的）：</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/245110/1673082608307-58e59b14-2f43-4404-87e7-e2346e62686c.png#averageHue=%2397c7a3&amp;clientId=udb431e58-b913-4&amp;from=paste&amp;height=1390&amp;id=u5087db6f&amp;originHeight=1390&amp;originWidth=2302&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=317411&amp;status=done&amp;style=none&amp;taskId=u3dcfc6b4-b1fc-4f31-a312-411e3a6c010&amp;title=&amp;width=2302" alt="image.png"></p>
<ol start="3">
<li>OKR 和重点产出回顾不建议写的太少，内容太少看起来很空虚，可能会让人觉得做的少；</li>
<li>可以提前准备答疑环节领导可能会问的问题，未雨绸缪总比不知所措的好（就像面试前准备一样，面试的公司技术栈情况及自己要准备的技能和知识点要有一个了解的）；</li>
<li>如果可以的话，可以借鉴看看别人写的好的地方和看相关产品的述职报告写的什么，然后借鉴相关内容数据指标等；</li>
<li>重点讲述部分：<strong>至少一半时间要花在【重点产出回顾】上，这个很重要；</strong></li>
<li>如果可以的话，可以演练一下，不至于述职的时候时间不够、部分内容讲的太长、紧张等导致述职时候节奏出错（比如东讲一块，西讲一块，然后又回过头来讲等），<strong>尽可能的重视起来，多花点时间准备，毕竟真的很影响个人在公司的发展</strong>；</li>
<li>跟直属领导或相关的评委领导保持好的关系：不是阿谀奉承，平时工作交集表现一点，多交流，哪怕吹水也是可以的；还有多注意自己的言行举止在公司；直属领导一般答疑都会发言（话语权还是很重要的），说一些对你的工作进行肯定认可话（表现好的地方），如果没有那就是你的个人问题要多反思自己了，一般都是恩威并施；</li>
<li>根据评委<strong>投其所好（可选，是否准备看个人）</strong>：领导的习惯作风，对症下药，但不要太刻意准备；</li>
<li>述职中注意：
<ol>
<li>注意讲述时间，内容多就挑重点的讲：看准备的内容，如果写的很多，类似几千字长篇大论，就是写的不能再简洁了，那就讲的时候，挑重点内容讲，不要一字不差的照念就行，<strong>因为述职前评委会先看一遍接下来要述职人的资料的</strong>；</li>
<li>最好不要提及跟自己无关的同事或同事的不好，不要说 xxx 同事做的多好，我很佩服他什么的，跟着他学到了很多东西；没有必要，只会衬托别人和自己不太好的一面；也不要说同事做的太不好的地方，比如这个 xxx 同事能力不行，代码写的贼差，我不想接手他写的代码，或产品、UI 能力好差之类的话，如果真的想说，有也只能说是建议角度，发现一些问题，怎么改善，怎么样可以做的更好，自己做了哪些提醒或建议改善了怎么样；</li>
</ol>
</li>
<li>述职后复盘：
<ol>
<li>记录答疑领导的建议及改善方法；</li>
<li>回顾自己述职过程中哪些做的好的，哪些做的不好的；</li>
<li>乐观心态对待自己和后面发生的事，不管结果好坏都是一时的，胜不骄，败不馁；保持积极向上的心态准没错；</li>
</ol>
</li>
</ol>
<p><strong>注意</strong> ⚠️：本次分享纯做给大家做参考，没有特殊的强制要求一定要按照我说的做哈，如果我的分享内容有那么一丁点对你有益，那么说明我的分享就是有价值的，我也会继续加油创作和给大家做主题分享 😄</p>
<p>最后送给大家一句话：<strong>你不是工作没有挑战，而是缺少自我要求 😅</strong> <br />
祝愿大家新的一年 <strong>：🌸 工作顺利、步步高升、事业有成 🌼</strong></p>
<h2 id="原茶话会分享音频" tabindex="-1">原茶话会分享音频 <a class="header-anchor" href="#原茶话会分享音频" aria-label="Permalink to &quot;原茶话会分享音频&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://www.yuque.com/yayu/nice-people/share11#H3Izz" target="_blank" rel="noreferrer">语雀文档</a></p>
]]></content:encoded>
            <enclosure url="https://cdn.nlark.com/yuque/0/2023/png/245110/1673070191539-fdc5887e-823f-4d57-a061-6d40a2185a2b.png#averageHue=%232a2a2a&clientId=udb431e58-b913-4&from=paste&height=930&id=u1a28c39d&originHeight=930&originWidth=1138&originalType=binary&ratio=1&rotation=0&showTitle=false&size=156707&status=done&style=none&taskId=ucd5f4d6a-c18b-451c-8a36-077843b9772&title=&width=1138" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[第 5 本《漫画科普：比知识有趣的冷知识（1-3 册）》]]></title>
            <link>https://super456.github.io/posts/read-book/2022/manhuakepu.html</link>
            <guid>https://super456.github.io/posts/read-book/2022/manhuakepu.html</guid>
            <pubDate>Sat, 31 Dec 2022 20:00:00 GMT</pubDate>
            <description><![CDATA[这是一套启发思维的科普类图书，也是一套画面精良的知识绘本，书中通过新奇有趣的漫画内容，将鲜为人知的冷知识绘制出来，是一个包罗万象的知识合集。内容上每一册都涵盖了人体、动物、植物，历史、生活、科技、宇宙等主题，有数百个知识点——不但有日常生活中很少留意到的小细节，也有万千世界里意想不到的小知识。它立足于“冷”，从特别的角度对知识进行深入浅出的解释，通过这些绘声绘色的描述来启迪思维，丰富并开阔读者的视野。]]></description>
            <content:encoded><![CDATA[<h1 id="第-5-本《漫画科普-比知识有趣的冷知识-1-3-册-》" tabindex="-1">第 5 本《漫画科普：比知识有趣的冷知识（1-3 册）》 <a class="header-anchor" href="#第-5-本《漫画科普-比知识有趣的冷知识-1-3-册-》" aria-label="Permalink to &quot;第 5 本《漫画科普：比知识有趣的冷知识（1-3 册）》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>这是一套启发思维的科普类图书，也是一套画面精良的知识绘本，书中通过新奇有趣的漫画内容，将鲜为人知的冷知识绘制出来，是一个包罗万象的知识合集。内容上每一册都涵盖了人体、动物、植物，历史、生活、科技、宇宙等主题，有数百个知识点——不但有日常生活中很少留意到的小细节，也有万千世界里意想不到的小知识。它立足于“冷”，从特别的角度对知识进行深入浅出的解释，通过这些绘声绘色的描述来启迪思维，丰富并开阔读者的视野。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《漫画科普：比知识有趣的冷知识（1-3册）》
锄见编绘
2个笔记</p>
<p>◆  点评</p>
<p>2022/12/31 认为好看
学到很多东西，阅读有趣</p>
<p>◆  漫画科普：比知识有趣的冷知识</p>
<blockquote>
<blockquote>
<p>大多数美女都是希腊脚。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2022/manhuakepu.jpeg" length="0" type="image/jpeg"/>
        </item>
        <item>
            <title><![CDATA[第 12 本《被讨厌的勇气》]]></title>
            <link>https://super456.github.io/posts/read-book/2022/beitaoyandeyongqi.html</link>
            <guid>https://super456.github.io/posts/read-book/2022/beitaoyandeyongqi.html</guid>
            <pubDate>Mon, 05 Dec 2022 20:00:00 GMT</pubDate>
            <description><![CDATA[「被讨厌的勇气」并不是要去吸引被讨厌的负向能量，而是，如果这是我生命想绽放出最美的光彩，那么，即使有被讨厌的可能，我都要用自己的双手双脚往那里走去。」 「因为拥有了被讨厌的勇气，于是有了真正幸福的可能。」 你是否常常对繁琐的生活感到乏味？ 你是否时时为复杂的人际关系感到疲惫？ 你是否认为人生的意义越来越模糊难见？ 我们如何能够在繁杂的日常琐碎和复杂的人际关系中用自己的双手去获得真正的幸福？ 这一切的答案尽在这本《被讨厌的勇气》中！]]></description>
            <content:encoded><![CDATA[<h1 id="第-12-本《被讨厌的勇气》" tabindex="-1">第 12 本《被讨厌的勇气》 <a class="header-anchor" href="#第-12-本《被讨厌的勇气》" aria-label="Permalink to &quot;第 12 本《被讨厌的勇气》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>「被讨厌的勇气」并不是要去吸引被讨厌的负向能量，而是，如果这是我生命想绽放出最美的光彩，那么，即使有被讨厌的可能，我都要用自己的双手双脚往那里走去。」
「因为拥有了被讨厌的勇气，于是有了真正幸福的可能。」</p>
<p>你是否常常对繁琐的生活感到乏味？</p>
<p>你是否时时为复杂的人际关系感到疲惫？</p>
<p>你是否认为人生的意义越来越模糊难见？</p>
<p>我们如何能够在繁杂的日常琐碎和复杂的人际关系中用自己的双手去获得真正的幸福？</p>
<p>这一切的答案尽在这本《被讨厌的勇气》中！</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>待补充点评🚀...，值得二刷学习</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2022/beitaoyandeyongqi.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第十期训练营茶话会分享]]></title>
            <link>https://super456.github.io/posts/random-thought/2022/camp-10th-share.html</link>
            <guid>https://super456.github.io/posts/random-thought/2022/camp-10th-share.html</guid>
            <pubDate>Sat, 03 Dec 2022 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="第十期训练营茶话会分享" tabindex="-1">第十期训练营茶话会分享 <a class="header-anchor" href="#第十期训练营茶话会分享" aria-label="Permalink to &quot;第十期训练营茶话会分享&quot;">&ZeroWidthSpace;</a></h1>
<p><a name="rXPLx"></a></p>
<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">&ZeroWidthSpace;</a></h2>
<p>第 10 期第 4 次参加第 2 次分享<br />为啥聊这个话题，证据：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670064729042-ad1afb3e-00ce-4c54-97aa-16beb85f7034.png#averageHue=%232a2929&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=140&amp;id=uf3a04606&amp;originHeight=140&amp;originWidth=692&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26211&amp;status=done&amp;style=none&amp;taskId=ufb0564e6-46cf-4f6a-85cc-ad3008aa9bd&amp;title=&amp;width=692" alt="image.png"><br />聊聊我眼中的汤圆姐姐和她是如何影响我的（纯属个人见解、管中窥豹吧，有理解错误或表达不好、词不达意的地方，大家谅解，尤其是汤圆姐姐，海涵啊，哈哈哈 😄）</p>
<p>写完这篇文档，感受：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670074276904-07953729-095c-425b-8c32-26657165de66.png#averageHue=%23ece8e3&amp;clientId=ucb7badd4-8473-4&amp;from=paste&amp;height=152&amp;id=u509d3300&amp;originHeight=152&amp;originWidth=606&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20530&amp;status=done&amp;style=none&amp;taskId=u7f434726-6ff3-421c-b045-af9cb46e15d&amp;title=&amp;width=606" alt="image.png"><br />然后我明白了：人类的本质是复读机有了更深刻的理解<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670064668337-834f1408-0f8d-49e3-be39-172764cc9af3.png#averageHue=%23acada7&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=300&amp;id=u6202421c&amp;originHeight=300&amp;originWidth=535&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=105002&amp;status=done&amp;style=none&amp;taskId=ufcdca5ac-610c-4a7d-8a83-fcad4d61809&amp;title=&amp;width=535" alt="image.png"></p>
<p><a name="D2ijw"></a></p>
<h2 id="我眼中的汤圆姐姐" tabindex="-1">我眼中的汤圆姐姐 <a class="header-anchor" href="#我眼中的汤圆姐姐" aria-label="Permalink to &quot;我眼中的汤圆姐姐&quot;">&ZeroWidthSpace;</a></h2>
<p>前期跟姐姐互动比较少吧，后期会比较多一点，其实我是很 open  &amp; 开明的一个人，我也很喜欢这样的一个群可以交流，可以找到很多乐趣和看看别人的世界是什么样子的</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670064914458-a1d44491-73b0-492a-b63d-ed38212a8923.png#averageHue=%23b5c7d3&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=2556&amp;id=u18c0bb95&amp;originHeight=2556&amp;originWidth=1179&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6343848&amp;status=done&amp;style=none&amp;taskId=ub7bd87da-12b1-45be-918b-092d82b494d&amp;title=&amp;width=1179" alt="image.png"><br />会画画、会弹古筝、会手工制作、人长得好看，有故事（故事是真的多），说话又好听（文化底蕴十足，信手拈来的感觉，特别是会写诗）——最主要是<strong>芳龄富婆</strong></p>
<ul>
<li>知性绝佳（知书达理、温文尔雅、博学多才）的美女</li>
<li>温柔细腻的情感姐姐</li>
<li>雷厉风行、敢爱敢恨的潇洒姐姐</li>
<li>职场高手 &amp; 摸鱼高手 （百科全书，啥都懂）</li>
</ul>
<p>还有一个，我很喜欢姐姐的个性签名，因为我也很喜欢这个成语：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670068234669-eda612a7-0088-470e-b8e6-0458aa6e0acc.png#averageHue=%23e0e1d5&amp;clientId=u1c1c6521-c5d5-4&amp;from=paste&amp;height=416&amp;id=uf32a2013&amp;originHeight=416&amp;originWidth=750&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=24115&amp;status=done&amp;style=none&amp;taskId=u844d027e-c776-4fdc-b561-5b45fba7826&amp;title=&amp;width=750" alt="image.png"><br />表面意思是：指不露锋芒，与世无争的消极处事态度，也比喻同流合污<br />我的理解：是一种处事态度，一种人生修行。正如有一句话所说：“一个人最大的成功，在于能和自己好好相处”<br />以上总结一句话：<strong>我见众生皆草木，唯有见你是青山</strong>
<a name="xkORp"></a></p>
<h2 id="她是如何影响我的" tabindex="-1">她是如何影响我的 <a class="header-anchor" href="#她是如何影响我的" aria-label="Permalink to &quot;她是如何影响我的&quot;">&ZeroWidthSpace;</a></h2>
<p>21 天学到了啥<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670058323307-df98b42d-229a-496f-a5c3-5affe17cafc3.png#averageHue=%232a2928&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=150&amp;id=u37df2803&amp;originHeight=150&amp;originWidth=754&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=38332&amp;status=done&amp;style=none&amp;taskId=u4ebe7ee3-3302-4f7d-b4ee-0c4b3c9ce2f&amp;title=&amp;width=754" alt="image.png"></p>
<div class="warning custom-block"><p class="custom-block-title">WARNING</p>
<p>注意 📢：部分截图内容多条聊天记录顺着理解、读不通，可以尝试倒序来</p>
</div>
<p><a name="IUw3v"></a></p>
<h3 id="关于爱情" tabindex="-1">关于爱情 <a class="header-anchor" href="#关于爱情" aria-label="Permalink to &quot;关于爱情&quot;">&ZeroWidthSpace;</a></h3>
<p><a name="y7pZu"></a></p>
<h4 id="话题" tabindex="-1">话题 <a class="header-anchor" href="#话题" aria-label="Permalink to &quot;话题&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>心里那个他/她</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670036650645-601cdc0a-627e-4c6d-bd7a-1303b55b9994.png#averageHue=%232a2a2a&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=400&amp;id=u36af7f07&amp;originHeight=400&amp;originWidth=766&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=112810&amp;status=done&amp;style=none&amp;taskId=u618ade47-ef38-4057-b3df-2080a052f9e&amp;title=&amp;width=766" alt="image.png"></p>
<ul>
<li>经营双方关系</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670036432849-a294c2c0-2fd0-4bbb-b796-2d79f844d646.png#averageHue=%232d2d2d&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=344&amp;id=u392ce707&amp;originHeight=344&amp;originWidth=770&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=109973&amp;status=done&amp;style=none&amp;taskId=u582017dc-46ca-41e6-acd3-c892a85ef4e&amp;title=&amp;width=770" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670063907048-73b79916-3d3a-41ed-973c-e6a3dcca895d.png#averageHue=%23434343&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=452&amp;id=u7f114c46&amp;originHeight=452&amp;originWidth=1174&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=193635&amp;status=done&amp;style=none&amp;taskId=ucb972a15-a8d5-4a98-b34c-c34e235d309&amp;title=&amp;width=1174" alt="image.png"></p>
<ul>
<li>对于喜欢的人</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670036364464-1e247da9-58d5-451f-95c4-c51688404afd.png#averageHue=%23313131&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=648&amp;id=ub701bc7b&amp;originHeight=648&amp;originWidth=784&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=209135&amp;status=done&amp;style=none&amp;taskId=u11d051d6-ece8-4d60-b1b5-649a888408b&amp;title=&amp;width=784" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670043800215-9c1606ed-4c26-441b-a195-49a2608584f2.png#averageHue=%23292929&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=246&amp;id=ubfdb1f3d&amp;originHeight=246&amp;originWidth=750&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=61752&amp;status=done&amp;style=none&amp;taskId=u2185bf14-e132-4ad1-8f3a-417e5009198&amp;title=&amp;width=750" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670043902473-26fbf93d-920d-4f7c-adba-df622c6ae645.png#averageHue=%23242323&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=658&amp;id=ub033c9eb&amp;originHeight=658&amp;originWidth=730&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=156736&amp;status=done&amp;style=none&amp;taskId=ua0f35ab3-da4e-4d41-9ca3-886b18cbe5c&amp;title=&amp;width=730" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670044008805-76753339-0453-412e-80e8-6066e7d51db0.png#averageHue=%232c2c2c&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=182&amp;id=ub18eccb5&amp;originHeight=182&amp;originWidth=1186&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=48129&amp;status=done&amp;style=none&amp;taskId=uaaf55a13-fe0b-4f76-a0c8-1e56b5a7ab5&amp;title=&amp;width=1186" alt="image.png"></p>
<ul>
<li>
<p>求而不得是常态。有些糖，长久吃不到，就再也不想吃了</p>
</li>
<li>
<p>明知不可为而为之，这种勇气不是每个人都有，也不是每个年龄段都有</p>
</li>
<li>
<p>恋爱脑</p>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670058007478-740cf571-516d-4863-8b93-0901c565e9bc.png#averageHue=%232c2c2c&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=182&amp;id=ucc517d55&amp;originHeight=182&amp;originWidth=1174&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45113&amp;status=done&amp;style=none&amp;taskId=uf706ee60-9cb4-4949-8079-6176ed687db&amp;title=&amp;width=1174" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670058082333-7ecefa3e-4235-4e82-8381-75221234d79f.png#averageHue=%232a2a29&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=148&amp;id=ue79dbfea&amp;originHeight=148&amp;originWidth=544&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26583&amp;status=done&amp;style=none&amp;taskId=uc635d4d1-729f-4522-aa89-e07af45575b&amp;title=&amp;width=544" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670058785068-b7f7e059-feae-4938-acfa-b67e888b6da5.png#averageHue=%23313130&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=190&amp;id=uf347a58b&amp;originHeight=190&amp;originWidth=1182&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=58157&amp;status=done&amp;style=none&amp;taskId=u2f708ace-010c-4eb7-bef3-5992559ed39&amp;title=&amp;width=1182" alt="image.png"></p>
<ul>
<li>关于情话</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670061613128-1b56aef7-56bf-4e20-8cb0-7b70dbb6150e.png#averageHue=%232b2b2b&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=186&amp;id=ue1f9a6d4&amp;originHeight=186&amp;originWidth=1178&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=42274&amp;status=done&amp;style=none&amp;taskId=u0871d25d-2047-439d-b454-7701546ae62&amp;title=&amp;width=1178" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670061629818-b8e893fb-8c6f-4ff2-a730-28f9ca1efa77.png#averageHue=%232a2929&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=142&amp;id=ubefb5c07&amp;originHeight=142&amp;originWidth=652&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28150&amp;status=done&amp;style=none&amp;taskId=u140c6f45-574e-460b-9b3d-98e7966f62d&amp;title=&amp;width=652" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670061663490-6922f822-dc9c-439d-ba4b-838a89eb1d88.png#averageHue=%232d2d2d&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=180&amp;id=u3ad9ff24&amp;originHeight=180&amp;originWidth=1174&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=47447&amp;status=done&amp;style=none&amp;taskId=u48074f28-5e35-45e8-a790-4df0881bd87&amp;title=&amp;width=1174" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670061690428-e1b21d93-b9df-4d02-b6d7-cbd0f9fe7c7a.png#averageHue=%23272726&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=148&amp;id=ube013ebc&amp;originHeight=148&amp;originWidth=764&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36969&amp;status=done&amp;style=none&amp;taskId=u1ad30d95-0842-4c84-be63-45c48a51e82&amp;title=&amp;width=764" alt="image.png"></p>
<ul>
<li>关于遗憾</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670061947154-2e6a9fa3-6114-4f33-ac9f-cd9c4beb8c28.png#averageHue=%23414141&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=564&amp;id=u1f6fe3b7&amp;originHeight=564&amp;originWidth=1170&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=246342&amp;status=done&amp;style=none&amp;taskId=u1566fa15-3c51-4923-a824-657ea0baaab&amp;title=&amp;width=1170" alt="image.png"></p>
<p><strong>讨论</strong>：</p>
<ul>
<li>如何理解女朋友工作忙？</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670044039164-60221339-62e9-4b36-b2eb-3a062e402fd2.png#averageHue=%232a2a2a&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=194&amp;id=u90cfa898&amp;originHeight=194&amp;originWidth=1190&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45039&amp;status=done&amp;style=none&amp;taskId=ua338869a-b701-4cd3-afb6-006bc55736b&amp;title=&amp;width=1190" alt="image.png"><br />看对方能不能给我信任感或者说安全感，这东西不是只有女生对男生才有的，男生也希望有，</p>
<ul>
<li>如何平衡生活</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670056571727-2be4ae76-be76-4211-9e0a-f7356368488b.png#averageHue=%23282828&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=196&amp;id=u5258d7cc&amp;originHeight=196&amp;originWidth=738&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=56082&amp;status=done&amp;style=none&amp;taskId=u01c87bd6-9508-4188-8d66-6c41aeafa54&amp;title=&amp;width=738" alt="image.png"></p>
<p>曾经一个女生问我，我们两个在一起时候，如果都不说话，你会尴尬吗？</p>
<ul>
<li>我：会的，因为感觉不知所措，啥都不干总感觉怪怪的</li>
<li>她：不会</li>
<li>我：为啥呀？</li>
</ul>
<p>后面答案我都忘记了</p>
<p>慢慢的慢慢的我才懂的，这个也许就是心安吧，如果一个人已经将你融入她的生活的时候，或者只要你在她身边她就感觉特别踏实的时候，这个人应该爱你很深吧
<a name="qdbSc"></a></p>
<h4 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>秋哥分享：</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670043627005-e6116cfb-2a27-4ec1-99b2-0b04ed83770d.png#averageHue=%23f5f5d5&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=69&amp;id=u0533e253&amp;originHeight=69&amp;originWidth=967&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4588&amp;status=done&amp;style=none&amp;taskId=ucb8e76d0-aa3d-436d-b52a-3bcbefe0196&amp;title=&amp;width=967" alt="image.png"><br />我的总结：</p>
<ul>
<li>时间 ⏰ 和金钱 💰 缺一不可</li>
<li>可能你遇到的人都比较现实，都是在试探，都是在权衡利弊，那些热烈的，勇敢的，专一的，你恐怕再也很难遇到</li>
<li>“在失去的所有人中，我最怀念的是自己”</li>
<li>聊聊我对感情看法</li>
<li>我的感情史</li>
</ul>
<p>汤圆姐姐是不是单身这个问题？总感觉不像单身的人<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670043168616-5490a924-7d5b-48aa-be3f-6a2223ff8717.png#averageHue=%23222222&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=282&amp;id=u2f591f42&amp;originHeight=282&amp;originWidth=732&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=66020&amp;status=done&amp;style=none&amp;taskId=u8b7ce7b2-219e-4f27-9c3b-b7ae7de14b8&amp;title=&amp;width=732" alt="image.png">
<a name="y2FV2"></a></p>
<h3 id="关于成长" tabindex="-1">关于成长 <a class="header-anchor" href="#关于成长" aria-label="Permalink to &quot;关于成长&quot;">&ZeroWidthSpace;</a></h3>
<p><a name="K9mpF"></a></p>
<h4 id="话题-1" tabindex="-1">话题 <a class="header-anchor" href="#话题-1" aria-label="Permalink to &quot;话题&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>大多数巨大的转变都是靠我们用数百个微不足道、甚至难以察觉的一小步积累而来的</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670035920084-e4808d96-c1c1-4835-a9bb-03676aa24c60.png#averageHue=%23343538&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=259&amp;id=e1TXl&amp;originHeight=259&amp;originWidth=838&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=60685&amp;status=done&amp;style=none&amp;taskId=u5711c2b0-e95c-4d21-83b9-84d8bbdcd03&amp;title=&amp;width=838" alt="image.png"></p>
<ul>
<li>关于瓶颈</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670035585739-c1a6c632-873b-4003-a89d-01996bc5021f.png#averageHue=%231b1a1a&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=584&amp;id=uca414d20&amp;originHeight=584&amp;originWidth=758&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=110562&amp;status=done&amp;style=none&amp;taskId=u4a81a0cf-ee09-41e4-bee1-9840251f15f&amp;title=&amp;width=758" alt="image.png"></p>
<ul>
<li>关于坚持</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670056771189-20210b92-0ccc-4334-b5f7-a29a589e7aef.png#averageHue=%23303030&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=406&amp;id=u72e35cb8&amp;originHeight=406&amp;originWidth=712&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=118283&amp;status=done&amp;style=none&amp;taskId=u1f0842d6-0eac-427f-aa25-ba2e60641bb&amp;title=&amp;width=712" alt="image.png"></p>
<ul>
<li>方向很重要，但不是全部，有时候体验过程、享受过程也很美好</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670058807194-284252bd-9116-4d9a-b567-08259d6512f4.png#averageHue=%23353535&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=226&amp;id=ud40e1f96&amp;originHeight=226&amp;originWidth=1178&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=67576&amp;status=done&amp;style=none&amp;taskId=u06b6deef-6a5b-40dc-8ef1-2261cc49721&amp;title=&amp;width=1178" alt="image.png"></p>
<ul>
<li>延迟满足感、长期主义</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670058875701-9d46d472-3eb8-409f-8581-1b4dde376c06.png#averageHue=%232a2a29&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=142&amp;id=ud5a95017&amp;originHeight=142&amp;originWidth=966&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33650&amp;status=done&amp;style=none&amp;taskId=uf4c8065c-e24d-4cb8-8774-3be97432ef6&amp;title=&amp;width=966" alt="image.png"></p>
<ul>
<li>把精力放在自己擅长的事情上</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670059309701-ccf9a9ef-8690-4f7b-9a10-7e5f8b835dd7.png#averageHue=%233e3e3e&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=742&amp;id=u31a98bc6&amp;originHeight=742&amp;originWidth=1194&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=314709&amp;status=done&amp;style=none&amp;taskId=u089bb5ab-4627-46a6-b73c-86b6b1b37a3&amp;title=&amp;width=1194" alt="image.png"></p>
<ul>
<li>关于团队目标</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670061372309-85d4a700-3cfc-4103-8e5f-74b0b669dd8e.png#averageHue=%23424242&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=514&amp;id=u0f40abb4&amp;originHeight=514&amp;originWidth=1182&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=233050&amp;status=done&amp;style=none&amp;taskId=u752fece2-e1d8-49f3-bc0b-a9ca0a716ef&amp;title=&amp;width=1182" alt="image.png"></p>
<ul>
<li>人的一生有三次成长</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670061418742-5e4c913f-15a8-4641-893f-a3b963cfddd9.png#averageHue=%233c3c3c&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=602&amp;id=uf20a8ec3&amp;originHeight=602&amp;originWidth=1184&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=353646&amp;status=done&amp;style=none&amp;taskId=ud45ec196-6376-4203-92d1-f9b3e55ec30&amp;title=&amp;width=1184" alt="image.png"></p>
<ul>
<li>关于做事</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670062363593-a6dd8e06-94a7-4800-bfa8-8640d299a665.png#averageHue=%233e3e3e&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=398&amp;id=u57059943&amp;originHeight=398&amp;originWidth=1184&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=168122&amp;status=done&amp;style=none&amp;taskId=u1c640fab-7c02-431a-a95f-db0705a6681&amp;title=&amp;width=1184" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670062483255-99886b09-7b55-4990-920a-e4b10d310256.png#averageHue=%23282827&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=618&amp;id=u60874304&amp;originHeight=618&amp;originWidth=1208&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=161480&amp;status=done&amp;style=none&amp;taskId=uff967215-92c8-4c0a-b6cd-6b164ebc7cd&amp;title=&amp;width=1208" alt="image.png"></p>
<ul>
<li>关于读书</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670063241514-77c6d1a6-42e1-442b-8913-ba6f4b2da310.png#averageHue=%23494949&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=1116&amp;id=ua2aa0289&amp;originHeight=1116&amp;originWidth=1186&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=566271&amp;status=done&amp;style=none&amp;taskId=u44f8fe55-74da-40bd-8abd-7aecd8697e5&amp;title=&amp;width=1186" alt="image.png"></p>
<ul>
<li>关于为人</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670063441400-f249c82d-85cc-416f-aa04-83e017748d28.png#averageHue=%232a2a2a&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=136&amp;id=u6a13edf1&amp;originHeight=136&amp;originWidth=818&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28821&amp;status=done&amp;style=none&amp;taskId=u7fd256d9-d820-4b2c-aea1-7d8756d0a10&amp;title=&amp;width=818" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670063450750-bcd7008b-a3fa-49e8-a82a-a2318ba1ce26.png#averageHue=%232a2a29&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=140&amp;id=u240a4b39&amp;originHeight=140&amp;originWidth=1034&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34822&amp;status=done&amp;style=none&amp;taskId=ubd6542dd-0556-4804-bd41-8b0139b64b0&amp;title=&amp;width=1034" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670063480503-8196d847-c17b-48ee-9cb6-8f0dabfbb5bd.png#averageHue=%23272726&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=156&amp;id=u8ff891c2&amp;originHeight=156&amp;originWidth=600&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27564&amp;status=done&amp;style=none&amp;taskId=u4b9b2ef4-5c3a-44c4-aab5-41be5767939&amp;title=&amp;width=600" alt="image.png"></p>
<p><a name="P2hva"></a></p>
<h4 id="小结-1" tabindex="-1">小结 <a class="header-anchor" href="#小结-1" aria-label="Permalink to &quot;小结&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>泰戈尔说：顺境也好，逆境也好，人生就是一场对种种困难无尽无休的斗争，一场以寡敌众的战斗。我们都是生活的长跑者，怀揣梦想，步履铿锵，结伴而行</li>
<li>遇事不决，可问春风，春风不语，既随本心</li>
<li>猪猪分享给我的：</li>
</ul>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>人生就是如此的波澜万丈，永远不知道将来会发生什么。即会有令人羡慕的幸运降临，也会遭遇始料未及的失败和考验。然而，决定人生的并非好远或厄运。越是艰难困苦，越不能丧失美好的希望；而在成功时，不可忘记感谢之心、谦虚之心；保持积极向上的姿态，从自己当下能做的事开始，聚精会神，全力以赴。人只要有这种心态，任何时候都可以重振旗鼓。<br />——稻盛和夫</p>
</div>
<ul>
<li>脱口秀大赛冠军呼兰的那种人生态度：不顾一切，冲上去，赢一次。我们活一辈子，总得在某个方面，痛痛快快做成一件事吧</li>
</ul>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>没有人可以永远站在顶峰，即使你可以做到居安思危、未雨绸缪，但是你身边全部都是和你当年一样充满野心充满激情和渴望的年轻人，他们把你的长处和短处放在显微镜下去研究以你为镖靶，你说你守天下难不难。</p>
<p>人生当中成功只是一时的，失败才是主旋律，但是如何面对失败却把人分成不同样子，有的人会被失败击垮有的人会爬起来继续前进，我想真正的成熟应该不是追求与完美而是直面自己的缺陷，这才是生活的本质。</p>
<p>罗曼罗兰说过的这个世上只有一种正真的英雄主义，那就是认清生活的真相并且仍然热爱它！</p>
</div>
<p><a name="OEiF4"></a></p>
<h3 id="关于朋友" tabindex="-1">关于朋友 <a class="header-anchor" href="#关于朋友" aria-label="Permalink to &quot;关于朋友&quot;">&ZeroWidthSpace;</a></h3>
<p><a name="P1OKf"></a></p>
<h4 id="话题-2" tabindex="-1">话题 <a class="header-anchor" href="#话题-2" aria-label="Permalink to &quot;话题&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>人格魅力：</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670037490918-4d11aa4b-a33b-4feb-b40c-d737e0962a3c.png#averageHue=%232c2c2c&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=848&amp;id=uf1418509&amp;originHeight=848&amp;originWidth=732&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=228159&amp;status=done&amp;style=none&amp;taskId=u2fb81e79-a216-435d-a01f-ba1e9b050cd&amp;title=&amp;width=732" alt="image.png"></p>
<ul>
<li>给人印象：</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670037557654-8b899970-53a3-4546-8a25-26d92243ca24.png#averageHue=%231f1f1e&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=144&amp;id=ufdf30611&amp;originHeight=144&amp;originWidth=730&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32847&amp;status=done&amp;style=none&amp;taskId=u110e071a-3d64-46d1-b287-daed9925028&amp;title=&amp;width=730" alt="image.png"></p>
<ul>
<li>如何衡量开玩笑的度：</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670040540498-218e40bc-823f-4636-8778-1d6fc72879ab.png#averageHue=%23272726&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=768&amp;id=u7ea30f21&amp;originHeight=768&amp;originWidth=746&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=192340&amp;status=done&amp;style=none&amp;taskId=u652c79fe-13ce-4d44-96ce-7bd3d023997&amp;title=&amp;width=746" alt="image.png"></p>
<ul>
<li>小朋友记忆：</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670041274032-4100cd2c-0774-476b-a8ef-1f0bdc9377b5.png#averageHue=%232f2f2f&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=404&amp;id=u7e2ef702&amp;originHeight=404&amp;originWidth=718&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=112502&amp;status=done&amp;style=none&amp;taskId=ud56b65cd-cd8c-4822-9229-7870f78dfd6&amp;title=&amp;width=718" alt="image.png"><br />如果跟一群相处的好的朋友在一起，可以放下自由和约束，不用怕行为处事得罪人，哪怕得罪了也可以道个歉，一笑泯恩仇。喜欢这样状态的自己，而不是戴着面具做人，不是真实的自己，当然因为身不由己或者我们都忘记那个内心最真实的自己是什么样子了</p>
<ul>
<li>如何看待脾气好的人</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670057898548-582bc4df-4cc9-47d8-852d-1a13dbc78071.png#averageHue=%23262525&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=252&amp;id=u7818d6d9&amp;originHeight=252&amp;originWidth=1176&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=53885&amp;status=done&amp;style=none&amp;taskId=udee39f27-2fc8-4de8-ac00-04000b5b723&amp;title=&amp;width=1176" alt="image.png"></p>
<ul>
<li>关于夸羽哥</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670062002524-1f0b81f1-973e-4080-916f-7f128d8dc43f.png#averageHue=%232b2a2a&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=138&amp;id=uba112bac&amp;originHeight=138&amp;originWidth=876&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32335&amp;status=done&amp;style=none&amp;taskId=ue818579c-73bd-4024-aeb2-b662e53f852&amp;title=&amp;width=876" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670063053810-46559589-b379-4723-9982-a6847e8b493a.png#averageHue=%23272727&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=150&amp;id=ufe97c976&amp;originHeight=150&amp;originWidth=852&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32921&amp;status=done&amp;style=none&amp;taskId=udea23187-333e-41d8-8bc7-b2af9d5bb4b&amp;title=&amp;width=852" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670063516043-d1eb8ace-4f87-4886-ba5b-ae618b404f56.png#averageHue=%23292828&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=144&amp;id=u0f840913&amp;originHeight=144&amp;originWidth=910&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32387&amp;status=done&amp;style=none&amp;taskId=ubf45ccfd-349f-4056-9a4a-73a662e692b&amp;title=&amp;width=910" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670063536404-00b17d15-78fa-49df-80a4-3e3ae7a6c4a7.png#averageHue=%232c2b2b&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=136&amp;id=u4d5dee39&amp;originHeight=136&amp;originWidth=578&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=24545&amp;status=done&amp;style=none&amp;taskId=u89a806d8-f4e1-4f02-aa18-f357ae72b18&amp;title=&amp;width=578" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670064051561-ca2036e0-15b9-4ad6-9007-8f8df8124e98.png#averageHue=%23292929&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=146&amp;id=uead17667&amp;originHeight=146&amp;originWidth=1040&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37334&amp;status=done&amp;style=none&amp;taskId=u1667ef9d-cac5-43a4-8364-f521e64a8fa&amp;title=&amp;width=1040" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670064100046-7fb86884-6f50-48fe-aa47-27845ac5f1e4.png#averageHue=%233e3e3e&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=386&amp;id=uac6e547f&amp;originHeight=386&amp;originWidth=1176&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=157865&amp;status=done&amp;style=none&amp;taskId=uc14c8b19-b8e7-4b58-a077-57473c3e3c9&amp;title=&amp;width=1176" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670064253650-2d4746d5-8143-4ae2-8ad8-afb0ec121f95.png#averageHue=%23272727&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=198&amp;id=u63e51fc5&amp;originHeight=198&amp;originWidth=1192&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=55127&amp;status=done&amp;style=none&amp;taskId=u42e765bb-6519-469f-9e89-4b8fcee48bd&amp;title=&amp;width=1192" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670064352580-804d6030-12b6-4976-87e6-12419dd2e9c4.png#averageHue=%231e1d1c&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=398&amp;id=u20e61468&amp;originHeight=398&amp;originWidth=576&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=91055&amp;status=done&amp;style=none&amp;taskId=uab2ffd50-1076-4ec7-a39a-27afcdd16ef&amp;title=&amp;width=576" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670064376975-cc273689-e3f9-4ef9-9168-f939d6f1f518.png#averageHue=%232a2929&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=148&amp;id=u325bf6a4&amp;originHeight=148&amp;originWidth=1188&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=40385&amp;status=done&amp;style=none&amp;taskId=ub80cdef4-c1e7-45e7-bbe1-4d46272b995&amp;title=&amp;width=1188" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670064392536-83426fe2-2bde-4d46-b503-0fe6ebf4fa9a.png#averageHue=%232a2929&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=146&amp;id=uf707e2d1&amp;originHeight=146&amp;originWidth=788&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31621&amp;status=done&amp;style=none&amp;taskId=u76b6018b-bc99-4536-89b9-64538e3d910&amp;title=&amp;width=788" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670064411004-a5a3bd28-5eee-4dca-97bd-560a915c86c0.png#averageHue=%232f2f2e&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=130&amp;id=u7b76b203&amp;originHeight=130&amp;originWidth=888&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32212&amp;status=done&amp;style=none&amp;taskId=u92d69e3c-c21a-4e6f-8be6-0a70d6a53e9&amp;title=&amp;width=888" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670064438004-201a3fb3-a716-4c64-a6c8-eb1f3c46cc5a.png#averageHue=%232b2a2a&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=140&amp;id=uca4796a9&amp;originHeight=140&amp;originWidth=778&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29660&amp;status=done&amp;style=none&amp;taskId=u7dcdea3a-8625-4e25-a4ac-6db676b1da8&amp;title=&amp;width=778" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670064471577-550f9496-7a65-4548-ae2b-1b934eeffc0a.png#averageHue=%23282827&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=186&amp;id=ua4abb79b&amp;originHeight=186&amp;originWidth=1210&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=52706&amp;status=done&amp;style=none&amp;taskId=u19f98a0d-a84d-41ac-abef-4bac881947a&amp;title=&amp;width=1210" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670064505826-6d98cf7c-c057-4b89-8c1e-a633a82b4187.png#averageHue=%23262524&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=590&amp;id=ud3df1bf1&amp;originHeight=590&amp;originWidth=624&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=101440&amp;status=done&amp;style=none&amp;taskId=ucaaafd72-3921-465e-b761-9021a3e2b34&amp;title=&amp;width=624" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670064529509-77a5cab6-d376-4acb-9957-b9c55d1102d4.png#averageHue=%232a2a29&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=152&amp;id=ub63073a1&amp;originHeight=152&amp;originWidth=662&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28047&amp;status=done&amp;style=none&amp;taskId=u72b10f7d-1270-467e-85f1-61dd7f25fda&amp;title=&amp;width=662" alt="image.png"></p>
<p>夸秃头的：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670063106175-d84e022e-8545-4a02-957f-1f2610019e70.png#averageHue=%23252524&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=152&amp;id=uae372fbe&amp;originHeight=152&amp;originWidth=580&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29285&amp;status=done&amp;style=none&amp;taskId=u6ba0da7c-9421-4d9e-bade-591b367bbae&amp;title=&amp;width=580" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670063359382-efab8f69-4a34-463e-bf13-f63c5268bf3c.png#averageHue=%23292828&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=142&amp;id=u4fc5addd&amp;originHeight=142&amp;originWidth=1158&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36688&amp;status=done&amp;style=none&amp;taskId=u4b7925b7-b5ad-411e-8e70-50c3641759a&amp;title=&amp;width=1158" alt="image.png"></p>
<ul>
<li>关于道歉</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670062161034-8ec0d118-6660-45dc-9a6c-84faea29404b.png#averageHue=%23272727&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=234&amp;id=u302317d3&amp;originHeight=234&amp;originWidth=848&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=58131&amp;status=done&amp;style=none&amp;taskId=u6efd5c6c-a5a3-42ae-b37d-e3bf8491729&amp;title=&amp;width=848" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670062221879-699437d4-4a27-488e-81b5-a575880c00c1.png#averageHue=%232e2d2d&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=176&amp;id=u50ec829b&amp;originHeight=176&amp;originWidth=1186&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=49732&amp;status=done&amp;style=none&amp;taskId=ub42be1f1-1d6a-4a4f-a973-de323e48a76&amp;title=&amp;width=1186" alt="image.png">
<a name="cGIWH"></a></p>
<h4 id="小结-2" tabindex="-1">小结 <a class="header-anchor" href="#小结-2" aria-label="Permalink to &quot;小结&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>聊聊我想成为的什么样的人
<a name="F03dC"></a></li>
</ul>
<h3 id="关于职场" tabindex="-1">关于职场 <a class="header-anchor" href="#关于职场" aria-label="Permalink to &quot;关于职场&quot;">&ZeroWidthSpace;</a></h3>
<p>非常认同汤圆讲到的一句话：<strong>讲这个职场问题，是想大家能够从不同角度去思考问题</strong></p>
<p><a name="gOPZg"></a></p>
<h4 id="话题-3" tabindex="-1">话题 <a class="header-anchor" href="#话题-3" aria-label="Permalink to &quot;话题&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>职场关系如何处理</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670037664254-7ea1d155-8092-4840-9a25-5a4af382cf62.png#averageHue=%231e1d1d&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=388&amp;id=uf4e6bdff&amp;originHeight=388&amp;originWidth=736&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=88481&amp;status=done&amp;style=none&amp;taskId=ucfd250c4-f929-41cc-a4c8-bb7eacaa206&amp;title=&amp;width=736" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670060523341-8d7e8599-5123-4707-a18f-03984057799e.png#averageHue=%23333333&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=232&amp;id=u8ee41370&amp;originHeight=232&amp;originWidth=1182&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=75381&amp;status=done&amp;style=none&amp;taskId=u6527e164-4ebb-4646-89e3-416fc5fbeeb&amp;title=&amp;width=1182" alt="image.png"></p>
<ul>
<li>职场情景模拟：年度总结跟领导汇报怎么写</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670037822681-9e927a19-ffb2-4a0c-8774-3dc09edba00d.png#averageHue=%23292828&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=928&amp;id=u7ab56171&amp;originHeight=928&amp;originWidth=738&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=247642&amp;status=done&amp;style=none&amp;taskId=u9ae3958d-5f72-498e-b4a0-7a8e391bd16&amp;title=&amp;width=738" alt="image.png"></p>
<ul>
<li>职场情景模拟：领导层会议复盘让你发言</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670038190872-fc6a9596-9017-43d9-9b82-e5feaf919fd3.png#averageHue=%232a2a2a&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=1201&amp;id=ue60b172f&amp;originHeight=1214&amp;originWidth=738&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=330391&amp;status=done&amp;style=none&amp;taskId=u30cac11a-be61-46fc-979b-bf9427cefa8&amp;title=&amp;width=730" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670038264773-d0787cfc-c7e5-4f2e-8b05-425943f9b934.png#averageHue=%232d2d2d&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=570&amp;id=ud7387937&amp;originHeight=572&amp;originWidth=734&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=170899&amp;status=done&amp;style=none&amp;taskId=u3cb2d579-59dc-489a-9b56-db49fbf10c9&amp;title=&amp;width=731" alt="image.png"></p>
<ul>
<li>职场情景模拟：饭局领导支开你</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670038762086-8b2c4081-7b1c-4338-afd1-14e53a72da9c.png#averageHue=%23252525&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=982&amp;id=uf3b9dccf&amp;originHeight=982&amp;originWidth=740&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=244696&amp;status=done&amp;style=none&amp;taskId=ue9f05f0e-ef9d-4ae2-9e4f-d13efc14be3&amp;title=&amp;width=740" alt="image.png"></p>
<ul>
<li>职场情景模拟：领导落下杯子在你工位上</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670039438189-0f3d7efd-0cc7-466f-8234-3ee0d04b49d7.png#averageHue=%232f2f2e&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=1092&amp;id=u83aa52b4&amp;originHeight=1092&amp;originWidth=756&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=322506&amp;status=done&amp;style=none&amp;taskId=u05f907e4-1cf5-41f6-8b1b-62ca37a0bfe&amp;title=&amp;width=756" alt="image.png"></p>
<ul>
<li>关于工作</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670059188617-85decade-b084-456e-845a-c9a993c3b372.png#averageHue=%232a2a2a&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=640&amp;id=u7e361c63&amp;originHeight=640&amp;originWidth=1186&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=185209&amp;status=done&amp;style=none&amp;taskId=ud00c39b3-947c-4c6a-9c1b-c938631772e&amp;title=&amp;width=1186" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670059671070-206e5b51-afbb-4f29-a5e9-dbd01e45112f.png#averageHue=%23292929&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=194&amp;id=udd1d986c&amp;originHeight=194&amp;originWidth=1184&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=42317&amp;status=done&amp;style=none&amp;taskId=udea6131d-33ed-4d06-bcc0-1b8362fecd1&amp;title=&amp;width=1184" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670059725538-c61a1b7b-b9e6-4565-bfed-5126ef6b7d9a.png#averageHue=%23353535&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=274&amp;id=u2cb7b75f&amp;originHeight=274&amp;originWidth=1182&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=91628&amp;status=done&amp;style=none&amp;taskId=u103fa44f-a8fb-41bc-bc40-a1b1ebd7c4b&amp;title=&amp;width=1182" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670062546696-07cb88a1-0a8f-4241-9076-a7d204a2641a.png#averageHue=%23313131&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=220&amp;id=u76e8d2d7&amp;originHeight=220&amp;originWidth=1178&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=97104&amp;status=done&amp;style=none&amp;taskId=u2a55e4d8-c60a-4128-87f5-6e105ad5cdd&amp;title=&amp;width=1178" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670063643988-ec343ec2-91c3-44a4-88e1-cb95d45dd9ca.png#averageHue=%23323232&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=238&amp;id=u68ced94d&amp;originHeight=238&amp;originWidth=1204&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=77890&amp;status=done&amp;style=none&amp;taskId=u07a77c7d-10d2-4171-ad75-225e85c7af9&amp;title=&amp;width=1204" alt="image.png"></p>
<ul>
<li>关于职场交朋友</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670062294315-2847d888-1e98-4cf2-84a4-4e7cc5456f42.png#averageHue=%23434342&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=556&amp;id=u7b75e93e&amp;originHeight=556&amp;originWidth=1200&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=252746&amp;status=done&amp;style=none&amp;taskId=u28d1d52a-8669-4e75-b24c-87cc074d84d&amp;title=&amp;width=1200" alt="image.png"></p>
<ul>
<li>关于做事经历</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670062963595-d9188b87-bec1-4e6d-900c-0c87f66862d5.png#averageHue=%23454545&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=762&amp;id=u3ea20881&amp;originHeight=762&amp;originWidth=1186&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=359681&amp;status=done&amp;style=none&amp;taskId=ub23717bd-4afb-40a1-9cef-41b7a9f5a2c&amp;title=&amp;width=1186" alt="image.png">
<a name="w6tCK"></a></p>
<h4 id="小结-3" tabindex="-1">小结 <a class="header-anchor" href="#小结-3" aria-label="Permalink to &quot;小结&quot;">&ZeroWidthSpace;</a></h4>
<p>...</p>
<p>两个点：</p>
<ul>
<li>跟对人永远比做对事重要</li>
<li>大悟之人，知世故而不世故</li>
</ul>
<p><a name="SVkR1"></a></p>
<h2 id="最后我想说" tabindex="-1">最后我想说 <a class="header-anchor" href="#最后我想说" aria-label="Permalink to &quot;最后我想说&quot;">&ZeroWidthSpace;</a></h2>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670076401534-1b219595-754e-4eaf-bc0a-4a1d22d74c53.png#averageHue=%23e6cb8c&amp;clientId=u3bd1c600-123a-4&amp;from=paste&amp;height=510&amp;id=udeb55c85&amp;originHeight=510&amp;originWidth=1234&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=186185&amp;status=done&amp;style=none&amp;taskId=u2b89ecee-7d0f-4da3-994e-350c64750df&amp;title=&amp;width=1234" alt="image.png"></p>
<ul>
<li>得学会摸鱼，不然会错过很多话题讨论，哈哈哈，很有意思的</li>
<li>玉伯：历史总是在经历时苦逼不堪，但在回忆时激荡不已</li>
<li>一无是处、人间清醒</li>
</ul>
<p>认识到自己的无知，认识到自己的渺小，然后保持清醒的头脑，向前冲</p>
<p>臭不要脸的我，毛遂自荐一下我的语雀数字花园，虽然很多还没怎么写，但我已经规划好要怎么写了，而且我是将 21 天社群作为我的第一批读者用户，给自己 3 个月的时间全力以赴维护好语雀内容<br /><a href="https://www.yuque.com/super456?view=doc_embed" target="_blank" rel="noreferrer">纵倾童鞋🐯</a></p>
<p>借用姐姐的话结束本次分享：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670056703166-1a40af80-5cd5-4645-8c89-01d07001b843.png#averageHue=%232a2a29&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=184&amp;id=u84a8841d&amp;originHeight=184&amp;originWidth=1196&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63004&amp;status=done&amp;style=none&amp;taskId=u121eab1a-2eff-470b-81f4-12381e3e9b3&amp;title=&amp;width=1196" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670062631193-449d7fea-0ac1-4341-ad83-15196851c420.png#averageHue=%232b2a2a&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=368&amp;id=uab43ccd0&amp;originHeight=368&amp;originWidth=530&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=60442&amp;status=done&amp;style=none&amp;taskId=ubd446248-cf68-4ef9-9b1d-4c6a701bfba&amp;title=&amp;width=530" alt="image.png"></p>
<p>也许接下来的某一天我们正如姐姐所说会难受吧<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670057138347-8a1630f0-7d03-4955-b7d1-149bfb6ec125.png#averageHue=%23292828&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=150&amp;id=ub8eb4fb4&amp;originHeight=150&amp;originWidth=860&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34183&amp;status=done&amp;style=none&amp;taskId=u93772c79-ed2e-492a-8ad6-9896e5c00a5&amp;title=&amp;width=860" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670061499200-211e148f-0452-408f-beab-1636afea76c6.png#averageHue=%23302f2f&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=186&amp;id=ube9fd88b&amp;originHeight=186&amp;originWidth=1176&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=60789&amp;status=done&amp;style=none&amp;taskId=uaf8423a4-c864-4a30-b661-d87658b5d3d&amp;title=&amp;width=1176" alt="image.png"></p>
<p>期待这句话是真的<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/245110/1670058188603-0e7f5379-37bf-4550-aba4-d53197714d02.png#averageHue=%232a2929&amp;clientId=u46e8d9ee-889a-4&amp;from=paste&amp;height=142&amp;id=u8347ed6f&amp;originHeight=142&amp;originWidth=1130&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36822&amp;status=done&amp;style=none&amp;taskId=u3fefc6b4-fa82-4ea5-9192-2d6aedb09ac&amp;title=&amp;width=1130" alt="image.png"></p>
<p>姐姐的语雀主页，冲啊关注起来~😘<br /><a href="https://www.yuque.com/yuqueyonghudydw3w?view=doc_embed" target="_blank" rel="noreferrer">汤圆想躺平</a>
<a name="mz0FR"></a></p>
<h2 id="群友相关文档" tabindex="-1">群友相关文档 <a class="header-anchor" href="#群友相关文档" aria-label="Permalink to &quot;群友相关文档&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>小七</li>
</ul>
<p><a href="https://www.yuque.com/ggbdpq/nice-people/tangyuan?view=doc_embed" target="_blank" rel="noreferrer">汤圆的习惯养成打卡</a><br /><a href="https://www.yuque.com/ggbdpq/nice-people/important-events?view=doc_embed" target="_blank" rel="noreferrer">好青年社群</a></p>
<ul>
<li>猪猪</li>
</ul>
<p><a href="https://www.yuque.com/zhuzhu-lr3z5/magic_pinkpiggy/lc0p7nw7qkckq8zv?view=doc_embed" target="_blank" rel="noreferrer">汤圆老师 —— 每天一颗善存片</a><br /><a href="https://www.yuque.com/zhuzhu-lr3z5/magic_pinkpiggy/kb8rkaskgfbxe4zk?view=doc_embed" target="_blank" rel="noreferrer">“关于我要成为什么样的人”</a></p>
<h2 id="原茶话会分享音频" tabindex="-1">原茶话会分享音频 <a class="header-anchor" href="#原茶话会分享音频" aria-label="Permalink to &quot;原茶话会分享音频&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://www.yuque.com/yayu/nice-people/share10#iybix" target="_blank" rel="noreferrer">语雀文档</a></p>
]]></content:encoded>
            <enclosure url="https://cdn.nlark.com/yuque/0/2022/png/245110/1670064729042-ad1afb3e-00ce-4c54-97aa-16beb85f7034.png#averageHue=%232a2929&clientId=u46e8d9ee-889a-4&from=paste&height=140&id=uf3a04606&originHeight=140&originWidth=692&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26211&status=done&style=none&taskId=ufb0564e6-46cf-4f6a-85cc-ad3008aa9bd&title=&width=692" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[大数据虚拟列表优化实战]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/virtual-scrolling-list-practice.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/virtual-scrolling-list-practice.html</guid>
            <pubDate>Wed, 09 Nov 2022 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="大数据虚拟列表优化实战" tabindex="-1">大数据虚拟列表优化实战 <a class="header-anchor" href="#大数据虚拟列表优化实战" aria-label="Permalink to &quot;大数据虚拟列表优化实战&quot;">&ZeroWidthSpace;</a></h1>
<p>待更新🚀...</p>
<h1 id="to-do-list" tabindex="-1">TO DO LIST <a class="header-anchor" href="#to-do-list" aria-label="Permalink to &quot;TO DO LIST&quot;">&ZeroWidthSpace;</a></h1>
<ul class="task-list">
<li class="task-list-item"><input type="checkbox" id="cbx_0" disabled="true"><label for="cbx_0"> 需求分析（管理后台案场录音详情优化）</label></li>
<li class="task-list-item"><input type="checkbox" id="cbx_1" disabled="true"><label for="cbx_1"> STAR 法则分析</label></li>
<li class="task-list-item"><input type="checkbox" id="cbx_2" disabled="true"><label for="cbx_2"> 市面技术文章案例及原理分析</label></li>
<li class="task-list-item"><input type="checkbox" id="cbx_3" disabled="true"><label for="cbx_3"> 制定需求优化分析技术方案</label></li>
<li class="task-list-item"><input type="checkbox" id="cbx_4" disabled="true"><label for="cbx_4"> 实践并产出对比分析</label></li>
<li class="task-list-item"><input type="checkbox" id="cbx_5" disabled="true"><label for="cbx_5"> 总结并制定分享准备</label></li>
</ul>
<h1 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">&ZeroWidthSpace;</a></h1>
<ol>
<li><strong>技术难点</strong>：</li>
</ol>
<ul>
<li>虚拟滚动技术方案</li>
<li>自适应列表高度</li>
<li>分片渲染算法</li>
<li>分页设置</li>
<li>图片懒加载</li>
<li>图片的动态裁剪</li>
<li>关键词搜索算法</li>
<li>检索切换算法</li>
<li>浏览器和代码性能分析优化</li>
</ul>
<ol start="2">
<li>技术选型：</li>
</ol>
<ul>
<li>参考现有的市面实现技术方案</li>
<li>参考现有的组件库或第三方插件技术实现方案</li>
<li>记录不同的技术方案实现过程及对比（方案原理及优缺点，特别是代码性能和浏览器性能监控这一块重点说明）</li>
<li>各个技术实现架构图</li>
</ul>
<ol start="3">
<li>最终实现效果</li>
</ol>
<ul>
<li>几种方案的实现效果对比（重点突出优缺点）</li>
<li>总结</li>
</ul>
<h2 id="situation-背景" tabindex="-1">Situation 背景 <a class="header-anchor" href="#situation-背景" aria-label="Permalink to &quot;Situation 背景&quot;">&ZeroWidthSpace;</a></h2>
<h2 id="task-任务" tabindex="-1">Task 任务 <a class="header-anchor" href="#task-任务" aria-label="Permalink to &quot;Task 任务&quot;">&ZeroWidthSpace;</a></h2>
<h2 id="action-行为" tabindex="-1">Action 行为 <a class="header-anchor" href="#action-行为" aria-label="Permalink to &quot;Action 行为&quot;">&ZeroWidthSpace;</a></h2>
<h2 id="result-结果" tabindex="-1">Result 结果 <a class="header-anchor" href="#result-结果" aria-label="Permalink to &quot;Result 结果&quot;">&ZeroWidthSpace;</a></h2>
<h1 id="现有案例" tabindex="-1">现有案例 <a class="header-anchor" href="#现有案例" aria-label="Permalink to &quot;现有案例&quot;">&ZeroWidthSpace;</a></h1>
<ul>
<li><a href="https://juejin.cn/post/7138070983381876749" target="_blank" rel="noreferrer">基于【虚拟列表】高性能渲染海量数据 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7110588879060598820" target="_blank" rel="noreferrer">渲染十万条数据就把你卡住了？不存在的 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7031923575044964389" target="_blank" rel="noreferrer">后端一次给你10万条数据，如何优雅展示，到底考察我什么? - 掘金</a></li>
<li><a href="https://juejin.cn/post/6844903982742110216" target="_blank" rel="noreferrer">「前端进阶」高性能渲染十万条数据(虚拟列表) - 掘金</a></li>
<li><a href="https://juejin.cn/post/7121551701731409934" target="_blank" rel="noreferrer">花三个小时，完全掌握分片渲染和虚拟列表～ - 掘金</a></li>
<li><a href="https://juejin.cn/post/7085941958228574215" target="_blank" rel="noreferrer">虚拟列表，我真的会了！！！ - 掘金</a></li>
<li><a href="https://juejin.cn/post/6937939870018961439" target="_blank" rel="noreferrer">Vue 虚拟列表，纵享丝滑【实践篇】 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6844903449297944589#heading-8" target="_blank" rel="noreferrer">Vue.js 一个超长列表无限滚动加载的解决方案 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7086359708507832356" target="_blank" rel="noreferrer">Vue3 实现列表虚拟滚动 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6965675310159233037" target="_blank" rel="noreferrer">前端长列表优化之虚拟滚动vue-virtual-scroller - 掘金</a></li>
<li><a href="https://juejin.cn/post/7002056556116181000" target="_blank" rel="noreferrer">使用 虚拟列表 对列表大数据进行优化 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7036152951399776264" target="_blank" rel="noreferrer">听说你还不会虚拟列表？原谅我来晚了 - 掘金</a></li>
<li><a href="https://github.com/dwqs/blog/issues/70" target="_blank" rel="noreferrer">浅说虚拟列表的实现原理 · Issue #70 · dwqs/blog</a></li>
<li><a href="https://juejin.cn/post/7071993460261126152" target="_blank" rel="noreferrer">前端列表优化重器之虚拟列表 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6844903893441183751" target="_blank" rel="noreferrer">长列表优化之虚拟列表 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6995334008603148295" target="_blank" rel="noreferrer">百万PV商城实践系列 - 前端长列表渲染优化实战 - 掘金</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/34585166" target="_blank" rel="noreferrer">再谈前端虚拟列表的实现</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26022258" target="_blank" rel="noreferrer">聊聊前端开发中的长列表</a></li>
<li><a href="https://juejin.cn/post/6877507011769008135" target="_blank" rel="noreferrer">浅谈虚拟列表实现与原理分析 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6844903907387244558" target="_blank" rel="noreferrer">虚拟列表的实现 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6948011958075392036" target="_blank" rel="noreferrer">如何实现一个高度自适应的虚拟列表 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6966179727329460232" target="_blank" rel="noreferrer">「百毒不侵(三)」结合“康熙选秀”，给大家讲讲“虚拟列表” - 掘金</a></li>
<li><a href="https://juejin.cn/post/6984992069592809480" target="_blank" rel="noreferrer">微信小程序虚拟列表 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6966904317148299271" target="_blank" rel="noreferrer">如何让10万条数据的小程序列表如丝般顺滑 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6844903729460674567" target="_blank" rel="noreferrer">在React项目中，如何优雅的优化长列表 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6844903938894872589" target="_blank" rel="noreferrer">「前端进阶」高性能渲染十万条数据(时间分片) - 掘金</a></li>
<li><a href="https://juejin.cn/post/6844904184689475592" target="_blank" rel="noreferrer">当后端一次性丢给你10万条数据, 作为前端工程师的你,要怎么处理? - 掘金</a></li>
<li><a href="https://juejin.cn/post/6855129007990505480" target="_blank" rel="noreferrer">如何处理前端超长列表 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6844904008667103240" target="_blank" rel="noreferrer">前端面经题记：长列表怎么优化？ - 掘金</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/387907431" target="_blank" rel="noreferrer">如何一次性加载10万条数据（虚拟长列表）</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/60610599" target="_blank" rel="noreferrer">虚拟列表组件开发思路和遇到的问题</a></li>
<li><a href="https://github.com/tangbc/vue-virtual-scroll-list" target="_blank" rel="noreferrer">A vue component support big amount data list with high render performance and efficient.</a></li>
<li><a href="https://github.com/Akryum/vue-virtual-scroller" target="_blank" rel="noreferrer">GitHub - Akryum/vue-virtual-scroller: ⚡️ Blazing fast scrolling for any amount of data</a></li>
<li><a href="https://juejin.cn/post/6844904013360529415" target="_blank" rel="noreferrer">DOM 数量固定的无限滚动列表 - 掘金</a></li>
<li><a href="https://www.bilibili.com/video/BV1Vy4y147SB?spm_id_from=333.337.search-card.all.click&amp;vd_source=59ef88925a159f981edad5ce1c4ec076" target="_blank" rel="noreferrer">Vue长列表优化专题：封装一个Vue长列表虚拟滚动插件_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1Vy4y147SB?spm_id_from=333.337.search-card.all.click&amp;vd_source=59ef88925a159f981edad5ce1c4ec076" target="_blank" rel="noreferrer">Vue长列表优化专题：封装一个Vue长列表虚拟滚动插件_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1qU4y197hv?spm_id_from=333.337.search-card.all.click&amp;vd_source=59ef88925a159f981edad5ce1c4ec076" target="_blank" rel="noreferrer">原生 Javascript 实现虚拟列表、无限滚动加载（固定行高）_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1qz4y1o7QA?spm_id_from=333.337.search-card.all.click&amp;vd_source=59ef88925a159f981edad5ce1c4ec076" target="_blank" rel="noreferrer">通俗易懂的讲解web前端虚拟列表_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1MZ4y1Y7WM?spm_id_from=333.337.search-card.all.click&amp;vd_source=59ef88925a159f981edad5ce1c4ec076" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1MZ4y1Y7WM?spm_id_from=333.337.search-card.all.click&amp;vd_source=59ef88925a159f981edad5ce1c4ec076</a></li>
<li><a href="https://www.bilibili.com/video/BV1xL411A7yA?spm_id_from=333.337.search-card.all.click&amp;vd_source=59ef88925a159f981edad5ce1c4ec076" target="_blank" rel="noreferrer">理解虚拟列表底层实现原理_哔哩哔哩_bilibili</a></li>
<li><a href="https://blog.csdn.net/achao_2020/article/details/107607510" target="_blank" rel="noreferrer">vue实现虚拟列表_achao_2020的博客-CSDN博客_iview虚拟列表</a></li>
<li><a href="https://www.hlwen.com/2021/08/19/324.html" target="_blank" rel="noreferrer">web前端进阶，vue高性能渲染十万条数据(虚拟列表)，告别卡顿 - 新概念技术博客</a></li>
<li><a href="https://www.jianshu.com/p/622ddf13e707" target="_blank" rel="noreferrer">https://www.jianshu.com/p/622ddf13e707</a></li>
<li><a href="https://cn.vuejs.org/guide/essentials/list.html#displaying-filtered-sorted-results" target="_blank" rel="noreferrer">列表渲染 | Vue.js</a></li>
<li><a href="https://mp.weixin.qq.com/s/T3NtJ41oC1GOIT7s2Wtnbg" target="_blank" rel="noreferrer">虚拟列表在哈啰商城H5中的实践</a></li>
</ul>
<p>在线演示 1w 表格数据展示：<a href="http://miniui.com/BigTest/10000-datagrid.html" target="_blank" rel="noreferrer">http://miniui.com/BigTest/10000-datagrid.html</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[工作生活心得]]></title>
            <link>https://super456.github.io/posts/random-thought/2022/work-life-insights.html</link>
            <guid>https://super456.github.io/posts/random-thought/2022/work-life-insights.html</guid>
            <pubDate>Sat, 05 Nov 2022 20:00:00 GMT</pubDate>
            <description><![CDATA[# 工作生活心得
## 一、关于工作
1. 想做好一件事情前，获得上级的认可非常非常重要，这是把一件事情做成、做好的催化剂。

2. 很多时候，源自“事”的困难都可以用态度解决，来自“人”的困难可以用换位思考解决。

3. 对于刚参加工作的同学，如果家中无矿，啥也别说，努力就对了！毕业五年内的表现，可以决定人生很多事情。

4. 如果你和领导发生分歧：拿出你的数据/理由/态度尽最大的努力去说服他，如果充分沟通还形不成共识，那就先听他的 。这不是媚上，而是“在必须达成一致的前提下，相信更有概率做出正确决定的人。”

5. 在工作中，如果某个时间突然发现和往常不一样，陡然压力变大/身心疲惫，别害怕 ，因为，这有可能是你在成长、突破瓶颈前的黑暗期。

6. 专业技能是立身之本。从长期来看，它是性价比最高的投资标的之一。

7. 结合资源，尽最大的努力、用最好的态度，做好手上的工作，也是一种创业。

8. 不要因为背靠大树久了，就误认为自己是颗大树。对客户&用户的尊重和价值创造是我们很大的护城河。

**——阿里舒文**

]]></description>
            <content:encoded><![CDATA[<h1 id="工作生活心得" tabindex="-1">工作生活心得 <a class="header-anchor" href="#工作生活心得" aria-label="Permalink to &quot;工作生活心得&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="一、关于工作" tabindex="-1">一、关于工作 <a class="header-anchor" href="#一、关于工作" aria-label="Permalink to &quot;一、关于工作&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>
<p>想做好一件事情前，获得上级的认可非常非常重要，这是把一件事情做成、做好的催化剂。</p>
</li>
<li>
<p>很多时候，源自“事”的困难都可以用态度解决，来自“人”的困难可以用换位思考解决。</p>
</li>
<li>
<p>对于刚参加工作的同学，如果家中无矿，啥也别说，努力就对了！毕业五年内的表现，可以决定人生很多事情。</p>
</li>
<li>
<p>如果你和领导发生分歧：拿出你的数据/理由/态度尽最大的努力去说服他，如果充分沟通还形不成共识，那就先听他的 。这不是媚上，而是“在必须达成一致的前提下，相信更有概率做出正确决定的人。”</p>
</li>
<li>
<p>在工作中，如果某个时间突然发现和往常不一样，陡然压力变大/身心疲惫，别害怕 ，因为，这有可能是你在成长、突破瓶颈前的黑暗期。</p>
</li>
<li>
<p>专业技能是立身之本。从长期来看，它是性价比最高的投资标的之一。</p>
</li>
<li>
<p>结合资源，尽最大的努力、用最好的态度，做好手上的工作，也是一种创业。</p>
</li>
<li>
<p>不要因为背靠大树久了，就误认为自己是颗大树。对客户&amp;用户的尊重和价值创造是我们很大的护城河。</p>
</li>
</ol>
<p><strong>——阿里舒文</strong></p>
<hr>
<ol start="9">
<li>
<p>学会心平气和的跟产品沟通，尤其是不懂技术的产品。</p>
</li>
<li>
<p>喜欢学习的程序员很少，得过且过才是大多数。</p>
</li>
<li>
<p>每天写业务页面不能让你变强，顶多算是比较熟练的流水线工人，要变强还得靠业余时间。</p>
</li>
<li>
<p>工作不忙时，尽量利用这段时间学习；技术越好，任务完成的越快，摸鱼的时间就越多。</p>
</li>
<li>
<p>少管闲事、少关注八卦新闻、别拍马屁，有时间多学习。</p>
</li>
<li>
<p><strong>时刻反省自己，今天状态怎么样，有没有进步、提高认知、扩展技术广度或深度什么的</strong>。</p>
</li>
</ol>
<hr>
<ol start="15">
<li>
<p><strong>专注</strong> —— 一万小时定律。做任何事都需要持续的专注，我最开始也说了技术是一门手艺活，如果吃不了苦要提前改行。当然现在各种新兴媒体涌现，比如：得到、极客时间、凯叔讲故事、樊登读书、社群圈子等，打破了一万小时定律。你应该庆幸，因为这些媒体的出现，让你有更多的时间获得更多的知识。</p>
</li>
<li>
<p><strong>专家思维</strong>：碰到问题一定要<strong>打破砂锅问到底</strong>。只有这样你才能深刻理解这个问题背后的真实原因，后续再碰到能快速解决，并<strong>沉淀经验帮助其他人</strong>。</p>
</li>
<li>
<p><strong>不要急于证明自己</strong>：频繁跳槽，短时间内薪水看起来会比较高，但可能无法长远。如果你不厚积薄发，突破那个天花板，你的薪水也只会是那个上限，<strong>突破</strong>了才能有更大的未来。</p>
</li>
<li>
<p><strong>建立个人品牌</strong>：不要害怕吃亏，多帮助别人，成为别人口中的靠谱先生。</p>
</li>
<li>
<p><strong>坚持写作</strong>：日课、总结。比如玉伯等大佬都保持写日课的习惯。<strong>经常总结</strong>，<strong>反省得失</strong>。</p>
</li>
<li>
<p><strong>写 PPT</strong>：大家可能会觉得 PPT 大神很虚。我不提倡过度写 PPT，但比如月度、季度等 PPT，你还是要写写。PPT 很能锻炼一个人的结构化和抽象思维，提升你对事情的看法。所以它是个锻炼的工具。</p>
</li>
<li>
<p><strong>以战养兵</strong>：通过在压力下锻炼自己对项目的<strong>把控</strong>，训练自己的项目经验，训练跟别人<strong>协同</strong>把事做好。</p>
</li>
<li>
<p>明白自己这四个阶段的位置及调整：<strong>不知道自己不知道</strong> - <strong>知道自己不知道</strong> - <strong>知道自己知道</strong> - <strong>不知道自己知道</strong>，达到最高的无我境界。</p>
</li>
</ol>
<p><strong>——阿里城池</strong></p>
<hr>
<ol start="23">
<li>只有自己亲身经历的坑才是经验，道听途说或者学习了解到的东西都只是过眼浮云。</li>
</ol>
<hr>
<ol start="24">
<li>
<p>每个人都有自己的想法，接受别人的想法是学习，让别人接受你的想法是一种包容，更是一种成长。</p>
</li>
<li>
<p>有争吵才会有结果，有批评才会有进步，有意识才会持续改变。</p>
</li>
<li>
<p>学而不思则罔，思而不学则殆。紧张的节奏压得你没有时间思考，也没有时间总结。你以为你做了很多，学了很多，但是你需要时间静下来思考和总结，这样最终才会变成自己的东西。</p>
</li>
<li>
<p>重要也不重要：你的重要因为你是团队的一份子，你需要用你的光和热鼓舞自己和影响别人，用你的力量去塑造公司的产品，公司的需要就是你的重要。<strong>如果你是来学习的，抱歉，这里并不适合你</strong>。因为公司没有时间和经历花在培养一个人的身上，过多的是看到你的结果，而不是看到你的成长。所以你的个人成长显得又是那么的苍白。然而事情并不是绝对的，创业的成功带来的回报远比你的个人成长带来的回报高得多，比如陌陌、映客的上市，对于那些初期加入的人来说是硕大的丰收。但是这需要你的慧眼。</p>
</li>
<li>
<p>沉淀和成长：沉淀是大厂最宝贵的资源，海量的中间件、内部文献、骨灰级大佬都是你学习的资源。无论是业务还是技术，你都可以学到整个领域的精华，这就是大厂带给你的成长。外企小公司对于技术的沉淀是远远不如国内一线大厂的，这些经验不是你努力学习看书能得到的，周围的环境，整个团队的意识带给你的视野和成长是与众不同的。</p>
</li>
</ol>
<p><strong>——微信公众号Java后端</strong></p>
<h2 id="二、关于生活" tabindex="-1">二、关于生活 <a class="header-anchor" href="#二、关于生活" aria-label="Permalink to &quot;二、关于生活&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>
<p>技术人读书工作挣钱养家，一步步成长同时也会一岁岁变老。相比不少行业，互联网行业自身有赛道上的优势，但如果单纯以同比其他行业略高的溢价按年/月出售自己的时间和技能，这不应该是我们做的。坚持不断的思考、通过技术优势带来叠加价值，在过程中不断成长 ， 这兴许会更好。</p>
</li>
<li>
<p>学会奖励自己。如果经受了辛劳、痛苦和压力走了过来，再不好好的、肉痛地奖励自己一把，哪对得起过去和未来的自己。</p>
</li>
<li>
<p>除了在工作中，人生处处皆可学习：学理财、学打球、学拍照、学游泳、学健身、学拍短视频、学习怎么把生活过得更好。</p>
</li>
<li>
<p>最后，咱们技术人可能很忙，有可能没法“<strong>Work-Life Balance</strong>”，这是一种取舍。但健康的身体一定是最宝贵的一笔财富，没有之一，不能舍。</p>
</li>
</ol>
<p><strong>——阿里舒文</strong></p>
<hr>
<ol start="5">
<li>只要不生病，慢慢赚钱就好了，这就是人生。</li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UI 设计与交互体验]]></title>
            <link>https://super456.github.io/posts/growth-record/other/productBusiness/ui-interactive-experience.html</link>
            <guid>https://super456.github.io/posts/growth-record/other/productBusiness/ui-interactive-experience.html</guid>
            <pubDate>Wed, 02 Nov 2022 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="ui-设计与交互体验" tabindex="-1">UI 设计与交互体验 <a class="header-anchor" href="#ui-设计与交互体验" aria-label="Permalink to &quot;UI 设计与交互体验&quot;">&ZeroWidthSpace;</a></h1>
<p><strong>愿景：希望技术能看见设计的价值，也希望设计能看见技术的力量，在彼此看见中互相融合成长，一起让世界更美好</strong>。</p>
<p>（1）怎么解决：<strong>研发效率与用户体验（最大化研发效率和极致的用户体验）？</strong></p>
<p>（2）存在的问题：时常会抱怨自己被当做资源，埋没在无尽的需求中，写着没有灵魂的代码，而反过来看，我们是否有真正使用过自己研发的产品，理解产品需求背后的意义，今天作为研发，是否具有 owner 意识很重要，也要带着自己技术上的沉淀与思考去融入到产品迭代当中。</p>
<h2 id="组件库设计原则" tabindex="-1">组件库设计原则 <a class="header-anchor" href="#组件库设计原则" aria-label="Permalink to &quot;组件库设计原则&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://devui.design/design-cn/start" target="_blank" rel="noreferrer">DevUI</a></li>
<li><a href="https://antv.antgroup.com/specification/principles/basic" target="_blank" rel="noreferrer">AntV</a></li>
</ul>
<h2 id="ant-design" tabindex="-1">Ant design <a class="header-anchor" href="#ant-design" aria-label="Permalink to &quot;Ant design&quot;">&ZeroWidthSpace;</a></h2>
<p><strong>本文从该组件库设计规范上摸索总结有用的设计知识和交互体验风格。</strong>
<a href="https://ant-design.antgroup.com/docs/spec/introduce-cn" target="_blank" rel="noreferrer">官网链接</a></p>
<CustomImage src='/growth-record/other/productBusiness/ui-ant-design.webp' /><h3 id="一-设计规范" tabindex="-1">（一）设计规范： <a class="header-anchor" href="#一-设计规范" aria-label="Permalink to &quot;（一）设计规范：&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>圆角设计为 2px：圆角样式作为 UI 上的重要细节，更小的圆角从视觉上减少界面细节，提升了信息阅读效率。</li>
<li>无边框组件：在业务中，我们发现有些场景会存在轻量级的选择组件。因而我们提供了一种新的无边框样式，让开发者可以更简单的嵌入这些组件而不用额外覆盖样式。</li>
</ul>
<h2 id="设计网站" tabindex="-1">设计网站 <a class="header-anchor" href="#设计网站" aria-label="Permalink to &quot;设计网站&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>世界最顶级的设计网站之一，设计灵感来源</li>
</ol>
<ul>
<li><a href="https://dribbble.com/" target="_blank" rel="noreferrer">Dribbble - Discover the World’s Top Designers &amp; Creative Professionals</a></li>
<li><a href="https://dribbble.com/" target="_blank" rel="noreferrer">Dribbble - Discover the World’s Top Designers &amp; Creative Professionals</a></li>
</ul>
<ol start="2">
<li>设计插图</li>
</ol>
<ul>
<li><a href="https://www.gaoding.com/" target="_blank" rel="noreferrer">稿定设计-做图做视频必备_在线设计神器_海量版权素材模板</a></li>
</ul>
<h2 id="图标库" tabindex="-1">图标库 <a class="header-anchor" href="#图标库" aria-label="Permalink to &quot;图标库&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://www.iconfont.cn/" target="_blank" rel="noreferrer">iconfont-阿里巴巴矢量图标库</a></p>
<h2 id="logo-生成器" tabindex="-1">LOGO 生成器 <a class="header-anchor" href="#logo-生成器" aria-label="Permalink to &quot;LOGO 生成器&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://app.brandmark.io/v2/" target="_blank" rel="noreferrer">Brandmark - make your logo in minutes</a></li>
<li><a href="https://logo.aliyun.com/logo#/name" target="_blank" rel="noreferrer">阿里云智能logo设计</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 11 本《福格行为模型》]]></title>
            <link>https://super456.github.io/posts/read-book/2022/fugexingweimoxing.html</link>
            <guid>https://super456.github.io/posts/read-book/2022/fugexingweimoxing.html</guid>
            <pubDate>Tue, 25 Oct 2022 20:00:00 GMT</pubDate>
            <description><![CDATA[在这本书中，福格博士亲自拆解了他提出的福格行为模型，揭示了驱动人类所有行为的 3 个关键要素，解析了每一个要素在驱动人类行为中的重要作用，提供了激发每一个要素以更好地推动行为改变的有效方法。此外，福格博士还给出了让福格行为模型更好地发挥作用的两个方法，通过设计情绪来设计行为，通过打造高频率小成功让小改变自然生长。 本书不仅能够帮助人们毫不费力地养成好习惯，也能够指导人们成功对抗坏习惯；不仅能够帮助个人实现改变，也能够帮助群体直面挑战。只要掌握福格行为模型的精髓并加以灵活运用，每个人都能够轻松改变自己的工作与生活，成为自己想要成为的那个人。 本书给出了福格行为设计工具箱，包含 15 种人生情景与挑战、300 个微习惯配方、100 种庆祝方式，手把手地教你减重、减压、改善睡眠质量、摆脱坏习惯、提升效率……]]></description>
            <content:encoded><![CDATA[<h1 id="第-11-本《福格行为模型》" tabindex="-1">第 11 本《福格行为模型》 <a class="header-anchor" href="#第-11-本《福格行为模型》" aria-label="Permalink to &quot;第 11 本《福格行为模型》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>在这本书中，福格博士亲自拆解了他提出的福格行为模型，揭示了驱动人类所有行为的 3 个关键要素，解析了每一个要素在驱动人类行为中的重要作用，提供了激发每一个要素以更好地推动行为改变的有效方法。此外，福格博士还给出了让福格行为模型更好地发挥作用的两个方法，通过设计情绪来设计行为，通过打造高频率小成功让小改变自然生长。</p>
<p>本书不仅能够帮助人们毫不费力地养成好习惯，也能够指导人们成功对抗坏习惯；不仅能够帮助个人实现改变，也能够帮助群体直面挑战。只要掌握福格行为模型的精髓并加以灵活运用，每个人都能够轻松改变自己的工作与生活，成为自己想要成为的那个人。</p>
<p>本书给出了福格行为设计工具箱，包含 15 种人生情景与挑战、300 个微习惯配方、100 种庆祝方式，手把手地教你减重、减压、改善睡眠质量、摆脱坏习惯、提升效率……</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>待补充点评🚀...</p>
<p>语雀笔记：</p>
<ul>
<li><a href="https://www.yuque.com/super456/qoriag/oqyw1u" target="_blank" rel="noreferrer">推荐序 1</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/socum6" target="_blank" rel="noreferrer">推荐序 2</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/xv6t4x" target="_blank" rel="noreferrer">推荐序 3 &amp; 行为设计 &amp; 前言</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/vh2yhk" target="_blank" rel="noreferrer">01 福格行为模型，影响行为的要素只有 3 个</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/db5v6i" target="_blank" rel="noreferrer">02 要素 1，动机，找到实现愿望的黄金行为</a></li>
</ul>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2022/fugexingweimoxing.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 10 本《天堂旅行团》]]></title>
            <link>https://super456.github.io/posts/read-book/2022/tiantanglvxingtuan.html</link>
            <guid>https://super456.github.io/posts/read-book/2022/tiantanglvxingtuan.html</guid>
            <pubDate>Mon, 24 Oct 2022 20:00:00 GMT</pubDate>
            <description><![CDATA[生命的终章，我踏上了一段旅途。开着破烂的面包车，穿越几十座城市，撕开雨天，潜入他乡，尽头是天堂。 浅蓝的天光，泛紫的云层，路灯嵌进夕阳。山间道路弥漫着一万吨水汽，密林卷来风声，我闯进无止境的夜里。 她说，天总会亮的。那么，我们一起记录下，凌晨前的人生]]></description>
            <content:encoded><![CDATA[<h1 id="第-10-本《天堂旅行团》" tabindex="-1">第 10 本《天堂旅行团》 <a class="header-anchor" href="#第-10-本《天堂旅行团》" aria-label="Permalink to &quot;第 10 本《天堂旅行团》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>生命的终章，我踏上了一段旅途。开着破烂的面包车，穿越几十座城市，撕开雨天，潜入他乡，尽头是天堂。
浅蓝的天光，泛紫的云层，路灯嵌进夕阳。山间道路弥漫着一万吨水汽，密林卷来风声，我闯进无止境的夜里。
她说，天总会亮的。那么，我们一起记录下，凌晨前的人生</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>待补充点评🚀...</p>
<p>语雀笔记：</p>
<ul>
<li><a href="https://www.yuque.com/super456/qoriag/le7xqh" target="_blank" rel="noreferrer">第一章 你舍得吗</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/slw6px" target="_blank" rel="noreferrer">第二章 悲伤有迹可循</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/zkvu8s" target="_blank" rel="noreferrer">第三章 秋天的旅途</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/lxzcen" target="_blank" rel="noreferrer">第四章 Sometimes ever Sometimes never</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/cgbyh9" target="_blank" rel="noreferrer">第五章 一万年和一万光年</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/vkcbwu" target="_blank" rel="noreferrer">第六章 With you Without you</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/xrueza" target="_blank" rel="noreferrer">第七章 轻轻的一个吻</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/psnve9" target="_blank" rel="noreferrer">第八章 婚纱，摩托，天地之间</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/ey1tp3" target="_blank" rel="noreferrer">第九章 遗书</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/ym14bn" target="_blank" rel="noreferrer">第十章 你被捕了</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/neks69" target="_blank" rel="noreferrer">第十一章 一送一别离</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/pdbzk6" target="_blank" rel="noreferrer">第十二章 漂泊白云外</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/wgspqu" target="_blank" rel="noreferrer">第十三章 有什么不开心的，就跟妈妈说</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/rhe3v5" target="_blank" rel="noreferrer">第十四章 天堂如有人高高在上</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/bprzyg" target="_blank" rel="noreferrer">第十五章 余小聚</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/hvmoia" target="_blank" rel="noreferrer">第十六章 世界的尽头</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/ruts7d" target="_blank" rel="noreferrer">Always Have Always Will 尾声</a></li>
</ul>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2022/tiantanglvxingtuan.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[Vue3 语法规范尝鲜]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/vue3-grammatical-norm.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/vue3-grammatical-norm.html</guid>
            <pubDate>Sat, 08 Oct 2022 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vue3-语法规范尝鲜" tabindex="-1">Vue3 语法规范尝鲜 <a class="header-anchor" href="#vue3-语法规范尝鲜" aria-label="Permalink to &quot;Vue3 语法规范尝鲜&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="vue3-语法规范" tabindex="-1">Vue3 语法规范 <a class="header-anchor" href="#vue3-语法规范" aria-label="Permalink to &quot;Vue3 语法规范&quot;">&ZeroWidthSpace;</a></h2>
<p>页面 / 组件开发</p>
<h4 id="使用-vue3-语法-ts-语法声明-script-标签" tabindex="-1">使用 Vue3 语法 + TS 语法声明 <code>&lt;script&gt;</code> 标签 <a class="header-anchor" href="#使用-vue3-语法-ts-语法声明-script-标签" aria-label="Permalink to &quot;使用 Vue3 语法 + TS 语法声明 `&lt;script&gt;` 标签&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>...&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><h4 id="props-类型声明" tabindex="-1">props 类型声明 <a class="header-anchor" href="#props-类型声明" aria-label="Permalink to &quot;props 类型声明&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法一，运行时声明，defineProps() 的参数会作为运行时的 props 选项使用，类型声明但没有初始化默认值，支持参数中推导类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;{</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">props.foo </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// string | undefiend</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">props.bar </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// boolean | undefiend</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法二，类型声明，通过泛型参数定义类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 支持类型声明并进行初始化默认值，等价于设置了 props 参数值的 default 选项，跟运行时声明定义 default 的格式一样</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> widthDefaults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defintProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(), {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Hello World'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({ age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 非 &#x3C;script setup lang="ts"> 模式，使用 defineComponent() 传入 setup() 的 props 对象类型是从 props 选项中推导而来</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  props: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    foo: boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    props.foo </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// boolean | undefiend</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法三，使用 PropType 类型注解，需要额外引入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  author</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  year</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  props: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    book: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // provide more specific type to `Object`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      type: Object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> PropType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="emits-类型声明" tabindex="-1">emits 类型声明 <a class="header-anchor" href="#emits-类型声明" aria-label="Permalink to &quot;emits 类型声明&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法一，运行时声明，无需写回调参数类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> emits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'input'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'change'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法二，基于类型声明，支持回调参数类型声明，第二个参数的 key 可以随便定义</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> emits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineEmist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (e: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'input'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, value: string[]): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (e: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'change'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, value: string[]): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 声明复杂的回调参数类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (e: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'change'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { name, age }: { name: string, age: number }): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  (e: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'change'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, name: string, age: number): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 非 &#x3C;script setup lang="ts"> 模式，defineComponent() 可以自行推导上下文 emits 选项进行类型检查，但是不能针对回调参数进行类型声明</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  emits: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'change'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">emits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    emits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'change'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><h4 id="ref-类型声明" tabindex="-1">ref 类型声明 <a class="header-anchor" href="#ref-类型声明" aria-label="Permalink to &quot;ref 类型声明&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 变量声明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法一，默认推导类型（隐式推导），ref 根据初始化默认自动推导类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法二，Ref 接口声明复杂类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ageOrName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ageOrName.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'hello'</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 📢 注意：如果声明一个变量的泛型参数类型声明没有初始化默认值，那么该变量将包含 该泛型参数类型和 undefinend 的联合类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// const num: Ref&#x3C;number | undefined></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 提示类型错误：不能将类型“Ref&#x3C;number | undefined>”分配给类型“Ref&#x3C;number>”</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// DOM 元素模版引用声明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 声明 UI 组件库表单 ref 节点（优先使用组件库自带的类型声明）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> formRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">FormModelInstance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 或这种方式，不推荐，需要重复声明 form 组件实例的 model 属性类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> formRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">FormModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ModelTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 声明自定义组件的 template 元素 ref 节点及使用该组件内部公开的（defineExpose）属性及方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> customerRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">InstanceType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> CustomerList> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 声明 template 原生标签 &#x3C;div> 元素 ref 节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> divRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">HTMLElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 声明 template 原生标签 &#x3C;input> 元素 ref 节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> inputRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">HTMLInputElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div><h4 id="reactive-类型声明" tabindex="-1">reactive 类型声明 <a class="header-anchor" href="#reactive-类型声明" aria-label="Permalink to &quot;reactive 类型声明&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法一，默认推导类型（隐式推导），不推荐</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 以下类型推导为：const formState: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//    foo: string;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//    bar: number;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//    info: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//        name: string;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//        status: boolean;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//    };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> formState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  bar: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法二，泛型指定类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FormState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 以下类型推导为：type FormState = {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//  foo: string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//  bar: number</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> formState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">FormState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  bar: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><h4 id="computed-类型声明" tabindex="-1">computed 类型声明 <a class="header-anchor" href="#computed-类型声明" aria-label="Permalink to &quot;computed 类型声明&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法一，默认推导类型（隐式推导），不推荐，以下类型推导为：ComputedRef&#x3C;{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//    name: string;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//    age: number;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// }></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> userInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 写法二，泛型指定类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> UserInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 以下类型推导为：const userInfo: ComputedRef&#x3C;UserInfo></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> userInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">UserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }))</span></span></code></pre>
</div><h4 id="dom-原生事件类型声明" tabindex="-1">DOM 原生事件类型声明 <a class="header-anchor" href="#dom-原生事件类型声明" aria-label="Permalink to &quot;DOM 原生事件类型声明&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script setup lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 默认 event 没有类型声明则为 any 类型，需要标注具体类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> onChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(event.target.value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 修改为</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> onChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((event.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">input type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @change</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"onChange"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> /></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><h4 id="provide-inject-类型声明" tabindex="-1">provide / inject 类型声明 <a class="header-anchor" href="#provide-inject-类型声明" aria-label="Permalink to &quot;provide / inject 类型声明&quot;">&ZeroWidthSpace;</a></h4>
<p>建议使用时候将需要注入的 key 类型单独放在一个文件中，多个组件共同导入使用</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用 Vue 提供的工具类型 InjectionKey，它继承 Symbol，可以用来同步 provide() 和 inject() 之间值的类型，使用时需要引入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ageKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> InjectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 值必须为跟上门👆🏻类型声明一致是数字，否则会提示类型错误</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ageKey, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ageKey) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// age 的类型：number | undefined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 📢 注意：注入值 ageKey 为 unknown 时，可以使用泛型参数显示声明</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(ageKey) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// age 的类型：number | undefined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 注入时使用默认值，防止类型推导默认类型有 undefined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(ageKey, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// age 的类型：number</span></span></code></pre>
</div><h2 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;TypeScript&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="工具类型" tabindex="-1">工具类型 <a class="header-anchor" href="#工具类型" aria-label="Permalink to &quot;工具类型&quot;">&ZeroWidthSpace;</a></h3>
<p><code>node_modules/typescript/lib/lib.es5.d.ts</code> 文件有详细的类型说明，可以当做手册查阅</p>
<h2 id="学习资料" tabindex="-1">学习资料 <a class="header-anchor" href="#学习资料" aria-label="Permalink to &quot;学习资料&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://juejin.cn/post/7127668333565968421" target="_blank" rel="noreferrer">Vue3 + setup + ts 使用总结 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6923523666340741128" target="_blank" rel="noreferrer">TypeScript高级特性 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6844904066103902215" target="_blank" rel="noreferrer">Vue3 Composition API 使用教程 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6950487211368251399" target="_blank" rel="noreferrer">Vue3 + TypeScript 复盘总结 - 掘金</a></li>
<li><a href="https://juejin.cn/post/7121253172013694990#heading-26" target="_blank" rel="noreferrer">最详细的 Vue3 + TypeScript 使用教程【值得收藏】 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6844903865255477261#heading-14" target="_blank" rel="noreferrer">Vue3.0 前的 TypeScript 最佳入门实践 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6937193963405180936#heading-7" target="_blank" rel="noreferrer">vue3 + ts 初体验 - 掘金</a></li>
<li><a href="https://juejin.cn/post/6990682369992704007" target="_blank" rel="noreferrer">vue3 + setup sugar + TS 经验分享 - 掘金</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 9 本《认知驱动》]]></title>
            <link>https://super456.github.io/posts/read-book/2022/renzhiqudong.html</link>
            <guid>https://super456.github.io/posts/read-book/2022/renzhiqudong.html</guid>
            <pubDate>Sat, 01 Oct 2022 20:00:00 GMT</pubDate>
            <description><![CDATA[成长的根本是：创造价值、做成事情。从“习惯养成”到“技能培养”，从“对内输入”到“对外输出”，从成为“更好的人”到成为“更有价值的人”，这些刻意的转变会让我们走出焦虑的怪圈 做到，是最高等级的成长。一个人最终的成长也是通过主动做成一件对他人很有用的事来实现的。但现实生活中，很多人虽然内心强烈希望变好，行动也非常努力，却始终无法做成事情，这背后的原因通常是因为缺少价值意识、输出意识、创造意识、作品意识、利他意识…… 本书将通过“做成一件事”的心法和技法两部分内容，和大家一起探索如何通过创造个人价值来获取人生的成就、幸福和意义 单纯依靠意志力的努力往往是盲目的，所以人们会反反复复地起念，又反反复复的失败。只有当一个人彻底了解了做成一件事的来龙去脉、看清事情本质后，才能彻底走出反复尝试却劳而无功的困境 学会用认知来驱动自己，我们就能更好地到达成长的彼岸——做成一件对他人很有用的事，成为一个有价值的人]]></description>
            <content:encoded><![CDATA[<h1 id="第-9-本《认知驱动》" tabindex="-1">第 9 本《认知驱动》 <a class="header-anchor" href="#第-9-本《认知驱动》" aria-label="Permalink to &quot;第 9 本《认知驱动》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>成长的根本是：创造价值、做成事情。从“习惯养成”到“技能培养”，从“对内输入”到“对外输出”，从成为“更好的人”到成为“更有价值的人”，这些刻意的转变会让我们走出焦虑的怪圈</p>
<p>做到，是最高等级的成长。一个人最终的成长也是通过主动做成一件对他人很有用的事来实现的。但现实生活中，很多人虽然内心强烈希望变好，行动也非常努力，却始终无法做成事情，这背后的原因通常是因为缺少价值意识、输出意识、创造意识、作品意识、利他意识……</p>
<p>本书将通过“做成一件事”的心法和技法两部分内容，和大家一起探索如何通过创造个人价值来获取人生的成就、幸福和意义</p>
<p>单纯依靠意志力的努力往往是盲目的，所以人们会反反复复地起念，又反反复复的失败。只有当一个人彻底了解了做成一件事的来龙去脉、看清事情本质后，才能彻底走出反复尝试却劳而无功的困境</p>
<p>学会用认知来驱动自己，我们就能更好地到达成长的彼岸——做成一件对他人很有用的事，成为一个有价值的人</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>待补充点评🚀...</p>
<p>语雀笔记：</p>
<ul>
<li><a href="https://www.yuque.com/super456/qoriag/pnpy0x" target="_blank" rel="noreferrer">第一章 价值——改变自己的关键是创造价值</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/piuucy" target="_blank" rel="noreferrer">第二章 身份——一切从信念开始</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/vsl5yn" target="_blank" rel="noreferrer">第三章 心理——清除成事路上的情绪障碍</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/frmn7b" target="_blank" rel="noreferrer">第四章 策略——方法和路径</a></li>
</ul>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2022/renzhiqudong.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第七期训练营茶话会分享]]></title>
            <link>https://super456.github.io/posts/random-thought/2022/camp-7th-share.html</link>
            <guid>https://super456.github.io/posts/random-thought/2022/camp-7th-share.html</guid>
            <pubDate>Sun, 25 Sep 2022 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="第七期训练营茶话会分享" tabindex="-1">第七期训练营茶话会分享 <a class="header-anchor" href="#第七期训练营茶话会分享" aria-label="Permalink to &quot;第七期训练营茶话会分享&quot;">&ZeroWidthSpace;</a></h1>
<p>2022 年 9 月 25 号，首次参加 21 天训练营茶话会分享（可惜😭当时没有录屏，缺少音频分享出来了），分享内容如下：</p>
<h2 id="自我介绍" tabindex="-1">自我介绍 <a class="header-anchor" href="#自我介绍" aria-label="Permalink to &quot;自我介绍&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>19 年科班毕业</li>
<li>深圳某中厂</li>
<li>爱折腾技术，技术栈以：Vue/多端开发/Node 为主</li>
<li>准备学摄影，喜欢看风景（每年一次旅游）</li>
<li>周末喜欢看书（计划每个月看一本书）</li>
</ul>
<h2 id="关于训练营" tabindex="-1">关于训练营 <a class="header-anchor" href="#关于训练营" aria-label="Permalink to &quot;关于训练营&quot;">&ZeroWidthSpace;</a></h2>
<p>参加了两期：8月份和 9 月份</p>
<h4 id="收获" tabindex="-1">收获 <a class="header-anchor" href="#收获" aria-label="Permalink to &quot;收获&quot;">&ZeroWidthSpace;</a></h4>
<ol>
<li>良好的学习氛围：</li>
</ol>
<ul>
<li>有组织</li>
<li>有互动</li>
<li>不止为了打卡</li>
</ul>
<ol start="2">
<li>阅读和写作：</li>
</ol>
<ul>
<li>
<p>第七期：<a href="https://www.zhihu.com/question/22355368/answer/2536811740?utm_campaign=shareopn&amp;utm_content=group2_Answer&amp;utm_medium=social&amp;utm_oi=46320467312640&amp;utm_psn=1539039746155761664&amp;utm_source=wechat_session&amp;s_r=0" target="_blank" rel="noreferrer">每天练习写作，应该写什么来练习</a>说到：“每天练习写作的真正目的，是为了摆脱对灵感的过渡依赖，让灵感成为写作的锦上添花，而不是雪中送炭”</p>
</li>
<li>
<p>第八期：《认知驱动》第四章第二节：<a href="https://www.yuque.com/super456/qoriag/frmn7b#Z7yTN" target="_blank" rel="noreferrer">写下来：我们都低估了“写下来”的力量</a>阅读笔记</p>
</li>
</ul>
<ol start="3">
<li>有更多的时间做自己想做的事情，不止学习</li>
</ol>
<h4 id="建议" tabindex="-1">建议 <a class="header-anchor" href="#建议" aria-label="Permalink to &quot;建议&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>希望大家融入进来，当然不只为了打卡</li>
<li>可以不定期组织线上或线下活动，可以有某个主题分享或讨论会（比如谈谈写作、成长、技术、学习方法、生活等）</li>
<li>价值输出，成为一个有价值的人，成就更美好的自己</li>
</ul>
<h2 id="关于自身成长" tabindex="-1">关于自身成长 <a class="header-anchor" href="#关于自身成长" aria-label="Permalink to &quot;关于自身成长&quot;">&ZeroWidthSpace;</a></h2>
<p>分享自身的职业成长路线</p>
<ol>
<li>建立自己的技术体系：让时间为你证明</li>
</ol>
<CustomImage src="/random-thought/2022/jishutixi.webp" /><ol start="2">
<li>分享羽哥之前说的一句话：</li>
</ol>
<CustomImage src="/random-thought/2022/yugeduihua.webp" />]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 4 本《跃迁：成为高手的技术》]]></title>
            <link>https://super456.github.io/posts/read-book/2022/yueqian.html</link>
            <guid>https://super456.github.io/posts/read-book/2022/yueqian.html</guid>
            <pubDate>Sun, 25 Sep 2022 20:00:00 GMT</pubDate>
            <description><![CDATA[这个时代：信息变多、思考变浅，机会变多、竞争跨界，随时干扰、永远在线。每一个个体都在与外界的持续交换中，感受到能力进阶的压力与焦虑，希望获得适应自身成长节奏的知识，并将知识转变为价值，摆脱“听了那么多道理，还是过不好这一生”的梦魇。 本书将为你呈现隐蔽个人爆发式成长的关键知识、方法和背后的逻辑：专注头部、外包大脑、终身提问、联机学习、知识  IPO、升维思考、从这本书你可以得到：成为高手的思维模式和方法。 找到最佳路径、借助趋势红利，撬动个人爆发式成长。]]></description>
            <content:encoded><![CDATA[<h1 id="第-4-本《跃迁-成为高手的技术》" tabindex="-1">第 4 本《跃迁：成为高手的技术》 <a class="header-anchor" href="#第-4-本《跃迁-成为高手的技术》" aria-label="Permalink to &quot;第 4 本《跃迁：成为高手的技术》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>这个时代：信息变多、思考变浅，机会变多、竞争跨界，随时干扰、永远在线。每一个个体都在与外界的持续交换中，感受到能力进阶的压力与焦虑，希望获得适应自身成长节奏的知识，并将知识转变为价值，摆脱“听了那么多道理，还是过不好这一生”的梦魇。</p>
<p>本书将为你呈现隐蔽个人爆发式成长的关键知识、方法和背后的逻辑：专注头部、外包大脑、终身提问、联机学习、知识  IPO、升维思考、从这本书你可以得到：成为高手的思维模式和方法。</p>
<p>找到最佳路径、借助趋势红利，撬动个人爆发式成长。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《跃迁：成为高手的技术（附赠高手秘籍和时间管理秘籍）》
古典
5个笔记</p>
<p>待补充点评🚀...</p>
<p>◆  跃迁：成为高手的技术</p>
<blockquote>
<blockquote>
<p>能力提升需要三个要素：好的方法论，刻意练习，大量的实战机会。</p>
</blockquote>
</blockquote>
<p>2022/6/5 发表想法
让我联想到在学生时代，我很多时候学习都是自己消化、自己摸索的这种单机学习方式，因为理解能力及学习能力问题，很多理解错的知识，在考试做错题之后才发现自己学到的只是就搞错了，遇到很多次了。联机学习方式很有效的解决这个问题，知识互通，也是一种交换，也是一种学习方式的成长。</p>
<blockquote>
<blockquote>
<ol>
<li>先打磨第一个知识模块；2. 抛出去，换回别人的知识模块；3. 重复前两步，积累足够多的知识模块；4. 整合出自己的体系，实现知识跃迁。</li>
</ol>
</blockquote>
</blockquote>
<p>2022/6/5 发表想法
在读书时代比较穷，在农村读过书，包括读初中和高中的时候都还在用键盘手机，信息差特别明显，对外界的很多东西都不如身边同学。会对那种大家都靠自己学习，可以大彻大悟学得快，也厉害的同学很羡慕、崇拜。反而这就是一个“100分或15分教5分的人”，一种降维打击的过程。这也是我比较重视的一块思维，包括在团队做分享，也会把降维打击作为一种底层思维来做准备。</p>
<blockquote>
<blockquote>
<p>过去一定要自己完全学通了，大彻大悟了才出来教别人。100分教5分的人，老师站着讲，学生“跪”着听；信息时代，往往是一个15分的人教5分的人，大家商量着来，偶尔学生还能教老师几招</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>学习的速度，跟不上遇到问题的速度。这是你焦虑的根源。</p>
</blockquote>
</blockquote>
<p>◆  把时间浪费在好玩的事情上</p>
<blockquote>
<blockquote>
<p>25岁前求成长机会；30岁前求平台；35岁求一个稳健上升的事业；40岁开始求财。</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2022/yueqian.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[TypeScript 全面进阶指南学习笔记]]></title>
            <link>https://super456.github.io/posts/growth-record/base/javascript/typescript-advanced-guide-study.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/javascript/typescript-advanced-guide-study.html</guid>
            <pubDate>Sat, 24 Sep 2022 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="typescript-全面进阶指南学习笔记" tabindex="-1">TypeScript 全面进阶指南学习笔记 <a class="header-anchor" href="#typescript-全面进阶指南学习笔记" aria-label="Permalink to &quot;TypeScript 全面进阶指南学习笔记&quot;">&ZeroWidthSpace;</a></h1>
<CustomImage src='/growth-record/base/javascript/tsquanmianjinjie.png' /><p>待更新🚀...</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[推荐新手源码学习]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/source-code-learning.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/source-code-learning.html</guid>
            <pubDate>Thu, 22 Sep 2022 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="推荐新手源码学习" tabindex="-1">推荐新手源码学习 <a class="header-anchor" href="#推荐新手源码学习" aria-label="Permalink to &quot;推荐新手源码学习&quot;">&ZeroWidthSpace;</a></h1>
<p>主要技术栈 Vue3 + Pinia + TypeScript ...等其他
阅读源码或 Code Review 真的是最快提高编程能力最快的一种方式，从借鉴 =&gt; 模仿 =&gt; 化为己用，择其善者而从之，推荐学习源码的方向：项目架构设计、公共服务及工具、公共组件、编程写法、代码逻辑设计等，研究代码多了可以写非常多的文章，总结自己的编程能力方法论，比如说，我刚用 Pinia + TS 的时候就找开源项目看别人怎么写的，然后照猫画虎学</p>
<p>当初只是粗略看了一下，按照我个人的理解做一下分类推荐，但并不一定适合你，可以各取所需哈
（1）新手：项目比较小、代码量不大、语法通俗易懂接地气</p>
<ul>
<li><a href="https://github.com/developer-plus/vue-hbs-admin" target="_blank" rel="noreferrer">https://github.com/developer-plus/vue-hbs-admin</a></li>
<li><a href="https://github.com/hug-sun/element3" target="_blank" rel="noreferrer">https://github.com/hug-sun/element3</a></li>
<li><a href="https://github.com/Maronato/vue-toastification" target="_blank" rel="noreferrer">https://github.com/Maronato/vue-toastification</a></li>
<li><a href="https://github.com/view-design/ViewUIPlus" target="_blank" rel="noreferrer">https://github.com/view-design/ViewUIPlus</a></li>
<li><a href="https://github.com/chuzhixin/vue-admin-better" target="_blank" rel="noreferrer">https://github.com/chuzhixin/vue-admin-better</a></li>
<li><a href="https://github.com/vueuse/vueuse" target="_blank" rel="noreferrer">https://github.com/vueuse/vueuse</a></li>
<li><a href="https://github.com/kailong321200875/vue-element-plus-admin" target="_blank" rel="noreferrer">https://github.com/kailong321200875/vue-element-plus-admin</a></li>
</ul>
<p>（2）进阶：项目比较大、代码有一定的复杂度、代码质量高、非常多的地方可以值得学习</p>
<ul>
<li>
<p><a href="https://github.com/histoire-dev/histoire" target="_blank" rel="noreferrer">https://github.com/histoire-dev/histoire</a></p>
</li>
<li>
<p><a href="https://github.com/tusen-ai/naive-ui" target="_blank" rel="noreferrer">https://github.com/tusen-ai/naive-ui</a></p>
</li>
<li>
<p><a href="https://github.com/varletjs/varlet" target="_blank" rel="noreferrer">https://github.com/varletjs/varlet</a></p>
</li>
<li>
<p><a href="https://github.com/HalseySpicy/Geeker-Admin" target="_blank" rel="noreferrer">https://github.com/HalseySpicy/Geeker-Admin</a></p>
</li>
<li>
<p><a href="https://github.com/vbenjs/vue-vben-admin" target="_blank" rel="noreferrer">https://github.com/vbenjs/vue-vben-admin</a></p>
</li>
<li>
<p><a href="https://github.com/Armour/vue-typescript-admin-template" target="_blank" rel="noreferrer">https://github.com/Armour/vue-typescript-admin-template</a></p>
</li>
</ul>
<p>（3）深入：项目代码特别大、架构一定复杂度、拆解模块学习高质量代码</p>
<ul>
<li><a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noreferrer">https://github.com/PanJiaChen/vue-element-admin</a></li>
<li><a href="https://github.com/ElemeFE/element" target="_blank" rel="noreferrer">https://github.com/ElemeFE/element</a></li>
<li><a href="https://github.com/element-plus/element-plus" target="_blank" rel="noreferrer">https://github.com/element-plus/element-plus</a></li>
<li><a href="https://github.com/vueComponent/ant-design-vue" target="_blank" rel="noreferrer">https://github.com/vueComponent/ant-design-vue</a></li>
</ul>
<p>GitHub 上 9 个美观大气的后台管理系统 - 掘金</p>
<ul>
<li><a href="https://juejin.cn/post/7052195023311339527" target="_blank" rel="noreferrer">https://juejin.cn/post/7052195023311339527</a></li>
</ul>
<p>推荐阅读：</p>
<ul>
<li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noreferrer">https://github.com/vuejs/awesome-vue</a></li>
<li><a href="https://github.com/attojs/vue-request" target="_blank" rel="noreferrer">https://github.com/attojs/vue-request</a></li>
<li><a href="https://juejin.cn/post/7052195023311339527" target="_blank" rel="noreferrer">https://juejin.cn/post/7052195023311339527</a></li>
<li><a href="https://github.com/cuixiaorui/mini-vue" target="_blank" rel="noreferrer">https://github.com/cuixiaorui/mini-vue</a></li>
<li><a href="https://github.com/vuetifyjs/vuetify" target="_blank" rel="noreferrer">https://github.com/vuetifyjs/vuetify</a></li>
<li><a href="https://github.com/bailicangdu/vue2-elm" target="_blank" rel="noreferrer">https://github.com/bailicangdu/vue2-elm</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第七期训练营总结]]></title>
            <link>https://super456.github.io/posts/random-thought/2022/camp-7th-summary.html</link>
            <guid>https://super456.github.io/posts/random-thought/2022/camp-7th-summary.html</guid>
            <pubDate>Sun, 28 Aug 2022 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="第七期训练营总结" tabindex="-1">第七期训练营总结 <a class="header-anchor" href="#第七期训练营总结" aria-label="Permalink to &quot;第七期训练营总结&quot;">&ZeroWidthSpace;</a></h1>
<p>21 天训练营大概感悟😄：</p>
<p>1、大概统计了一下，21 天阅读笔记写了 2w 字左右，虽然大部分是水文，但都是即兴发挥的思考，主要是培养自己写作能力和感觉，跟羽哥之前发过知乎一篇文章【每天练习写作，应该写什么来练习】说到，每天练习写作的真正目的，是为了摆脱对灵感的过渡依赖，让灵感成为写作的锦上添花，而不是雪中送炭。这句话深有感悟，这也是我一开始为啥要坚持写阅读笔记的原因。</p>
<p>工作久了，越来越觉得，从书中学，在事上练，跟高人聊是多么的重要，不仅是认知的开阔和升级，更是能力上的跨越。</p>
<p>2、早起打卡完成学习林不渡的 TS 专栏 11 篇和其他比较杂的技术没有统计，真的收获非常多的学习成果。如果没有加入训练营我只能靠晚上早下班学习，大部分时间很短且加班情况下更懒的学习，周末也只是忙里偷闲，现在反而会更自律的学习，周末反而更珍惜学习的时间</p>
<p>21 天只是个形式，这个形式可能对于很多人来说会结束，但对于我来说，保持习惯坚持下去，并没有结束，我还是会坚持打卡，不是为了形式，是为了自己💪🏻</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 8 本《能力陷阱》]]></title>
            <link>https://super456.github.io/posts/read-book/2022/nenglixianjing.html</link>
            <guid>https://super456.github.io/posts/read-book/2022/nenglixianjing.html</guid>
            <pubDate>Sun, 28 Aug 2022 20:00:00 GMT</pubDate>
            <description><![CDATA[我们很乐于去做那些我们擅长的事，于是就会一直去做，最终就使得我们会一直擅长那些事。做得越多，就越擅长，越擅长就越愿意去做。这样的一个循环能让我们在这方面获得更多的经验，但却容易陷入能力陷阱，在其他方面无法突破 每个人都要特别警惕这种能力陷阱，避免把大量时间花在日常琐事上。如果你想获得更多更好的发展，就要从日常琐事中解脱出来，转变到进行更多策略性思考、在日常工作外建立人际关系网络、提升影响力等能够给你持续带来价值的工作上，这样你才能在各领域获得更好的发展]]></description>
            <content:encoded><![CDATA[<h1 id="第-8-本《能力陷阱》" tabindex="-1">第 8 本《能力陷阱》 <a class="header-anchor" href="#第-8-本《能力陷阱》" aria-label="Permalink to &quot;第 8 本《能力陷阱》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>我们很乐于去做那些我们擅长的事，于是就会一直去做，最终就使得我们会一直擅长那些事。做得越多，就越擅长，越擅长就越愿意去做。这样的一个循环能让我们在这方面获得更多的经验，但却容易陷入能力陷阱，在其他方面无法突破</p>
<p>每个人都要特别警惕这种能力陷阱，避免把大量时间花在日常琐事上。如果你想获得更多更好的发展，就要从日常琐事中解脱出来，转变到进行更多策略性思考、在日常工作外建立人际关系网络、提升影响力等能够给你持续带来价值的工作上，这样你才能在各领域获得更好的发展</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>本书比较适合想成为管理者或已经是管理者的人去阅读，主要目的是教会你如何成为一名优秀的领导者，但也更适合以后想成为领导者的人，更快的适应这种成长及改变，非常好的一种提前学习的方式。书中大量的方法论和调研案例进行证明，还有一些问卷对读者的互动问答方式，以至于让很多方法论不至于陷入空谈和不切实际效果。书中很多观点，我是非常认可的，而且会有不谋而合的感觉，因为我在工作经历和做事行事上也有一些相同点，只是作者很多的总结概括出来</p>
<p>我们需要打破以往先思考再行动思为模式，推荐先行动再思考。对于我来说，确实是非常大的改变，在工作中，我会刻意地通过先去做，当然也会边做边思考，这种方式极大的让我遇到很多问题时候，打破了干坐着不停地思考或等待需求帮助的方式，对我的思考方式和行事方式发生了很大的改变，行动起来，至少我们在做的过程中会不断地改变或获取思考和不同的想法，总之，行动起来，结果会超过预期的</p>
<p>还有就是先像领导一样行事，再像领导一样思考。很多时候我们畏首畏尾，什么都等待领导安排，会存在“领导叫我干啥我干啥”的局面，然后一直陷入这种别人的价值观或别人预期的阴影里，无法自拔，慢慢地会丧失自我成长的动力，陷入能力陷阱里。我们是要达到领导的预期和目标，但不是为了只追求或只满足领导的需求，我们还需要突破自己，成长自己，做自己想做的事</p>
<p>还有很多改变我们自己的方法论，需要慢慢消化吸收，内在化我们思考和能力的一部分，然后等待时间，慢慢成长起来吧😄</p>
<p>语雀笔记：</p>
<ul>
<li><a href="https://www.yuque.com/super456/qoriag/lu23na" target="_blank" rel="noreferrer">第一章：领导者的能力陷阱</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/id0scm" target="_blank" rel="noreferrer">第二章：重新定义你的工作</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/wsxacr" target="_blank" rel="noreferrer">第三章：建立良好的人际关系网络</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/vd3g9h" target="_blank" rel="noreferrer">第四章：试着朝更多不同的方向发展自己</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/nade7u" target="_blank" rel="noreferrer">第五章：合理规划前进的道路</a></li>
<li><a href="https://www.yuque.com/super456/qoriag/as8ng9" target="_blank" rel="noreferrer">总结：行动起来</a></li>
</ul>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2022/nenglixianjing.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 7 本《蛤蟆先生去看心理医生》]]></title>
            <link>https://super456.github.io/posts/read-book/2022/hamaxianshengkanxingliyisheng.html</link>
            <guid>https://super456.github.io/posts/read-book/2022/hamaxianshengkanxingliyisheng.html</guid>
            <pubDate>Mon, 25 Jul 2022 20:00:00 GMT</pubDate>
            <description><![CDATA[蛤蟆先生一向爱笑爱闹，如今却一反常态地郁郁寡欢，他一个人躲在屋里，连起床梳洗的力气都没有。朋友们非常担心他，建议他去做心理咨询。在 10 次心理咨询中，蛤蟆在咨询师苍鹭的带领下，勇敢地探索了自己的内心世界，也逐渐找回了信心与希望…… 这并不是一本写给孩子看的书，而是一本非常有深度的心理疗愈读物。出版 20 多年来，已成为英国国民级心理咨询入门书。它基于 TA 沟通分析心理学的理论，讲述了一个抑郁症病人通过十次心理咨询，终于找回快乐和自信的全过程。在书中，可以看到心理咨询的倾听、共情、沟通技巧，也可以看到一个标准的心理咨询流程的模板。读者犹如亲临现场，体验心理咨询的每一个细节，见证疗愈和改变的发生 在这本书里，作者借由蛤蟆和心理咨询师苍鹭的互动，探索了蛤蟆自卑、软弱、爱炫耀的个性与抑郁的情绪究竟来源于何处，让读者看到童年经历对人格的深刻影响，以及如何才能在心理上真正长大成人，独立、自信、充满希望地生活]]></description>
            <content:encoded><![CDATA[<h1 id="第-7-本《蛤蟆先生去看心理医生》" tabindex="-1">第 7 本《蛤蟆先生去看心理医生》 <a class="header-anchor" href="#第-7-本《蛤蟆先生去看心理医生》" aria-label="Permalink to &quot;第 7 本《蛤蟆先生去看心理医生》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>蛤蟆先生一向爱笑爱闹，如今却一反常态地郁郁寡欢，他一个人躲在屋里，连起床梳洗的力气都没有。朋友们非常担心他，建议他去做心理咨询。在 10 次心理咨询中，蛤蟆在咨询师苍鹭的带领下，勇敢地探索了自己的内心世界，也逐渐找回了信心与希望……</p>
<p>这并不是一本写给孩子看的书，而是一本非常有深度的心理疗愈读物。出版 20 多年来，已成为英国国民级心理咨询入门书。它基于 TA 沟通分析心理学的理论，讲述了一个抑郁症病人通过十次心理咨询，终于找回快乐和自信的全过程。在书中，可以看到心理咨询的倾听、共情、沟通技巧，也可以看到一个标准的心理咨询流程的模板。读者犹如亲临现场，体验心理咨询的每一个细节，见证疗愈和改变的发生</p>
<p>在这本书里，作者借由蛤蟆和心理咨询师苍鹭的互动，探索了蛤蟆自卑、软弱、爱炫耀的个性与抑郁的情绪究竟来源于何处，让读者看到童年经历对人格的深刻影响，以及如何才能在心理上真正长大成人，独立、自信、充满希望地生活</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>待补充点评🚀...</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2022/hamaxianshengkanxingliyisheng.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[什么是前端工程化]]></title>
            <link>https://super456.github.io/posts/growth-record/engineering/</link>
            <guid>https://super456.github.io/posts/growth-record/engineering/</guid>
            <pubDate>Thu, 14 Jul 2022 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="什么是前端工程化" tabindex="-1">什么是前端工程化 <a class="header-anchor" href="#什么是前端工程化" aria-label="Permalink to &quot;什么是前端工程化&quot;">&ZeroWidthSpace;</a></h1>
<p><strong>什么是前端工程化？</strong></p>
<p>是指将前端开发的流程<strong>规范化、标准化</strong>、包括开发流程、技术选型、代码规范、构建发布等，用于提升前端工程师的开发效率和代码质量。</p>
<p><strong>为什么要前端工程化？</strong></p>
<ul>
<li>复杂度搞：前端项目的多功能、都页面、多状态、多系统；</li>
<li>规模大：团队开发，多人协作，代码质量管理；</li>
<li>要求高：页面性能优化（CDN / 异步加载 / 请求合并），CSS 兼容性、单页面应用、服务端渲染...</li>
</ul>
<p><strong>怎么做到前端工程化？</strong></p>
<ol>
<li>
<p>从业务着手：简单的单页面应用，使用 Gulp + 同步工具实现开发全流程。</p>
</li>
<li>
<p>从复杂度考虑：框架最终要服务于我们的项目，而非累死累活的去维护框架。</p>
</li>
</ol>
<ul>
<li>Jenkins；</li>
<li>Git/Gitlab;</li>
<li>Webpack;</li>
<li>React/Vue/Angular;</li>
</ul>
<ol start="3">
<li>从已知向未知扩展：不同的技术有不同的适应点，选择适合的才是最好的。</li>
</ol>
<p><strong>考虑</strong>：</p>
<ul>
<li>前后端技术是否更好的融合；</li>
<li>前后端分离，接口安全性；</li>
<li>Vue 或 React 是否适合制作静态页面；</li>
</ul>
<p>业务、技术上说服<strong>多用数字证据说话。</strong></p>
<p>团队的吸收能力、学习能力、知识拓展能力。</p>
<p>往好的方向去考虑事情、往好的方向营造这个氛围、往好的方向扩展我们的知识。</p>
<h2 id="一、开发流程" tabindex="-1">一、开发流程 <a class="header-anchor" href="#一、开发流程" aria-label="Permalink to &quot;一、开发流程&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>需求分析；</li>
<li>版本控制；</li>
<li>缺陷管理；</li>
<li>文档管理；</li>
<li>自动化；</li>
<li>性能测试；</li>
<li>发布部署；</li>
</ul>
<h2 id="二、技术选型" tabindex="-1">二、技术选型 <a class="header-anchor" href="#二、技术选型" aria-label="Permalink to &quot;二、技术选型&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>UI 框架：</li>
</ol>
<ul>
<li>Element UI;</li>
<li>Ant;</li>
<li>IView;</li>
<li>Mint;</li>
<li>Cube;</li>
</ul>
<ol start="2">
<li>JS 框架：</li>
</ol>
<ul>
<li>MVVM;</li>
</ul>
<ol start="3">
<li>Template:</li>
</ol>
<h2 id="三、代码规范" tabindex="-1">三、代码规范 <a class="header-anchor" href="#三、代码规范" aria-label="Permalink to &quot;三、代码规范&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>标准：</li>
</ol>
<ul>
<li>Standard;</li>
<li>airbnb;</li>
<li>Prettier;</li>
</ul>
<ol start="2">
<li>公司：</li>
</ol>
<ul>
<li>谷歌；</li>
<li>百度；</li>
<li>腾讯；</li>
<li>美团；</li>
<li>饿了么；</li>
</ul>
<ol start="3">
<li>模块化：</li>
</ol>
<h2 id="四、构建发布" tabindex="-1">四、构建发布 <a class="header-anchor" href="#四、构建发布" aria-label="Permalink to &quot;四、构建发布&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>Jenkins;</li>
<li>Webpack;</li>
<li>Gulp;</li>
<li>Yarn;</li>
<li>Docker;</li>
<li>Rancher;</li>
<li>Kubernetes;</li>
<li>Harbor;</li>
<li>ECS;</li>
</ul>
<h2 id="五、学习资料" tabindex="-1">五、学习资料 <a class="header-anchor" href="#五、学习资料" aria-label="Permalink to &quot;五、学习资料&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://juejin.cn/live/1659039" target="_blank" rel="noreferrer">前端工程化-掘金</a></p>
<p><a href="https://www.bilibili.com/video/BV1HY4y1r7rJ?p=3" target="_blank" rel="noreferrer">大前端时代的挑战与机遇（深圳场）_哔哩哔哩_bilibili</a></p>
<p><a href="https://space.bilibili.com/28696526/channel/collectiondetail?sid=44950" target="_blank" rel="noreferrer">程序员山月的个人空间_哔哩哔哩_Bilibili</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[开发常用命令行]]></title>
            <link>https://super456.github.io/posts/growth-record/other/toolGuide/common-command-line.html</link>
            <guid>https://super456.github.io/posts/growth-record/other/toolGuide/common-command-line.html</guid>
            <pubDate>Thu, 07 Jul 2022 20:00:00 GMT</pubDate>
            <description><![CDATA[# 开发常用命令行
## 一、Nginx 的常用操作
- 停止 Nginx： `nginx -s stop`
- 重载配置文件：`nginx -s reload`
- 查看文件显示行数：`cat -n xxx.txt`
- 查看文件的前 N 行：`head -n xxx.txt`
- 查看文件的后 N 行：`tail -n xxx.txt`
- 查看指定日志路径下的错误（动态查看日志变化：显示前 500 行）: `tail -500f /root/.pm2/logs/xxx.log`

## 二、后台打印日志

- 连接服务器（Jenkins 该工程下控制台查看部署 IP 地址）

`ssh root@ip`

- 进入日志目录

`cd /目录地址`

- 实时打印操作日志如上面动态查看日志变化

`tail -f 项目文件.log`

## 三、PM2

- 查看 PM2 下的启动应用：`pm2 list`
- 获取更多这个应用信息：`pm2 show <id|name>`
- 运行启动指定文件：`pm2 start app.js`
- 停止某个 ID 应用：`pm2 stop id`
- 重启某个 ID 应用：`pm2 restart id`
- 进行监控：`pm2 monit`

## 四、NPM

- 查看 npm 版本：`npm -v`
- 根据 package 安装所有依赖：`npm install / npm i`
- 查看所有安装包的版本列表：`npm ls`
- 查看某个包的安装版本：`npm ls <page name>`
- 全局安装：`npm i gulp -g`
- 查看全局安装的包：`npm list -g --depth 0`（`--depth 0`：限制输出模块层级）
- 查看全局下安装所有的可用npm工具：`npm list --depth=0 -g`
- 查看全局的包的按照路径：`npm root -g`
- 快速初始化一个 package.json 的文件：`npm init -y`
- 安装/卸载到 devDependencies 下：`npm install/uninstall gulp -D/--save-dev`
- 安装/卸载到 dependencies 下：`npm install/uninstall gulp -S/--save`
- 删除 node_modules：`npm install rimraf -g` `rimraf node_modules`
- 查看包版本：`npm ls nuxt`

## 五、Git 操作

- 在本地创建一个空的数据仓库(就会出现一个 .git 的文件)：`git init`
- 克隆代码,一般都在第一次操作时，将别人的代码克隆下来：`git clone xxx`
- 查看当前 git 的状态：`git status`
- 显示文件的详细信息：`ll`
- 显示文件：`ls`
- 显示文件包括隐藏的文件：`ls -a`
- 递归的强制删除：`rm -rf xxx`
- 查看a.txt文件中内容：`cat a.txt`
- 全局的配置账户信息：`git config --global user.name "xxx"` `git config --global user.email "xxx@qq.com"`
- 当前项目中配置账户信息：`git config  user.name "xxx"` `git config  user.email "xxx@qq.com"`
- 将当前文件下的都添加：`git add .`
- 切换到上一个分支：`git checkout -`
- 创建提交版本并填写备注：`git commit -m "此次修改的一些说明"`
- 修改最近一次提交的 commit message：`git commit --amend -m "Updated commit message" 或 git commit --amend // 后面是vim命令 w: 写入 q: 退出`
- git 的忽略文件，也就是上传的时候不用管：
```git
*.txt    //忽略所有的 .txt 文件
/util      //忽略这个 util 目录
/util/*.js      //忽略 util 文件夹下的 .js 文件
/util/**/*.js    //递归的忽略这个文件夹下所有的 .js 文件
```

- 查看日志：`git log` `git log --oneline`
- 分支管理：
```git
git branch      //查看所有的分支
git branch dev  //创建 dev 分支
git checkout dev  //切换到 dev 分支上(在这个分支上修改后再合并)
(以上两步简写：git checkout -b dev)
在这个分支上就可以操作 add  commit 等操作

操作完成后我们就可以与主分支合并
合并分支
首先切换到主分支上
git checkout master
git merge  分支名
git merge --abort // 撤销merge合并

删除分支
git branch -d dev  //删除dev分支
```

- git 切换仓库操作：`git remote set-url origin http://xxx.git`
- 查看仓库远程地址：`git remote -v`
- 暂存区操作：
```git
git add . // 先将更改的内容提交到暂存区
git stash // 将此时更改的内容暂存起来(此时就可以切换到其他分支就行操作了,
等处理完在切回本分支(git checkout 分支名), 还原以前的,继续操作)
git stash apply // 恢复却不删除 stash 的内容
git stash pop  // 恢复并且删除 stash 信息
git stash list // 查看此时的暂存列表
git stash drop  // 删除这个分支上的所有的 stash
```

- 版本回退操作：
```git
git checkout .    //将工作区的代码恢复到上一次 commit 之前
git reset .  //将暂存区的内容恢复到工作区
git reset --hard 提交信息编号之间的区别  //回到指定的版本
git add . //将工作区的内容添加到暂存区
git add . 和 git reset . 是相反的两对
```

- `git fetch` 和 `git push` 的区别：
```git
git fetch 相当于是从远程获取最新到本地，不会自动 merge
git pull：相当于是从远程获取最新版本并 merge 到本地
在实际使用中，git fetch 更安全一些
```

- `git mv` 迁移文件或重命名文件（夹）（[Git Mv | How To Use Git-Mv To Rename And Move Files](https://initialcommit.com/blog/git-mv)）
```git
 // 迁移aaaaManage文件夹下的所有文件到「packages/aaaa-manage/views/」路径下（不包括「aaaaManage」文件夹）
 git mv views/aaaaManage/* packages/aaaa-manage/views/

 // 迁移aaaaManage文件夹下的「index.ts」到「packages/aaaa-manage/views/」路径下
 git mv views/aaaaManage/index.ts packages/aaaa-manage/views/

 // 重命名文件「index.ts」为「config.ts」
 git mv views/aaaaManage/index.ts views/aaaaManage/config.ts

 // 注意该命令没有撤回操作，如果迁移错了，在工作区文件或暂存区文件重置改动即可恢复之前状态
```

- git rm 删除文件或文件夹
```git
// 删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f
git rm -f xxx

// 递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件
git rm -r xxx
```
## 六、SSH 查看 PM2 日志
前提要有权限：
```git
ssh root@ip

启动本地静态文件服务
python -m SimpleHTTPServer

退出服务器连接
exit + 回车键
```

## 七、连接数据库
通过软件 Sequel Pro:
```git
ip:端口号
账号：root
密码
```

## 八、VS Code 快捷键
| **命令** | **说明** |
| ]]></description>
            <content:encoded><![CDATA[<h1 id="开发常用命令行" tabindex="-1">开发常用命令行 <a class="header-anchor" href="#开发常用命令行" aria-label="Permalink to &quot;开发常用命令行&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="一、nginx-的常用操作" tabindex="-1">一、Nginx 的常用操作 <a class="header-anchor" href="#一、nginx-的常用操作" aria-label="Permalink to &quot;一、Nginx 的常用操作&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>停止 Nginx： <code>nginx -s stop</code></li>
<li>重载配置文件：<code>nginx -s reload</code></li>
<li>查看文件显示行数：<code>cat -n xxx.txt</code></li>
<li>查看文件的前 N 行：<code>head -n xxx.txt</code></li>
<li>查看文件的后 N 行：<code>tail -n xxx.txt</code></li>
<li>查看指定日志路径下的错误（动态查看日志变化：显示前 500 行）: <code>tail -500f /root/.pm2/logs/xxx.log</code></li>
</ul>
<h2 id="二、后台打印日志" tabindex="-1">二、后台打印日志 <a class="header-anchor" href="#二、后台打印日志" aria-label="Permalink to &quot;二、后台打印日志&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>连接服务器（Jenkins 该工程下控制台查看部署 IP 地址）</li>
</ul>
<p><code>ssh root@ip</code></p>
<ul>
<li>进入日志目录</li>
</ul>
<p><code>cd /目录地址</code></p>
<ul>
<li>实时打印操作日志如上面动态查看日志变化</li>
</ul>
<p><code>tail -f 项目文件.log</code></p>
<h2 id="三、pm2" tabindex="-1">三、PM2 <a class="header-anchor" href="#三、pm2" aria-label="Permalink to &quot;三、PM2&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>查看 PM2 下的启动应用：<code>pm2 list</code></li>
<li>获取更多这个应用信息：<code>pm2 show &lt;id|name&gt;</code></li>
<li>运行启动指定文件：<code>pm2 start app.js</code></li>
<li>停止某个 ID 应用：<code>pm2 stop id</code></li>
<li>重启某个 ID 应用：<code>pm2 restart id</code></li>
<li>进行监控：<code>pm2 monit</code></li>
</ul>
<h2 id="四、npm" tabindex="-1">四、NPM <a class="header-anchor" href="#四、npm" aria-label="Permalink to &quot;四、NPM&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>查看 npm 版本：<code>npm -v</code></li>
<li>根据 package 安装所有依赖：<code>npm install / npm i</code></li>
<li>查看所有安装包的版本列表：<code>npm ls</code></li>
<li>查看某个包的安装版本：<code>npm ls &lt;page name&gt;</code></li>
<li>全局安装：<code>npm i gulp -g</code></li>
<li>查看全局安装的包：<code>npm list -g --depth 0</code>（<code>--depth 0</code>：限制输出模块层级）</li>
<li>查看全局下安装所有的可用npm工具：<code>npm list --depth=0 -g</code></li>
<li>查看全局的包的按照路径：<code>npm root -g</code></li>
<li>快速初始化一个 package.json 的文件：<code>npm init -y</code></li>
<li>安装/卸载到 devDependencies 下：<code>npm install/uninstall gulp -D/--save-dev</code></li>
<li>安装/卸载到 dependencies 下：<code>npm install/uninstall gulp -S/--save</code></li>
<li>删除 node_modules：<code>npm install rimraf -g</code> <code>rimraf node_modules</code></li>
<li>查看包版本：<code>npm ls nuxt</code></li>
</ul>
<h2 id="五、git-操作" tabindex="-1">五、Git 操作 <a class="header-anchor" href="#五、git-操作" aria-label="Permalink to &quot;五、Git 操作&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>在本地创建一个空的数据仓库(就会出现一个 .git 的文件)：<code>git init</code></li>
<li>克隆代码,一般都在第一次操作时，将别人的代码克隆下来：<code>git clone xxx</code></li>
<li>查看当前 git 的状态：<code>git status</code></li>
<li>显示文件的详细信息：<code>ll</code></li>
<li>显示文件：<code>ls</code></li>
<li>显示文件包括隐藏的文件：<code>ls -a</code></li>
<li>递归的强制删除：<code>rm -rf xxx</code></li>
<li>查看a.txt文件中内容：<code>cat a.txt</code></li>
<li>全局的配置账户信息：<code>git config --global user.name &quot;xxx&quot;</code> <code>git config --global user.email &quot;xxx@qq.com&quot;</code></li>
<li>当前项目中配置账户信息：<code>git config  user.name &quot;xxx&quot;</code> <code>git config  user.email &quot;xxx@qq.com&quot;</code></li>
<li>将当前文件下的都添加：<code>git add .</code></li>
<li>切换到上一个分支：<code>git checkout -</code></li>
<li>创建提交版本并填写备注：<code>git commit -m &quot;此次修改的一些说明&quot;</code></li>
<li>修改最近一次提交的 commit message：<code>git commit --amend -m &quot;Updated commit message&quot; 或 git commit --amend // 后面是vim命令 w: 写入 q: 退出</code></li>
<li>git 的忽略文件，也就是上传的时候不用管：</li>
</ul>
<div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>*.txt    //忽略所有的 .txt 文件</span></span>
<span class="line"><span>/util      //忽略这个 util 目录</span></span>
<span class="line"><span>/util/*.js      //忽略 util 文件夹下的 .js 文件</span></span>
<span class="line"><span>/util/**/*.js    //递归的忽略这个文件夹下所有的 .js 文件</span></span></code></pre>
</div><ul>
<li>查看日志：<code>git log</code> <code>git log --oneline</code></li>
<li>分支管理：</li>
</ul>
<div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>git branch      //查看所有的分支</span></span>
<span class="line"><span>git branch dev  //创建 dev 分支</span></span>
<span class="line"><span>git checkout dev  //切换到 dev 分支上(在这个分支上修改后再合并)</span></span>
<span class="line"><span>(以上两步简写：git checkout -b dev)</span></span>
<span class="line"><span>在这个分支上就可以操作 add  commit 等操作</span></span>
<span class="line"><span></span></span>
<span class="line"><span>操作完成后我们就可以与主分支合并</span></span>
<span class="line"><span>合并分支</span></span>
<span class="line"><span>首先切换到主分支上</span></span>
<span class="line"><span>git checkout master</span></span>
<span class="line"><span>git merge  分支名</span></span>
<span class="line"><span>git merge --abort // 撤销merge合并</span></span>
<span class="line"><span></span></span>
<span class="line"><span>删除分支</span></span>
<span class="line"><span>git branch -d dev  //删除dev分支</span></span></code></pre>
</div><ul>
<li>git 切换仓库操作：<code>git remote set-url origin http://xxx.git</code></li>
<li>查看仓库远程地址：<code>git remote -v</code></li>
<li>暂存区操作：</li>
</ul>
<div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>git add . // 先将更改的内容提交到暂存区</span></span>
<span class="line"><span>git stash // 将此时更改的内容暂存起来(此时就可以切换到其他分支就行操作了,</span></span>
<span class="line"><span>等处理完在切回本分支(git checkout 分支名), 还原以前的,继续操作)</span></span>
<span class="line"><span>git stash apply // 恢复却不删除 stash 的内容</span></span>
<span class="line"><span>git stash pop  // 恢复并且删除 stash 信息</span></span>
<span class="line"><span>git stash list // 查看此时的暂存列表</span></span>
<span class="line"><span>git stash drop  // 删除这个分支上的所有的 stash</span></span></code></pre>
</div><ul>
<li>版本回退操作：</li>
</ul>
<div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>git checkout .    //将工作区的代码恢复到上一次 commit 之前</span></span>
<span class="line"><span>git reset .  //将暂存区的内容恢复到工作区</span></span>
<span class="line"><span>git reset --hard 提交信息编号之间的区别  //回到指定的版本</span></span>
<span class="line"><span>git add . //将工作区的内容添加到暂存区</span></span>
<span class="line"><span>git add . 和 git reset . 是相反的两对</span></span></code></pre>
</div><ul>
<li><code>git fetch</code> 和 <code>git push</code> 的区别：</li>
</ul>
<div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>git fetch 相当于是从远程获取最新到本地，不会自动 merge</span></span>
<span class="line"><span>git pull：相当于是从远程获取最新版本并 merge 到本地</span></span>
<span class="line"><span>在实际使用中，git fetch 更安全一些</span></span></code></pre>
</div><ul>
<li><code>git mv</code> 迁移文件或重命名文件（夹）（<a href="https://initialcommit.com/blog/git-mv" target="_blank" rel="noreferrer">Git Mv | How To Use Git-Mv To Rename And Move Files</a>）</li>
</ul>
<div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span> // 迁移aaaaManage文件夹下的所有文件到「packages/aaaa-manage/views/」路径下（不包括「aaaaManage」文件夹）</span></span>
<span class="line"><span> git mv views/aaaaManage/* packages/aaaa-manage/views/</span></span>
<span class="line"><span></span></span>
<span class="line"><span> // 迁移aaaaManage文件夹下的「index.ts」到「packages/aaaa-manage/views/」路径下</span></span>
<span class="line"><span> git mv views/aaaaManage/index.ts packages/aaaa-manage/views/</span></span>
<span class="line"><span></span></span>
<span class="line"><span> // 重命名文件「index.ts」为「config.ts」</span></span>
<span class="line"><span> git mv views/aaaaManage/index.ts views/aaaaManage/config.ts</span></span>
<span class="line"><span></span></span>
<span class="line"><span> // 注意该命令没有撤回操作，如果迁移错了，在工作区文件或暂存区文件重置改动即可恢复之前状态</span></span></code></pre>
</div><ul>
<li>git rm 删除文件或文件夹</li>
</ul>
<div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>// 删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f</span></span>
<span class="line"><span>git rm -f xxx</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件</span></span>
<span class="line"><span>git rm -r xxx</span></span></code></pre>
</div><h2 id="六、ssh-查看-pm2-日志" tabindex="-1">六、SSH 查看 PM2 日志 <a class="header-anchor" href="#六、ssh-查看-pm2-日志" aria-label="Permalink to &quot;六、SSH 查看 PM2 日志&quot;">&ZeroWidthSpace;</a></h2>
<p>前提要有权限：</p>
<div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>ssh root@ip</span></span>
<span class="line"><span></span></span>
<span class="line"><span>启动本地静态文件服务</span></span>
<span class="line"><span>python -m SimpleHTTPServer</span></span>
<span class="line"><span></span></span>
<span class="line"><span>退出服务器连接</span></span>
<span class="line"><span>exit + 回车键</span></span></code></pre>
</div><h2 id="七、连接数据库" tabindex="-1">七、连接数据库 <a class="header-anchor" href="#七、连接数据库" aria-label="Permalink to &quot;七、连接数据库&quot;">&ZeroWidthSpace;</a></h2>
<p>通过软件 Sequel Pro:</p>
<div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>ip:端口号</span></span>
<span class="line"><span>账号：root</span></span>
<span class="line"><span>密码</span></span></code></pre>
</div><h2 id="八、vs-code-快捷键" tabindex="-1">八、VS Code 快捷键 <a class="header-anchor" href="#八、vs-code-快捷键" aria-label="Permalink to &quot;八、VS Code 快捷键&quot;">&ZeroWidthSpace;</a></h2>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>cmd+左右方向键</code></td>
<td>行代码左右切换（Win 的快捷键是「Fn + 左右方向键」）</td>
</tr>
<tr>
<td><code>option+左右方向键</code></td>
<td>单词之间左右切换（Win 快捷键是「Ctrl + 左右方向键」）</td>
</tr>
<tr>
<td><code>cmd+shift+\\</code></td>
<td>代码块之间上下移动</td>
</tr>
<tr>
<td><code>cmd+delete</code></td>
<td>删除光标之前的内容</td>
</tr>
<tr>
<td><code>cmd+shift+k</code></td>
<td>删除整行内容（win：Ctrl + Shift + K）</td>
</tr>
<tr>
<td><code>option+上下方向键</code></td>
<td>上下移动当前行代码位置（win：Alt + 上下方向键）</td>
</tr>
<tr>
<td><code>option+shif+ 上下方向键</code></td>
<td>将代码向上下复制（win：Alt + Shift +上下方向键）</td>
</tr>
<tr>
<td><code>cmd+/</code></td>
<td>单行注释</td>
</tr>
<tr>
<td><code>ctrl+左右方向键</code></td>
<td>当前屏幕的视图窗口左右切换</td>
</tr>
<tr>
<td><code>ctrl+上下方向键</code></td>
<td>缩小屏幕窗口进入视图窗口切换</td>
</tr>
<tr>
<td><code>cmd+p</code></td>
<td>当前项目工程搜索文件（win：Ctrl + P）</td>
</tr>
<tr>
<td><code>ctrl+g</code></td>
<td>跳转到指定行</td>
</tr>
<tr>
<td><code>cmd+shift+o</code></td>
<td>在当前文件的各种div元素之间跳转</td>
</tr>
<tr>
<td><code>cmd+f</code></td>
<td>在当前的文件中搜索，光标在搜索框</td>
</tr>
<tr>
<td><code>cmd+g</code></td>
<td>在当前的文件中切换匹配搜索项，光标停留在编辑器里（win：f3）</td>
</tr>
<tr>
<td>多光标使用：</td>
<td>（1）按住 「Option」键（windows 用户是按住「Alt」键） ，然后在页面中希望中现光标的位置点击鼠标。（2）选中某个文本，然后反复按住快捷键「 Cmd + D 」键（windows 用户是按住「Ctrl + D」键）， 即可将全文中与光标当前所在位置的词相同的词逐一加入选择。</td>
</tr>
</tbody>
</table>
<p><a href="https://juejin.im/post/5e2024485188254df874102b" target="_blank" rel="noreferrer">动图演示23个鲜为人知的VSCode快捷键</a></p>
<h2 id="九、mac-终端" tabindex="-1">九、Mac 终端 <a class="header-anchor" href="#九、mac-终端" aria-label="Permalink to &quot;九、Mac 终端&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>新建文件夹：<code>mkdir xxx</code></li>
<li>新建构建：<code>touch xxx</code></li>
<li>切换目录：<code>cd xxx</code></li>
<li>查看文件内容：<code>cat xxx</code></li>
<li>复制文件或目录：<code>cp xxx yyy</code></li>
<li>编辑文件：<code>vi xxx</code></li>
<li>访达打开文件：<code>open xxx</code></li>
<li>所列当前目录所有文件：<code>ls</code></li>
<li>删除文件：<code>rm xxx</code></li>
<li>清屏：<code>clear</code></li>
<li>查看当前目录：<code>pwd</code></li>
<li>退出终端：<code>exit</code></li>
</ul>
<h2 id="十、命令行在线查询网站" tabindex="-1">十、命令行在线查询网站 <a class="header-anchor" href="#十、命令行在线查询网站" aria-label="Permalink to &quot;十、命令行在线查询网站&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://explainshell.com" target="_blank" rel="noreferrer">G</a><a href="https://explainshell.com" target="_blank" rel="noreferrer">o Into</a></p>
<CustomImage src="/growth-record/other/toolGuide/minglingxing.webp" alt="command-line" />]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[DevOps 了解]]></title>
            <link>https://super456.github.io/posts/growth-record/engineering/tools/dev-ops.html</link>
            <guid>https://super456.github.io/posts/growth-record/engineering/tools/dev-ops.html</guid>
            <pubDate>Sun, 12 Jun 2022 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="devops-了解" tabindex="-1">DevOps 了解 <a class="header-anchor" href="#devops-了解" aria-label="Permalink to &quot;DevOps 了解&quot;">&ZeroWidthSpace;</a></h1>
<p>工程化定义：让一堆人做一堆事</p>
<h2 id="devops-介绍" tabindex="-1">DevOps 介绍 <a class="header-anchor" href="#devops-介绍" aria-label="Permalink to &quot;DevOps 介绍&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>DevOps（Development和Operations的组合词）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。</p>
<p>它是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。</p>
</blockquote>
<blockquote>
<p>它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运维工作必须紧密合作。
——百度百科</p>
</blockquote>
<h2 id="devops-流程" tabindex="-1">DevOps 流程 <a class="header-anchor" href="#devops-流程" aria-label="Permalink to &quot;DevOps 流程&quot;">&ZeroWidthSpace;</a></h2>
<CustomImage src='/growth-record/engineering/tools/devops01.webp' /><ol>
<li>plan：开发计划或需求评审；</li>
<li>code：开发编码需求功能；</li>
<li>build：构建打包需求功能；</li>
<li>test：测试需求；</li>
<li>release：发布版本；</li>
<li>deploy：部署上线；</li>
<li>operate：操作运维；</li>
<li>monitor：监控。</li>
</ol>
<h2 id="devops-内容" tabindex="-1">DevOps 内容 <a class="header-anchor" href="#devops-内容" aria-label="Permalink to &quot;DevOps 内容&quot;">&ZeroWidthSpace;</a></h2>
<CustomImage src='/growth-record/engineering/tools/devops02.webp' />]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 6 本《男孩、鼹鼠、狐狸和马》]]></title>
            <link>https://super456.github.io/posts/read-book/2022/nanhaiyanshuhulihema.html</link>
            <guid>https://super456.github.io/posts/read-book/2022/nanhaiyanshuhulihema.html</guid>
            <pubDate>Wed, 01 Jun 2022 20:00:00 GMT</pubDate>
            <description><![CDATA[这是一本写给所有人的书 一个孤单的男孩邂逅了一只刚刚钻出地面的鼹鼠，他们决定一起在荒野里探险。旅途中，他们先是遇到了狐狸，然后遇到了体格更大的伙伴——马 荒野是生活的隐喻，偶尔令人恐惧，但很美丽。他们从春天踏上旅途，经历了狂风和暴雨，也欣赏过夕阳与流星……他们各不相 同，也有各自的弱点，却始终彼此依靠着向前走。每个人都能在他们身上看到自己的影子 希望这本书可以鼓励你，给你探索生活的勇气，让你在需要帮助的时候能大声说出来。永远记住，你的存在很有意义，你很重要，你给这个世界带来了无可取代的东西]]></description>
            <content:encoded><![CDATA[<h1 id="第-6-本《男孩、鼹鼠、狐狸和马》" tabindex="-1">第 6 本《男孩、鼹鼠、狐狸和马》 <a class="header-anchor" href="#第-6-本《男孩、鼹鼠、狐狸和马》" aria-label="Permalink to &quot;第 6 本《男孩、鼹鼠、狐狸和马》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>这是一本写给所有人的书</p>
<p>一个孤单的男孩邂逅了一只刚刚钻出地面的鼹鼠，他们决定一起在荒野里探险。旅途中，他们先是遇到了狐狸，然后遇到了体格更大的伙伴——马</p>
<p>荒野是生活的隐喻，偶尔令人恐惧，但很美丽。他们从春天踏上旅途，经历了狂风和暴雨，也欣赏过夕阳与流星……他们各不相 同，也有各自的弱点，却始终彼此依靠着向前走。每个人都能在他们身上看到自己的影子</p>
<p>希望这本书可以鼓励你，给你探索生活的勇气，让你在需要帮助的时候能大声说出来。永远记住，你的存在很有意义，你很重要，你给这个世界带来了无可取代的东西</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>待补充点评🚀...</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2022/nanhaiyanshuhulihema.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[浅谈职业规划]]></title>
            <link>https://super456.github.io/posts/random-thought/2022/career-planning.html</link>
            <guid>https://super456.github.io/posts/random-thought/2022/career-planning.html</guid>
            <pubDate>Tue, 03 May 2022 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="浅谈职业规划" tabindex="-1">浅谈职业规划 <a class="header-anchor" href="#浅谈职业规划" aria-label="Permalink to &quot;浅谈职业规划&quot;">&ZeroWidthSpace;</a></h1>
<blockquote>
<p>努力和选择，对于技术人的成长来说，至关重要。</p>
</blockquote>
<CustomImage src="/random-thought/2022/tianzhushare.webp" /><p>来源<strong>阿里天猪</strong>分享的PPT页面有感</p>
<h2 id="一、起步阶段" tabindex="-1">一、起步阶段 <a class="header-anchor" href="#一、起步阶段" aria-label="Permalink to &quot;一、起步阶段&quot;">&ZeroWidthSpace;</a></h2>
<p>作为技术人员，在刚起步阶段时，首先需要拓宽自己的技术宽度，对自己所做的项目/产品所涉及的方方面面的技术都应该有所了解，另外对于就是学习工程化，让自己真正具备开发商业软件的能力。</p>
<p>在工程化和知识宽度达到一定阶段后，需要开始根据自己的兴趣和工作内容有所选择，主要是加强在某一领域的技术深度。</p>
<p>在技术深度达到了一定阶段后，需要对自己做出一个选择，就是偏业务方向，还是偏基础技术方向。</p>
<p>偏业务方向：</p>
<ul>
<li>对业务发展的未来有一定的预判，有商业敏感意识；</li>
<li>能对复杂的业务进行合理的抽象；</li>
<li>在系统的设计上能对未来业务的变化有一定的预留处理。</li>
</ul>
<p>偏基础技术方向：</p>
<ul>
<li>能结合业务的发展趋势对基础技术的方向有一定的预判，避免业务发展受到基础技术的拖累；</li>
<li>对业界的技术发展方向有自己的认知和判断；</li>
<li>在对应的基础技术领域有不错的技术深度。</li>
</ul>
<h2 id="二、进阶阶段" tabindex="-1">二、进阶阶段 <a class="header-anchor" href="#二、进阶阶段" aria-label="Permalink to &quot;二、进阶阶段&quot;">&ZeroWidthSpace;</a></h2>
<p>成为团队 Leader，做为一个技术团队的 Leader，无论是业务的还是基础技术的，在技术能力上还是不能差的，尤其是判断力上，另外，作为一个团队 Leader，就意味着承担了团队方向的判断职责，一个团队的方向基本会直接影响到团队所有成员的未来，以及所支持的业务的发展状况，所以对于一个团队 Leader，我觉得最重要的能力就在方向的判断上，然后是根据方向的判断的组织建设（团队搭建，人才识别、培养、招募等）能力。</p>
<p>如果不是往 Leader 方向呢，那基本就是往架构师方向为多，架构师的话，在至少一两个领域的深度外，对广度的要求非常高，还有同样就是判断能力，无论是业务架构师，还是基础方向的架构师，领域的知识宽度是非常重要的，意味着能做多大范围的事，判断能力会体现出一个架构师在做一个架构设计时重点是怎么判断的，在有限的资源和时间情况下取舍是怎么做的，对未来是怎么做铺垫的，以及 TA 对事情的技术控制能力，一个好的架构师在技术风险的控制能力上必须是非常强的，例如一个强大的基础领域的架构师，应该是可以很好的控制跨多个专业技术领域的技术演进</p>
<p>总而言之，言而总之，我觉得在整个成长过程中，兴趣是最为关键的，所以 <strong>Follow Your Heart</strong> 非常重要，只有在有足够的兴趣或梦想的情况下才能产生很强的自驱，没有足够的自驱我觉得在技术领域基本上是不可能走到高阶的，除了兴趣外，自己的优势也要判断清楚，每个不同的方向，我自己认为还是需要一定的天分的，而所谓的天分我觉得就是对个人优势的判断</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[脚手架及 CLI 工具使用]]></title>
            <link>https://super456.github.io/posts/growth-record/other/toolGuide/scaffold-cli.html</link>
            <guid>https://super456.github.io/posts/growth-record/other/toolGuide/scaffold-cli.html</guid>
            <pubDate>Mon, 02 May 2022 20:00:00 GMT</pubDate>
            <description><![CDATA[# 脚手架及 CLI 工具使用
## 一、概念简介
> 脚手架是为了保证各施工过程顺利进行而搭设的工作平台。——百度百科

Vue CLI 官方解释：
> Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。

简单来说，脚手架就是为了减少重复性工作而做的工具。
## 二、CLI 基本组成
基本会用到的一些插件：

| **序号** | **插件名** | **作用** |
| ]]></description>
            <content:encoded><![CDATA[<h1 id="脚手架及-cli-工具使用" tabindex="-1">脚手架及 CLI 工具使用 <a class="header-anchor" href="#脚手架及-cli-工具使用" aria-label="Permalink to &quot;脚手架及 CLI 工具使用&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="一、概念简介" tabindex="-1">一、概念简介 <a class="header-anchor" href="#一、概念简介" aria-label="Permalink to &quot;一、概念简介&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>脚手架是为了保证各施工过程顺利进行而搭设的工作平台。——百度百科</p>
</blockquote>
<p>Vue CLI 官方解释：</p>
<blockquote>
<p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。</p>
</blockquote>
<p>简单来说，脚手架就是为了减少重复性工作而做的工具。</p>
<h2 id="二、cli-基本组成" tabindex="-1">二、CLI 基本组成 <a class="header-anchor" href="#二、cli-基本组成" aria-label="Permalink to &quot;二、CLI 基本组成&quot;">&ZeroWidthSpace;</a></h2>
<p>基本会用到的一些插件：</p>
<table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th><strong>插件名</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>commander</td>
<td>解析参数</td>
</tr>
<tr>
<td>2</td>
<td>inquirer</td>
<td>交互式命令作用</td>
</tr>
<tr>
<td>3</td>
<td>download-git-report</td>
<td>在官网上下载模板</td>
</tr>
<tr>
<td>4</td>
<td>chalk</td>
<td>在命令行增加色彩</td>
</tr>
<tr>
<td>5</td>
<td>metalsmith</td>
<td>读取文件，实现模板渲染</td>
</tr>
<tr>
<td>6</td>
<td>consoledate</td>
<td>统一的模板引擎（比如：对 ejs 的解析）</td>
</tr>
</tbody>
</table>
<h2 id="三、cli-工具使用" tabindex="-1">三、CLI 工具使用 <a class="header-anchor" href="#三、cli-工具使用" aria-label="Permalink to &quot;三、CLI 工具使用&quot;">&ZeroWidthSpace;</a></h2>
<p>命令行界面，Command-Line Interface 的缩写。</p>
<h4 id="_3-1-第三方搭建工具" tabindex="-1">3.1 第三方搭建工具 <a class="header-anchor" href="#_3-1-第三方搭建工具" aria-label="Permalink to &quot;3.1 第三方搭建工具&quot;">&ZeroWidthSpace;</a></h4>
<p>原生自行搭建脚手架必备工具：
<a href="https://github.com/tj/commander.js#readme" target="_blank" rel="noreferrer">tj/commander.js</a></p>
<p>集成搭建脚手架工具，开箱即用：
<a href="https://yeoman.io/" target="_blank" rel="noreferrer">The web’s scaffolding tool for modern webapps | Yeoman</a></p>
<h4 id="_3-2-yeoman-搭建-cli" tabindex="-1">3.2 Yeoman 搭建 CLI <a class="header-anchor" href="#_3-2-yeoman-搭建-cli" aria-label="Permalink to &quot;3.2 Yeoman 搭建 CLI&quot;">&ZeroWidthSpace;</a></h4>
<p>搭建一个简单的脚手架工具。</p>
<ol>
<li>
<p>安装包工具：<code>npm install -g generator-generator yo</code> （安装 generator-generator 包文件及 yo 命令行工具）；</p>
</li>
<li>
<p>初始化项目：<code>yo generator</code> 根据需要配置相关信息或者默认就行，注意创建的 generator name 前缀必须要 <code>generator-</code> 使用这个模板的时候不需要输入这个前缀，如 generator-template；</p>
</li>
<li>
<p>生成重要的文件目录：</p>
</li>
</ol>
<CustomImage src='/growth-record/other/toolGuide/jiaoshoujia01.webp' /><ol start="4">
<li>将需要 CLI 生成的默认文件放入 <code>_generators/app/templates_</code> 文件夹下：</li>
</ol>
<CustomImage src='/growth-record/other/toolGuide/jiaoshoujia02.webp' /><ol start="5">
<li>本地全局使用这个模板操作：<code>npm link</code> ，相当于将全局的 node_modules 做了个映射到了这项目模板这里，注意需要在这个模板文件夹根目录执行：</li>
</ol>
<CustomImage src='/growth-record/other/toolGuide/jiaoshoujia03.webp' /><ol start="6">
<li>测试使用自己生成的模板，离开这个模板目录文件，随便进入另一个目录，输入：<code>yo template</code> （之前我创建的 generator name 填写的是：generator-template）：</li>
</ol>
<CustomImage src='/growth-record/other/toolGuide/jiaoshoujia04.webp' /><ol start="7">
<li>发布到远程 npm 上：</li>
</ol>
<h4 id="_3-3-使用原生搭建-cli" tabindex="-1">3.3 使用原生搭建 CLI <a class="header-anchor" href="#_3-3-使用原生搭建-cli" aria-label="Permalink to &quot;3.3 使用原生搭建 CLI&quot;">&ZeroWidthSpace;</a></h4>
<ol>
<li>
<p>新建一个文件夹目录，并创建一个项目，初始化项目：<code>npm init -y</code> ；</p>
</li>
<li>
<p>在根目录新建一个bin目录，然后在该目录下新建一个 <code>www.js</code> 文件，在 <code>package.json</code> 中，新建个对象 <code>bin</code> ，对象值写个脚手架名字并指向 <code>bin</code> 目录下的 <code>www.js</code> 文件：</p>
</li>
</ol>
<CustomImage src='/growth-record/other/toolGuide/jiaoshoujia05.webp' /><ol start="3">
<li>在根目录执行：<code>npm link</code> ：</li>
</ol>
<CustomImage src='/growth-record/other/toolGuide/jiaoshoujia06.webp' /><ol start="4">
<li>在 <code>www.js</code> 文件输入以下内容，再使用第二步定义的脚手架名字控制台输入：</li>
</ol>
<CustomImage src='/growth-record/other/toolGuide/jiaoshoujia07.webp' /><p>这行代码 <code>#!/usr/bin/env node</code> 指定这个脚本的解释程序是 node 环境，不懂可以查看这篇文章 <a href="https://blog.csdn.net/liangtaox8/article/details/100039274" target="_blank" rel="noreferrer">#!/usr/bin/env node 到底是什么</a></p>
<ol>
<li>利用 commander 来解析用户的参数：</li>
</ol>
<p>（1）安装 commander 插件：<code>npm i commander</code> ;</p>
<p>（2）查看用户选择传递过来的参数：</p>
<ul>
<li>
<p>对 <code>bin/www.js</code> 文件添加以下代码：<code>require('../src/main')</code> ;</p>
</li>
<li>
<p>根目录新建一个 src 文件夹，该文件夹下新建 <code>main.js</code>  和 <code>constants.js</code> 文件，并添加指定代码：</p>
</li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// constants.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'../package.json'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    version</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// main.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> program</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'commander'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(process.argv)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./constants.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">program.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(version).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(process.argv)</span></span></code></pre>
</div><p>上述代码做了以下事情：从 <code>package.json</code> 里拿到当前版本号，解析用户传递的参数。</p>
<ul>
<li>运行脚手架名字会看到执行结果：</li>
</ul>
<CustomImage src='/growth-record/other/toolGuide/jiaoshoujia08.png' /><ol>
<li>创建一个 create 的命令，在 main.js 文件下修改为以下代码：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// main.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> program</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'commander'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./constants.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">program.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'create'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'c'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'create a project'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'done'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 解析用户传递的参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">program.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(version).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(process.argv)</span></span></code></pre>
</div><p>上述代码执行的是：通过命令 command 创建了一个 create 的命令，别名 c ，操作的内容时打印 done，当我们运行脚手架名字加 create 时会输出以下内容：</p>
<CustomImage src='/growth-record/other/toolGuide/jiaoshoujia09.webp' /><p>通常情况下，需要的命令一定不止 create 一个，这样的话，就需要对命令进行封装了，在 <code>main.js</code> 文件添加一下代码：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 定义映射对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> mapActions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  create: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    alias: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'c'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'create a project'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    examples: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">      'super456-cli create &#x3C;project-name>'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  config: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    alias: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'c'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'config project variable'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    examples: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">      'super456-cli config set &#x3C;k> &#x3C;v>'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">      'super456-cli config get &#x3C;k>'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">  '*'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    alias: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'c'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'command not found'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    examples: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 循环映射对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ownKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(mapActions).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">action</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(action)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(mapActions[action].alias)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(mapActions[action].description)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // console.log('done')</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (action </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '*'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(mapActions[action].description)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(action)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><ol>
<li>为了代码的层次化结构更加清晰，action 里面的所有操作， 需要拆分到独立的 JS 文件中，使每个函数文件独立完成自己需要完成的事情。</li>
</ol>
<p>新建 <code>src/create.js</code> 文件，文件内容如下：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">projectName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'create'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, projectName)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>修改 <code>src/main.js</code> 为以下内容：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// main.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> program</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'commander'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'path'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./constants.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 定义映射对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> mapActions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  create: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    alias: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'c'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'create a project'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    examples: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">      'super456-cli create &#x3C;project-name>'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  config: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    alias: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'c'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'config project variable'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    examples: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">      'super456-cli config set &#x3C;k> &#x3C;v>'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">      'super456-cli config get &#x3C;k>'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">  '*'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    alias: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'c'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'command not found'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    examples: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 循环映射对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ownKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(mapActions).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">action</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  program.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(action).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(mapActions[action].alias).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(mapActions[action].description).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (action </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '*'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(mapActions[action].description)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'process.argv'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, process.argv)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(__dirname, action))(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">process.argv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 解析用户传递的参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">program.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(version).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(process.argv)</span></span></code></pre>
</div><p>此时执行 <code>super456-cli create projectName</code> 控制台打印的结果：</p>
<CustomImage src='/growth-record/other/toolGuide/jiaoshoujia10.webp' /><ol start="8">
<li>监听 help 事件，在 main.js 文件中的循环映射对象之后，解析用户传递的参数之前，添加以下内容：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 监听用户的help事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">program.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'--help'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ownKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(mapActions).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">action</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    mapActions[action].examples.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">example</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'  '</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> example)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>输入脚手架名字加帮助指令：<code>super456-cli --help</code>，控制台输出如下：</p>
<CustomImage src='/growth-record/other/toolGuide/jiaoshoujia11.webp' /><ol>
<li>从 GitHub 上拉取自己的仓库代码，完善 <code>src/create.js</code> 文件代码如下：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> axios</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'axios'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 获取项目列表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fetchRepoList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'https://api.github.com/users/super456/repos'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">projectName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // console.log('create', projectName)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> repos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fetchRepoList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  repos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> repos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> item.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(repos)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>控制台输入创建项目命令如下：</p>
<CustomImage src='/growth-record/other/toolGuide/jiaoshoujia12.webp' /><ol start="10">
<li>需要用到 ora 和 Inquirer 插件，ora 的作用是 Loading 效果（安装：<code>npm i ora</code>），Inquirer 的作用是和用户进行交互式命令（安装：<code>npm i inquirer</code>），在 <code>src/create.js</code> 文件添加以下代码：</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> axios</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'axios'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ora</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'ora'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Inquirer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'inquirer'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 获取项目列表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fetchRepoList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'https://api.github.com/users/super456/repos'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">projectName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // console.log('create', projectName)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> repos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fetchRepoList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  repos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> repos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> item.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(repos)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 封装loading效果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> waitFnloading</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> spinner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ora</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  spinner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  spinner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">succeed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//根据github接口，获取项目的tag信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fetchTagList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'https://api.github.com/repos/super456/vue-cli2.x-demo/tags'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用Inquirer实现交互式命令</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">projectName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> repos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> waitFnloading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(fetchRepoList, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'fetching template'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  repos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> repos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> item.name)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    repo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Inquirer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'repo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'list'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'please choise a template to create project'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    choices: repos</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> tags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> waitFnloading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(fetchTagList, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'fetching tags'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)(repo)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    tag</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Inquirer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'tag'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'list'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'please choise a tag'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    choices: tags</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  tags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> tags.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> item.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'tags'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, tags)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在控制台输入命令创建项目效果（GIF）：</p>
<CustomImage src='/growth-record/other/toolGuide/jiaoshoujia.gif' /><ol>
<li>使用 download-git-repo 下载，作用是使用这个插件，下载仓库文件，并保存到本地的临时文件夹内：</li>
</ol>
<p>（1）修改 <code>src/constants.js</code> 文件内容：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 选择下载模板的目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> downloadDirectory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">process</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">env</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">[</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">process</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'darwin'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'HOME'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'USERPROFILE'</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}/.template`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    downloadDirectory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>（2）修改 <code>src/create.js</code> 文件内容：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> axios</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'axios'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ora</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'ora'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Inquirer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'inquirer'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">promisify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'util'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> downloadGitRepo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'download-git-repo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用download-git-repo插件下载仓库的文件，并保存到本地的临时文件夹内。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">downloadGitRepo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> promisify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(downloadGitRepo)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">downloadDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./constants'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 把下载好的文件复制到当前文件夹</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'path'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ncp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'ncp'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ncp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> promisify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ncp)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 获取GitHub自己的公开项目列表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fetchRepoList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'https://api.github.com/users/super456/repos'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 封装loading效果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> waitFnloading</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> spinner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ora</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  spinner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  spinner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">succeed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//根据github接口，获取项目的tag信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fetchTagList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'https://api.github.com/repos/super456/vue-cli2.x-demo/tags'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 封装拉取项目的代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> download</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">repo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `super456/${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (tag) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `#${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> dest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">downloadDirectory</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}/${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 当前文件到本地电脑的目录：/Users/edz/.template/vue-cli2.x-demo（最后一个字段是仓库名，也可以自行定义）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> downloadGitRepo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(api, dest)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> dest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用Inquirer实现交互式命令</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">projectName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> repos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> waitFnloading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(fetchRepoList, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'fetching template...'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  repos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> repos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> item.name)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    repo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Inquirer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'repo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'list'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'please choise a template to create project'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    choices: repos</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> tags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> waitFnloading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(fetchTagList, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'fetching tags...'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)(repo)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    tag</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Inquirer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'tag'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'list'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'please choise a tag'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    choices: tags</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> resultFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> waitFnloading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(download, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'downloading...'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)(repo, tag)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  ncp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(resultFile, path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(projectName))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'created project successfully~'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在控制台输入创建项目后效果（因为网络问题，这里只展示结果）：</p>
<p>这个是下载在仓库文件保存到本地的临时文件夹内的路径及内容情况：</p>
<CustomImage src='/growth-record/other/toolGuide/jiaoshoujia13.webp' /><p>这个只是简单的实现了模板的下载，复杂的 CLI 工具还需要处理文件是否存在，ejs 等的模板引擎解析等，等下的就是发布到 npm 上给用户使用了。</p>
<h4 id="_3-4-starship" tabindex="-1">3.4 starship <a class="header-anchor" href="#_3-4-starship" aria-label="Permalink to &quot;3.4 starship&quot;">&ZeroWidthSpace;</a></h4>
<p><a href="https://starship.rs/" target="_blank" rel="noreferrer">https://starship.rs/</a></p>
<h4 id="_3-5-prompts" tabindex="-1">3.5 prompts <a class="header-anchor" href="#_3-5-prompts" aria-label="Permalink to &quot;3.5 prompts&quot;">&ZeroWidthSpace;</a></h4>
<p><a href="https://github.com/terkelg/prompts" target="_blank" rel="noreferrer">https://github.com/terkelg/prompts</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第 3 本《认知觉醒》]]></title>
            <link>https://super456.github.io/posts/read-book/2022/renzhijuexing.html</link>
            <guid>https://super456.github.io/posts/read-book/2022/renzhijuexing.html</guid>
            <pubDate>Fri, 11 Mar 2022 20:00:00 GMT</pubDate>
            <description><![CDATA[这是一部可以穿透时间的个人成长方法论。通过“大脑构造、潜意识、元认知”等思维规律，你将真正看清自己；通过“深度学习、关联、反馈”事物规律，你将洞悉如何真正成事 如果对自己不了解，我们就会被人的原始天性束缚，这往往会让我们感到很痛苦。然而，如果了解大脑知识，我们就可以观察并指导自己，运用认知的力量去克服天性，从而获得长久而清晰的内在动力，让我们告别绝大多数人生痛苦 一个人的认知越清晰，行动就越坚定。本书解答了很多问题： 为什么我们做事总是急于求成、避难趋易？ 所谓耐心，就是要“咬牙坚持、死磕到底”吗？ 如何彻底告别用“三分钟热情”和“打鸡血”的方式做事？ 如何保持极度专注？如何消除焦虑？如何提高学习能力？…… 一个人真正的耐心从来不是苦哈哈的毅力支撑，而是具有长远目光的结果。只要了解大脑规律，并知晓诸如“复利效应、舒适区边缘、学习权重比、学习平台期”等规律，我们就可以大幅提升我们的耐心水平]]></description>
            <content:encoded><![CDATA[<h1 id="第-3-本《认知觉醒》" tabindex="-1">第 3 本《认知觉醒》 <a class="header-anchor" href="#第-3-本《认知觉醒》" aria-label="Permalink to &quot;第 3 本《认知觉醒》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>这是一部可以穿透时间的个人成长方法论。通过“大脑构造、潜意识、元认知”等思维规律，你将真正看清自己；通过“深度学习、关联、反馈”事物规律，你将洞悉如何真正成事
如果对自己不了解，我们就会被人的原始天性束缚，这往往会让我们感到很痛苦。然而，如果了解大脑知识，我们就可以观察并指导自己，运用认知的力量去克服天性，从而获得长久而清晰的内在动力，让我们告别绝大多数人生痛苦</p>
<p>一个人的认知越清晰，行动就越坚定。本书解答了很多问题：
为什么我们做事总是急于求成、避难趋易？</p>
<p>所谓耐心，就是要“咬牙坚持、死磕到底”吗？</p>
<p>如何彻底告别用“三分钟热情”和“打鸡血”的方式做事？</p>
<p>如何保持极度专注？如何消除焦虑？如何提高学习能力？……</p>
<p>一个人真正的耐心从来不是苦哈哈的毅力支撑，而是具有长远目光的结果。只要了解大脑规律，并知晓诸如“复利效应、舒适区边缘、学习权重比、学习平台期”等规律，我们就可以大幅提升我们的耐心水平</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《认知觉醒：开启自我改变的原动力》
周岭
4个笔记</p>
<p>◆  点评</p>
<p>2022/3/11 认为好看
触动点很多，慢慢消化改变自己💪🏻，第一遍阅读比较草率，期待值得二刷提升认知学习，输出更多的想法笔记</p>
<p>◆  下篇 外观世界，借力前行</p>
<blockquote>
<blockquote>
<p>请注意，遇到这种困难才是深度学习真正的开始！因为你必须动用已有的知识去解释新知识，当你能够把新学的知识解释清楚时，就意味着把它纳入了自己的知识体系，同时达到了可以教授他人的水平，并可能创造新的知识。</p>
</blockquote>
</blockquote>
<p>2021/7/11 发表想法
深有同感，作者分析的很透彻。之前的校园的学习，包括现在工作中的学习，还是太硬式的学习方法，老是以为努力坚持的做好一件事，要比别人多花时间学习，这样才能更好的进步，其实是有误区的。学习的成果跟努力坚持学习的时间并不一定正相关。反而更赞同这种观点在“拉伸区”做事情。不要太硬性、标准化的去做某件事情，容易适得其反，中途放弃。舒适区边缘做才更好的成长，自己也容易得到反馈，坚持成长的更好。</p>
<blockquote>
<blockquote>
<p>学习不只是一味地努力，成长也不只需要“打鸡血”、拼意志力。只要站在舒适区边缘，一点一点往外走，同时和时间做朋友，你肯定会在不经意间发生蜕变</p>
</blockquote>
</blockquote>
<p>2021/6/27 发表想法
作者说的很真实，很有触点，生活和工作中，很多事情是天性顺其自然控制的，往往自己感觉有种“身不由己”，很自然就这么做了。其实都是自己没有思考要去做什么导致的，正如作者所的，多使用元认知审视自己，然后做出不一样的选择。</p>
<blockquote>
<blockquote>
<p>每当遇到需要选择的情况时，我们要是能先停留几秒思考一下，就有可能激活自己的理智脑，启用元认知来审视当前的思维，然后做出不一样的选择</p>
</blockquote>
</blockquote>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2022/renzhijuexing.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 2 本《JavaScript DOM编程艺术 （第2版）》]]></title>
            <link>https://super456.github.io/posts/read-book/2022/javascriptdom2.html</link>
            <guid>https://super456.github.io/posts/read-book/2022/javascriptdom2.html</guid>
            <pubDate>Tue, 01 Mar 2022 20:00:00 GMT</pubDate>
            <description><![CDATA[JavaScript是Web开发中最重要的一门语言，它强大而优美。无论是桌面开发，还是移动应用。JavaScript都是必须掌握的技术。W3C的DOM标准是开发Web应用的基石。已经得到所有现代浏览器的支持，这使得跨平台Web开发成了一件轻松惬意的事。
本书是超级畅销书的升级版，由倡导Web标准的领军人物执笔，揭示了前端开发的真谛，是学习JavaScript和DOM开发的必读之作。
本 书在简洁明快地讲述JavaScript和DOM的基本知识之后，通过几个实例演示了专业水准的网页开发技术，透彻阐述了平稳退化等一批至关重要的 JavaScript编程原则和最佳实践，并全面探讨了HTML5以及jQuery等JavaScript库。读者将看到JavaScript、 HTML5和CSS如何协作来创建易用的、与标准兼容的Web设计，掌握使用JavaScript和DOM通过客户端动态效果和用户控制的动画来加强 Web页面的必备技术；同时，还将对如何利用库提高开发效率有全面深入的理解。]]></description>
            <content:encoded><![CDATA[<h1 id="第-2-本《javascript-dom编程艺术-第2版-》" tabindex="-1">第 2 本《JavaScript DOM编程艺术 （第2版）》 <a class="header-anchor" href="#第-2-本《javascript-dom编程艺术-第2版-》" aria-label="Permalink to &quot;第 2 本《JavaScript DOM编程艺术 （第2版）》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>JavaScript是Web开发中最重要的一门语言，它强大而优美。无论是桌面开发，还是移动应用。JavaScript都是必须掌握的技术。W3C的DOM标准是开发Web应用的基石。已经得到所有现代浏览器的支持，这使得跨平台Web开发成了一件轻松惬意的事。</p>
<p>本书是超级畅销书的升级版，由倡导Web标准的领军人物执笔，揭示了前端开发的真谛，是学习JavaScript和DOM开发的必读之作。</p>
<p>本 书在简洁明快地讲述JavaScript和DOM的基本知识之后，通过几个实例演示了专业水准的网页开发技术，透彻阐述了平稳退化等一批至关重要的 JavaScript编程原则和最佳实践，并全面探讨了HTML5以及jQuery等JavaScript库。读者将看到JavaScript、 HTML5和CSS如何协作来创建易用的、与标准兼容的Web设计，掌握使用JavaScript和DOM通过客户端动态效果和用户控制的动画来加强 Web页面的必备技术；同时，还将对如何利用库提高开发效率有全面深入的理解。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>比较适合入门，内容浅显易懂，简单讲解了前端开发入门所需的技能和知识点，并有实战案例学习练习，让初学者快速掌握书中所学知识点</p>
<p>待补充思维导图笔记🚀...</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2022/javascriptdom2.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[第 1 本《遇见你真好》]]></title>
            <link>https://super456.github.io/posts/read-book/2022/yujiannizhenhao.html</link>
            <guid>https://super456.github.io/posts/read-book/2022/yujiannizhenhao.html</guid>
            <pubDate>Mon, 03 Jan 2022 20:00:00 GMT</pubDate>
            <description><![CDATA[描述文章信息(string)]]></description>
            <content:encoded><![CDATA[<h1 id="第-1-本《遇见你真好》" tabindex="-1">第 1 本《遇见你真好》 <a class="header-anchor" href="#第-1-本《遇见你真好》" aria-label="Permalink to &quot;第 1 本《遇见你真好》&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>十万+点赞、百万次分享，备受粉丝期待的暖心、治愈绘本；</p>
<p>“快看漫画”APP、有妖气 热门连载作者白峻也人气绘本 ；</p>
<p>腾讯漫画、ZAKER、LOFTER诚意推荐；</p>
<p>意林、视觉志、壹读、等微信热门公众号争相转载；</p>
<p>思想聚焦、搞笑漫画等微博大V暖心推荐、转发；</p>
<p>随书附赠四枚甜蜜情侣款书签，手写留言表白你爱的人；</p>
<p>双封套四色全彩印刷，包装精美，重温遇见的美好。</p>
<p>这是一本关于小熊和小兔日常生活的暖心绘本，当小熊遇见了小兔，每一天开始有了新的期待，害羞的小熊变身情话技能MAX的最佳男友，当小兔爱上小熊，她开始发现生活中更多的美好。还有勇敢的海星，逗趣的长颈鹿，萌萌的小丑，那些关于等待、遇见、陪伴的美好，都定格在这本漫画书里。</p>
<p>遇见你真好，想陪你到终老。让我们认真对待每一位出现在身边的你爱的和爱你的人，更热切地拥抱生活吧。</p>
<h2 id="阅读笔记" tabindex="-1">阅读笔记 <a class="header-anchor" href="#阅读笔记" aria-label="Permalink to &quot;阅读笔记&quot;">&ZeroWidthSpace;</a></h2>
<p>《遇见你真好》
白峻也
1个笔记</p>
<p>◆  点评</p>
<p>2022/1/3 认为好看
很温暖，很舒服，很治愈，遇见你真好，希望我们都能遇到那个小🐻或小🐰</p>
]]></content:encoded>
            <enclosure url="https://super456.github.io/read-book/2022/yujiannizhenhao.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[Nuxt 学习笔记]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/nuxt-study.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/nuxt-study.html</guid>
            <pubDate>Mon, 14 Jun 2021 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="nuxt-学习笔记" tabindex="-1">Nuxt 学习笔记 <a class="header-anchor" href="#nuxt-学习笔记" aria-label="Permalink to &quot;Nuxt 学习笔记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-label="Permalink to &quot;基础知识&quot;">&ZeroWidthSpace;</a></h2>
<CustomImage src='/growth-record/frame/vue/nuxtstudy.webp' /><h2 id="学习资料" tabindex="-1">学习资料 <a class="header-anchor" href="#学习资料" aria-label="Permalink to &quot;学习资料&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://mp.weixin.qq.com/s/ZfhKh7BkfzCXA7C6D3Waaw" target="_blank" rel="noreferrer">如何排查nuxt的内存泄露问题 &amp; 优化</a></li>
<li><a href="https://juejin.im/post/5ebf5dcf5188256d4266285d?utm_source=gold_browser_extension" target="_blank" rel="noreferrer">🚀点亮你的Vue技术栈，万字Nuxt.js实践笔记来了</a></li>
<li><a href="https://juejin.im/post/5efc8c9f6fb9a07e8c6891cc" target="_blank" rel="noreferrer">Vue、Nuxt服务端渲染、NodeJS全栈项目~面向小白的完美系统~</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CSS BEM 书写规范]]></title>
            <link>https://super456.github.io/posts/growth-record/base/css/bem-rule.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/css/bem-rule.html</guid>
            <pubDate>Sun, 28 Mar 2021 20:00:00 GMT</pubDate>
            <description><![CDATA[# CSS BEM 书写规范
## BEM命名约定

使用 [BEM](http://bem.info/) 命名规范，理论上讲，每行 `css` 代码都只有一个选择器。

BEM代表 **“块（block）,元素（element）,修饰符（modifier）”**,我们常用这三个实体开发组件。

在选择器中，由以下三种符号来表示扩展的关系：

```
-   中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。
__  双下划线：双下划线用来连接块和块的子元素
_   单下划线：单下划线用来描述一个块或者块的子元素的一种状态

type-block__element_modifier
```

### 块（block）

一个块是设计或布局的一部分，它有具体且唯一地意义 ，要么是语义上的要么是视觉上的。

在大多数情况下，任何独立的页面元素（或复杂或简单）都可以被视作一个块。它的HTML容器会有一个唯一的CSS类名，也就是这个块的名字。

针对块的CSS类名会加一些前缀（ `ui-`），这些前缀在CSS中有类似 [命名空间]() 的作用。

一个块的正式（实际上是半正式的）定义有下面三个基本原则：

1. CSS中只能使用类名（不能是ID）。
2. 每一个块名应该有一个命名空间（前缀）
3. 每一条CSS规则必须属于一个块。

例如：一个自定义列表 `.list` 是一个块，通常自定义列表是算在 `mod` 类别的，在这种情况下，一个 `list` 列表的block写法应该为:

```
.list
```

### 元素（element）

块中的子元素是块的子元素，并且子元素的子元素在 `bem` 里也被认为是块的直接子元素。**一个块中元素的类名必须用父级块的名称作为前缀。**

如上面的例子，`li.item` 是列表的一个子元素，

```
.list{}
.list .item{}

.list{}
.list__item{}
```

### 修饰符（modifier）

一个“修饰符”可以理解为一个块的特定状态，标识着它持有一个特定的属性。

用一个例子来解释最好不过了。一个表示按钮的块默认有三个大小：小，中，大。为了避免创建三个不同的块，最好是在块上加修饰符。这个修饰符应该有个名字（比如：`size` ）和值（ `small`，`normal` 或者 `big` ）。

如上面的例子中，表示一个选中的列表，和一个激活的列表项

```
.list{}
.list.select{}
.list .item{}
.list .item.active{}

.list{}
.list_select{}
.list__item{}
.list__item_active{}
```

# LESS 书写规范

使用 `.less` 后缀的文件来存储变量、混合代码以及最终合并压缩。

| 子 less | 注解 |
| ]]></description>
            <content:encoded><![CDATA[<h1 id="css-bem-书写规范" tabindex="-1">CSS BEM 书写规范 <a class="header-anchor" href="#css-bem-书写规范" aria-label="Permalink to &quot;CSS BEM 书写规范&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="bem命名约定" tabindex="-1">BEM命名约定 <a class="header-anchor" href="#bem命名约定" aria-label="Permalink to &quot;BEM命名约定&quot;">&ZeroWidthSpace;</a></h2>
<p>使用 <a href="http://bem.info/" target="_blank" rel="noreferrer">BEM</a> 命名规范，理论上讲，每行 <code>css</code> 代码都只有一个选择器。</p>
<p>BEM代表 <strong>“块（block）,元素（element）,修饰符（modifier）”</strong>,我们常用这三个实体开发组件。</p>
<p>在选择器中，由以下三种符号来表示扩展的关系：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>-   中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。</span></span>
<span class="line"><span>__  双下划线：双下划线用来连接块和块的子元素</span></span>
<span class="line"><span>_   单下划线：单下划线用来描述一个块或者块的子元素的一种状态</span></span>
<span class="line"><span></span></span>
<span class="line"><span>type-block__element_modifier</span></span></code></pre>
</div><h3 id="块-block" tabindex="-1">块（block） <a class="header-anchor" href="#块-block" aria-label="Permalink to &quot;块（block）&quot;">&ZeroWidthSpace;</a></h3>
<p>一个块是设计或布局的一部分，它有具体且唯一地意义 ，要么是语义上的要么是视觉上的。</p>
<p>在大多数情况下，任何独立的页面元素（或复杂或简单）都可以被视作一个块。它的HTML容器会有一个唯一的CSS类名，也就是这个块的名字。</p>
<p>针对块的CSS类名会加一些前缀（ <code>ui-</code>），这些前缀在CSS中有类似 <a href="./.html">命名空间</a> 的作用。</p>
<p>一个块的正式（实际上是半正式的）定义有下面三个基本原则：</p>
<ol>
<li>CSS中只能使用类名（不能是ID）。</li>
<li>每一个块名应该有一个命名空间（前缀）</li>
<li>每一条CSS规则必须属于一个块。</li>
</ol>
<p>例如：一个自定义列表 <code>.list</code> 是一个块，通常自定义列表是算在 <code>mod</code> 类别的，在这种情况下，一个 <code>list</code> 列表的block写法应该为:</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>.list</span></span></code></pre>
</div><h3 id="元素-element" tabindex="-1">元素（element） <a class="header-anchor" href="#元素-element" aria-label="Permalink to &quot;元素（element）&quot;">&ZeroWidthSpace;</a></h3>
<p>块中的子元素是块的子元素，并且子元素的子元素在 <code>bem</code> 里也被认为是块的直接子元素。<strong>一个块中元素的类名必须用父级块的名称作为前缀。</strong></p>
<p>如上面的例子，<code>li.item</code> 是列表的一个子元素，</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>.list{}</span></span>
<span class="line"><span>.list .item{}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.list{}</span></span>
<span class="line"><span>.list__item{}</span></span></code></pre>
</div><h3 id="修饰符-modifier" tabindex="-1">修饰符（modifier） <a class="header-anchor" href="#修饰符-modifier" aria-label="Permalink to &quot;修饰符（modifier）&quot;">&ZeroWidthSpace;</a></h3>
<p>一个“修饰符”可以理解为一个块的特定状态，标识着它持有一个特定的属性。</p>
<p>用一个例子来解释最好不过了。一个表示按钮的块默认有三个大小：小，中，大。为了避免创建三个不同的块，最好是在块上加修饰符。这个修饰符应该有个名字（比如：<code>size</code> ）和值（ <code>small</code>，<code>normal</code> 或者 <code>big</code> ）。</p>
<p>如上面的例子中，表示一个选中的列表，和一个激活的列表项</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>.list{}</span></span>
<span class="line"><span>.list.select{}</span></span>
<span class="line"><span>.list .item{}</span></span>
<span class="line"><span>.list .item.active{}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.list{}</span></span>
<span class="line"><span>.list_select{}</span></span>
<span class="line"><span>.list__item{}</span></span>
<span class="line"><span>.list__item_active{}</span></span></code></pre>
</div><h1 id="less-书写规范" tabindex="-1">LESS 书写规范 <a class="header-anchor" href="#less-书写规范" aria-label="Permalink to &quot;LESS 书写规范&quot;">&ZeroWidthSpace;</a></h1>
<p>使用 <code>.less</code> 后缀的文件来存储变量、混合代码以及最终合并压缩。</p>
<table>
<thead>
<tr>
<th>子 less</th>
<th>注解</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>lib-base.less</code></td>
<td>预定义的变量，例如颜色、字号、字体</td>
</tr>
<tr>
<td><code>lib-mixins.less</code></td>
<td>用于混合的代码，例如渐变、半透明的混合</td>
</tr>
<tr>
<td><code>lib-reset.less</code></td>
<td>初始化</td>
</tr>
<tr>
<td><code>lib-ui.less</code></td>
<td>颗粒化ui功能</td>
</tr>
<tr>
<td><code>xxx.less</code></td>
<td>模块样式</td>
</tr>
</tbody>
</table>
<p><code>.less</code> 文件的引用顺序会对最终编译的样式的作用域和优先级产生影响，请尽量按照由底层到自定义的顺序来引用。</p>
<h2 id="书写原则" tabindex="-1">书写原则 <a class="header-anchor" href="#书写原则" aria-label="Permalink to &quot;书写原则&quot;">&ZeroWidthSpace;</a></h2>
<h5 id="_1-原则上不会出现2层以上选择器嵌套" tabindex="-1">1. 原则上不会出现<code>2层以上</code>选择器嵌套 <a class="header-anchor" href="#_1-原则上不会出现2层以上选择器嵌套" aria-label="Permalink to &quot;1. 原则上不会出现`2层以上`选择器嵌套&quot;">&ZeroWidthSpace;</a></h5>
<p>使用<code>BEM</code>原则，用命名来解耦，所有类名都为一层，增加效率和复用性</p>
<h5 id="_2-两层选择器嵌套出现在-mod-xxx-item-current子元素的情况-如下" tabindex="-1">2. 两层选择器嵌套出现在<code>.mod-xxx__item_current</code>子元素的情况，如下： <a class="header-anchor" href="#_2-两层选择器嵌套出现在-mod-xxx-item-current子元素的情况-如下" aria-label="Permalink to &quot;2. 两层选择器嵌套出现在`.mod-xxx__item_current`子元素的情况，如下：&quot;">&ZeroWidthSpace;</a></h5>
<p>使用<strong>推荐</strong>的嵌套写法</p>
<p><strong>常规写法：</strong></p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.xxx__item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.xxx__item_current</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">// 嵌套写法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.xxx__item_current</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> .mod-xxx__link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{}</span></span></code></pre>
</div><p><strong>推荐：</strong></p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.xxx__item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.xxx__item_hightlight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.xxx__product-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.xxx__link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.xxx__ming-zi-ke-yi-hen-chang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">// 嵌套写法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.xxx__item_current</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">__</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>对应的HTML结构如下：</p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">ul</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"xxx"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"xxx__item"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>第一项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"xxx__product-name"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>我是名称&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"xxx__ming-zi-ke-yi-hen-chang"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>看类名&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"#"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"xxx__link"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>我是link&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"xxx__item xxx__item_current"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>第二项 且 当前选择项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"xxx__product-name"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>我是名称&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"#"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"xxx__item-link"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>我是link&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"xxx__item xxx__item_hightlight"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>第三项 且 特殊高亮</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"xxx__product-name"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>我是名称&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"#"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"xxx__item-link"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>我是link&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h2 id="bem-解决问题" tabindex="-1">BEM 解决问题 <a class="header-anchor" href="#bem-解决问题" aria-label="Permalink to &quot;BEM 解决问题&quot;">&ZeroWidthSpace;</a></h2>
<p>组件之间的完全解耦，不会造成命名空间的污染，如：<code>.mod-xxx ul li</code> 的写法带来的潜在的嵌套风险。</p>
<h2 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">&ZeroWidthSpace;</a></h2>
<p>BEM 命名会使得 Class 类名变长，但经过 gzip 压缩后这个带宽开销可以忽略不计</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[用技术的眼光看世界]]></title>
            <link>https://super456.github.io/posts/growth-record/other/softSkills/technology-for-the-world.html</link>
            <guid>https://super456.github.io/posts/growth-record/other/softSkills/technology-for-the-world.html</guid>
            <pubDate>Mon, 25 Jan 2021 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="用技术的眼光看世界" tabindex="-1">用技术的眼光看世界 <a class="header-anchor" href="#用技术的眼光看世界" aria-label="Permalink to &quot;用技术的眼光看世界&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;">&ZeroWidthSpace;</a></h2>
<p>这门课程专栏是慕课网的 bobo 老师出品，原课程名叫《用技术人的眼光看世界 • 程序员技术指北》，课程主要讲解是感受技术和这个世界之间的复杂关系。</p>
<p>本文大部分都是摘抄原文提及的观点内容以及自身的思考，简单的做一些记录，以便翻阅进一步理解升华。</p>
<p>很喜欢专栏中开头的一句话：</p>
<blockquote>
<p>学习这件事不在乎有没有人教你，最重要的是在于你自己有没有觉悟和恒心。--法布尔</p>
</blockquote>
<p>很多时候，我自己也会怨天尤人，抱怨环境问题，抱怨自己职业生涯怎么没有遇到一个肯教你的人，可以快速走捷径或者身边怎么没有一帮优秀的人共事。所以，难免学习，坚持不了多久，也很焦虑，很迷茫，不知道自己下一步要怎么走。当然也会抱怨生活过得很槽糕，并没有自己在大学的时候期待的那么美好。可能也许大概是吧，之前没有认清自己，出来工作后才会慢慢看清自己的平凡、自己的平庸，甚至很多事情的无能为力吧。总之，生活还是要继续，无论之前过的怎么的不好，现在开始，重新起航，加油💪~~~</p>
<p><strong>用户价值（🤔，很值得探究的问题） = 新体验 - 旧体验 - 替换成本。</strong></p>
<p>看一个人的成长，至少会看三个方面：能力、热情、思维模式。</p>
<p>一个考量维度是一个人的思维模式。具体到技术岗，很重要的一点，是去看一个同学会不会去思考事情背后的 WHY，会不会去深入了解 WHY 所处的大环境，会不会在想清楚 WHY 后，去分析思考解决路径，在有多条路可选的时候，敢不敢去做取舍权衡，能不能去找到最佳路径和实现策略。WHY - HOW - WHAT - DO 的思维框架下，DO 是最后一步，很关键，但前面三步如果思考不清，光有 DO 是很难拿到优秀结果的。</p>
<h2 id="一、投资人角度" tabindex="-1">一、投资人角度 <a class="header-anchor" href="#一、投资人角度" aria-label="Permalink to &quot;一、投资人角度&quot;">&ZeroWidthSpace;</a></h2>
<p>他们知道某个行业发展的历史与现状；知道这个行业的局限性与发展的可能性；知道潜在的机会在哪里；知道技术有可能从哪个侧面能改变一切。因此，他们的创业项目大多有着明确的方向，即便他们的方向是错误的，毕竟谁也不能预测未来。但正因为他们有目的的行动，即使失败，他们也能更有针对性地从中吸取教训，或者及时调头，向着更好的方向前进。</p>
<h2 id="二、产品角度" tabindex="-1">二、产品角度 <a class="header-anchor" href="#二、产品角度" aria-label="Permalink to &quot;二、产品角度&quot;">&ZeroWidthSpace;</a></h2>
<p>产品说的需求，实现这样一个功能，，我们能实现出来，却不明白这个功能到底有没有意义，别人为什么需要这个功能，这一切的背后是不是有更深层次的原因。</p>
<h2 id="三、技术敏感" tabindex="-1">三、技术敏感 <a class="header-anchor" href="#三、技术敏感" aria-label="Permalink to &quot;三、技术敏感&quot;">&ZeroWidthSpace;</a></h2>
<p>接触的每一个技术，不仅要学习它的方法原理，还要从一个更高的视角去思考——这个技术为什么出现，它出现前世界是怎么样的；它解决了什么样的问题；在这个技术的推动下现状如何；局限性在哪里；改进的方向在哪里，未来又在哪里。</p>
<h2 id="四、思维导图" tabindex="-1">四、思维导图 <a class="header-anchor" href="#四、思维导图" aria-label="Permalink to &quot;四、思维导图&quot;">&ZeroWidthSpace;</a></h2>
<CustomImage src="/growth-record/other/softSkills/yongjishuyanguangkanshijie.png" alt="思维导图" /><h2 id="五、总结" tabindex="-1">五、总结 <a class="header-anchor" href="#五、总结" aria-label="Permalink to &quot;五、总结&quot;">&ZeroWidthSpace;</a></h2>
<p>看完这个专栏，感悟很深，也视野开阔了很多。从自身姿态出发，看到投资人、技术人、产品经理不同角度的理解。学习到了高效学习的方法和一些知识掌握的境界。最重要的是最自己的人生观产生了很大的冲击，发现之前自己真的见识太少了，很多都不懂，感谢遇到了这门课程，可以让自己变得充实强大。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue2 学习笔记]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/vue2-study.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/vue2-study.html</guid>
            <pubDate>Sun, 12 Jul 2020 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vue2-学习笔记" tabindex="-1">Vue2 学习笔记 <a class="header-anchor" href="#vue2-学习笔记" aria-label="Permalink to &quot;Vue2 学习笔记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="思维导图" tabindex="-1">思维导图 <a class="header-anchor" href="#思维导图" aria-label="Permalink to &quot;思维导图&quot;">&ZeroWidthSpace;</a></h2>
<CustomImage src='/growth-record/frame/vue/vue2study01.webp' /><h2 id="学习资料" tabindex="-1">学习资料 <a class="header-anchor" href="#学习资料" aria-label="Permalink to &quot;学习资料&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://segmentfault.com/a/1190000015432258" target="_blank" rel="noreferrer">vue分析之template模板解析AST - 个人文章 - SegmentFault 思否</a></li>
<li><a href="https://segmentfault.com/a/1190000012861862" target="_blank" rel="noreferrer">Vue.nextTick 的原理和用途 - 个人文章 - SegmentFault 思否</a></li>
<li><a href="https://mp.weixin.qq.com/s/elK87NiYZE4VyIFFO8AgDg" target="_blank" rel="noreferrer">Vue 笔记整理16</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Nuxt 开发问题总结]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/nuxt-question-summary.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/nuxt-question-summary.html</guid>
            <pubDate>Sat, 11 Jul 2020 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="nuxt-开发问题总结" tabindex="-1">Nuxt 开发问题总结 <a class="header-anchor" href="#nuxt-开发问题总结" aria-label="Permalink to &quot;Nuxt 开发问题总结&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="内网部署开发环境部分资源加载失败" tabindex="-1">内网部署开发环境部分资源加载失败 <a class="header-anchor" href="#内网部署开发环境部分资源加载失败" aria-label="Permalink to &quot;内网部署开发环境部分资源加载失败&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="一、问题描述" tabindex="-1">一、问题描述 <a class="header-anchor" href="#一、问题描述" aria-label="Permalink to &quot;一、问题描述&quot;">&ZeroWidthSpace;</a></h3>
<p>构建完开发环境之后，打开域名一看，首页一些图片和样式没显示：</p>
<CustomImage src='/growth-record/frame/vue/nuxt-question-01.png' /><p>打开控制台报错信息：</p>
<CustomImage src='/growth-record/frame/vue/nuxt-question-02.png' /><p>查看报错信息是，确定是部分资源请求失败了，所以导致没有显示出来。</p>
<h3 id="二、问题分析" tabindex="-1">二、问题分析 <a class="header-anchor" href="#二、问题分析" aria-label="Permalink to &quot;二、问题分析&quot;">&ZeroWidthSpace;</a></h3>
<p>经过查看调试后发现：服务器磁盘空间满了。因为磁盘空间满了会造成服务访问不可用。</p>
<h3 id="三、解决方法" tabindex="-1">三、解决方法 <a class="header-anchor" href="#三、解决方法" aria-label="Permalink to &quot;三、解决方法&quot;">&ZeroWidthSpace;</a></h3>
<p>所以释放磁盘空间就可以了正常访问了。</p>
<h2 id="build、start-启动服务之后谷歌浏览器无法调试" tabindex="-1">build、start 启动服务之后谷歌浏览器无法调试 <a class="header-anchor" href="#build、start-启动服务之后谷歌浏览器无法调试" aria-label="Permalink to &quot;build、start 启动服务之后谷歌浏览器无法调试&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="一、问题描述-1" tabindex="-1">一、问题描述 <a class="header-anchor" href="#一、问题描述-1" aria-label="Permalink to &quot;一、问题描述&quot;">&ZeroWidthSpace;</a></h3>
<p>为了验证一个内网部署开发环境问题，需要本地构建和启动服务</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 打包项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 启动项目服务监听</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> start</span></span></code></pre>
</div><p>该本地端口的项目已经停止服务了，但是谷歌浏览器可以访问到这个端口的静态服务（都是打包生成好的）</p>
<CustomImage src='/growth-record/frame/vue/nuxt-question-03.png' /><p>然后问题出现了，启动本地这个项目的服务（已经关闭了上图的 start 服务了），修改了代码谷歌浏览器无法正常调试（没有任何效果），控制台 Console 一直报这个提示：</p>
<CustomImage src='/growth-record/frame/vue/nuxt-question-04.png' /><p>重启电脑也没用（因为以为关闭端口后就好了的问题，但是查了电脑进程是没有这个端口服务的），但换个浏览器就可以，才发现是谷歌浏览器的。所以是谷歌浏览器的 PWA 问题。</p>
<h3 id="二、问题分析-1" tabindex="-1">二、问题分析 <a class="header-anchor" href="#二、问题分析-1" aria-label="Permalink to &quot;二、问题分析&quot;">&ZeroWidthSpace;</a></h3>
<p>这个问题是在执行了 <code>yarn build</code> 之后，谷歌浏览器对访问这个项目服务注册了一个类似谷歌应用程序的工具，导致数据一直访问都是之前打包好的。跟谷歌浏览器的 Service Workers 自动设置也有关，保存了 SW 缓存数据，每次这个端口号都是返回这个缓存数据的服务。</p>
<h3 id="三、解决方法-1" tabindex="-1">三、解决方法 <a class="header-anchor" href="#三、解决方法-1" aria-label="Permalink to &quot;三、解决方法&quot;">&ZeroWidthSpace;</a></h3>
<p>1、查看这个应用程序是否存在：</p>
<CustomImage src='/growth-record/frame/vue/nuxt-question-05.png' /><p>2、关闭这个已经存在的应用程序服务：</p>
<CustomImage src='/growth-record/frame/vue/nuxt-question-06.webp' /><h2 id="component-切换组件与插槽问题" tabindex="-1">component 切换组件与插槽问题 <a class="header-anchor" href="#component-切换组件与插槽问题" aria-label="Permalink to &quot;component 切换组件与插槽问题&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="一、问题描述-2" tabindex="-1">一、问题描述 <a class="header-anchor" href="#一、问题描述-2" aria-label="Permalink to &quot;一、问题描述&quot;">&ZeroWidthSpace;</a></h3>
<p>使用 <code>&lt;component&gt;&lt;/component&gt;</code> 根据默认设置 <code>current</code> 变量设置默认赋值及切换不同的组件时候，因为服务端渲染的原因，会报错误，且，组件内使用插槽，会重复渲染两次，但当 <code>current</code> 生命周期内切换就不会了。</p>
<CustomImage src='/growth-record/frame/vue/nuxt-question-07.png' /><p>当 <code>current</code> 有默认值时候服务端报渲染错误（图上），组件内使用插槽，会重复渲染两次（图下）：</p>
<CustomImage src='/growth-record/frame/vue/nuxt-question-08.png' /><h3 id="二、问题分析-2" tabindex="-1">二、问题分析 <a class="header-anchor" href="#二、问题分析-2" aria-label="Permalink to &quot;二、问题分析&quot;">&ZeroWidthSpace;</a></h3>
<p>由于服务端渲染框架问题，页面在服务端就有生命周期执行，页面会开始初始化及数据，所以公共组件的激活组件名参数 <code>current</code> 有默认值的话，会使用渲染，但在客户端生命周期切换这个默认值的话，会在客户端渲染，这个不会报渲染错及插槽被渲染两次问题。</p>
<h3 id="三、解决方法-2" tabindex="-1">三、解决方法 <a class="header-anchor" href="#三、解决方法-2" aria-label="Permalink to &quot;三、解决方法&quot;">&ZeroWidthSpace;</a></h3>
<p>将公共组件的激活组件名参数 <code>current</code> 默认值为空，在服务端就不会先渲染了，然后在客户端生命周期函数设置默认值即可。</p>
<h2 id="客户端渲染报错问题" tabindex="-1">客户端渲染报错问题 <a class="header-anchor" href="#客户端渲染报错问题" aria-label="Permalink to &quot;客户端渲染报错问题&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="一、服务端和客户端所渲染的dom树不同造成错误。" tabindex="-1">一、服务端和客户端所渲染的dom树不同造成错误。 <a class="header-anchor" href="#一、服务端和客户端所渲染的dom树不同造成错误。" aria-label="Permalink to &quot;一、服务端和客户端所渲染的dom树不同造成错误。&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p><a href="https://github.com/yinxin630/blog/issues/31" target="_blank" rel="noreferrer">https://github.com/yinxin630/blog/issues/31</a></p>
</blockquote>
<p><strong>报错内容：</strong>
开发环境报错
[Vue warn]: The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <code>&lt;p&gt;</code>, or missing <code>&lt;tbody&gt;</code>. Bailing hydration and performing full client-side render.</p>
<CustomImage src='/growth-record/frame/vue/nuxt-question-09.png' /><p>dev 环境报错：
TypeError:n.setAttribute is not a function</p>
<CustomImage src='/growth-record/frame/vue/nuxt-question-10.png' /><p><strong>排查手段：</strong>
在相关页面通过关闭一些组件来寻找是否还是报错。一般问题是出现在<strong>v-if</strong>身上，本次错误是有个组件用了 <code>v-if</code> 判断，而该值又是在 <code>process.client</code> 之后才确定是 <code>false</code> 还是 <code>true</code>，导致服务端没渲染出这个，而客户端又有了这个，然后报错了。</p>
<CustomImage src='/growth-record/frame/vue/nuxt-question-11.png' /><CustomImage src='/growth-record/frame/vue/nuxt-question-12.webp' /><p><strong>解决手段：</strong>
<code>v-if</code> 改为 <code>v-show</code> 即可。</p>
<p><strong>总结：</strong></p>
<ol>
<li>使用 Nuxt 时最好不要在 <code>created</code>（包括 <code>created</code>）之前做 DOM 相关内容的判断，这样才能保证服务端和客户端初次渲染时内容一致；</li>
<li>在开发模式下，Vue 将推断客户端生成的虚拟 DOM 树 (virtual DOM tree)，是否与从服务器渲染的 DOM 结构 (DOM structure) 匹配。如果无法匹配，它将退出混合模式，丢弃现有的 DOM 并从头开始渲染。在生产模式下，此检测会被跳过，以避免性能损耗。所以开发模式下只是报错，而 dev 生产模式下直接就加载不出界面了</li>
</ol>
<p><strong>其他：</strong></p>
<ol>
<li>Nuxt 在 ssr 是会执行到 <strong>created</strong> 周期的，然后客户端也会从正常生命周期开始执行；</li>
<li>可以通过判断 <strong>process.client</strong>，来让一些事件只在客户端执行；</li>
</ol>
<p>额外内容可以看上面 Github 博文</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[绝对定位元素布局遮挡问题]]></title>
            <link>https://super456.github.io/posts/growth-record/base/css/absolute-element-shelter.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/css/absolute-element-shelter.html</guid>
            <pubDate>Thu, 21 May 2020 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="绝对定位元素布局遮挡问题" tabindex="-1">绝对定位元素布局遮挡问题 <a class="header-anchor" href="#绝对定位元素布局遮挡问题" aria-label="Permalink to &quot;绝对定位元素布局遮挡问题&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="一、需求场景" tabindex="-1">一、需求场景 <a class="header-anchor" href="#一、需求场景" aria-label="Permalink to &quot;一、需求场景&quot;">&ZeroWidthSpace;</a></h2>
<p>实现一个内容排版如下图：</p>
<CustomImage src='/growth-record/base/css/absolute01.webp' /><h2 id="二、需求分析" tabindex="-1">二、需求分析 <a class="header-anchor" href="#二、需求分析" aria-label="Permalink to &quot;二、需求分析&quot;">&ZeroWidthSpace;</a></h2>
<p>从内容排版来看，这个是一个内容块，包含三个子内容块，右下角那个是图片，实现方式有两种，第一种是设在父级的背景图上，通过定位解决；第二种是设置在内容块，通过绝对定位设置解决。我们通过第二种方法设置。</p>
<h2 id="三、问题描述" tabindex="-1">三、问题描述 <a class="header-anchor" href="#三、问题描述" aria-label="Permalink to &quot;三、问题描述&quot;">&ZeroWidthSpace;</a></h2>
<p>按照第二步分析设置，实现效果如下：</p>
<CustomImage src='/growth-record/base/css/absolute02.webp' /><p>存在绝对定位图片覆盖了同级内容块问题，加了红色边框就是为了突出被覆盖现象。</p>
<h2 id="四、解决方法" tabindex="-1">四、解决方法 <a class="header-anchor" href="#四、解决方法" aria-label="Permalink to &quot;四、解决方法&quot;">&ZeroWidthSpace;</a></h2>
<p>通过设置父级容器的：<code>z-index:1;</code> 然后在设置绝对定位元素层级：<code>z-index:-1;</code> （这里不要单纯设置了这里没有设置父级，不然会不显示的）。这同级红色边框内容就不会被绝对定位元素遮挡了。</p>
<p>因为同级红色边框层级默认会继承父级的层级属性，而绝对定位元素在继承父级层级的同时设置了比同级低一个层级，所以在显示的同时又不遮挡同级元素了。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JavaScript 布尔值为 false 的六种情况]]></title>
            <link>https://super456.github.io/posts/growth-record/base/javascript/boolean-false-six.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/javascript/boolean-false-six.html</guid>
            <pubDate>Wed, 13 May 2020 20:00:00 GMT</pubDate>
            <description><![CDATA[# JavaScript 布尔值为 false 的六种情况
## 一、六种情况
1. `undefined`：全局对象的一个属性，未定义，找不到值时出现；
2. `null`：字面量意思，表示缺少的标识，指示变量未指向任何对象，特指对象的值未设置，把 null 作为尚未创建的对象，也许更好理解。在 API 中，null 常在返回类型应是一个对象，但没有关联的值的地方使用；
3. `false`：布尔值的 `false`，字符串 “false” 的布尔值为 `true`；
4. `0`：数字零，字符串 “0” 的布尔值为 `true`；
5. `NaN`：不是常量，非数字值，无法计算结果时出现，但是 `typeof NaN === "number"` 为 `true`；
6. `""`（双引号）或 `''`（单引号）：空字符串，中间有空格时也是 `true`。

**注意：空数组、空对象、负数值、Infinity转化的布尔值都为** `true`。
```perl
console.log(Boolean([])) // true
console.log(Boolean({})) // true
console.log(Boolean(-1)) // true
console.log(Boolean(Infinity)) // true
```
## 二、不同类型转化布尔值
| **数据类型** | **转为true的值** | **转为false的值** |
| ]]></description>
            <content:encoded><![CDATA[<h1 id="javascript-布尔值为-false-的六种情况" tabindex="-1">JavaScript 布尔值为 false 的六种情况 <a class="header-anchor" href="#javascript-布尔值为-false-的六种情况" aria-label="Permalink to &quot;JavaScript 布尔值为 false 的六种情况&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="一、六种情况" tabindex="-1">一、六种情况 <a class="header-anchor" href="#一、六种情况" aria-label="Permalink to &quot;一、六种情况&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li><code>undefined</code>：全局对象的一个属性，未定义，找不到值时出现；</li>
<li><code>null</code>：字面量意思，表示缺少的标识，指示变量未指向任何对象，特指对象的值未设置，把 null 作为尚未创建的对象，也许更好理解。在 API 中，null 常在返回类型应是一个对象，但没有关联的值的地方使用；</li>
<li><code>false</code>：布尔值的 <code>false</code>，字符串 “false” 的布尔值为 <code>true</code>；</li>
<li><code>0</code>：数字零，字符串 “0” 的布尔值为 <code>true</code>；</li>
<li><code>NaN</code>：不是常量，非数字值，无法计算结果时出现，但是 <code>typeof NaN === &quot;number&quot;</code> 为 <code>true</code>；</li>
<li><code>&quot;&quot;</code>（双引号）或 <code>''</code>（单引号）：空字符串，中间有空格时也是 <code>true</code>。</li>
</ol>
<p><strong>注意：空数组、空对象、负数值、Infinity转化的布尔值都为</strong> <code>true</code>。</p>
<div class="language-perl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Boolean([])) // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Boolean({})) // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Boolean(-1)) // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Boolean(Infinity)) // true</span></span></code></pre>
</div><h2 id="二、不同类型转化布尔值" tabindex="-1">二、不同类型转化布尔值 <a class="header-anchor" href="#二、不同类型转化布尔值" aria-label="Permalink to &quot;二、不同类型转化布尔值&quot;">&ZeroWidthSpace;</a></h2>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>转为true的值</strong></th>
<th><strong>转为false的值</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Boolean</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>String</td>
<td>任何非空字符串</td>
<td><code>''</code>（空字符串）</td>
</tr>
<tr>
<td>Number</td>
<td>任何非零数字值（包括无穷大）</td>
<td><code>0</code> 和 <code>NaN</code></td>
</tr>
<tr>
<td>Object</td>
<td>任何对象</td>
<td><code>null</code></td>
</tr>
<tr>
<td>Undefined</td>
<td>n/a</td>
<td><code>undefined</code></td>
</tr>
</tbody>
</table>
<p>&quot;<code>!!</code>&quot; 将表达式进行强制转化为 bool 值的运算，运算结果为 <code>true</code> 或者 <code>false</code>。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">num) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">num) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '0'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">str) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">str) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// true</span></span></code></pre>
</div><h2 id="三、出现-undefined-情况" tabindex="-1">三、出现 undefined 情况 <a class="header-anchor" href="#三、出现-undefined-情况" aria-label="Permalink to &quot;三、出现 undefined 情况&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>未初始化的变量：变量未定义 或 变量定义了没有赋值  或者 函数形参未赋值</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(a) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// undefined</span></span></code></pre>
</div><ol start="2">
<li>不返回任何结果的函数的调用结果，函数 return 没有值</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> show1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">   return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">show1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> show2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">show2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// undefined</span></span></code></pre>
</div><ol start="3">
<li>不存在的对象属性或方法</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> favoriteMovie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Blade Runner'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">favoriteMovie.actors </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// => undefined</span></span></code></pre>
</div><ol start="4">
<li>越界索引数组元素</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> colors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'blue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'white'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'red'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">colors[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// => undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">colors[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// => undefined</span></span></code></pre>
</div><h2 id="四、出现-null-情况" tabindex="-1">四、出现 null 情况 <a class="header-anchor" href="#四、出现-null-情况" aria-label="Permalink to &quot;四、出现 null 情况&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>在 JS 的 DOM 元素获取中，如果没有获取到指定的元素对象，结果一般是 <code>null</code>。</li>
<li><code>Object.prototype._proto_</code> 的值也是 <code>null</code>。</li>
<li>在正则捕获的时候，如果没有捕获到结果，默认也是 <code>null</code>。</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">[aeiou]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">gi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// null</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[框架选型指南]]></title>
            <link>https://super456.github.io/posts/growth-record/engineering/other/frame-selection.html</link>
            <guid>https://super456.github.io/posts/growth-record/engineering/other/frame-selection.html</guid>
            <pubDate>Tue, 05 May 2020 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="框架选型指南" tabindex="-1">框架选型指南 <a class="header-anchor" href="#框架选型指南" aria-label="Permalink to &quot;框架选型指南&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="一、js-框架选型" tabindex="-1">一、JS 框架选型 <a class="header-anchor" href="#一、js-框架选型" aria-label="Permalink to &quot;一、JS 框架选型&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>团队的技术能力；</li>
<li>应用场景（后台？性能要求？时间要求？）；</li>
<li>成熟的社区，成熟的生态。</li>
</ol>
<p><strong>注意</strong>：</p>
<ol>
<li>根据团队技术能力选择框架，按需取用；</li>
<li>了解框架背后的原理，并思考如何自己实现一个 JS 框架；</li>
<li>多读文档，求助社区，高效开发。</li>
</ol>
<h2 id="二、ui-框架选型" tabindex="-1">二、UI 框架选型 <a class="header-anchor" href="#二、ui-框架选型" aria-label="Permalink to &quot;二、UI 框架选型&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>判断使用场景（PC、移动 Web、小程序、响应式）；</li>
<li>组件丰富，成熟的模板，方便集成；</li>
<li>成熟的社区，成熟的生态。</li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Webpack 基础语法]]></title>
            <link>https://super456.github.io/posts/growth-record/engineering/webpack/intro.html</link>
            <guid>https://super456.github.io/posts/growth-record/engineering/webpack/intro.html</guid>
            <pubDate>Mon, 04 May 2020 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="webpack-基础语法" tabindex="-1">Webpack 基础语法 <a class="header-anchor" href="#webpack-基础语法" aria-label="Permalink to &quot;Webpack 基础语法&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="一、基本命令" tabindex="-1">一、基本命令 <a class="header-anchor" href="#一、基本命令" aria-label="Permalink to &quot;一、基本命令&quot;">&ZeroWidthSpace;</a></h2>
<h4 id="_1-1-安装" tabindex="-1">1.1 安装 <a class="header-anchor" href="#_1-1-安装" aria-label="Permalink to &quot;1.1 安装&quot;">&ZeroWidthSpace;</a></h4>
<p>（1）快速初始化一个项目：<code>npm init -y</code> 其实就是省略了在执行 <code>npm init</code> 下一堆默认 yes 的操作项。</p>
<p>（2）安装 webpack 及 webpack-cli 命令行脚手架工具（在 webpack 4.0 后分两个项目）：<code>yarn add webpack webpack-cli -D</code></p>
<p>（3）安装成功后，在根目录建一个 <code>webpack.config.js</code> 文件，这个是默认读取的配置文件：</p>
<CustomImage src='/growth-record/engineering/webpack/jichuyufa01.webp' /><p>（3）初始化项目文件，根目录新建一个 <code>src</code> 文件夹，在这个文件夹下新建一个 <code>index.js</code> 文件：</p>
<CustomImage src='/growth-record/engineering/webpack/jichuyufa02.webp' /><p>（4）配置 <code>webpack.config.js</code> 文件打包输出文件：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'path'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./src/index.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    path: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'dist'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 打包后输出的位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'my-first-webpack.bundle.js'</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 可以自定义，如服务端代码打包后命名：server.bundle.js , 客户端代码：app.bunlde.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span></code></pre>
</div><p>（5）打包，执行 <code>npx webpack</code> 默认根目录生成 <code>dist</code> 文件夹：</p>
<CustomImage src='/growth-record/engineering/webpack/jichuyufa03.webp' /><p>待更新🚀...</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Nuxt 搭建 i18n 国际化]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/nuxt-i18n.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/nuxt-i18n.html</guid>
            <pubDate>Thu, 30 Apr 2020 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="nuxt-搭建-i18n-国际化" tabindex="-1">Nuxt 搭建 i18n 国际化 <a class="header-anchor" href="#nuxt-搭建-i18n-国际化" aria-label="Permalink to &quot;Nuxt 搭建 i18n 国际化&quot;">&ZeroWidthSpace;</a></h1>
<h3 id="一、需求背景" tabindex="-1">一、需求背景 <a class="header-anchor" href="#一、需求背景" aria-label="Permalink to &quot;一、需求背景&quot;">&ZeroWidthSpace;</a></h3>
<p>因公司发展，业务需求，需要支持会员端的英文版本展示，所以 PC 端和移动端需要支持语言环境切换的选项供用户选择。</p>
<h3 id="二、技术分析" tabindex="-1">二、技术分析 <a class="header-anchor" href="#二、技术分析" aria-label="Permalink to &quot;二、技术分析&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="_2-1-nuxt-介绍" tabindex="-1">2.1. Nuxt 介绍： <a class="header-anchor" href="#_2-1-nuxt-介绍" aria-label="Permalink to &quot;2.1. Nuxt 介绍：&quot;">&ZeroWidthSpace;</a></h4>
<p>Nuxt.js 是一个基于 Vue.js 的通用应用框架。通过对客户端/服务端基础架构的抽象组织，Nuxt.js 主要关注的是应用的 <strong>UI 渲染</strong>。我们的目标是创建一个灵活的应用框架，你可以基于它初始化新项目的基础结构代码，或者在已有 Node.js 项目中使用 Nuxt.js。</p>
<p>Nuxt.js 预设了利用 Vue.js 开发<strong>服务端渲染</strong>的应用所需要的各种配置。除此之外，我们还提供了一种命令叫：<code>nuxt generate</code> ，为基于 Vue.js 的应用提供生成对应的静态站点的功能。</p>
<p>我们相信这个命令所提供的功能，是向开发集成各种微服务（Microservices）的 Web 应用迈开的新一步。
作为框架，Nuxt.js 为 <code>客户端/服务端</code> 这种典型的应用架构模式提供了许多有用的特性，例如异步数据加载、中间件支持、布局支持等。</p>
<h4 id="_2-2-i18n-介绍" tabindex="-1">2.2. i18n 介绍： <a class="header-anchor" href="#_2-2-i18n-介绍" aria-label="Permalink to &quot;2.2. i18n 介绍：&quot;">&ZeroWidthSpace;</a></h4>
<p>具有动态 json 存储的轻量级简单翻译模块。 支持 Node.js 应用程序，并且应与任何暴露了传入 res 和 req 对象的 <code>app.use()</code> 方法的框架（例如 express，restify 以及更多）一起使用。 在应用程序和模板中使用通用的__（'...'）语法。 将语言文件存储在与 webtranslateit json 格式兼容的 json 文件中。 首次在您的应用中使用时，即时添加新字符串。 无需额外的解析。</p>
<h4 id="_2-3-nuxt-和-i18n-结合" tabindex="-1">2.3. Nuxt 和 i18n 结合： <a class="header-anchor" href="#_2-3-nuxt-和-i18n-结合" aria-label="Permalink to &quot;2.3. Nuxt 和 i18n 结合：&quot;">&ZeroWidthSpace;</a></h4>
<p>因为 Nuxt 是属于 SSR 应用框架，跟 Vue-Cli 脚手架不同的是，前端代码再服务端运行解析，然后返回给我浏览器呈现效果，所以很多 JavaScript 代码和 DOM 操作需要特定的环境才能执行，未能能让 Nuxt 应用国际化，官方文档给出的解决方案是通过插件引入方式实现国际化程序初始化配置（plugins），用户根据选项切换语言环境时，通过url路径新增语言标识符切换当前路径，执行中间件（middleware）改变i18n语言配置项，和 Vuex 的 store 存储，来达到语言切换的目的。</p>
<p>如图看一下 Nuxt 生命周期理解一下：</p>
<CustomImage src='/growth-record/frame/vue/nust-i18n.svg' /><h3 id="三、解决步骤" tabindex="-1">三、解决步骤： <a class="header-anchor" href="#三、解决步骤" aria-label="Permalink to &quot;三、解决步骤：&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="_3-1-简单说明" tabindex="-1">3.1. 简单说明： <a class="header-anchor" href="#_3-1-简单说明" aria-label="Permalink to &quot;3.1. 简单说明：&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>安装 vue-i18n 并且创建 <code>store.js</code>（Vuex 状态管理）文件；</li>
<li>创建一个（middleware）中间件，用来管理不同的语言；</li>
<li>创建不同语言的 json 文件作为语言包（例如： <code>~locales/en.json</code>）；</li>
<li>在 pages 文件夹下创建文件，并进行翻译。</li>
</ul>
<h4 id="_3-2-详细步骤" tabindex="-1">3.2. 详细步骤： <a class="header-anchor" href="#_3-2-详细步骤" aria-label="Permalink to &quot;3.2. 详细步骤：&quot;">&ZeroWidthSpace;</a></h4>
<p><strong>注：此处以 photon-member-fe 项目创建过程为例进行说明。</strong></p>
<ul>
<li>（1）先安装 vue-i18n:</li>
</ul>
<p><code>yarn add vue-i18n``--save</code></p>
<ul>
<li>（2）配置 store 文件：</li>
</ul>
<p><code>store/state.js</code>:（配置默认值）</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	fallbackLocale: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'zh-cn'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 默认显示语言</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	locale: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'zh-cn'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 当前配置访问语言</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	locales: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'en'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'zh-cn'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 配置可选语言</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ...</span></span></code></pre>
</div><p><code>store/mutations.js</code>: （配置修改语言参数事件）</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  SET_LANG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">payload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (state.locales.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(payload)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">			state.locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> payload</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	},</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span></span></code></pre>
</div><ul>
<li>（3）配置 plugins 文件：</li>
</ul>
<p>plugins 目录下新建 <code>i18n.js</code> 文件及配置如下：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> VueI18n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue-i18n'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '../lang'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(VueI18n)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">fallbackLocale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">locale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> state</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	app.i18n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> VueI18n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		locale,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    fallbackLocale, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 设置默认选中语言</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		messages,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		silentTranslationWarn: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 是否取消本地化失败时输出的警告。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	app.i18n.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">		// 根据选中的语言切换路径转换调用方法 ，可在页面调用转换路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (app.i18n.locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> app.i18n.fallbackLocale) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">			return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `/${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `/${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">i18n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">locale</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}/${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ul>
<li>（4）配置语言 lang 文件：</li>
</ul>
<p>在 client 目录下新建 lang 文件夹，文件夹下新增 <code>index.js</code> 文件，配置语言参数对应包文件内容：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> enLocale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'element-ui/lib/locale/lang/en'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> zhLocale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'element-ui/lib/locale/lang/zh-CN'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> enLocal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './en'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> zhLocal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './zh-CN'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">	'zh-cn'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">zhLocal,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">zhLocale</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	en: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enLocal,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">enLocale</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在 lang 文件夹下 新增 <code>zh-CN.js</code> 文件和 <code>en.js</code> 文件，两者 JSON 数据格式，两者内容 key 字段对齐，如：
<code>zh-CN.js</code>:</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	lang: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'zh-cn'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	app: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		confirm: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">			systemIncompatibilityTips: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'温馨提示'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">			systemIncompatibilityTipsContent:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">				'您好！当前使用的 IE 浏览器可能导致部分系统功能不能正常使用，建议使用 IE 10 及以上或更换其他浏览器，感谢您的配合！'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		},</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span></span></code></pre>
</div><p><code>en.js</code>:</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	lang: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'en'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	app: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		confirm: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">			systemIncompatibilityTips: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Tips'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">			systemIncompatibilityTipsContent: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Hello! The currently used IE browser may cause some system functions to not work properly. It is recommended to use IE 10 or above or replace other browsers. Thank you for your cooperation!'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		},</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span></span></code></pre>
</div><ul>
<li>（5）配置 middleware 中间件：</li>
</ul>
<p>在 middleware 文件夹下 新建 <code>i18n.js</code> 文件（配置url语言切换路径）：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">	isHMR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">	app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">	store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">	route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">	params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">	error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">	redirect</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> defaultLocale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> app.i18n.fallbackLocale</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">	// If middleware is called from hot module replacement, ignore it</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (isHMR) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">	// Get locale from params</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> params.lang </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> defaultLocale</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">	// 404/500 报错翻译问题，获取不到 params.lang 参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">params.lang) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		store.state.locales.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (route.fullPath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`/${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">element</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}/`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">				locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> element</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">store.state.locales.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(locale)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">			message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'This page could not be found.'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">			statusCode: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">404</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">	// Set locale 需注意 ，vuex 页面刷新后状态将不再保存，若需保存，可使用 localstorage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'SET_LANG'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, locale)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	app.i18n.locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> store.state.locale</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">	// If route is /&#x3C;defaultLocale>/... -> redirect to /...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> defaultLocale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> route.fullPath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> defaultLocale) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> toReplace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '^/'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> defaultLocale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (route.fullPath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> defaultLocale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '/'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '/'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> re</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(toReplace)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> redirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">			route.fullPath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(re, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><ul>
<li>（6）配置 <code>nuxt.config.js</code> 文件：</li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 引入初始化 i18n 配置：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">	plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">		'@/plugins/i18n'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   ],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 配置中间件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">		middleware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'checkHome'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'i18n'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">		extendRoutes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(routes, resolve) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">			routes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">				path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">				children: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">					// 不带路径, 默认访问首页</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">					{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">						path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">						redirect: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/login'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">					}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">				]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">			})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	},</span></span></code></pre>
</div><ul>
<li>（7）修改 pages 文件夹下相应的页面：</li>
</ul>
<p>在 pages 文件夹下新建 <code>_lang</code> 文件夹，之后在此文件夹下新建对应的页面文件（访问路径一致），例如：
默认访问中文页面登录页：<code>localhost:8121/login</code>
英文访问路径：<code>localhost:8121/en/login</code>
👇创建对应 login 文件
<code>@/pages/_lang/login.vue</code></p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">import Index from '~/pages/login'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">export default Index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>组件中显示语言配置，如：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>{{ $t('app.label.login') }}</span></span></code></pre>
</div><p>切换语言环境：可以通过 <code>location.pathname</code> 设置 url。</p>
<ul>
<li>配置 request 请求链接 header 带语言参数：</li>
</ul>
<p><code>plugins/route.js</code> (只会在浏览器执行)：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">redirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">	// 设置语言</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (process.client) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'helpers__lang'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, app.store.state.locale)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ...</span></span></code></pre>
</div><p><code>plugins/api/request.js</code> (配置请求头语言参数)：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">	// 设置请求语言</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (process.client) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		services.defaults.headers.helpers__lang </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'helpers__lang'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  ...</span></span></code></pre>
</div><p>js 文件引用国际化：
<code>utils/i18n.js</code> (配置国际化模块化)：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> VueI18n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'vue-i18n'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '@/store/state.js'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '@/lang'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().fallbackLocale </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 设置默认语言环境</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//设置缓存里的语言环境设置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (process.client) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> location.pathname.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/en/'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'en'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'zh-cn'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> i18n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> VueI18n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	locale,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	messages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i18n</span></span></code></pre>
</div><p>引用的 js 文件：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i18n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '@/utils/i18n'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> emailStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i18n.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'app.validator.email'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div><h3 id="四、总结归纳" tabindex="-1">四、总结归纳： <a class="header-anchor" href="#四、总结归纳" aria-label="Permalink to &quot;四、总结归纳：&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>切换语言，不刷新页面。【只需要在切换的时候，设置 store 中的 locale 值为对应的 language 值，不做其他操作】，目前做不到，不管是 Vue-cli 还是 Nuxt 都是需要的；</li>
<li>刷新页面之后，还是当前语言。【这个需要将设置好的语言保存起来，放到本地缓存中，是个不错的选择，但是不利于分享，因为 Nuxt 是 SSR 原因，更好的是通过 url 设置语言环境去设置页面显示的语言】；</li>
<li>根据浏览器的语言，显示语言。【使用 <code>navigator.language</code> 来获取浏览器默认语言，之后将其赋值给为 store 中的 locale 值，可以尝试做】；</li>
<li>显示何种语言，是由 <code>$i18n.locale</code> 决定的。</li>
</ol>
<p>官方网站案例：</p>
<ul>
<li><a href="https://zh.nuxtjs.org/examples/i18n" target="_blank" rel="noreferrer">https://zh.nuxtjs.org/examples/i18n</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[容易被忽略的知识点]]></title>
            <link>https://super456.github.io/posts/growth-record/base/javascript/ignore-knowledge.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/javascript/ignore-knowledge.html</guid>
            <pubDate>Sun, 26 Apr 2020 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="容易被忽略的知识点" tabindex="-1">容易被忽略的知识点 <a class="header-anchor" href="#容易被忽略的知识点" aria-label="Permalink to &quot;容易被忽略的知识点&quot;">&ZeroWidthSpace;</a></h1>
<ol>
<li>for 循环中的 let 有一个单独的作用域吗？</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(i), i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'abc'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 输出</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// abc</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// abc</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// abc</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 3</span></span></code></pre>
</div><p>证明 <code>let i = 5</code> 跟 for 循环体的 <code>let i = 0</code> 是不在同一个作用域，否则会报错。再看，for 循环里面的 <code>let i = 0</code> 和 <code>let i = 'abc'</code> 不在同一个作用域，否则也会报错。</p>
<ol start="2">
<li>对象的解构赋值可以取到继承的属性吗？</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'xiaoming'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj1, obj2);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">name </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// "xiaoming"</span></span></code></pre>
</div><ol start="3">
<li>将已声明的变量结构赋值需要加括号？</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 错误的写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{x} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// Uncaught SyntaxError: Unexpected token '='</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">因为 JavaScript 引擎会将 {x} 理解为一个代码块，从而发生语法错误，需要将整个结构语句放在圆括号里。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确的写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({x} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">});</span></span></code></pre>
</div><ol start="4">
<li>函数的 length 属性是指函数的默认参数个数，如果默认参数里面有默认值，会出现什么问题？</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {}).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {}).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">上面代码中，length 属性的返回值，等于函数的参数个数减去指定了默认值的参数个数。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {}).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {}).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">为什么要提这个知识点呢，因为函数柯里化通用函数里，需要用到函数默认参数的个数，也就是length属性，所以如果参数设置了默认值，会影响函数柯里化的结果。</span></span></code></pre>
</div><ol start="5">
<li>不知道的 <code>Array.from</code> 用法。</li>
</ol>
<p><code>Array.from</code> 方法用于将两类对象转为真正的数组：</p>
<ul>
<li>类似数组的对象（array-like-object）；</li>
<li>可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）;</li>
</ul>
<p>定义提到了 Array.from 可以将类数组对象（注：类数组对象可以理解为有 length 属性的对象）可以转换为数组，那么如下：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// [ undefined, undefined, undefined ]</span></span></code></pre>
</div><p><code>Array.from</code> 还可以接受第二个参数，作用类似于数组的 <code>map</code> 方法。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(arrayLike, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 等同于</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(arrayLike).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">], (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x)</span></span></code></pre>
</div><p>如果 <code>map</code> 函数里面用到了 <code>this</code> 关键字，还可以传入 <code>Array.from</code> 的第三个参数，用来绑定 <code>this</code>。</p>
<ol start="5">
<li>数组的 <code>includes</code> 方法和 <code>indexOf</code> 方法都可以判断是否数组中存在某一元素，它们有什么区别？</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><code>indexOf</code> 方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。二是，它内部使用严格相等运算符 <code>（===）</code> 进行判断，这会导致对 <code>NaN</code> 的误判。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// -1</span></span></code></pre>
</div><p><code>includes</code> 使用的是不一样的判断算法，就没有这个问题。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// true</span></span></code></pre>
</div><ol start="6">
<li>数组的 <code>join()</code> 和 <code>toString()</code> 方法，如果数组中包括 <code>undefined</code> 或 <code>null</code> ，会被处理成空字符串。</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// "1,,2"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()]() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// "1,,2"</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// "1,,2"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()]() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// "1,,2"</span></span></code></pre>
</div><ol start="7">
<li>遍历对象操作跟可枚举性的设置。</li>
</ol>
<ul>
<li>可枚举性：</li>
</ul>
<p>对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。<code>Object.getOwnPropertyDescriptor</code> 方法可以获取该属性的描述对象。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { foo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getOwnPropertyDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'foo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//    value: 123,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//    writable: true,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//    enumerable: true,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//    configurable: true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//  }</span></span></code></pre>
</div><p>描述对象的 <code>enumerable</code> 属性，称为“可枚举性”，如果该属性为 <code>false</code>，就表示某些操作会忽略当前属性。</p>
<ul>
<li>属性的遍历（ES6 一共有 5 种方法可以遍历对象的属性）：</li>
</ul>
<p>（1）<code>for...in</code> 循环遍历对象自身的和继承的可枚举属性（不含 <code>Symbol</code> 属性）。</p>
<p>（2）<code>Object.keys(obj)</code> 返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 <code>Symbol</code> 属性）的键名。</p>
<p>（3）<code>Object.getOwnPropertyNames(obj)</code> 返回一个数组，包含对象自身的所有属性（不含 <code>Symbol</code> 属性，但是包括不可枚举属性）的键名。</p>
<p>（4）<code>Object.getOwnPropertySymbols(obj)</code> 返回一个数组，包含对象自身的所有 <code>Symbol</code> 属性的键名。</p>
<p>（5）<code>Reflect.ownKeys(obj)</code> 返回一个数组，包含对象自身的所有键名，不管键名是 <code>Symbol</code> 或字符串，也不管是否可枚举。</p>
<p><strong>以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则：</strong>
（1）首先遍历所有数值键，按照数值升序排列。
（2）其次遍历所有字符串键，按照加入时间升序排列。
（3）最后遍历所有 <code>Symbol</code> 键，按照加入时间升序排列。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ownKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()]:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, b:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, a:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// ['2', '10', 'b', 'a', Symbol()]</span></span></code></pre>
</div><p>上面代码中，<code>Reflect.ownKeys</code> 方法返回一个数组，包含了参数对象的所有属性。这个数组的属性次序是这样的，首先是数值属性 2 和 10，其次是字符串属性 b 和 a，最后是 <code>Symbol</code> 属性。</p>
<ol start="8">
<li><code>WeakSet</code> 和 <code>Set</code> 的区别？</li>
</ol>
<p>区别两点：</p>
<ul>
<li>第一点，<code>WeakSet</code>的成员只能是对象类型，而不能是其他类型的值。</li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ws</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> WeakSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">wa.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//错误</span></span></code></pre>
</div><ul>
<li>第二点，<code>WeakSet</code> 中的对象都是弱引用。</li>
</ul>
<p>同上，<code>WeakMap</code> 和 <code>Map</code> 的区别也有两点：</p>
<ul>
<li>第一点，<code>WeakMap</code> 只接受对象作为键名（<code>null</code> 除外），不接受其他类型的值作为键名。</li>
<li>第二点，<code>WeakMap</code> 的键名所指向的对象，不计入垃圾回收机制。</li>
</ul>
<ol start="9">
<li>对象的属性赋值，一般情况下这个值会赋值到对象上，但有一种情况会赋值到这个对象的原型上。</li>
</ol>
<p>为什么下面的代码输出 1？</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({}, handler);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> myObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(myObj, proxy);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">myObj.foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'bar'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>
</div><p>原因在于，如果 <code>myObj</code> 的原型部署了 <code>set</code> 方法，并且 <code>myObj</code> 上没有 <code>foo</code> 属性，此时，给 <code>myObj</code> 的 <code>foo</code>属性赋值的话，会先看 <code>myObj</code> 对象上是否有 <code>foo</code> 属性，没有的话回去它的原型去找，此时就触发了 <code>proxy</code>的 <code>set</code> 方法，所以打印了 <code>1</code>。</p>
<ol start="10">
<li>Promise 中的 resolve 函数如果报错，Promise 对象抛出的错误不会传递到外层代码。</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> someAsyncThing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 下面一行会报错，因为x没有声明</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">someAsyncThing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'everything is great'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// Uncaught (in promise) ReferenceError: x is not defined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 123</span></span></code></pre>
</div><ul>
<li>上面代码中，<code>someAsyncThing</code> 函数产生的  <code>Promise</code> 对象，内部有语法错误。浏览器运行到这一行，会打印出错误提示 <code>ReferenceError: x is not defined</code>，但是不会退出进程、终止脚本执行，<code>2</code> 秒之后还是会输出 <code>123</code>。</li>
<li>这就是说，<code>Promise</code> 内部的错误不会影响到 <code>Promise</code> 外部的代码，通俗的说法就是 <code>Promise</code> 会吃掉错误。</li>
</ul>
<ol start="11">
<li>如何通过 <code>generator</code> 函数控制流程管理？</li>
</ol>
<p>代码如下，如何自动执行以下的 <code>generator</code> 函数（这种流程管理的代码适合同步任务，我认为可以称作 JavaScript 的职责责任链模式，非常方便流程管理）</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> runTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> yield</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> step1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(value1);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> yield</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> step2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(value2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (e) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 自动执行代码如下：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">scheduler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">runTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(initialValue));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> scheduler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> taskObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> task.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(task.value);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 如果 Generator 函数未结束，就继续调用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">taskObj.done) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    task.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> taskObj.value</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    scheduler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(task);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CSS 实战手册学习]]></title>
            <link>https://super456.github.io/posts/growth-record/base/css/practical-manual.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/css/practical-manual.html</guid>
            <pubDate>Sat, 25 Apr 2020 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="css-实战手册学习" tabindex="-1">CSS 实战手册学习 <a class="header-anchor" href="#css-实战手册学习" aria-label="Permalink to &quot;CSS 实战手册学习&quot;">&ZeroWidthSpace;</a></h1>
<p>根据书籍《CSS 实战手册》总结学习记录：</p>
<CustomImage src='/growth-record/base/css/cssshizhanshouce.png' /><p>待更新🚀...</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[两个模块列自适应布局问题]]></title>
            <link>https://super456.github.io/posts/growth-record/base/css/tow-block-adaptive.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/css/tow-block-adaptive.html</guid>
            <pubDate>Sat, 28 Mar 2020 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="两个模块列自适应布局问题" tabindex="-1">两个模块列自适应布局问题 <a class="header-anchor" href="#两个模块列自适应布局问题" aria-label="Permalink to &quot;两个模块列自适应布局问题&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="一、实现效果" tabindex="-1">一、实现效果 <a class="header-anchor" href="#一、实现效果" aria-label="Permalink to &quot;一、实现效果&quot;">&ZeroWidthSpace;</a></h2>
<CustomImage src='/growth-record/base/css/blockadaptive01.webp' /><p>两个模块下排版列分开，左边内容固定宽度，右边内容适配宽度排列。</p>
<p>在小屏幕排列如下：</p>
<CustomImage src='/growth-record/base/css/blockadaptive02.webp' /><h2 id="二、实现分析" tabindex="-1">二、实现分析 <a class="header-anchor" href="#二、实现分析" aria-label="Permalink to &quot;二、实现分析&quot;">&ZeroWidthSpace;</a></h2>
<p>就是利用左右两边模块固定同一父容器（设置：<code>display:flex;</code>），左边模块固定宽度，右边模块自适应可用空间（不考虑适配到移动端屏幕）。</p>
<h2 id="三、实现代码" tabindex="-1">三、实现代码 <a class="header-anchor" href="#三、实现代码" aria-label="Permalink to &quot;三、实现代码&quot;">&ZeroWidthSpace;</a></h2>
<p>一开始想用<code>width</code> 自带的两个属性值设置（<code>fill-available</code> 充分利用可用空间，<code>fit-content</code> 收缩到合适），但是兼容性问题不乐观，放弃了这个想法。</p>
<p>直接使用：</p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"contact-content__item"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"contact-content__item__left"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    服务宗旨：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"contact-content__item__right"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    引导用户快速完成实名认证、开卡、绑定店铺；费率调整、增卡、活动了解，帮助用户增收提效。引导用户快速完成实名认证、开卡、绑定店铺；费率调整、增卡、活动了解，帮助用户增收提效。引导用户快速完成实名认证、开卡、绑定店铺；费率调整、增卡、活动了解，帮助用户增收提效。引导用户快速完成实名认证、开卡、绑定店铺；费率调整、增卡、活动了解，帮助用户增收提效。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.contact-content__item {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  line-height: 30px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  display: flex;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  .contact-content__item__left {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  	width: 80px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  .contact-content__item__right {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  	width: 100%;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[浏览器兼容性方案调研]]></title>
            <link>https://super456.github.io/posts/growth-record/engineering/other/browser-compatibility-research.html</link>
            <guid>https://super456.github.io/posts/growth-record/engineering/other/browser-compatibility-research.html</guid>
            <pubDate>Sun, 22 Mar 2020 20:00:00 GMT</pubDate>
            <description><![CDATA[# 浏览器兼容性方案调研
### 一、背景描述
所谓的浏览器兼容性问题，是指因为不同的浏览器对同一段代码有不同的解析，造成页面显示效果不统一的情况。在大多数情况下，我们的需求是，无论用户用什么浏览器来查看我们的网站或者登陆我们的系统，都应该是统一的显示效果。所以浏览器的兼容性问题是前端开发人员经常会碰到和必须要解决的问题。

市场上浏览器种类很多，不同浏览器的内核也不尽相同，所以各个浏览器对网页的解析存在一定的差异。浏览器内核主要分为两种，一是渲染引擎，另一个是 JS 引擎，内核更加倾向于说渲染引擎。

常见的浏览器内核可以分四种：Trident、Gecko、Blink、Webkit：

| **浏览器** | **内核** |
| ]]></description>
            <content:encoded><![CDATA[<h1 id="浏览器兼容性方案调研" tabindex="-1">浏览器兼容性方案调研 <a class="header-anchor" href="#浏览器兼容性方案调研" aria-label="Permalink to &quot;浏览器兼容性方案调研&quot;">&ZeroWidthSpace;</a></h1>
<h3 id="一、背景描述" tabindex="-1">一、背景描述 <a class="header-anchor" href="#一、背景描述" aria-label="Permalink to &quot;一、背景描述&quot;">&ZeroWidthSpace;</a></h3>
<p>所谓的浏览器兼容性问题，是指因为不同的浏览器对同一段代码有不同的解析，造成页面显示效果不统一的情况。在大多数情况下，我们的需求是，无论用户用什么浏览器来查看我们的网站或者登陆我们的系统，都应该是统一的显示效果。所以浏览器的兼容性问题是前端开发人员经常会碰到和必须要解决的问题。</p>
<p>市场上浏览器种类很多，不同浏览器的内核也不尽相同，所以各个浏览器对网页的解析存在一定的差异。浏览器内核主要分为两种，一是渲染引擎，另一个是 JS 引擎，内核更加倾向于说渲染引擎。</p>
<p>常见的浏览器内核可以分四种：Trident、Gecko、Blink、Webkit：</p>
<table>
<thead>
<tr>
<th><strong>浏览器</strong></th>
<th style="text-align:left"><strong>内核</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>IE</td>
<td style="text-align:left">Trident 内核，也成为 IE 内核</td>
</tr>
<tr>
<td>Chrome</td>
<td style="text-align:left">Webkit 内核，现在是 Blink 内核</td>
</tr>
<tr>
<td>Firefox</td>
<td style="text-align:left">Gecko 内核，俗称 Firefox 内核</td>
</tr>
<tr>
<td>Safari</td>
<td style="text-align:left">Webkit 内核</td>
</tr>
<tr>
<td>Opera</td>
<td style="text-align:left">最初是自己的 Presto 内核，后来加入谷歌大军，从 Webkit 又到了 Blink 内核</td>
</tr>
<tr>
<td>360</td>
<td style="text-align:left">IE+Chrome 双内核</td>
</tr>
<tr>
<td>猎豹</td>
<td style="text-align:left">IE+Chrome 双内核</td>
</tr>
<tr>
<td>百度</td>
<td style="text-align:left">IE 内核</td>
</tr>
<tr>
<td>QQ</td>
<td style="text-align:left">Trident（兼容模式）+Webkit（高速模式）</td>
</tr>
</tbody>
</table>
<h3 id="二、问题原因" tabindex="-1">二、问题原因 <a class="header-anchor" href="#二、问题原因" aria-label="Permalink to &quot;二、问题原因&quot;">&ZeroWidthSpace;</a></h3>
<p>原因一：由于浏览器种类众多，不同的浏览器其内核亦不尽相同，故各个浏览器对网页的解析有一定出入，这也是导致浏览器兼容问题出现的主要原因，我们的网页需要在主流浏览器上正常运行，就需要做好浏览器兼容。</p>
<p>原因二：鉴于公司当前项目使用的框架为 Vue，而 Vue 不支持 IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有<a href="https://caniuse.com/#feat=es5" target="_blank" rel="noreferrer">兼容 ECMAScript 5 的浏览器</a>（注：支持 IE9 ，实际上并不是指的完美兼容 IE9，而是说在版本较低的浏览器，仍然最大限度保证功能完整性）。</p>
<CustomImage src='/growth-record/engineering/other/browser-compatibility.webp' /><p>所以，从维护成本考虑，减少不必要的开发时间及针对做好兼容性的项目（跨境会员端 PC 和移动端、跨境 Admin 端），集中的解决 IE 上存在的问题（JS 事件处理和 CSS 样式问题，<strong>注：当前所有项目兼容到 IE 10 、IE 11及 Edge 版本，考虑到IE 9 中 JS 和 CSS 部分兼容，而且需要修改的内容太多问题</strong>）。</p>
<h3 id="三、解决方案" tabindex="-1">三、解决方案 <a class="header-anchor" href="#三、解决方案" aria-label="Permalink to &quot;三、解决方案&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="_1-常见css兼容性问题" tabindex="-1">1. 常见CSS兼容性问题 <a class="header-anchor" href="#_1-常见css兼容性问题" aria-label="Permalink to &quot;1. 常见CSS兼容性问题&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>不同浏览器的标签默认的外补丁( margin )和内补丁 (padding) 不同：</li>
</ul>
<p>【done】：css 里增加通配符:<code>* { margin: 0; padding: 0; } </code></p>
<ul>
<li>IE6 双边距问题；在 IE6 中设置了 float , 同时又设置 margin , 就会出现边距问题：</li>
</ul>
<p>【done】：设置 <code>display:inline;</code></p>
<ul>
<li>当标签的高度设置小于 10px，在 IE6、IE7 中会超出自己设置的高度：</li>
</ul>
<p>【done】：超出高度的标签设置 <code>overflow:hidden;</code>,或者设置 line-height 的值小于你的设置高度。</p>
<ul>
<li>图片默认有间距：</li>
</ul>
<p>【done】：使用float 为img 布局。</p>
<ul>
<li>IE9 以下浏览器不能使用 opacity：</li>
</ul>
<p>【done】： <code>opacity: 0.5;filter: alpha(opacity = 50);filter: progid:DXImageTransform.Microsoft.Alpha(style = 0, opacity = 50); </code></p>
<ul>
<li>边距重叠问题；当相邻两个元素都设置了margin 边距时，margin 将取最大值，舍弃最小值：</li>
</ul>
<p>【done】：为了不让边重叠，可以给子元素增加一个父级元素，并设置父级元素为 <code>overflow:hidden;</code></p>
<ul>
<li><code>cursor:hand;</code>  显示手型在 Safari 上不支持：</li>
</ul>
<p>【done】：统一使用 <code>cursor:pointer;</code></p>
<ul>
<li>两个块级元素，父元素设置了<code>overflow:auto；</code>子元素设置了<code>position:relative ;</code>且高度大于父元素，在IE6、IE7 会被隐藏而不是溢出:</li>
</ul>
<p>【done】：父级元素设置<code> position:relative;</code></p>
<ul>
<li>BFC 解决边距重叠问题：</li>
</ul>
<p>当相邻元素都设置了 <code>margin</code> 边距时，<code>margin</code> 将取最大值，舍弃小值。为了不让边距重叠，可以给子元素加一个父元素，并设置该父元素为 BFC：<code>overflow: hidden;</code></p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"box"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"box"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Lorem ipsum dolor sit.&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"overflow: hidden;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Lorem ipsum dolor sit.&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Lorem ipsum dolor sit.&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>总结：
（1）浏览器 CSS 样式初始化（推荐使用 Normalize.css）；
（2）浏览器私有属性（建议使用自动化插件）：</p>
<ul>
<li>-moz 代表 Firefox 浏览器私有属性；</li>
<li>-ms 代表 IE 浏览器私有属性；</li>
<li>-webkit 代表 Chrome、Safari 私有属性；</li>
<li>-o 代表 Opera 私有属性；</li>
</ul>
<p>对于私有属性的顺序要注意，把标准写法放到最后，兼容性写法放到前面：</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-webkit-transform: rotate(-3deg); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/*为 Chrome/Safari*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-moz-transform: rotate(-3deg); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/*为 Firefox*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-ms-transform: rotate(-3deg); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/*为 IE*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-o-transform: rotate(-3deg); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/*为 Opera*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">transform: rotate(-3deg);</span></span></code></pre>
</div><ul>
<li>CSS Hack（针对不同的浏览器或不同版本写特定的 CSS 样式，这种针对不同的浏览器/不同版本写相应的CSS code 的过程，<strong>注：IE6/7/8 才需要</strong>）：</li>
</ul>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;!--[if &#x3C;keywords>? IE &#x3C;version>?]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    代码块，可以是 html，css，js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;![</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">endif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]--</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">if后面跟的条件共包含6种选择方式：是否、大于、大于或等于、小于、小于或等于、非指定版本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">是否：指定是否IE或IE某个版本。关键字：空</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">大于：选择大于指定版本的IE版本。关键字：gt（greater than）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">大于或等于：选择大于或等于指定版本的 IE 版本。关键字：gte（greater than or equal）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">小于：选择小于指定版本的 IE 版本。关键字：lt（less than）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">小于或等于：选择小于或等于指定版本的 IE 版本。关键字：lte（less than or equal）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">非指定版本：选择除指定版本外的所有 IE 版本。关键字：!</span></span></code></pre>
</div><p>IE10 及以上版本已将条件注释特性移除，使用时需注意：</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;!--[if </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">IE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">你在非IE中将看不到我的身影&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;![</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">endif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]--</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;!--[if </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">IE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    .test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;![</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">endif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]--</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;!--[if lt IE 9]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> src="//cdn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.bootcss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.com/html5shiv/3</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.2/html5shiv</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.js"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> src="//cdn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.bootcss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.com/respond.js/1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.2/respond</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.js"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;![</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">endif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]--</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span></code></pre>
</div><p>属性级 Hack：</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">selector{&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">hack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:value&#x3C;hack>?;}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">取值：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">_：选择 IE6 及以下。连接线（中划线）（-）亦可使用，为了避免与某些带中划线的属性混淆，所以使用下划线（_）更为合适。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">：选择 IE7 及以下。诸如：（</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">）与（</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">#）之类的均可使用，不过业界对（*）的认知度更高</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">9：选择 IE6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">0：选择 IE8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 和 Opera15 以下的浏览器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">如在不同的 IE 浏览器中设置不同的颜色，注意顺序：低版本的兼容性写法放到最后：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#090\9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* For IE8+ */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#f00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* For IE7 and earlier */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  _</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#ff0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* For IE6 and earlier */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>选择符级 Hack（针对一些页面表现不一致或者需要特殊对待的浏览器，在 CSS 选择器前加上一些只有某些特定浏览器才能识别的前缀进行 Hack。）：</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;hack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> selector{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">sRules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">常见的选择符级 Hack 有：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">*html</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">前缀只对 IE6 生效</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">html</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">前缀只对 IE7 生效</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@media</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> screen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{..</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">.}只对</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> IE6/7 生效</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">screen {</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; }}只对 IE8 有效</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">screen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">screen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; }}只对 IE6/7/8 有效</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@media</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> screen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; }} 只对 IE8/9/10 有效</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">min-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">gray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; }} 只对 IE9/10 有效</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">-ms-high-contrast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: active), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">-ms-high-contrast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: none) {</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">orange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; }} 只对 IE10 有效</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">如：</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">*</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D"> html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> .test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#090</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; }       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* For IE6 and earlier */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D"> html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> .test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#ff0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; }     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* For IE7 */</span></span></code></pre>
</div><ul>
<li>Element -ui 组件样式问题需要单独解决。</li>
</ul>
<h4 id="_2-常见js兼容性问题" tabindex="-1">2. 常见JS兼容性问题 <a class="header-anchor" href="#_2-常见js兼容性问题" aria-label="Permalink to &quot;2. 常见JS兼容性问题&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>团队编写的文档——<a href="https://www.yuque.com/photonpay_fe/qrq3cg/ie9yr6" target="_blank" rel="noreferrer">主流浏览器 JS 事件兼容写法</a></li>
</ul>
<h4 id="_3-引入插件配置编译器或垫片库" tabindex="-1">3. 引入插件配置编译器或垫片库 <a class="header-anchor" href="#_3-引入插件配置编译器或垫片库" aria-label="Permalink to &quot;3. 引入插件配置编译器或垫片库&quot;">&ZeroWidthSpace;</a></h4>
<p>CSS 样式兼容：</p>
<ul>
<li>使用 <a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noreferrer">Normalize.css </a></li>
<li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noreferrer">Autoprefixer</a> 或 <a href="https://www.postcss.com.cn/" target="_blank" rel="noreferrer">PostCSS</a>（<a href="https://zh.nuxtjs.org/api/configuration-build/#postcss" target="_blank" rel="noreferrer">Nuxt 有单独配置</a>）</li>
</ul>
<p>JS 兼容：</p>
<ul>
<li>使用 babel-polyfil、es6-promisel，<a href="https://zh.nuxtjs.org/api/configuration-build/#babel" target="_blank" rel="noreferrer">注意 Nuxt 有单独的项目配置</a>，但官方建议默认预设，自己安装配置的好;</li>
<li><a href="https://cli.vuejs.org/zh/guide/browser-compatibility.html#browserslist" target="_blank" rel="noreferrer">Vue-Cli 构建工程配置浏览器兼容性</a>；</li>
</ul>
<h3 id="四、参考链接" tabindex="-1">四、参考链接 <a class="header-anchor" href="#四、参考链接" aria-label="Permalink to &quot;四、参考链接&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="https://yoxjs.github.io/yox/#/" target="_blank" rel="noreferrer">Yox：一个框架搞定所有浏览器（包括低版本 IE 和移动端浏览器），节省学习和人力成本</a></li>
<li><a href="http://www.uxys.com/html/Vue/20180717/25326.html" target="_blank" rel="noreferrer">Vue 脚手架搭建项目的兼容性配置详解</a></li>
<li><a href="https://juejin.im/post/5b2868b46fb9a00e6f65f87e" target="_blank" rel="noreferrer">Vue 兼容 IE9 的全面解决方案</a></li>
<li><a href="https://blog.csdn.net/xustart7720/article/details/73604651?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noreferrer">WEB前端开发人员须知的常见浏览器兼容问题及解决技巧</a></li>
<li><a href="https://www.codercto.com/a/89756.html" target="_blank" rel="noreferrer">Nuxt.js 项目搭建配置踩坑</a></li>
</ul>
<p><strong>注：以上内容需要团队成员共同维护、补充内容，与公司业务相辅相成，解决更多实际问题。</strong></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[异常监控管理工具调研]]></title>
            <link>https://super456.github.io/posts/growth-record/engineering/tools/anomaly-monitoring-research.html</link>
            <guid>https://super456.github.io/posts/growth-record/engineering/tools/anomaly-monitoring-research.html</guid>
            <pubDate>Sun, 22 Mar 2020 20:00:00 GMT</pubDate>
            <description><![CDATA[# 异常监控管理工具调研
### 一、需求背景：
当我们完成一个业务系统的上线时，总是要观察线上的运行情况，查看日志发现问题并进行优化迭代。因为测试永远无法做到 100% 覆盖，用户也不会总是按照我们所预期的进行操作，因此我们需要在系统异常时主动对其进行收集上报，以制定解决方案。

当生产环境中产生了一个 Bug 时，如何做到迅速报警，找到问题原因，修复后又如何在线上验证？此时我们需要一个高效的错误监控系统。

前端监控包括**行为监控**、**异常监控**、**性能监控**等，目前本文主要讨论异常监控实现方式，后续在进行扩展。

<CustomImage src='/growth-record/engineering/tools/monitoring01.webp' />

### 二、异常分析：
前端异常是指在用户使用 Web 应用时无法快速得到符合预期结果的情况，不同的异常带来的后果程度不同，轻则引起用户使用不悦，重则导致产品无法使用，使用户丧失对产品的认可。

一个监控系统，大致可以分为四个阶段：日志采集、日志存储、统计与分析、报告和警告。

| **分类** | **说明** |
| ]]></description>
            <content:encoded><![CDATA[<h1 id="异常监控管理工具调研" tabindex="-1">异常监控管理工具调研 <a class="header-anchor" href="#异常监控管理工具调研" aria-label="Permalink to &quot;异常监控管理工具调研&quot;">&ZeroWidthSpace;</a></h1>
<h3 id="一、需求背景" tabindex="-1">一、需求背景： <a class="header-anchor" href="#一、需求背景" aria-label="Permalink to &quot;一、需求背景：&quot;">&ZeroWidthSpace;</a></h3>
<p>当我们完成一个业务系统的上线时，总是要观察线上的运行情况，查看日志发现问题并进行优化迭代。因为测试永远无法做到 100% 覆盖，用户也不会总是按照我们所预期的进行操作，因此我们需要在系统异常时主动对其进行收集上报，以制定解决方案。</p>
<p>当生产环境中产生了一个 Bug 时，如何做到迅速报警，找到问题原因，修复后又如何在线上验证？此时我们需要一个高效的错误监控系统。</p>
<p>前端监控包括<strong>行为监控</strong>、<strong>异常监控</strong>、<strong>性能监控</strong>等，目前本文主要讨论异常监控实现方式，后续在进行扩展。</p>
<CustomImage src='/growth-record/engineering/tools/monitoring01.webp' /><h3 id="二、异常分析" tabindex="-1">二、异常分析： <a class="header-anchor" href="#二、异常分析" aria-label="Permalink to &quot;二、异常分析：&quot;">&ZeroWidthSpace;</a></h3>
<p>前端异常是指在用户使用 Web 应用时无法快速得到符合预期结果的情况，不同的异常带来的后果程度不同，轻则引起用户使用不悦，重则导致产品无法使用，使用户丧失对产品的认可。</p>
<p>一个监控系统，大致可以分为四个阶段：日志采集、日志存储、统计与分析、报告和警告。</p>
<table>
<thead>
<tr>
<th><strong>分类</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>采集阶段</td>
<td>收集异常日志，先在本地做一定的处理，采取一定的方案上报到服务器。</td>
</tr>
<tr>
<td>存储阶段</td>
<td>后端接收前端上报的异常日志，经过一定处理，按照一定的存储方案存储。</td>
</tr>
<tr>
<td>分析阶段</td>
<td>分为机器自动分析和人工分析。机器自动分析，通过预设的条件和算法，对存储的日志信息进行统计和筛选，发现问题，触发报警。人工分析，通过提供一个可视化的数据面板，让系统用户可以看到具体的日志数据，根据信息，发现异常问题根源。</td>
</tr>
<tr>
<td>报警阶段</td>
<td>分为告警和预警。告警按照一定的级别自动报警，通过设定的渠道，按照一定的触发规则进行。预警则在异常发生前，提前预判，给出警告。</td>
</tr>
</tbody>
</table>
<p>根据异常代码的后果的程度，对前端异常的表现分为如下几类：出错、呆滞、损坏、假死、崩溃。</p>
<table>
<thead>
<tr>
<th><strong>分类</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>出错</td>
<td>界面呈现的内容与用户预期的内容不符，例如点击进入非目标界面，数据不准确，出现的错误提示不可理解，界面错位，提交后跳转到错误界面等情况。这类异常出现时，虽然产品本身功能还能正常使用，但用户无法达成自己目标。</td>
</tr>
<tr>
<td>呆滞</td>
<td>界面出现操作后没有反应的现象，例如点击按钮无法提交，提示成功后无法继续操作。这类异常出现时，产品已经存在界面级局部不可用现象。</td>
</tr>
<tr>
<td>损坏</td>
<td>界面出现无法实现操作目的的现象，例如点击无法进入目标界面，点击无法查看详情内容等。这类异常出现时，应用部分功能无法被正常使用。</td>
</tr>
<tr>
<td>假死</td>
<td>界面出现卡顿，无法对任何功能进行使用的现象。例如用户无法登陆导致无法使用应用内功能，由于某个遮罩层阻挡且不可关闭导致无法进行任何后续操作。这类异常出现时，用户很可能杀死应用。</td>
</tr>
<tr>
<td>崩溃</td>
<td>应用出现经常性自动退出或无法操作的现象。例如间歇性crash，网页无法正常加载或加载后无法进行任何操作。这类异常持续出现，将直接导致用户流失，影响产品生命力。</td>
</tr>
</tbody>
</table>
<h4 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">&ZeroWidthSpace;</a></h4>
<p>前端产生异常的原因主要分5类：</p>
<table>
<thead>
<tr>
<th><strong>原因</strong></th>
<th><strong>案例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>逻辑错误</td>
<td>1)    业务逻辑判断条件错误；</td>
</tr>
<tr>
<td>2)    事件绑定顺序错误；</td>
<td></td>
</tr>
<tr>
<td>3)    调用栈时序错误；</td>
<td></td>
</tr>
<tr>
<td>4)    错误的操作 js 对象。</td>
<td></td>
</tr>
<tr>
<td>数据类型错误</td>
<td>1)    将 Null 视作对象读取 Property；</td>
</tr>
<tr>
<td>2)    将 Undefined 视作数组进行遍历；</td>
<td></td>
</tr>
<tr>
<td>3)    将字符串形式的数字直接用于加运算；</td>
<td></td>
</tr>
<tr>
<td>4)    函数参数未传。</td>
<td></td>
</tr>
<tr>
<td>语法句法错误</td>
<td></td>
</tr>
<tr>
<td>网络错误</td>
<td>1)    慢；</td>
</tr>
<tr>
<td>2)    服务端未返回数据但仍 200，前端按正常进行数据遍历；</td>
<td></td>
</tr>
<tr>
<td>3)    提交数据时网络中断；</td>
<td></td>
</tr>
<tr>
<td>4)    服务端 500 错误时前端未做任何错误处理。</td>
<td></td>
</tr>
<tr>
<td>系统错误</td>
<td>1)    内存不够用；</td>
</tr>
<tr>
<td>2)    磁盘塞满；</td>
<td></td>
</tr>
<tr>
<td>3)    壳不支持 API；</td>
<td></td>
</tr>
<tr>
<td>4)    不兼容。</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="三、异常采集" tabindex="-1">三、异常采集： <a class="header-anchor" href="#三、异常采集" aria-label="Permalink to &quot;三、异常采集：&quot;">&ZeroWidthSpace;</a></h3>
<p>当异常出现的时候，我们需要知道异常的具体信息，根据异常的具体信息来决定采用什么样的解决方案。在采集异常信息时，可以遵循 4W 原则：WHO did WHAT and get WHICH exception in WHICH environment?</p>
<table>
<thead>
<tr>
<th><strong>分类</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>用户信息</td>
<td>出现异常时该用户的信息，例如该用户在当前时刻的状态、权限等，以及需要区分用户可多终端登录时，异常对应的是哪一个终端。</td>
</tr>
<tr>
<td>行为信息</td>
<td>用户进行什么操作时产生了异常：所在的界面路径；执行了什么操作；操作时使用了哪些数据；当时的 API 吐了什么数据给客户端；如果是提交操作，提交了什么数据；上一个路径；上一个行为日志记录 ID 等。</td>
</tr>
<tr>
<td>异常信息</td>
<td>产生异常的代码信息：用户操作的 DOM 元素节点；异常级别；异常类型；异常描述；代码 Stack 信息等。</td>
</tr>
<tr>
<td>环境信息</td>
<td>网络环境；设备型号和标识码；操作系统版本；客户端版本；API 接口版本等。</td>
</tr>
<tr>
<td>例如：</td>
<td></td>
</tr>
</tbody>
</table>
<CustomImage src='/growth-record/engineering/tools/monitoring02.webp' /><h3 id="四、异常捕获" tabindex="-1">四、异常捕获： <a class="header-anchor" href="#四、异常捕获" aria-label="Permalink to &quot;四、异常捕获：&quot;">&ZeroWidthSpace;</a></h3>
<p>前端捕获异常分为全局捕获和单点捕获。全局捕获代码集中，易于管理；单点捕获作为补充，对某些特殊情况进行捕获，但分散，不利于管理。</p>
<p>a、全局捕获
通过全局的接口，将捕获代码集中写在一个地方，可以利用的接口有：</p>
<ul>
<li>window.addEventListener(‘error’) / window.addEventListener(“unhandledrejection”) / document.addEventListener(‘click’) 等；</li>
<li>框架级别的全局监听，例如 Aixos 中使用 Interceptor 进行拦截，Vue、React 都有自己的错误采集接口；</li>
<li>通过对全局函数进行封装包裹，实现在在调用该函数时自动捕获异常；</li>
<li>对实例方法重写（Patch），在原有功能基础上包裹一层，例如对 console.error 进行重写，在使用方法不变的情况下也可以异常捕获。</li>
</ul>
<p>b、单点捕获
在业务代码中对单个代码块进行包裹，或在逻辑流程中打点，实现有针对性的异常捕获：</p>
<ul>
<li>try…catch；</li>
<li>专门写一个函数来收集异常信息，在异常发生时，调用该函数；</li>
<li>专门写一个函数来包裹其他函数，得到一个新函数，该新函数运行结果和原函数一模一样，只是在发生异常时可以捕获异常。</li>
</ul>
<p>c、跨域脚本异常：
由于浏览器安全策略限制，跨域脚本报错时，无法直接获取错误的详细信息，只能得到一个 Script Error。例如，我们会引入第三方依赖，或者将自己的脚本放在 CDN 时。解决 Script Error 的方法：</p>
<p>方案一：</p>
<ul>
<li>将 js 内联到 HTML 中；</li>
<li>将 js 文件与 HTML 放在同域下；</li>
</ul>
<p>方案二：</p>
<ul>
<li>为页面上 script 标签添加 crossorigin 属性；</li>
<li>被引入脚本所在服务端响应头中，增加 Access-Control-Allow-Origin 来支持跨域资源共享。</li>
</ul>
<h3 id="五、异常整理与上报方案" tabindex="-1">五、异常整理与上报方案： <a class="header-anchor" href="#五、异常整理与上报方案" aria-label="Permalink to &quot;五、异常整理与上报方案：&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="_5-1-异常级别" tabindex="-1">5.1. 异常级别： <a class="header-anchor" href="#_5-1-异常级别" aria-label="Permalink to &quot;5.1. 异常级别：&quot;">&ZeroWidthSpace;</a></h4>
<p>一般而言，我们会将收集信息的级别分为 info，warn，error 等，并在此基础上进行扩展。
当我们监控到异常发生时，可以将该异常划分到“重要——紧急”模型中分为 A、B、C、D 四个等级。有些异常，虽然发生了，但是并不影响用户的正常使用，用户其实并没有感知到，虽然理论上应该修复，但是实际上相对于其他异常而言，可以放在后面进行处理。</p>
<CustomImage src='/growth-record/engineering/tools/monitoring03.webp' /><p>在收集异常阶段，可根据第二节划分的异常后果来判断异常的严重程度，在发生异常时选择对应的上报方案进行上报。</p>
<h4 id="_5-2-异常整理" tabindex="-1">5.2. 异常整理： <a class="header-anchor" href="#_5-2-异常整理" aria-label="Permalink to &quot;5.2. 异常整理：&quot;">&ZeroWidthSpace;</a></h4>
<p>（1）前端日志存储：
单纯一条异常日志并不能帮助我们快速定位问题根源，找到解决方案。但如果要收集用户的行为日志，又要采取一定的技巧，而不能用户每一个操作后，就立即将该行为日志传到服务器，对于具有大量用户同时在线的应用，如果用户一操作就立即上传日志，无异于对日志服务器进行 DDOS 攻击。因此，我们先将这些日志存储在用户客户端本地，达到一定条件之后，再同时打包上传一组日志。</p>
<p>我们不可能直接将这些日志用一个变量保存起来，这样会挤爆内存，而且一旦用户进行刷新操作，这些日志就丢失了，因此，我们自然而然想到前端数据持久化方案。</p>
<p>目前，可用的持久化方案可选项也比较多了，主要有：Cookie、localStorage、sessionStorage、IndexedDB、webSQL 、FileSystem 等等。那么该如何选择呢？我们通过一个表来进行对比：</p>
<CustomImage src='/growth-record/engineering/tools/monitoring04.webp' /><p>综合之后，IndexedDB 是最好的选择，它具有容量大、异步的优势，异步的特性保证它不会对界面的渲染产生阻塞。而且 IndexedDB 是分库的，每个库又分 store，还能按照索引进行查询，具有完整的数据库管理思维，比localStorage 更适合做结构化数据管理。但是它有一个缺点，就是 API 非常复杂，不像 localStorage 那么简单直接。针对这一点，我们可以使用 hello-indexeddb 这个工具，它用 Promise 对复杂 API 进行来封装，简化操作，使 IndexedDB 的使用也能做到 localStorage 一样便捷。另外，IndexedDB 是被广泛支持的 HTML5 标准，兼容大部分浏览器，因此不用担心它的发展前景。</p>
<CustomImage src='/growth-record/engineering/tools/monitoring05.webp' /><p>上图展示了前端存储日志的流程和数据库布局。当一个事件、变动、异常被捕获之后，形成一条初始日志，被立即放入暂存区（indexedDB 的一个 store），之后主程序就结束了收集过程，后续的事只在 webworker 中发生。在一个 webworker 中，一个循环任务不断从暂存区中取出日志，对日志进行分类，将分类结果存储到索引区中，并对日志记录的信息进行丰富，将最终将会上报到服务端的日志记录转存到归档区。而当一条日志在归档区中存在的时间超过一定天数之后，它就已经没有价值了，但是为了防止特殊情况，它被转存到回收区，再经历一段时间后，就会被从回收区中清除。</p>
<p>（2）整理日志：
主要就是根据日志特征，整理出不同的索引。我们在收集日志时，会给每一条日志打上一个 type，以此进行分类，并创建索引，同时通过 object-hashcode 计算每个 log 对象的 hash 值，作为这个 log 的唯一标志。</p>
<ul>
<li>将所有日志记录按时序存放在归档区，并将新入库的日志加入索引；</li>
<li>BatchIndexes：批量上报索引（包含性能等其他日志），可一次批量上报 100 条；</li>
<li>MomentIndexes：即时上报索引，一次全部上报；</li>
<li>FeedbackIndexes：用户反馈索引，一次上报一条；</li>
<li>BlockIndexes：区块上报索引，按异常/错误（traceId，requestId）分块，一次上报一块；</li>
<li>上报完成后，被上报过的日志对应的索引删除；</li>
<li>3 天以上日志进入回收区；</li>
<li>7 天以上的日志从回收区清除；</li>
</ul>
<p>rquestId：同时追踪前后端日志。由于后端也会记录自己的日志，因此，在前端请求 API 的时候，默认带上requestId，后端记录的日志就可以和前端日志对应起来。</p>
<p>traceId：追踪一个异常发生前后的相关日志。当应用启动时，创建一个 traceId，直到一个异常发生时，刷新traceId。把一个 traceId 相关的 requestId 收集起来，把这些 requestId 相关的日志组合起来，就是最终这个异常相关的所有日志，用来对异常进行复盘。</p>
<CustomImage src='/growth-record/engineering/tools/monitoring06.webp' /><p>上图举例展示了如何利用 traceId 和 requestId 找出和一个异常相关的所有日志。在上图中，hash4 是一条异常日志，我们找到 hash4 对应的 traceId 为 traceId2，在日志列表中，有两条记录具有该 traceId，但是 hash3 这条记录并不是一个动作的开始，因为 hash3 对应的 requestId 为 reqId2，而 reqId2 开始于 hash2，因此，我们实际上要把 hash2 也加入到该异常发生的整个复盘备选记录中。总结起来就是，我们要找出同一个 traceId 对应的所有 requestId 对应的日志记录。
我们把这些和一个异常相关的所有日志集合起来，称为一个 block，再利用日志的 hash 集合，得出这个 block 的hash，并在索引区中建立索引，等待上报。</p>
<p>（3）上报日志：
上报日志也在 webworker 中进行，为了和整理区分，可以分两个 worker。上报的流程大致为：在每一个循环中，从索引区取出对应条数的索引，通过索引中的 hash，到归档区取出完整的日志记录，再上传到服务器。
按照上报的频率（重要紧急度）可将上报分为四种：及时上报、批量上报、区块上报、用户主动提交；</p>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>及时上报</td>
<td>收集到日志后，立即触发上报函数。仅用于A类异常（异常级别）。而且由于受到网络不确定因素影响，A 类日志上报需要有一个确认机制，只有确认服务端已经成功接收到该上报信息之后，才算完成。否则需要有一个循环机制，确保上报成功。</td>
</tr>
<tr>
<td>批量上报</td>
<td>将收集到的日志存储在本地，当收集到一定数量之后再打包一次性上报，或者按照一定的频率（时间间隔）打包上传。这相当于把多次合并为一次上报，以降低对服务器的压力。</td>
</tr>
<tr>
<td>区块上报</td>
<td>将一次异常的场景打包为一个区块后进行上报。它和批量上报不同，批量上报保证了日志的完整性，全面性，但会有无用信息。而区块上报则是针对异常本身的，确保单个异常相关的日志被全部上报。</td>
</tr>
<tr>
<td>用户主动提交</td>
<td>在界面上提供一个按钮，用户主动反馈 bug。这有利于加强与用户的互动。或者当异常发生时，虽然对用户没有任何影响，但是应用监控到了，弹出一个提示框，让用户选择是否愿意上传日志。这种方案适合涉及用户隐私数据时。</td>
</tr>
</tbody>
</table>
<CustomImage src='/growth-record/engineering/tools/monitoring07.webp' /><p>上图展示了上报的一个大致流程。对于合并上报这种情况，一次的数据量可能要十几k，对于日 pv 大的站点来说，产生的流量还是很可观的。所以有必要对数据进行压缩上报。lz-string 是一个非常优秀的字符串压缩类库，兼容性好，代码量少，压缩比高，压缩时间短，压缩率达到惊人的 60%。但它基于LZ78压缩，如果后端不支持解压，可选择 gzip 压缩，一般而言后端会默认预装 gzip，因此，选择 gzip 压缩数据也可以，工具包 pako 中自带了 gzip 压缩，可以尝试使用。</p>
<h3 id="六、异常日志接收、存储与分析" tabindex="-1">六、异常日志接收、存储与分析： <a class="header-anchor" href="#六、异常日志接收、存储与分析" aria-label="Permalink to &quot;六、异常日志接收、存储与分析：&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="_6-1-接入层与消息队列" tabindex="-1">6.1. 接入层与消息队列： <a class="header-anchor" href="#_6-1-接入层与消息队列" aria-label="Permalink to &quot;6.1. 接入层与消息队列：&quot;">&ZeroWidthSpace;</a></h4>
<p>一般通过提供独立的日志服务器接收客户端日志，接收过程中，要对客户端日志内容的合法性、安全性等进行甄别，防止被人攻击。而且由于日志提交一般都比较频繁，多客户端同时并发的情况也常见。通过消息队列将日志信息逐一处理后写入到数据库进行保存也是比较常用的方案。</p>
<CustomImage src='/growth-record/engineering/tools/monitoring08.webp' /><p>上图为腾讯 BetterJS 的架构图，其中“接入层”和“推送中心”就是这里提到的接入层和消息队列。BetterJS 将整个前端监控的各个模块进行拆分，推送中心承担了将日志推送到存储中心进行存储和推送给其他系统（例如告警系统）的角色，但我们可以把接收日志阶段的队列独立出来看，在接入层和存储层之间做一个过渡。</p>
<h4 id="_6-2-日志存储系统" tabindex="-1">6.2. 日志存储系统： <a class="header-anchor" href="#_6-2-日志存储系统" aria-label="Permalink to &quot;6.2. 日志存储系统：&quot;">&ZeroWidthSpace;</a></h4>
<p>对于小应用，单库单表加优化就可以应付。一个成规模的应用，如果要提供更标准高效的日志监控服务，常常需要在日志存储架构上下一些功夫。目前业界已经有比较完备的日志存储方案，主要有：Hbase 系，Dremel 系，Lucene 系等。总体而言，日志存储系统主要面对的问题是数据量大，数据结构不规律，写入并发高，查询需求大等。一般一套日志存储系统，要解决上面这些问题，就要解决写入的缓冲，存储介质按日志时间选择，为方便快速读取而设计合理的索引系统等等。</p>
<h4 id="_6-3-搜索" tabindex="-1">6.3. 搜索： <a class="header-anchor" href="#_6-3-搜索" aria-label="Permalink to &quot;6.3. 搜索：&quot;">&ZeroWidthSpace;</a></h4>
<p>日志的最终目的是要使用，由于一般日志的体量都非常大，因此，要在庞大的数据中找到需要的日志记录，需要依赖比较好的搜索引擎。Splunk 是一套成熟的日志存储系统，但它是付费使用的。按照 Splunk 的框架，Elk 是 Splunk 的开源实现，Elk 是 ElasticSearch、Logstash、Kibana 的结合，ES 基于 Lucene 的存储、索引的搜索引擎；logstash 是提供输入输出及转化处理插件的日志标准化管道；Kibana 提供可视化和查询统计的用户界面。</p>
<h3 id="七、异常监控告警及部署方案" tabindex="-1">七、异常监控告警及部署方案： <a class="header-anchor" href="#七、异常监控告警及部署方案" aria-label="Permalink to &quot;七、异常监控告警及部署方案：&quot;">&ZeroWidthSpace;</a></h3>
<p>对异常进行统计和分析只是基础，而在发现异常时可以推送和告警，甚至做到自动处理，才是一个异常监控系统应该具备的能力。</p>
<h4 id="_7-1-自定义触发条件的告警" tabindex="-1">7.1. 自定义触发条件的告警： <a class="header-anchor" href="#_7-1-自定义触发条件的告警" aria-label="Permalink to &quot;7.1. 自定义触发条件的告警：&quot;">&ZeroWidthSpace;</a></h4>
<p>a. 监控实现
当日志信息进入接入层时，就可以触发监控逻辑。当日志信息中存在较为高级别的异常时，也可以立即出发告警。告警消息队列和日志入库队列可以分开来管理，实现并行。</p>
<p>对入库日志信息进行统计，对异常信息进行告警。对监控异常进行响应。所谓监控异常，是指：有规律的异常一般而言都比较让人放心，比较麻烦的是突然之间的异常。例如在某一时段突然频繁接收到 D 级异常，虽然 D 级异常是不紧急一般重要，但是当监控本身发生异常时，就要提高警惕。</p>
<p>b. 自定义触发条件
除了系统开发时配置的默认告警条件，还应该提供给日志管理员可配置的自定义触发条件。</p>
<ul>
<li>日志内含有什么内容时；</li>
<li>日志统计达到什么度、量时；</li>
<li>向符合什么条件的用户告警；</li>
</ul>
<h4 id="_7-2-推送渠道" tabindex="-1">7.2. 推送渠道： <a class="header-anchor" href="#_7-2-推送渠道" aria-label="Permalink to &quot;7.2. 推送渠道：&quot;">&ZeroWidthSpace;</a></h4>
<p>可选择的途径有很多，例如邮件、短信、微信、电话、钉钉。</p>
<h4 id="_7-3-推送频率" tabindex="-1">7.3. 推送频率： <a class="header-anchor" href="#_7-3-推送频率" aria-label="Permalink to &quot;7.3. 推送频率：&quot;">&ZeroWidthSpace;</a></h4>
<p>针对不同级别的告警，推送的频率也可以进行设定。低风险告警可以以报告的形式一天推送一次，高风险告警 10 分钟循环推送，直到处理人手动关闭告警开关。</p>
<h4 id="_7-4-自动报表" tabindex="-1">7.4. 自动报表： <a class="header-anchor" href="#_7-4-自动报表" aria-label="Permalink to &quot;7.4. 自动报表：&quot;">&ZeroWidthSpace;</a></h4>
<p>对于日志统计信息的推送，可以做到自动生成日报、周报、月报、年报并邮件发送给相关群组。</p>
<h4 id="_7-5-自动产生-bug-工单" tabindex="-1">7.5. 自动产生 Bug 工单： <a class="header-anchor" href="#_7-5-自动产生-bug-工单" aria-label="Permalink to &quot;7.5. 自动产生 Bug 工单：&quot;">&ZeroWidthSpace;</a></h4>
<p>当异常发生时，系统可以调用工单系统API实现自动生成 Bug 单，工单关闭后反馈给监控系统，形成对异常处理的追踪信息进行记录，在报告中予以展示。</p>
<h4 id="_7-6-异常修复" tabindex="-1">7.6. 异常修复： <a class="header-anchor" href="#_7-6-异常修复" aria-label="Permalink to &quot;7.6. 异常修复：&quot;">&ZeroWidthSpace;</a></h4>
<p>SourceMap 使用，前端代码大部分情况都是经过压缩后发布的，上报的 stack 信息需要还原为源码信息，才能快速定位源码进行修改。</p>
<p>发布时，只部署 js 脚本到服务器上，将 SourceMap 文件上传到监控系统，在监控系统中展示 stack 信息时，利用 SourceMap 文件对 stack 信息进行解码，得到源码中的具体信息。</p>
<p>但是这里有一个问题，就是 SourceMap 必须和正式环境的版本对应，还必须和 Git 中的某个 commit 节点对应，这样才能保证在查异常的时候可以正确利用 stack 信息，找到出问题所在版本的代码。这些可以通过建立 CI任务，在集成化部署中增加一个部署流程，以实现这一环节。</p>
<h4 id="_7-7-从告警到预警" tabindex="-1">7.7. 从告警到预警： <a class="header-anchor" href="#_7-7-从告警到预警" aria-label="Permalink to &quot;7.7. 从告警到预警：&quot;">&ZeroWidthSpace;</a></h4>
<p>预警的本质是，预设可能出现异常的条件，当触发该条件时异常并没有真实发生，因此，可以赶在异常发生之前对用户行为进行检查，及时修复，避免异常或异常扩大。</p>
<p>其实就是一个统计聚类的过程。将历史中发生异常的情况进行统计，从时间、地域、用户等不同维度加以统计，找出规律，并将这些规律通过算法自动加入到预警条件中，当下次触发时，及时预警。</p>
<h4 id="_7-8-智能修复" tabindex="-1">7.8. 智能修复： <a class="header-anchor" href="#_7-8-智能修复" aria-label="Permalink to &quot;7.8. 智能修复：&quot;">&ZeroWidthSpace;</a></h4>
<p>自动修复错误。例如，前端要求接口返回数值，但接口返回了数值型的字符串，那么可以有一种机制，监控系统发送正确数据类型模型给后端，后端在返回数据时，根据该模型控制每个字段的类型。</p>
<h4 id="_7-9-部署" tabindex="-1">7.9. 部署： <a class="header-anchor" href="#_7-9-部署" aria-label="Permalink to &quot;7.9. 部署：&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>多客户端：一个用户在不同终端上登录，或者一个用户在登录前和登录后的状态。通过特定算法生成 requestId，通过该 requestId 可以确定某个用户在独立客户端上的一系列操作，根据日志时序，可以梳理出用户产生异常的具体路径。</li>
<li>集成便捷性：前端写成包，全局引用即可完成大部分日志记录、存储和上报。在特殊逻辑里面，可以调用特定方法记录日志。后端与应用本身的业务代码解耦，可以做成独立的服务，通过接口和第三方应用交互。利用集成部署，可以将系统随时进行扩容、移植等操作。</li>
<li>管理系统的可扩展：整套系统可扩展，不仅服务单应用，可支持多个应用同时运行。同一个团队下的所有应用都可以利用同一个平台进行管理。</li>
<li>日志系统权限：不同的人在访问日志系统时权限不同，一个访问者只能查看自己相关的应用，有些统计数据如果比较敏感，可以单独设置权限，敏感数据可脱敏。</li>
</ul>
<h3 id="八、其他说明" tabindex="-1">八、其他说明： <a class="header-anchor" href="#八、其他说明" aria-label="Permalink to &quot;八、其他说明：&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="_8-1-异常录制" tabindex="-1">8.1. 异常录制： <a class="header-anchor" href="#_8-1-异常录制" aria-label="Permalink to &quot;8.1. 异常录制：&quot;">&ZeroWidthSpace;</a></h4>
<p>对于一个异常，仅仅拥有该异常的信息还不足以完全抓住问题的本质，因为异常发生的位置，并不一定是异常根源所在的位置。我们需要对异常现场进行还原，才能复原问题全貌，甚至避免类似问题在其他界面中发生。这里需要引进一个概念，就是“异常录制”。录制通过“时间”“空间”两个维度记录异常发生前到发生的整个过程，对于找到异常根源更有帮助，可根据需要再去扩展。</p>
<h4 id="_8-2-日志统计与分析" tabindex="-1">8.2. 日志统计与分析： <a class="header-anchor" href="#_8-2-日志统计与分析" aria-label="Permalink to &quot;8.2. 日志统计与分析：&quot;">&ZeroWidthSpace;</a></h4>
<p>一个完善的日志统计分析工具需要提供各方面方便的面板，以可视化的方式给日志管理员和开发者反馈信息。根据需要可具体分析实现。</p>
<h4 id="_8-3-异常测试" tabindex="-1">8.3. 异常测试： <a class="header-anchor" href="#_8-3-异常测试" aria-label="Permalink to &quot;8.3. 异常测试：&quot;">&ZeroWidthSpace;</a></h4>
<p>主动异常测试和随机异常测试两种，不做详细讨论。</p>
<h4 id="_8-4-性能监控" tabindex="-1">8.4. 性能监控： <a class="header-anchor" href="#_8-4-性能监控" aria-label="Permalink to &quot;8.4. 性能监控：&quot;">&ZeroWidthSpace;</a></h4>
<p>异常监控主要针对代码级别的报错，但也应该关注性能异常。性能监控主要包括：</p>
<ul>
<li>运行时性能：文件级、模块级、函数级、算法级</li>
<li>网络请求速率</li>
<li>系统性能</li>
</ul>
<h4 id="_8-5-数据脱敏" tabindex="-1">8.5. 数据脱敏： <a class="header-anchor" href="#_8-5-数据脱敏" aria-label="Permalink to &quot;8.5. 数据脱敏：&quot;">&ZeroWidthSpace;</a></h4>
<p>敏感数据不被日志系统采集。由于日志系统的保存是比较开放的，虽然里面的数据很重要，但是在存储上大部分日志系统都不是保密级，因此，如果应用涉及了敏感数据，最好做到：</p>
<ul>
<li>独立部署，不和其他应用共享监控系统；</li>
<li>不采集具体数据，只采集用户操作数据，在重现时，通过日志信息可以取出数据 API 结果来展示；</li>
<li>日志加密，做到软硬件层面的加密防护；</li>
<li>必要时，可采集具体数据的 ID 用于调试，场景重现时，用 Mock 数据替代，Mock 数据可由后端采用假的数据源生成；</li>
<li>对敏感数据进行混淆；</li>
</ul>
<h3 id="九、主流监控系统对比" tabindex="-1">九、主流监控系统对比： <a class="header-anchor" href="#九、主流监控系统对比" aria-label="Permalink to &quot;九、主流监控系统对比：&quot;">&ZeroWidthSpace;</a></h3>
<table>
<thead>
<tr>
<th><strong>系统</strong></th>
<th><strong>简介</strong></th>
<th><strong>功能</strong></th>
<th><strong>优点</strong></th>
<th><strong>缺点</strong></th>
<th><strong>文档地址（教程、开源库）</strong></th>
<th><strong>其他说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Sentry</td>
<td>是一个开源的实时错误监控的项目，它支持很多端的配置，包括 Web 前端、服务器端、移动端及其游戏端。支持各种语言，例如 Python、OC、Java、Node、JavaScript 等。也可以应用到各种不同的框架上面，如前端框架中的 Vue 、Angular 、React 等最流行的前端框架。提供了 Github、Slack、Trello 的常见的开发工具的集成。可以自己安装并且搭建 Sentry 应用。</td>
<td>跨平台支持；围绕错误的丰富上下文；实时，可自定义的错误通知；优先解决问题；清理敏感数据。</td>
<td>开源（需通过docker安装）对各种前端框架的友好支持 (Vue、React、Angular)；支持 SourceMap;性能强大，可监控全栈异常。易于未来异常监控扩展。还能和 Gitlab ，钉钉等各个平台进行结合，将异常监控上报到 Gitlab 或与钉钉机器人结合，这对于一般公司来说，够用了，这对于线上前端出现的异常能够实时的发现，修复。</td>
<td></td>
<td><a href="https://docs.sentry.io/" target="_blank" rel="noreferrer">官方文档</a></td>
<td>使用者多，有官方文档；</td>
</tr>
<tr>
<td>JSTracker</td>
<td>通过对 Error 的监听，获取异常的相关信息并添加这些信息到异常信息数组，在达到上限或者一定时间之后做处理(返回服务端保存数据之类)。</td>
<td>捕获页面 JavaScript 异常报错，捕获异常类型包含:1. JavaScript runtime 异常捕捉 ；2. 静态资源 load faided 异常捕捉 ；3. console.error 的异常捕获。</td>
<td>使用安装简单方便，满足基本异常监控需求</td>
<td>监控功能过于基本，没有其他高级操作；没有自带后台管理页面；cnpm 使用人数较少，版本更新也很慢；</td>
<td><a href="https://cnpmjs.org/package/jstracker" target="_blank" rel="noreferrer">cnpm 使用地址</a></td>
<td>没有官方文档</td>
</tr>
<tr>
<td>Badjs</td>
<td>Web 前端脚本错误监控及跟踪解决方案。</td>
<td>页面脚本错误监控、上报、统计、查看等系统化的跟踪解决方案；支持告警和定时发送邮件报表功能。</td>
<td>一站式体系化解决方案：业务只需要简单的配置，引入上报文件，即可实现脚本错误上报，每日统计邮件跟踪方便。可视化查询系统，快速定位错误信息：Web 应用程序脚本数量庞大，开发人员在如此之多的脚本中定位某个问题变得困难。BadJS 能够巧妙定位错误脚本代码，进行反馈。通过各种查询条件，快速找到详细错误日志。跨域、Script Error 等棘手问题不再是难题：Try.js 帮你发现一切。真实用户体验监控与分析：通过浏览器端真实用户行为与体验数据监控，为您提供JavaScript、AJAX 请求错误诊断和页面加载深度分析帮助开发人员深入定位每一个问题细节。即使没有用户投诉，依然能发现隐蔽 Bug，主动提升用户体验。用户行为分析：细粒度追踪真实的用户行为操作及流程，前端崩溃、加载缓慢及错误问题，可关联到后端进行深度诊断。产品质量的保障：浏览器百花齐放，用户环境复杂，巨大的差异导致开发人员难以重现用户遇到的问题。无法像后台一样上报所有用户操作日志。通过 BadJS，上报用户端脚本错误，为产品质量保驾护航。</td>
<td>安装使用及部署需要折腾（有环境要求，安装模块有点多）；异常上报操作用法比较多，需要自定义操作；</td>
<td><a href="https://github.com/BetterJS/doc" target="_blank" rel="noreferrer">GitHub 地址</a></td>
<td>有官方文档，还有一个转发给第三方系统的客户端（类似可以转发到钉钉群告警通知）</td>
</tr>
<tr>
<td>FdSafe</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Saijs</td>
<td>通用前端监控采集脚本</td>
<td>JavaScript 异常监控；敏感信息监控；DOM 合法性检查；静态资源监控；网站监控等；</td>
<td></td>
<td>没有管理后台</td>
<td><a href="https://github.com/saijs/sai.js" target="_blank" rel="noreferrer">GitHub 地址</a></td>
<td>使用人数一般，文档也很简单</td>
</tr>
<tr>
<td>Fundebug</td>
<td>付费暂不考虑</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>FrontJS</td>
<td>付费暂不考虑</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>应用实时监控服务 ARMS</td>
<td>付费暂不考虑</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>TrackJS</td>
<td>付费暂不考虑</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Instabug</td>
<td>付费暂不考虑</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="十、最终选择方案" tabindex="-1">十、最终选择方案： <a class="header-anchor" href="#十、最终选择方案" aria-label="Permalink to &quot;十、最终选择方案：&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>Sentry 监控系统</strong>
原因如下：</p>
<ul>
<li>支持目前主流语言及框架的项目，比较成熟和稳定;</li>
<li>开源免费和付费版本，免费暂时够用；</li>
<li>Docker 集成好的 Sentry 安装环境。</li>
</ul>
<h3 id="十一、有价值的资料" tabindex="-1">十一、有价值的资料： <a class="header-anchor" href="#十一、有价值的资料" aria-label="Permalink to &quot;十一、有价值的资料：&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="https://juejin.im/post/5bbc2695e51d4539701e7ea6" target="_blank" rel="noreferrer">手刃前端监控系统</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/51446011" target="_blank" rel="noreferrer">超详细！搭建一个前端错误监控系统</a></li>
<li><a href="https://docs.sentry.io/" target="_blank" rel="noreferrer">sentry官网</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue 开发问题总结]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/vue-question-summary.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/vue-question-summary.html</guid>
            <pubDate>Sun, 22 Mar 2020 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vue-开发问题总结" tabindex="-1">Vue 开发问题总结 <a class="header-anchor" href="#vue-开发问题总结" aria-label="Permalink to &quot;Vue 开发问题总结&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="自定义指令-removechild-报错" tabindex="-1">自定义指令 removeChild 报错 <a class="header-anchor" href="#自定义指令-removechild-报错" aria-label="Permalink to &quot;自定义指令 removeChild 报错&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="一-发现" tabindex="-1">（一）发现 <a class="header-anchor" href="#一-发现" aria-label="Permalink to &quot;（一）发现&quot;">&ZeroWidthSpace;</a></h3>
<p>2018-12-08 20:40，收到反馈机构平台发现部分权限失控，前端平台报错如下：</p>
<CustomImage src='/growth-record/frame/vue/vue-question-01.png' /><p>上图中，代付下发规则为运营才有的敏感操作，但它出现在了一个不该出现的位置</p>
<h3 id="二-定位" tabindex="-1">（二）定位 <a class="header-anchor" href="#二-定位" aria-label="Permalink to &quot;（二）定位&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="_1-从代码层" tabindex="-1">1. 从代码层 <a class="header-anchor" href="#_1-从代码层" aria-label="Permalink to &quot;1. 从代码层&quot;">&ZeroWidthSpace;</a></h4>
<p>从控制台返回的信息中，我们得知是 <code>removeChild</code> 报错，那先从它开始寻找
从MDN <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/removeChild" target="_blank" rel="noreferrer">removeChild</a> 了解到，从 DOM1 中就存在的方法，应当不存在兼容性的问题，那么回归代码，开始寻找调用 者</p>
<CustomImage src='/growth-record/frame/vue/vue-question-02.png' /><p>从上图见得，调用它的是 <code>el.parentNode</code>，通过 <code>alert</code>，发现 <code>el.parentNode</code> 为 <code>null，parentNode</code> 为什么会为 <code>null？</code>
MDN 给出了以下答案</p>
<CustomImage src='/growth-record/frame/vue/vue-question-03.png' /><p>这个问题有点类似 **_ref的注册时间问题， _**解决这个问题需要关心的就是 <strong>生命周期</strong></p>
<p>回到我们本身的问题，注册指令时，官方也提供了几个生命周期</p>
<CustomImage src='/growth-record/frame/vue/vue-question-04.png' /><p>问题已经很明朗了，<code>bind </code>并没有明确说明是否保证父节点存在，但在 <code>inserted</code> 时能保证父节点存在
按照找不到父节点的报错，所以需要一个稳定能获取父节点的生命周期来运行逻辑</p>
<h4 id="_2-从环境" tabindex="-1">2. 从环境 <a class="header-anchor" href="#_2-从环境" aria-label="Permalink to &quot;2. 从环境&quot;">&ZeroWidthSpace;</a></h4>
<p>首先该处代码已经历史悠久，API 接口是古老版本，且代码仓库记录已经许久未更改，那问题原因直观体现在打包构建的环境发生了变化。
依据发布脚本依据原则，存在隐患：项目每次构建会将整个代码仓库删除包括所有依赖，而项目拉取依赖未进行依赖包锁定。</p>
<h3 id="三-修复" tabindex="-1">（三）修复 <a class="header-anchor" href="#三-修复" aria-label="Permalink to &quot;（三）修复&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="_1-环境" tabindex="-1">1. 环境 <a class="header-anchor" href="#_1-环境" aria-label="Permalink to &quot;1. 环境&quot;">&ZeroWidthSpace;</a></h4>
<p>立即备份一份打包机环境中项目的依赖，同时从本地备份的依赖打包压缩 scp 至打包机工程目录中，修改发布脚本发布恢复。</p>
<h4 id="_2-代码层" tabindex="-1">2. 代码层 <a class="header-anchor" href="#_2-代码层" aria-label="Permalink to &quot;2. 代码层&quot;">&ZeroWidthSpace;</a></h4>
<p>按照文档，进行了如下修改</p>
<p><code>bind =&gt; inserted</code></p>
<CustomImage src='/growth-record/frame/vue/vue-question-05.png' /><p>经过测试，不再报错，22：10 发布上线，历时 1 小时 10 分</p>
<h3 id="四-思考" tabindex="-1">（四）思考 <a class="header-anchor" href="#四-思考" aria-label="Permalink to &quot;（四）思考&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>在被打包后的代码中定位问题时，有什么更好的方式可以替代 <strong>alert</strong>；</li>
<li>错误的发现 =&gt; 解决的时间是否过长，如何更好的面对线上问题；</li>
<li>权限的设计是否存在问题，目前的模式为没有权限 =&gt; 摧毁，采用有权限 =&gt; 生成是否会更加安全？</li>
<li>前端自身的告警系统很有必要；</li>
</ol>
<h2 id="编译报错问题-you-are-using-the-runtime-only-build-of-vue-where-the-template-compiler-is-not-available" tabindex="-1">编译报错问题：You are using the runtime-only build of Vue where the template compiler is not available <a class="header-anchor" href="#编译报错问题-you-are-using-the-runtime-only-build-of-vue-where-the-template-compiler-is-not-available" aria-label="Permalink to &quot;编译报错问题：You are using the runtime-only build of Vue where the template compiler is not available&quot;">&ZeroWidthSpace;</a></h2>
<p>相信很多初学者使用vue-cli2.x初始化脚手架项目的时候或者webpack配置的时候会遇到这个问题：</p>
<CustomImage src='/growth-record/frame/vue/vue-question-06.png' /><p>一开始初始化项目配置的时候，有两个运行环境配置的版本：Compiler版本、Runtime版本。</p>
<p>简单说一下这两个版本的区别：</p>
<ol>
<li>
<p>当对template模板内容编译是需要对字符串进行模板渲染或者可以绑定的html对象作为模板进行渲染的方式，就需要使用Compiler版本。示例如下：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span> new Vue({</span></span>
<span class="line"><span>     el:'#vue-app',</span></span>
<span class="line"><span>     template:'&#x3C;div>&#x3C;h1>{{test}}&#x3C;/h1>&#x3C;/div>',</span></span>
<span class="line"><span>     data:{</span></span>
<span class="line"><span>     test:'hello'</span></span>
<span class="line"><span>     }</span></span>
<span class="line"><span> });</span></span></code></pre>
</div></li>
<li>
<p>如果使用vue-loader加载.vue文件时（组件文件），webpack在打包对模板进行了渲染，就需要Runtime版本。示例如下：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>new Vue({</span></span>
<span class="line"><span>  el: '#app',</span></span>
<span class="line"><span>  components: { App },</span></span>
<span class="line"><span>  template: '&#x3C;App/>'</span></span>
<span class="line"><span>})</span></span></code></pre>
</div></li>
</ol>
<p>从Compiler版本修改为Runtime版本。只需如示代码：</p>
<CustomImage src='/growth-record/frame/vue/vue-question-07.png' /><p>添加一行代码：<code>'vue$': 'vue/dist/vue.esm.js'</code> ，然后重新运行编译就可以了</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[主流浏览器事件兼容写法]]></title>
            <link>https://super456.github.io/posts/growth-record/base/javascript/browser-event-compatible.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/javascript/browser-event-compatible.html</guid>
            <pubDate>Sat, 21 Mar 2020 20:00:00 GMT</pubDate>
            <description><![CDATA[# 主流浏览器事件兼容写法
### （一）事件处理统一封装：
```javascript
const EventHandle = {
    // element : 元素 ， type： 点击事件 ，handle ： 实行的方法
    //添加句柄
    addEventHandle: function (element, type, handler) {
        if (element.addEventListener) {
            element.addEventListener(type, handler, false);//]]></description>
            <content:encoded><![CDATA[<h1 id="主流浏览器事件兼容写法" tabindex="-1">主流浏览器事件兼容写法 <a class="header-anchor" href="#主流浏览器事件兼容写法" aria-label="Permalink to &quot;主流浏览器事件兼容写法&quot;">&ZeroWidthSpace;</a></h1>
<h3 id="一-事件处理统一封装" tabindex="-1">（一）事件处理统一封装： <a class="header-anchor" href="#一-事件处理统一封装" aria-label="Permalink to &quot;（一）事件处理统一封装：&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> EventHandle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // element : 元素 ， type： 点击事件 ，handle ： 实行的方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //添加句柄</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    addEventHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (element.addEventListener) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(type, handler, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//---false  //代表冒泡 dom2级</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (element.attachEvent) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">attachEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"on"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">type, handler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            element[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"on"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> type] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> handler;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //删除句柄  事件处理不起作用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    removeEventHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (element.removeEventListener) {   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 支持dom2级的事件处理  type是 onclick</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(type, handler, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//---false  //代表冒泡</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (element.detachEvent) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">detachEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"on"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">type, handler);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//支持IE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            element[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"on"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> type] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// dom0级事件处理   传统的点击事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //获取事件对象 兼容浏览器的所有对象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    getEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> window.event;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//在IE浏览器的低版本中需要的是window.event</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //获取事件类型  是点击呢还是鼠标移动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    getType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> event.type;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //获取当前的那个元素</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    getElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> event.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> event.srcElement;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //阻止事件的默认行为</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (event.preventDefault) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            event.returnValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //阻止事件冒泡</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (event.stopPropagation) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            event.cancelBubble </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //js获取键盘按下的键值有event.keyCode,event.charCode和event.which</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    *谷歌浏览器对event.keyCode,event.charCode和event.which都兼容。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    *火狐浏览器对event.keyCode部分键值有效，如上下左右键(37,38,39,40)，enter键(13)，PgUp(33),PgDn(34)等部分*有效，对数字键，字母键无效。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    *event.which也是部分键值有效，如字母键，数字键，enter键，Backspace键等有效，对上下左右键，*PgUp(33),PgDn(34)键无效。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    *event.charCode也是对部分键值有效，如字母键，数字键，，Backspace键等有效，对enter键，上下左右键，*PgUp(33),PgDn(34)键无效。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    *ie浏览器中，IE8及以下浏览器对event.charCode无效，event.keyCode和event.which对大部分键值能获得，但是有*少部分也不能获得</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    getKeyPress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">evt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //兼容写法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    evt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (evt) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> evt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ((window.event) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> window.event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ""</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> evt.keyCode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">evt.which</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">evt.charCode;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h3 id="二-键盘事件-keycode-兼容性写法" tabindex="-1">（二）键盘事件 <code>keyCode</code> 兼容性写法： <a class="header-anchor" href="#二-键盘事件-keycode-兼容性写法" aria-label="Permalink to &quot;（二）键盘事件 `keyCode` 兼容性写法：&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> inp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'inp'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'result'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getKeyCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (window.event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> window.event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ""</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> e.keyCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> e.keyCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> e.which</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">inp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onkeypress</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  result.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getKeyCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h3 id="三-求窗口大小的兼容写法" tabindex="-1">（三）求窗口大小的兼容写法： <a class="header-anchor" href="#三-求窗口大小的兼容写法" aria-label="Permalink to &quot;（三）求窗口大小的兼容写法：&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 浏览器窗口可视区域大小（不包括工具栏和滚动条等边线）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 1600 * 525</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> client_w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.documentElement.clientWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.body.clientWidth;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> client_h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.documentElement.clientHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.body.clientHeight;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 网页内容实际宽高（包括工具栏和滚动条等边线）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 1600 * 8</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> scroll_w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.documentElement.scrollWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.body.scrollWidth;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> scroll_h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.documentElement.scrollHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.body.scrollHeight;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 网页内容实际宽高 (不包括工具栏和滚动条等边线）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 1600 * 8</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> offset_w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.documentElement.offsetWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.body.offsetWidth;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> offset_h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.documentElement.offsetHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.body.offsetHeight;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 滚动的高度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> scroll_Top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.documentElement.scrollTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.body.scrollTop;</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[微信小程序之自定义对话框组件弹窗动画]]></title>
            <link>https://super456.github.io/posts/growth-record/platform/applet/custom-dialog.html</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/custom-dialog.html</guid>
            <pubDate>Thu, 24 Jan 2019 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="微信小程序之自定义对话框组件弹窗动画" tabindex="-1">微信小程序之自定义对话框组件弹窗动画 <a class="header-anchor" href="#微信小程序之自定义对话框组件弹窗动画" aria-label="Permalink to &quot;微信小程序之自定义对话框组件弹窗动画&quot;">&ZeroWidthSpace;</a></h1>
<p>学习微信小程序组件之后，一直都是使用别人的组件开发的，刚看到一篇文章讲解微信小程序自定义组件通俗易懂的开发案例觉得一看就会自己写组件了，真的很棒，感谢原作者的<a href="https://www.jianshu.com/p/8a2a730d9e60" target="_blank" rel="noreferrer">手把手教你实现微信小程序中的自定义组件</a>，自己也添加了一些修改（修改部分样式，添加是否显示“取消”按钮功能，添加弹窗淡入淡出动画，初始化组件赋值操作等一些简单的东西和注释化流程提示）。</p>
<p>主要是敲一遍代码学习之后才体会到原理是这样子的嘛，光看文档是看得懂，跟自己做出来真的是两码事。</p>
<h2 id="一-效果展示" tabindex="-1">（一）效果展示 <a class="header-anchor" href="#一-效果展示" aria-label="Permalink to &quot;（一）效果展示&quot;">&ZeroWidthSpace;</a></h2>
<p>1.默认效果：</p>
<CustomImage src='/growth-record/platform/applet/custom-dialog-01.gif' /><p>事件触发流程说明：<strong>console中显示</strong></p>
<CustomImage src='/growth-record/platform/applet/custom-dialog-02.gif' /><p>2.去掉“取消”按钮效果：</p>
<CustomImage src='/growth-record/platform/applet/custom-dialog-03.gif' /><p><a href="https://github.com/super456/weapp_customComponent" target="_blank" rel="noreferrer">github下载源码</a></p>
<h2 id="二-实现流程" tabindex="-1">（二）实现流程 <a class="header-anchor" href="#二-实现流程" aria-label="Permalink to &quot;（二）实现流程&quot;">&ZeroWidthSpace;</a></h2>
<h4 id="创建子组件页面" tabindex="-1">创建子组件页面： <a class="header-anchor" href="#创建子组件页面" aria-label="Permalink to &quot;创建子组件页面：&quot;">&ZeroWidthSpace;</a></h4>
<p>1、新建一个页面如：components文件夹下的Dailog文件夹下的dialog，注意：该页面不需要app.json的（声明的话会报：<code>无效的 pageJSON(components/Dialog/dialog)[&quot;component&quot;]</code>），<code>dialog.json</code>记得设置：<code>&quot;component&quot;: true,        // 自定义组件声明</code></p>
<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "component"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 自定义组件声明</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "usingComponents"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 引用其他的组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>2、编写wxml/wxss页面代码（跟正常pages页面代码一样）；</p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">&#x3C;!--components/Dialog/dialog.wxml--></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'wx_dialog_container'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{{!isShow}}"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{{updatePanelAnimationData}}"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'wx-dialog'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'wx-dialog-title'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ title }}&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'wx-dialog-content'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ content }}&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'wx-dialog-footer'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'wx-dialog-btn'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> catchtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'_cancelEvent'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'{{!isShowCancelBtn}}'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ cancelText }}&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'wx-dialog-btn'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> catchtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'_confirmEvent'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{ confirmText }}&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* components/Dialog/dialog.wxss */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.wx_dialog_container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">fixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  z-index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">vw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">vh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">rgba</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.wx-dialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">80</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  max-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#fff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  text-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.wx-dialog-title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">36</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.wx-dialog-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  min-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  text-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">justify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  text-justify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">newspaper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  word-wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">break-word</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  word-break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">break-all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.wx-dialog-footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">34</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.wx-dialog-footer::before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  border-top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> #d5d5d6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#d5d5d6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  -webkit-transform-origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  transform-origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  -webkit-transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">scaleY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">scaleY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.wx-dialog-btn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  -webkit-flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  -webkit-tap-highlight-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">rgba</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.wx-dialog-footer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> .wx-dialog-btn:nth-of-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#353535</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.wx-dialog-footer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> .wx-dialog-btn:nth-of-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#3cc51f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.wx-dialog-footer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> .wx-dialog-btn:nth-of-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">:after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">" "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  border-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> #d5d5d6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#d5d5d6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  -webkit-transform-origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  transform-origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  -webkit-transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">scaleX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">scaleX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>3、编写js，这个页面构造器跟正常的pages页面的不一样，可以先参考官方的来写<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/component.html" target="_blank" rel="noreferrer">Component构造器</a></p>
<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// components/Dialog/dialog.js</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 子组件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    multipleSlots: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 在组件定义时的选项中启用多slot支持</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   * 组件的默认属性列表</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   * 用于组件自定义设置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  properties: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 弹窗标题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    title: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 属性名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      type: String, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类型（必填），目前接受的类型包括：String, Number, Boolean, Object, Array, null（表示任意类型）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'标题'</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 属性初始值（可选），如果未指定则会根据类型选择一个</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 弹窗内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    content: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      type: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'弹窗内容'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 弹窗取消按钮文字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    cancelText: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      type: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'取消'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 弹窗确认按钮文字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    confirmText: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      type: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'确定'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 弹窗是否显示“取消”按钮</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    isShowCancelBtn: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      type: Boolean,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   * 私有数据,组件的初始数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   * 可用于模版渲染</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  data: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 弹窗显示控制：默认不显示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    isShow: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    updatePanelAnimationData: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   * 组件的方法列表</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   * 更新属性和数据的方法与更新页面数据的方法类似</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">     * 公有方法（父组件会调用）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">     */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 隐藏弹框</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    hideDialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">leavePupAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 展示弹框</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    showDialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">goIntoPupAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 弹窗淡入动画设置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    goIntoPupAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 第1步：创建动画实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> animation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">createAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 动画时长</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        timingFunction: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'linear'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 线性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 第2步：这个动画实例赋给当前的动画实例</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.animation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> animation</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 第3步：执行第一组动画</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      animation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">step</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 第4步：导出动画对象赋给数据对象储存</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        updatePanelAnimationData: animation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        isShow: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 显示弹窗</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 第5步：设置定时器到指定时候后，执行第二组动画</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 执行第二组动画</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        animation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">step</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 给数据对象储存的第一组动画，更替为执行完第二组动画的动画对象</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          updatePanelAnimationData: animation,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 弹窗淡出动画设置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    leavePupAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 第1步：创建动画实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> animation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">createAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 动画时长</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        timingFunction: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'linear'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 线性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 第2步：这个动画实例赋给当前的动画实例</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.animation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> animation</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 第3步：执行第一组动画</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      animation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">step</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 第4步：导出动画对象赋给数据对象储存</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        updatePanelAnimationData: animation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 第5步：设置定时器到指定时候后，执行第二组动画</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 执行第二组动画</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        animation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">step</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 给数据对象储存的第一组动画，更替为执行完第二组动画的动画对象</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          updatePanelAnimationData: animation,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          isShow: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 隐藏弹窗</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">     * 内部私有方法建议以下划线开头：子组件内调用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">     * triggerEvent 用于触发事件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">     */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    _cancelEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 触发点击“取消”按钮回调</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'子组件dialog.js——您点击了“取消”按钮'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'取消按钮信息：'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, e)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 通过triggerEvent来给父组件传递信息的</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">triggerEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'cancelEvent'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'取消'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 将子组件数据通过参数的形式传递给父组件，这里是向父组件传递事件名，传递一个参数值('取消')给父组件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">hideDialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 隐藏弹窗</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    _confirmEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 触发点击“确认”按钮回调</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'子组件dialog.js——点击了“确认”按钮'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'确认按钮信息：'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, e)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">triggerEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'confirmEvent'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'确认'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">hideDialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 隐藏弹窗</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><h4 id="父组件页面引用子组件" tabindex="-1">父组件页面引用子组件： <a class="header-anchor" href="#父组件页面引用子组件" aria-label="Permalink to &quot;父组件页面引用子组件：&quot;">&ZeroWidthSpace;</a></h4>
<p>1、声明引用子组件：</p>
<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "usingComponents"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "dialog"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/components/Dialog/dialog"</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 左边是页面使用组件名，类似：&#x3C;dialog>&#x3C;/dialog>；右边是子组件路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>2、页面使用组件：</p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">&#x3C;!--index.wxml--></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">&#x3C;!-- 父组件页面 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"container"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  &#x3C;!-- 引用子组件 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">dialog</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'dialog'</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'{{dialogData.title}}'</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'{{dialogData.content}}'</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  cancelText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'{{dialogData.cancelText}}'</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  confirmText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'{{dialogData.confirmText}}'</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  isShowCancelBtn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'{{dialogData.isShowCancelBtn}}'</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  bind:cancelEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{{dialogData.cancelEvent}}"</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  bind:confirmEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"{{dialogData.confirmEvent}}"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">dialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  &#x3C;!-- 以上内容备注：11/12行代码：当子组件触发某个事件时,给其添加绑定事件回调给父组件也触发事件相应的事件处理，抒写规范：bindmyevent="onMyEvent"或bind:myevent="onMyEvent"的形式。--></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"primary"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"showDialog"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> ClickMe! &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>3、初始化子组件数据：</p>
<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// index.js</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 获取应用实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    dialogData: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 传向子组件自定义的弹窗内容：默认</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'温馨提示'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 标题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      content: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'恭喜你，学会了自定义组件咯'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      cancelText: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'取消'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 取消按钮内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      confirmText: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'确定'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 确认按钮内容,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      isShowCancelBtn: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 是否显示“取消”按钮，默认显示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      cancelEvent: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'_cancelEvent'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 绑定点击取消按钮后的事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      confirmEvent: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'_confirmEvent'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 绑定点击确认按钮后的事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   * 生命周期函数--监听页面显示</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  onShow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 获得dialog组件：初始化组件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.dialog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">selectComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'#dialog'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 获取子组件实例对象，这样就可以直接访问组件的任意数据和方法。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 自定义初始化数据内容，会传给子组件显示（可以不设置，有默认值）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // this.setData({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //   dialogData: { //传向子组件自定义的弹窗内容：默认</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //     title: '温馨提示', //标题</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //     content: '恭喜你，学会了自定义组件咯', //内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //     cancelText: '取消', //取消按钮内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //     confirmText: '确定', //确认按钮内容,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //     isShowCancelBtn: true, //是否显示“取消”按钮，默认显示</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //     cancelEvent: '_cancelEvent', //绑定点击取消按钮后的事件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //     confirmEvent: '_confirmEvent', //绑定点击确认按钮后的事件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //   }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 点击显示弹窗提示</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  showDialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'父组件——点击显示子组件弹窗操作'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.dialog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">showDialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 调用组件弹窗显示方法：showDialog()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 取消事件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  _cancelEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'父组件index.js——你在子组件点击“取消”按钮，在这里执行回调操作'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'父组件index.js——取消事件——获取子组件传递过来的值：'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 确认事件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  _confirmEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'父组件index.js——你在子组件点击“确认”按钮，在这里执行回调操作'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'父组件index.js——确认事件——获取子组件传递过来的值：'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><h2 id="三-实现原理" tabindex="-1">（三）实现原理 <a class="header-anchor" href="#三-实现原理" aria-label="Permalink to &quot;（三）实现原理&quot;">&ZeroWidthSpace;</a></h2>
<CustomImage src='/growth-record/platform/applet/custom-dialog-04.png' /><h2 id="四-参考文献" tabindex="-1">（四）参考文献 <a class="header-anchor" href="#四-参考文献" aria-label="Permalink to &quot;（四）参考文献&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://www.jianshu.com/p/8a2a730d9e60" target="_blank" rel="noreferrer">手把手教你实现微信小程序中的自定义组件</a></li>
<li><a href="https://www.cnblogs.com/demodashi/p/9590171.html" target="_blank" rel="noreferrer">微信小程序之自定义模态弹窗（带动画）实例</a></li>
</ul>
<p>可以根据这个示例，自定义很多自己想要的组件了，比如说根据这个组件弹窗写一个仿微信小程序的消息提示框、表单信息框之类的等等，感谢阅读。<a href="https://github.com/super456/weapp_customComponent" target="_blank" rel="noreferrer">github下载源码</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[微信小程序之animation底部弹窗动画（两种方法）]]></title>
            <link>https://super456.github.io/posts/growth-record/platform/applet/bottom-popup-animation.html</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/bottom-popup-animation.html</guid>
            <pubDate>Tue, 30 Oct 2018 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="微信小程序之animation底部弹窗动画-两种方法" tabindex="-1">微信小程序之animation底部弹窗动画（两种方法） <a class="header-anchor" href="#微信小程序之animation底部弹窗动画-两种方法" aria-label="Permalink to &quot;微信小程序之animation底部弹窗动画（两种方法）&quot;">&ZeroWidthSpace;</a></h1>
<p>简单分享一下常用的底部弹窗层或下拉框弹出层（代码需要修改）的内容弹窗的动画效果，这里分享的是点击按钮后底部弹窗的动画效果。第一种方式是动态设置显示区域的高度，第二种方法是动态设置显示区域的移动的位置（使用到<code>transform:translateY</code>）；</p>
<h3 id="一-实现效果" tabindex="-1">（一）实现效果 <a class="header-anchor" href="#一-实现效果" aria-label="Permalink to &quot;（一）实现效果&quot;">&ZeroWidthSpace;</a></h3>
<CustomImage src='/growth-record/platform/applet/bottom-popup-01.gif' /><p>简单说明一下，两种方法实现的效果是一样的，只有点击按钮才能出发弹窗（指定位置），弹窗弹出后，只有点击背景灰色区域弹窗才能收回，点击弹窗内容区域（粉红色部分是不能收回弹窗的），自己可以自定义粉红色部分右上角关闭按钮。</p>
<h3 id="二-实现分析" tabindex="-1">（二）实现分析 <a class="header-anchor" href="#二-实现分析" aria-label="Permalink to &quot;（二）实现分析&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>第一种动态设置高度的方法是：需要一个容器为背景色（灰色区域），一个容器为弹窗内容（粉红色区域），两者是独立的，实现的原理是一样的；粉红色区域的话，就是设置好绝对位置（在屏幕的底部）和默认内容的区域样式，动态设置内容区域的高度，比如弹出：一开始高度为0（隐藏了），通过animation设置的动画时间，将高度从0到指定高度，内容慢慢就会显示了，然后保留最后一帧的动画样式就行了；收缩也是一样的道理。</li>
<li>第二种动态设置位置的方法是：需要一个容器为背景色（灰色区域），一个容器为弹窗内容（粉红色区域），两者是独立的，实现的原理是一样的；粉红色区域的话，就是设置好绝对位置（在屏幕的底部）和默认内容的区域样式，比如弹出：一开始粉红色区域的位置平移在屏幕外（隐藏了），通过animation设置的动画时间，将粉红色区域从屏幕外平移到屏幕内（默认设置在屏幕底部的位置），内容慢慢就会显示了，然后保留最后一帧的动画样式就行了；收缩也是一样的道理。
代码也有注释哈。</li>
</ul>
<h3 id="三-实现代码" tabindex="-1">（三）实现代码 <a class="header-anchor" href="#三-实现代码" aria-label="Permalink to &quot;（三）实现代码&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="第一种动态设置高度方法实现" tabindex="-1">第一种动态设置高度方法实现： <a class="header-anchor" href="#第一种动态设置高度方法实现" aria-label="Permalink to &quot;第一种动态设置高度方法实现：&quot;">&ZeroWidthSpace;</a></h4>
<p>1、wxml代码：</p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> catchtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'clickPup'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>点击底部动画弹窗&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">&#x3C;!-- 底部弹窗动画的内容 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'pupContent {{click? "showContent": "hideContent"}} {{option? "open": "close"}}'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> hover-stop-propagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'true'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'pupContent-top'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>测试一下&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">&#x3C;!-- 固定的背景 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'pupContentBG {{click?"showBG":"hideBG"}} {{option?"openBG":"closeBG"}}'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> catchtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'clickPup'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>2、wxss代码：</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.pupContentBG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">vw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">vh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">fixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.pupContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">pink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  z-index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 设置显示的背景 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.showBG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.hideBG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 弹出或关闭动画来动态设置内容高度 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> slideBGtUp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">transparent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">rgba</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> slideBGDown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">rgba</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">transparent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 显示或关闭内容时动画 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.openBG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: slideBGtUp </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ease-in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* animation-fill-mode: both 动画将会执行 forwards 和 backwards 执行的动作。 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.closeBG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: slideBGDown </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ease-in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* animation-fill-mode: both 动画将会执行 forwards 和 backwards 执行的动作。 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 设置显示内容 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.showContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.hideContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 弹出或关闭动画来动态设置内容高度 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> slideContentUp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> slideContentDown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 显示或关闭内容时动画 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: slideContentUp </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ease-in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* animation-fill-mode: both 动画将会执行 forwards 和 backwards 执行的动作。 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: slideContentDown </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ease-in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* animation-fill-mode: both 动画将会执行 forwards 和 backwards 执行的动作。 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>3、js代码：</p>
<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//是否显示弹窗内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//显示弹窗或关闭弹窗的操作动画</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 用户点击显示弹窗</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  clickPup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> _that </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">_that.data.click) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      _that.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        click: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (_that.data.option) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      _that.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        option: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 关闭显示弹窗动画的内容，不设置的话会出现：点击任何地方都会出现弹窗，就不是指定位置点击出现弹窗了</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        _that.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          click: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      _that.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        option: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span></code></pre>
</div><h4 id="第二种动态平移内容区域位置方法实现" tabindex="-1">第二种动态平移内容区域位置方法实现： <a class="header-anchor" href="#第二种动态平移内容区域位置方法实现" aria-label="Permalink to &quot;第二种动态平移内容区域位置方法实现：&quot;">&ZeroWidthSpace;</a></h4>
<p>相对于第一种代码修改的部分：只修改的了粉红色区域的高度和粉红色区域弹出和收回的动画效果：</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 弹出或关闭动画来动态设置内容高度 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> slideContentUp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">translateY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/*设置为正数则底部弹出来，负数则相反*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">translateY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> slideContentDown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">translateY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">translateY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>参考资料：</strong></p>
<ul>
<li><a href="https://blog.csdn.net/u013243347/article/details/79976352" target="_blank" rel="noreferrer">CSS3（三）Animation 入门详解</a></li>
<li><a href="https://blog.csdn.net/zjw_python/article/details/80720427" target="_blank" rel="noreferrer">微信小程序CSS3动画下拉菜单</a></li>
</ul>
<p><strong>感谢阅读。</strong></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[微信小程序之物流状态时间轴]]></title>
            <link>https://super456.github.io/posts/growth-record/platform/applet/status-timeline.html</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/status-timeline.html</guid>
            <pubDate>Thu, 25 Oct 2018 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="微信小程序之物流状态时间轴" tabindex="-1">微信小程序之物流状态时间轴 <a class="header-anchor" href="#微信小程序之物流状态时间轴" aria-label="Permalink to &quot;微信小程序之物流状态时间轴&quot;">&ZeroWidthSpace;</a></h1>
<p>刚好写了一个物流状态的时间轴，简单分享一下哈。</p>
<h3 id="一-实现效果" tabindex="-1">（一）实现效果 <a class="header-anchor" href="#一-实现效果" aria-label="Permalink to &quot;（一）实现效果&quot;">&ZeroWidthSpace;</a></h3>
<p>真机测试的结果（图片忘记缩小了）</p>
<CustomImage src='/growth-record/platform/applet/status-timeline-01.webp' /><p><a href="https://github.com/super456/weapp_expressTime" target="_blank" rel="noreferrer">github下载源码</a></p>
<h3 id="二-实现分析" tabindex="-1">（二）实现分析 <a class="header-anchor" href="#二-实现分析" aria-label="Permalink to &quot;（二）实现分析&quot;">&ZeroWidthSpace;</a></h3>
<p>页面布局拆分：</p>
<CustomImage src='/growth-record/platform/applet/status-timeline-02.webp' /><p>简单的说：就是父级容器下，左边的子级容器是设置绝对定位（记得父级要设置相对定位哈），然后自己调位置，中间子级容器下放三个子容器（设置时间轴线、点的样式），右边的子级容器设置；<strong>wxml代码有备注信息</strong>。</p>
<h3 id="三-实现代码" tabindex="-1">（三）实现代码 <a class="header-anchor" href="#三-实现代码" aria-label="Permalink to &quot;（三）实现代码&quot;">&ZeroWidthSpace;</a></h3>
<p>1、wxml代码：</p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'g_con'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'topExpress'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'topExpress-left'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">image</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/images/Exchange_goods_map_1.png'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'width:60rpx;height:60rpx;border-radius:50%;'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'topExpress-right'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'topExpress-right-top'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>圆通速递&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'topExpress-right-middle'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>运单号：813291235464788594&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'topExpress-right-bottom'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>官方电话 95554 >&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  &#x3C;!-- 物流时间轴 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    &#x3C;!-- 顶部收货地址 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-getAddress'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-top'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'getAddress-icon'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          收</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'getAddress-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>[收货地址] 广东省深圳市南山区 南山街道 亿利达大厦&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    &#x3C;!-- 顶部收货地址半个时间轴线 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'noReach-online-top-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    &#x3C;!-- 单个物流记录点时间轴：当前正在进行的物流状态 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-single-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      &#x3C;!-- 左边子容器 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-single-noReach-online-top-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        &#x3C;!-- 正在进行的时间轴上半个时间线 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'online-top-closing'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        &#x3C;!-- 正在进行的时间轴点 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'dot-closing'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        &#x3C;!-- 正在进行的时间轴下半个时间线 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'online-bottom'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      &#x3C;!-- 右边子容器 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-statusing'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>运输中&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-status-addressing'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>武汉转运中心公司 已发出，下一站 深圳转运中心&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      &#x3C;!-- 相对父级容器绝对定位的日期 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-dating'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-date-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          昨天</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-date-time'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          20:39</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    &#x3C;!-- 单个物流记录点时间轴：已经过去的物流状态 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-single-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-single-noReach-online-top-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'online-top-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'dot-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'online-bottom'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-status'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-status-address'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>武汉转运中心公司 已收入&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-date'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-date-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          昨天</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-date-time'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          20:37</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-single-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-single-noReach-online-top-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'online-top-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'dot-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'online-bottom'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-status'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-status-address'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>湖北省孝感市汉川市公司 已打包&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-date'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-date-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          昨天</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-date-time'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          14:37</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-single-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-single-noReach-online-top-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'online-top-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'dot-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'online-bottom'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-status'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>已揽件&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-status-address'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>湖北省孝感市汉川市公司 已收件&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-date'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-date-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          昨天</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-date-time'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          14:17</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-single-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-single-noReach-online-top-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'online-top-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'dot-close'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        &#x3C;!-- 起始位置，下半个时间轴线不用 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'online-bottom-start'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-status'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>已发货&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-status-address'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>卖家发货&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-date'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-date-text'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          昨天</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'expressRecord-date-time'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          13:50</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>2、wxss代码：</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">page {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#f4f4f4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.g_con</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">vw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  overflow-x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.topExpress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">710</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">155</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#fff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.topExpress-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.topExpress-right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">26</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-around</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  flex-direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.topExpress-right-middle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.topExpress-right-bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#666</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.expressRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">710</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  padding-top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  padding-bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#fff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.expressRecord-getAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.expressRecord-top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.getAddress-icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#fff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.getAddress-text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.noReach-online-top-close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#d7d7d7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">95</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.expressRecord-single-close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">122</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.expressRecord-single-noReach-online-top-close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  flex-direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.online-top-closing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#d7d7d7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">95</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.online-top-close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">95</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.dot-closing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin-top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin-bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#fe4f33</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.dot-close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin-top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin-bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.online-bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">95</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.online-bottom-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* background: #999; */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">95</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.expressRecord-text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.expressRecord-statusing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">26</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.expressRecord-status-addressing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.expressRecord-status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">26</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.expressRecord-status-address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.expressRecord-dating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* top: 0;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  bottom: 0; */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  flex-direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.expressRecord-date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* top: 0;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  bottom: 0; */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  flex-direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.expressRecord-date-text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.expressRecord-date-time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>如果感觉有用的话，点个赞呗，支持一下我哈。<a href="https://github.com/super456/weapp_expressTime" target="_blank" rel="noreferrer">github下载源码</a></strong></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CSS 之实现图片叠加的层叠层问题]]></title>
            <link>https://super456.github.io/posts/growth-record/base/css/image-index.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/css/image-index.html</guid>
            <pubDate>Sat, 22 Sep 2018 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="css-之实现图片叠加的层叠层问题" tabindex="-1">CSS 之实现图片叠加的层叠层问题 <a class="header-anchor" href="#css-之实现图片叠加的层叠层问题" aria-label="Permalink to &quot;CSS 之实现图片叠加的层叠层问题&quot;">&ZeroWidthSpace;</a></h1>
<p>在工作中，也就是在微信小程序开发的时候经常用到图片叠加及层叠层的问题，但都比较好解决，就是没有好好研究其概念原理上的东西。因为自己技术及理解有限，也在网上找了很多参考资料，学习到了很多东西，简单分享一下。</p>
<h3 id="一-实现效果" tabindex="-1">（一）实现效果 <a class="header-anchor" href="#一-实现效果" aria-label="Permalink to &quot;（一）实现效果&quot;">&ZeroWidthSpace;</a></h3>
<p>说明一下：是通过微信开发者工具展示的小程序效果；</p>
<CustomImage src='/growth-record/base/css/image-index-01.gif' /><h3 id="二-实现分析" tabindex="-1">（二）实现分析 <a class="header-anchor" href="#二-实现分析" aria-label="Permalink to &quot;（二）实现分析&quot;">&ZeroWidthSpace;</a></h3>
<p>1、效果图展示的是两张图片叠加（一个是上传的图片一个是右上角的删除按钮图标）。实现的方式也是很简单：
父级容器设置样式：</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">position:relative;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">top:...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">left:...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">。。。（设置其他属性样式）</span></span></code></pre>
</div><p>子级容器设置样式（放两张图片的）：
第一张图片是设置样式是占满整个父级的所以不用设置position；
第二张图片就要设置<code>position:absolute;</code>（脱离常规文档流，当不会脱离父级下的文档流）</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">position:absoulte;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">top:...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">left:...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">。。。（其他样式）</span></span></code></pre>
</div><p>如果还需要设置层叠层显示问题，比如上面的子级容器下的第二张图片想越过父级容器设置并显示出来（因为文档流的问题）可以设置:<code>z-index:1;</code>
没设置前，删除符号会被遮挡：</p>
<CustomImage src='/growth-record/base/css/image-index-02.png' /><p>设置后，不会被遮挡了：</p>
<CustomImage src='/growth-record/base/css/image-index-03.png' /><h3 id="三-推荐参考资料" tabindex="-1">（三）推荐参考资料 <a class="header-anchor" href="#三-推荐参考资料" aria-label="Permalink to &quot;（三）推荐参考资料&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="https://juejin.im/post/5ba4efe36fb9a05cf52ac192" target="_blank" rel="noreferrer">CSS 中重要的层叠概念</a></li>
<li><a href="https://segmentfault.com/a/1190000013023485" target="_blank" rel="noreferrer">CSS中重要的BFC</a></li>
<li><a href="https://webdesign.tutsplus.com/zh-hans/articles/what-you-may-not-know-about-the-z-index-property--webdesign-16892" target="_blank" rel="noreferrer">关于z-index 那些你不知道的事</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[微信小程序之 swiper 组件上传图片删除后其余不显示]]></title>
            <link>https://super456.github.io/posts/growth-record/platform/applet/swiper-image-no-display.html</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/swiper-image-no-display.html</guid>
            <pubDate>Thu, 20 Sep 2018 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="微信小程序之-swiper-组件上传图片删除后其余不显示" tabindex="-1">微信小程序之 swiper 组件上传图片删除后其余不显示 <a class="header-anchor" href="#微信小程序之-swiper-组件上传图片删除后其余不显示" aria-label="Permalink to &quot;微信小程序之 swiper 组件上传图片删除后其余不显示&quot;">&ZeroWidthSpace;</a></h1>
<p>这个不知道是不是微信小程序官方的问题，简单描述一下遇到的问题：在使用swiper组件来预览显示用户上传的多张图片后，右上角有一个可以删除图片的按钮，用户可以点击删除符号删除上传的图片。<strong>重点是</strong>顺时针点击删除图片和删除中间的指定图片，都其余图片显示没问题。<strong>唯独</strong>删除最后一张图片，问题就来了，排序前面的图片显示不出来（空白）；但是可以查到图片组件还有图片地址的？？？（真机环境也测试过，问题效果是一样的）</p>
<h3 id="一-问题详情" tabindex="-1">（一）问题详情 <a class="header-anchor" href="#一-问题详情" aria-label="Permalink to &quot;（一）问题详情&quot;">&ZeroWidthSpace;</a></h3>
<p>1、问题效果图：</p>
<CustomImage src='/growth-record/platform/applet/swiper-image-no-01.gif' /><p>上传了三张图片，通过swiper组件显示出来，右上角的是删除符号操作，右边中间数字是当前索引值；
首先是点击删除第一张图片，后面图片正常显示并将第二张图片归为第一张，索引值也变为0；（三张图片变为两张）
再次点击删除的是两张图片中的第二张（索引值为1的），结果剩下显示的一张图片，为空白，查了图片地址显示没问题；如图：</p>
<CustomImage src='/growth-record/platform/applet/swiper-image-no-02.png' /><h3 id="二-问题分析" tabindex="-1">（二）问题分析 <a class="header-anchor" href="#二-问题分析" aria-label="Permalink to &quot;（二）问题分析&quot;">&ZeroWidthSpace;</a></h3>
<p>通过网上找资料和尝试排错，原来是小程序组件的属性这个问题导致的。</p>
<p>因为使用的是swiper组件，会有一个属性：<code>current</code> 表示当前所在滑块的 index值，默认为0，类型为Number；
也就是说，当你删除图片的时候，<code>current</code>不会改变，就是说：本来有三张图片的图片数组，默认显示第一张的话，<code>current='0'</code>；当删除第一张图片后，图片数组会发生变化，但<code>current='0'</code>是不变的，只要图片数组有值就会默认显示图片数组第一张图片（正常显示）；</p>
<p>所以，（三张图片的图片数组）当前显示第二张，<code>current='1'</code>；如果你删除第二张后，图片数组还有两张，就会显示原来是第三张的图片（当前显示的索引值为1），当你再删除当前这一张图片后，<code>current='1'</code>还是不变，但图片数组只有一张（索引值为0），就是索引值不存在了。
嗯嗯，就是这样，这就是为什么从后面删除数组图片（逆时针）时会导致显示空白的，但图片地址存在的问题。</p>
<h3 id="三-解决方法" tabindex="-1">（三）解决方法 <a class="header-anchor" href="#三-解决方法" aria-label="Permalink to &quot;（三）解决方法&quot;">&ZeroWidthSpace;</a></h3>
<p>1、动态设置swiper组件的属性current值：
<code>swiperCurrentIndex</code>默认为0</p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">swiper</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> autoplay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'false'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'{{swiperCurrentIndex}}'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> indicator-dots</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'true'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> circular</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'true'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> bindchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'goSettingCurrentIndex'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>2、swiper组件要设置bindchange触发事件（current 改变时会触发 change 事件），主要是防止用户是逆时针删除图片所导致的现象：</p>
<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> that</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">that.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  swiperCurrentIndex: e.detail.current</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>3、点击删除图片的操作：（这里有个注意点，就是data的数组值的长度会跟被赋值的arrayImg裁剪后的长度一样，这个不是简单赋值操作哈）</p>
<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> that</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> e.currentTarget.dataset.index</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arrayImg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> that.data.defaultAddImg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">arrayImg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(index, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (arrayImg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 图片已经删除完了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  that.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    isShowUploadImgs: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 显示上传图片按钮</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 还有图片</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (arrayImg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> index) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 判断用户删除的图片是不是图片数组内的最后一张，是则将swiper的current值为图片数组长度减一，可以保证显示上一张图片</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    that.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      defaultAddImg: arrayImg,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      swiperCurrentIndex: that.data.defaultAddImg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 删除的图片不是图片数组内的最后一张，这样可以保证当前显示下一张图片</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'删除的图片不是图片数组内的最后一张'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    that.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      defaultAddImg: arrayImg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>需要完整示例的可以私聊或留言，这个是工作中遇到的问题，暂时不方便放完整代码哈。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[微信小程序之 Grid 表格布局]]></title>
            <link>https://super456.github.io/posts/growth-record/platform/applet/grid-table-layout.html</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/grid-table-layout.html</guid>
            <pubDate>Mon, 03 Sep 2018 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="微信小程序之-grid-表格布局" tabindex="-1">微信小程序之 Grid 表格布局 <a class="header-anchor" href="#微信小程序之-grid-表格布局" aria-label="Permalink to &quot;微信小程序之 Grid 表格布局&quot;">&ZeroWidthSpace;</a></h1>
<p>在工作中常用的就是flex布局和grid布局了，因为本人对grid布局不是很熟练，这次主要是想模拟获取后台的动态数据来动态的设置表格布局，算是一个简单的尝试，毕竟之前没有用过。分享一下。</p>
<p>如果对css grid布局不熟的建议看着篇文章，介绍的很详细：<a href="http://www.css88.com/archives/8510/comment-page-1" target="_blank" rel="noreferrer">CSS Grid 布局完全指南(图解 Grid 详细教程)</a></p>
<h3 id="一-实现效果" tabindex="-1">（一）实现效果 <a class="header-anchor" href="#一-实现效果" aria-label="Permalink to &quot;（一）实现效果&quot;">&ZeroWidthSpace;</a></h3>
<p>跟我上一篇文章<a href="https://super456.github.io/posts/growth-record/platform/applet/custom-table-layout.html" target="_blank" rel="noreferrer">微信小程序之自定义 table 表格布局</a>实现的效果很像，但是我是要写这篇文章，因为这个方法优化了很多代码，值得参考学习。</p>
<CustomImage src='/growth-record/platform/applet/grid-table-layout.png' /><h3 id="二-实现过程" tabindex="-1">（二）实现过程 <a class="header-anchor" href="#二-实现过程" aria-label="Permalink to &quot;（二）实现过程&quot;">&ZeroWidthSpace;</a></h3>
<p>1、js 设置很简单，通过数组对象格式来模拟获取到的后台数据格式：</p>
<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    tableData: [{ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 模拟动态获取到的后台数据：数组对象格式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'table-th-cell'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'table-th-cell'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'table-th-cell'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'table-tr-cell'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'table-tr-cell'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'table-tr-cell'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'table-tr-cell'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'table-tr-cell'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'table-tr-cell'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>2、设置wxml也是一些常用的布局格式：</p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"table"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">block</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> wx:for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'{{tableData}}'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> wx:key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'*this'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'table-th'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> wx:if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'{{index</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">&#x3C;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">3}}'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{item.name}}&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'table-td'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> wx:else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{item.name}}&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>3、wxss设置，主要通过父容器设置为块级网格，然后设置 父容器的列、行大小 ，fr单位是等分分配列空间； 设置有多余数据时，自动添加新行时默认行高为：200rpx ；设置网格线大小 ；子元素的话可以根据自己自定义样式内容：</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  overflow-x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* 设置列、行大小 fr单位是等分分配列空间*/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">fr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">fr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">fr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* 有多余数据时，自动添加新行时默认行高为：200rpx */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  grid-auto-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* 设置网格线大小 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  grid-gap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.table-th</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  font-weight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">bold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#888</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.table-td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#ccc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>总的来说，相对于<code>display:table</code> 来布局网格简化了很多代码，更轻松了一点。
<strong>注意：</strong> 微信小程序很多安卓手机不兼容这个布局，亲测扎心了。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[微信小程序之自定义 table 表格布局]]></title>
            <link>https://super456.github.io/posts/growth-record/platform/applet/custom-table-layout.html</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/custom-table-layout.html</guid>
            <pubDate>Sun, 02 Sep 2018 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="微信小程序之自定义-table-表格布局" tabindex="-1">微信小程序之自定义 table 表格布局 <a class="header-anchor" href="#微信小程序之自定义-table-表格布局" aria-label="Permalink to &quot;微信小程序之自定义 table 表格布局&quot;">&ZeroWidthSpace;</a></h1>
<p>本文没有采用flex布局和grid布局来设置表格的，而是通过 <code>display: table;</code>来设置。一方面工作中经常用到这种自适应表格排版布局方式（包括方框列表及九宫格式），但是flex布局和grid布局来设置的话就很容易了，这次想通过另一种方法来实现，而且这种方法比较少用，所以想尝试一下，分享给大家。</p>
<p>如果对这个属性不熟的可以参考这篇文章，介绍的很详细：<a href="http://www.css88.com/archives/6308" target="_blank" rel="noreferrer">css Table布局-display:table</a></p>
<h3 id="一-实现效果" tabindex="-1">（一）实现效果 <a class="header-anchor" href="#一-实现效果" aria-label="Permalink to &quot;（一）实现效果&quot;">&ZeroWidthSpace;</a></h3>
<p>1、第一种实现效果：</p>
<CustomImage src='/growth-record/platform/applet/custom-table-layout-01.png' /><p><strong>注意：这是截图才看得到左边或右边的边框的，真机环境是看不到的哈</strong>
2、第二种实现效果：</p>
<CustomImage src='/growth-record/platform/applet/custom-table-layout-02.png' /><h3 id="二-实现过程" tabindex="-1">（二）实现过程 <a class="header-anchor" href="#二-实现过程" aria-label="Permalink to &quot;（二）实现过程&quot;">&ZeroWidthSpace;</a></h3>
<p>以第一种实现效果代码为准说明：
CSS属性的情况：</p>
<blockquote>
<p>table：指定对象作为块元素级的表格。类同于html标签<code>&lt;table&gt;</code>（CSS2）<br />
inline-table：指定对象作为内联元素级的表格。类同于html标签<code>&lt;table&gt;</code>（CSS2）<br />
table-caption：指定对象作为表格标题。类同于html标签<code>&lt;caption&gt;</code>（CSS2）<br />
table-cell：指定对象作为表格单元格。类同于html标签<code>&lt;td&gt;</code>（CSS2）<br />
table-row：指定对象作为表格行。类同于html标签<code>&lt;tr&gt;</code>（CSS2）<br />
table-row-group：指定对象作为表格行组。类同于html标签<code>&lt;tbody&gt;</code>（CSS2）<br />
table-column：指定对象作为表格列。类同于html标签<code>&lt;col&gt;</code>（CSS2）<br />
table-column-group：指定对象作为表格列组显示。类同于html标签<br />
<code>&lt;colgroup&gt;</code>（CSS2）<br />
table-header-group：指定对象作为表格标题组。类同于html标签<br />
<code>&lt;thead&gt;</code>（CSS2）<br />
table-footer-group：指定对象作为表格脚注组。类同于html标签<code>&lt;tfoot&gt;</code>（CSS2）<br /></p>
</blockquote>
<p>1、通过设置js里面的数组对象格式模拟动态后台获取的数据，然后将数组对象内容以三个元素为一组组成数组对象格式再合并成一个新的数组对象格式，之所以这样做就是为了，一行有三个单元格设计的:</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>Page({</span></span>
<span class="line"><span>  data: {</span></span>
<span class="line"><span>    tableData: [{ //模拟动态获取到的后台数据：数组对象格式</span></span>
<span class="line"><span>        id: 0,</span></span>
<span class="line"><span>        name: 'table-th-cell'</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        id: 1,</span></span>
<span class="line"><span>        name: 'table-th-cell'</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        id: 2,</span></span>
<span class="line"><span>        name: 'table-th-cell'</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        id: 3,</span></span>
<span class="line"><span>        name: 'table-tr-cell'</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        id: 4,</span></span>
<span class="line"><span>        name: 'table-tr-cell'</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        id: 5,</span></span>
<span class="line"><span>        name: 'table-tr-cell'</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        id: 6,</span></span>
<span class="line"><span>        name: 'table-tr-cell'</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        id: 7,</span></span>
<span class="line"><span>        name: 'table-tr-cell'</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        id: 8,</span></span>
<span class="line"><span>        name: 'table-tr-cell'</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    threeArray: '', //模拟将后台获取到的数组对象数据按照一行3个的单元数据的格式切割成新的数组对象（简单的说：比如获取到数组是9个元素，切分成，3个元素一组的子数组）</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  onLoad: function() {</span></span>
<span class="line"><span>    let that = this;</span></span>
<span class="line"><span>    let threeArray = [];</span></span>
<span class="line"><span>    // 使用for循环将原数据切分成新的数组</span></span>
<span class="line"><span>    for (let i = 0, len = that.data.tableData.length; i &#x3C; len; i += 3) {</span></span>
<span class="line"><span>      threeArray.push(that.data.tableData.slice(i, i + 3));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    console.log(threeArray);</span></span>
<span class="line"><span>    that.setData({</span></span>
<span class="line"><span>      threeArray: threeArray</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>})</span></span></code></pre>
</div><p>2、设置wxml:</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>&#x3C;view class="table"></span></span>
<span class="line"><span></span></span>
<span class="line"><span>  &#x3C;block wx:for='{{threeArray}}' wx:key='*this' wx:for-item='oneArray'></span></span>
<span class="line"><span>&#x3C;!-- 注意嵌套的数组对象 --></span></span>
<span class="line"><span>    &#x3C;view class="table-tr" wx:if='{{index&#x3C;1}}'></span></span>
<span class="line"><span>      &#x3C;block wx:for='{{oneArray}}' wx:key='id'></span></span>
<span class="line"><span>        &#x3C;view class="table-th">{{item.name}}&#x3C;/view></span></span>
<span class="line"><span>      &#x3C;/block></span></span>
<span class="line"><span>    &#x3C;/view></span></span>
<span class="line"><span>    &#x3C;view class="table-tr" wx:else></span></span>
<span class="line"><span>      &#x3C;block wx:for='{{oneArray}}' wx:key='id'></span></span>
<span class="line"><span>        &#x3C;view class="table-td">{{item.name}}&#x3C;/view></span></span>
<span class="line"><span>      &#x3C;/block></span></span>
<span class="line"><span>    &#x3C;/view></span></span>
<span class="line"><span>  &#x3C;/block></span></span>
<span class="line"><span>&#x3C;/view></span></span></code></pre>
</div><p>3、设置wxss:</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>.table {</span></span>
<span class="line"><span>  display: table;</span></span>
<span class="line"><span>  width: 100%;</span></span>
<span class="line"><span>  /* border-collapse 属性设置表格的边框是否被合并为一个单一的边框，解决相邻单元格边框未合并导致有些边框变粗的视觉效果 */</span></span>
<span class="line"><span>  border-collapse: collapse;</span></span>
<span class="line"><span>  overflow-x: hidden;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.table-tr {</span></span>
<span class="line"><span>  display: table-row;</span></span>
<span class="line"><span>  width: 100%;</span></span>
<span class="line"><span>  height: 200rpx;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.table-th {</span></span>
<span class="line"><span>  display: table-cell;</span></span>
<span class="line"><span>  font-weight: bold;</span></span>
<span class="line"><span>  border: 1px solid black;</span></span>
<span class="line"><span>  text-align: center;</span></span>
<span class="line"><span>  vertical-align: middle;</span></span>
<span class="line"><span>  background-color: #ccc;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.table-td {</span></span>
<span class="line"><span>  display: table-cell;</span></span>
<span class="line"><span>  border: 1px solid black;</span></span>
<span class="line"><span>  text-align: center;</span></span>
<span class="line"><span>  vertical-align: middle;</span></span>
<span class="line"><span>}</span></span></code></pre>
</div><p>总的来说，实现过程并不复杂，学会了可以使用很熟练的使用，这个方法实现表格布局还是挺有用的，在一些页面无缝接触的时候很常用。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[微信小程序之真机键盘弹窗遮挡样式问题]]></title>
            <link>https://super456.github.io/posts/growth-record/platform/applet/real-keyboard-masking.html</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/real-keyboard-masking.html</guid>
            <pubDate>Sat, 01 Sep 2018 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="微信小程序之真机键盘弹窗遮挡样式问题" tabindex="-1">微信小程序之真机键盘弹窗遮挡样式问题 <a class="header-anchor" href="#微信小程序之真机键盘弹窗遮挡样式问题" aria-label="Permalink to &quot;微信小程序之真机键盘弹窗遮挡样式问题&quot;">&ZeroWidthSpace;</a></h1>
<p>遇到了一个比较常见，但不注意就会犯错的问题：小程序里面经常会用到组件input，属性也很丰富，如果在页面排版中，将输入固定在底部作为评论之类的，可能就会遇到一个问题，在真机上测试（移动端），点击input组件默认会将键盘弹起时，自动上推页面，就会发现，因为弹窗很容易遮住input组件相关的内容及样式。</p>
<h3 id="一-问题详情" tabindex="-1">（一）问题详情 <a class="header-anchor" href="#一-问题详情" aria-label="Permalink to &quot;（一）问题详情&quot;">&ZeroWidthSpace;</a></h3>
<p>1、默认没有点击input输入框（评论框）的时候：</p>
<CustomImage src='/growth-record/platform/applet/keyboard-masking-01.jpeg' /><p>2、点击input输入框（评论框）的时候：</p>
<CustomImage src='/growth-record/platform/applet/keyboard-masking-02.jpeg' /><h3 id="二-问题分析" tabindex="-1">（二）问题分析 <a class="header-anchor" href="#二-问题分析" aria-label="Permalink to &quot;（二）问题分析&quot;">&ZeroWidthSpace;</a></h3>
<p>**注意：**这个是input组件在页面底部的时候，input在页面其他位置可能效果是不一样的。
这个是因为点击了input组件，键盘弹起时，自动上推页面，默认键盘弹窗弹出到位置是input组件输入聚焦位置（就是输入框的光标一直闪烁的位置）；所以就是没有设置input组件和键盘的位置距离导致的覆盖相关样式现象。</p>
<h3 id="三-解决方法" tabindex="-1">（三）解决方法 <a class="header-anchor" href="#三-解决方法" aria-label="Permalink to &quot;（三）解决方法&quot;">&ZeroWidthSpace;</a></h3>
<p>1、查找了一些网上资料说可以设置<code>cursor-spacing</code> 的属性距离。</p>
<CustomImage src='/growth-record/platform/applet/keyboard-masking-03.png' /><p>但是我尝试了好几次设置都没有什么作用效果，有点悲催，可能我没有get到这个属性的点。
没办法，只能使用自己的办法了：</p>
<CustomImage src='/growth-record/platform/applet/keyboard-masking-04.png' /><p>使用<code>bindfocus</code>、<code>bindblur</code> 操作函数来动态设置底部组件框与底部之间的距离（外边距）：<code>margin-bottom:50rpx;</code></p>
<p>解决问题流程：</p>
<ul>
<li>js data里面设置一个变量：<code>   inputMarBot: false, //评论框聚焦时，让评论框距离底部的距离为50rpx</code></li>
<li>wxml 页面：使用三元表示设置style input组件的父元素容器与底部外边距：<code>&lt;view class='write-comment' style=&quot;{{inputMarBot?'margin-bottom:50rpx':''}}&quot;&gt;</code>（关键，主要跟input的聚焦和是去焦点有关）及input组件定义属性：<code>bindfocus='settingMbShow' bindblur='settingMbNoShow'</code></li>
<li>js 定义聚焦和是去焦点函数：</li>
</ul>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span> // 评论输入框聚焦时，设置与底部的距离</span></span>
<span class="line"><span>  settingMbShow: function () {</span></span>
<span class="line"><span>    this.setData({</span></span>
<span class="line"><span>      inputMarBot: true</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  //  评论输入框失去聚焦时，设置与底部的距离（默认状态）</span></span>
<span class="line"><span>  settingMbNoShow: function () {</span></span>
<span class="line"><span>    this.setData({</span></span>
<span class="line"><span>      inputMarBot: false</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  },</span></span></code></pre>
</div><p><strong>实现效果：</strong></p>
<CustomImage src='/growth-record/platform/applet/keyboard-masking-05.jpeg' /><p>如果还有其他实现可行方法，欢迎留言交流。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[微信小程序之页面跳转传参数据： JSON 字符串转对象报错]]></title>
            <link>https://super456.github.io/posts/growth-record/platform/applet/page-url-json-error.html</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/page-url-json-error.html</guid>
            <pubDate>Fri, 31 Aug 2018 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="微信小程序之页面跳转传参数据-json-字符串转对象报错" tabindex="-1">微信小程序之页面跳转传参数据： JSON 字符串转对象报错 <a class="header-anchor" href="#微信小程序之页面跳转传参数据-json-字符串转对象报错" aria-label="Permalink to &quot;微信小程序之页面跳转传参数据： JSON 字符串转对象报错&quot;">&ZeroWidthSpace;</a></h1>
<p>工作中遇到了这个问题，之前也有遇到过，只是没有去研究这个问题，接下来简单说明一下。</p>
<h3 id="一-问题详情" tabindex="-1">（一）问题详情 <a class="header-anchor" href="#一-问题详情" aria-label="Permalink to &quot;（一）问题详情&quot;">&ZeroWidthSpace;</a></h3>
<p>我们在小程序的A页面向B页面跳转的时候，传了页面参数为param（页面参数值只能是字符串，参数值是根据用户点击的信息而不同的），所以传数组或对象需要使用JSON.stringify()转换，到了B页面需要将param获取到并通过JSON.parse()解析，结果问题是有些传过来json正常解析，有些则报这个错：</p>
<CustomImage src='/growth-record/platform/applet/page-url-json-error-01.png' /><p>也就是说B页面获取到的参数param值格式不是json格式，但是我是通过JSON.stringify()做数据转换的，格式有问题A页面跳转就会报错了，所以是参数传输过程微信小程序官方工具做了处理。</p>
<h3 id="二-问题原因" tabindex="-1">（二）问题原因 <a class="header-anchor" href="#二-问题原因" aria-label="Permalink to &quot;（二）问题原因&quot;">&ZeroWidthSpace;</a></h3>
<p>查了一下，可以正确从A页面跳转到B页面带参数正常显示的，和不正常显示的控制台输出对比一下，发现原来是这个原因造成的。-_-</p>
<p>1、json解析正常页面获取到的数据格式是完整的：</p>
<CustomImage src='/growth-record/platform/applet/page-url-json-error-02.png' /><p>2、json解析错误不正常页面显示获取到的数据是不完整的：</p>
<CustomImage src='/growth-record/platform/applet/page-url-json-error-03.png' /><p><strong>总结：</strong> 由于页面传输的数据太大，导致部分传输的数据内容被截断，导致json格式解析报错，微信官方是有限制页面跳转参数数据大小的，本人忘记了，知道的欢迎留言哈。</p>
<h3 id="三-解决方法" tabindex="-1">（三）解决方法 <a class="header-anchor" href="#三-解决方法" aria-label="Permalink to &quot;（三）解决方法&quot;">&ZeroWidthSpace;</a></h3>
<p>1、通过A页面设置缓存数据到B页面获取缓存到的数据格式来传输，不过不推荐，因为缓存数据大小也是有限制的，不适合大数据格式的缓存，小数据是可以的。
2、通过A页面传一个id到B页面，然后再重新请求接口获取新数据。
3、可以通过将A页面需要传的数据赋值给全局变量app.js中的全局变量，然后B页面<code>getApp()</code>获取全局变量就可以了（推荐，经常用）。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[微信小程序之下拉菜单的三级联动筛选框]]></title>
            <link>https://super456.github.io/posts/growth-record/platform/applet/three-tier-screening.html</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/three-tier-screening.html</guid>
            <pubDate>Sun, 26 Aug 2018 20:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="微信小程序之下拉菜单的三级联动筛选框" tabindex="-1">微信小程序之下拉菜单的三级联动筛选框 <a class="header-anchor" href="#微信小程序之下拉菜单的三级联动筛选框" aria-label="Permalink to &quot;微信小程序之下拉菜单的三级联动筛选框&quot;">&ZeroWidthSpace;</a></h1>
<p>下拉菜单很常见，网上也有很多例子，自己也根据网上的资料，仿写了一个。感谢作者<a href="https://blog.csdn.net/laokdidiao/article/details/53565679" target="_blank" rel="noreferrer">小小小是我</a>提供了资料，在此做了二次开发，也分享一下。因为自己最近也需要写个小程序的下拉框的三级菜单筛选，分享给有需要的人哈。</p>
<h3 id="一-、实现效果" tabindex="-1">（一）、实现效果 <a class="header-anchor" href="#一-、实现效果" aria-label="Permalink to &quot;（一）、实现效果&quot;">&ZeroWidthSpace;</a></h3>
<p>1、原作者资料的实现效果：<a href="https://blog.csdn.net/laokdidiao/article/details/53565679" target="_blank" rel="noreferrer">点击跳转微信小程序仿闲鱼『下拉菜单』</a></p>
<CustomImage src='/growth-record/platform/applet/three-tier-screening-01.gif' /><p>2、自己二次开发实现效果：</p>
<CustomImage src='/growth-record/platform/applet/three-tier-screening-02.gif' /><h3 id="二-实现过程" tabindex="-1">（二）实现过程 <a class="header-anchor" href="#二-实现过程" aria-label="Permalink to &quot;（二）实现过程&quot;">&ZeroWidthSpace;</a></h3>
<p>实现的代码也并不复杂，主要是控制各个容器的显示和隐藏效果以及数组对象选中时激活判断的样式，不过也存在一些小小的样式问题，如果你使用的话会发现的哈。自己也是简单的写了一下，没有花过多的时间在样式上挣扎，哈哈哈。</p>
<h3 id="三-项目代码" tabindex="-1">（三）项目代码 <a class="header-anchor" href="#三-项目代码" aria-label="Permalink to &quot;（三）项目代码&quot;">&ZeroWidthSpace;</a></h3>
<p><a href="https://github.com/super456/dropDownBoxFilter" target="_blank" rel="noreferrer">点击跳转下载</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[微信小程序之简单双向调节的 Slider 滑动选择器]]></title>
            <link>https://super456.github.io/posts/growth-record/platform/applet/slider.html</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/slider.html</guid>
            <pubDate>Wed, 22 Aug 2018 20:08:08 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="微信小程序之简单双向调节的-slider-滑动选择器" tabindex="-1">微信小程序之简单双向调节的 Slider 滑动选择器 <a class="header-anchor" href="#微信小程序之简单双向调节的-slider-滑动选择器" aria-label="Permalink to &quot;微信小程序之简单双向调节的 Slider 滑动选择器&quot;">&ZeroWidthSpace;</a></h1>
<p>简单说明一下，这是用微信官方的slider组件拼接的，没有用到其他框架哈。</p>
<h3 id="一-实现效果" tabindex="-1">（一）实现效果 <a class="header-anchor" href="#一-实现效果" aria-label="Permalink to &quot;（一）实现效果&quot;">&ZeroWidthSpace;</a></h3>
<CustomImage src='/growth-record/platform/applet/slider-01.gif' /><h3 id="二-实现过程" tabindex="-1">（二）实现过程 <a class="header-anchor" href="#二-实现过程" aria-label="Permalink to &quot;（二）实现过程&quot;">&ZeroWidthSpace;</a></h3>
<p>主要是将两个滑动选择器拼接在一起、各自设置所占长度比，就可以实现双向滚动调节了，但是有一个问题，我没有解决到，就是一个固定的滑动区域内，左右滑块可以相互交接互相滑动，尝试了一下没弄出来。
1、wxml代码：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>&#x3C;view class='sliderHCon'></span></span>
<span class="line"><span>  &#x3C;view class='showMoney'></span></span>
<span class="line"><span>    &#x3C;text class='MoneyValue'>￥{{leftValue}}&#x3C;/text></span></span>
<span class="line"><span>    &#x3C;text class='MoneyValue'>￥{{rightValue}}&#x3C;/text></span></span>
<span class="line"><span>  &#x3C;/view></span></span>
<span class="line"><span>  &#x3C;view class='twoSlider'></span></span>
<span class="line"><span>    &#x3C;slider min='{{leftMin}}' max='{{leftMax}}' value='{{leftValue}}' activeColor='#cecacb' backgroundColor='#f26a36' block-size='20' step='100' style='width:{{leftWidth}}%;margin-right:0rpx;' bindchange="leftChange" /></span></span>
<span class="line"><span>    &#x3C;slider min='{{rightMin}}' max='{{rightMax}}' value='{{rightValue}}' activeColor='#f26a36' backgroundColor='#cecacb' block-size='20' step='100' style='width:{{rightWidth}}%;margin-left:0rpx;' bindchange="rightChange" /></span></span>
<span class="line"><span>  &#x3C;/view></span></span>
<span class="line"><span>&#x3C;/view></span></span></code></pre>
</div><p>2、wxss代码：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>.sliderHCon {</span></span>
<span class="line"><span>  margin: 0 40rpx 0 40rpx;</span></span>
<span class="line"><span>  height: 250rpx;</span></span>
<span class="line"><span>  border: 1rpx solid red;</span></span>
<span class="line"><span>  width: 70%;</span></span>
<span class="line"><span>  margin: auto;</span></span>
<span class="line"><span>  display: flex;</span></span>
<span class="line"><span>  justify-content: center;</span></span>
<span class="line"><span>  align-items: center;</span></span>
<span class="line"><span>  flex-direction: column;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.MoneyValue {</span></span>
<span class="line"><span>  font-size: 30rpx;</span></span>
<span class="line"><span>  text-align: center;</span></span>
<span class="line"><span>  color: #999;</span></span>
<span class="line"><span>  margin-top: 15rpx;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.showMoney text {</span></span>
<span class="line"><span>  margin-right: 30rpx;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.twoSlider {</span></span>
<span class="line"><span>  width: 100%;</span></span>
<span class="line"><span>  display: flex;</span></span>
<span class="line"><span>  flex-direction: row;</span></span>
<span class="line"><span>  justify-content: center;</span></span>
<span class="line"><span>  align-items: center;</span></span>
<span class="line"><span>}</span></span></code></pre>
</div><p>3、js代码：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>  /**</span></span>
<span class="line"><span>   * 页面的初始数据</span></span>
<span class="line"><span>   */</span></span>
<span class="line"><span>  data: {</span></span>
<span class="line"><span>    leftMin: 0, //左边滑块最小值</span></span>
<span class="line"><span>    leftMax: 10000, //左边滑块最大值</span></span>
<span class="line"><span>    rightMin: 0, //右边滑块的最小值</span></span>
<span class="line"><span>    rightMax: 10000, //右边滑块最大值</span></span>
<span class="line"><span>    leftValue: 1000, //左边滑块默认值</span></span>
<span class="line"><span>    rightValue: 6000, //右边滑块默认值</span></span>
<span class="line"><span>    leftWidth: '50', //左边滑块可滑动长度：百分比</span></span>
<span class="line"><span>    rightWidth: '50', //右边滑块可滑动长度：百分比</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 左边滑块滑动的值</span></span>
<span class="line"><span>  leftChange: function(e) {</span></span>
<span class="line"><span>    console.log('左边改变的值为：' + e.detail.value);</span></span>
<span class="line"><span>    var that = this;</span></span>
<span class="line"><span>    that.setData({</span></span>
<span class="line"><span>      leftValue: e.detail.value //设置左边当前值</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  // 右边滑块滑动的值</span></span>
<span class="line"><span>  rightChange: function(e) {</span></span>
<span class="line"><span>    console.log('右边改变的值为：' + e.detail.value);</span></span>
<span class="line"><span>    var that = this;</span></span>
<span class="line"><span>    that.setData({</span></span>
<span class="line"><span>      rightValue: e.detail.value,</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  },</span></span></code></pre>
</div><p>如果想参考其他小程序框架做的，实现效果如下，<a href="https://www.imooc.com/article/34271" target="_blank" rel="noreferrer">可以参考这篇wepy写的介绍文章</a></p>
<CustomImage src='/growth-record/platform/applet/slider-02.jpeg' />]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[微信小程序之 scroll-view 横向滚动不能显示]]></title>
            <link>https://super456.github.io/posts/growth-record/platform/applet/scroll-view.html</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/scroll-view.html</guid>
            <pubDate>Wed, 22 Aug 2018 20:03:07 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="微信小程序之-scroll-view-横向滚动不能显示" tabindex="-1">微信小程序之 scroll-view 横向滚动不能显示 <a class="header-anchor" href="#微信小程序之-scroll-view-横向滚动不能显示" aria-label="Permalink to &quot;微信小程序之 scroll-view 横向滚动不能显示&quot;">&ZeroWidthSpace;</a></h1>
<p>之前在写scroll-view（可滚动视图区域）遇到一个问题，花一点时间记录分享一下，竖向滚动视图没什么大问题，只需要设置<code>height：rpx;</code> 滚动高度区域，然而横向滚动区域就需要注意两个问题了。</p>
<h3 id="一-实现效果" tabindex="-1">（一）实现效果 <a class="header-anchor" href="#一-实现效果" aria-label="Permalink to &quot;（一）实现效果&quot;">&ZeroWidthSpace;</a></h3>
<CustomImage src='/growth-record/platform/applet/scroll-view-01.gif' /><p>###（二）注意设置两个属性
一开始以为只要照着微信官方的文档介绍就可以想怎么写就怎么写了，结果一直调试不出来，按照官方介绍的属性设置了，子元素容器会各占一行，而且，父元素容器会内容换行，试了很多CSS属性，才发现需要设置的两个属性就可以了：</p>
<p>1、<code>display:inline-block;</code> 设置子元素容器为行间模块：</p>
<blockquote>
<p>解释一下display的几个常用的属性值，inline ， block， inline-block<br /></p>
<p><strong>inline:</strong>（1） 使元素变成行内元素，拥有行内元素的特性，即可以与其他行内元素共享一行，不会独占一行.<br />
（2）不能更改元素的height，width的值，大小由内容撑开.<br />
（3）可以使用padding，margin的left和right产生边距效果，但是top和bottom就不行.<br /></p>
<p><strong>block:</strong>（1）使元素变成块级元素，独占一行，在不设置自己的宽度的情况下，块级元素会默认填满父级元素的宽度.<br />
（2）能够改变元素的height，width的值.<br />
（3） 可以设置padding，margin的各个属性值，top，left，bottom，right都能够产生边距效果.<br />
<strong>inline-block:</strong> 结合了inline与block的一些特点，结合了上述inline的第1个特点和block的第2,3个特点.<br />
用通俗的话讲，就是不独占一行的块级元素。<a href="https://www.cnblogs.com/Ry-yuan/p/6848197.html" target="_blank" rel="noreferrer">详细说明可以查看这篇文章</a></p>
</blockquote>
<CustomImage src='/growth-record/platform/applet/scroll-view-02.png' /><p>2、设置父元素容器<code>  white-space: nowrap;</code>容器不换行显示：</p>
<CustomImage src='/growth-record/platform/applet/scroll-view-03.png' /><p>如果还有遇到的其他问题，欢迎留言交流。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[微信小程序之去除 Button 默认样式]]></title>
            <link>https://super456.github.io/posts/growth-record/platform/applet/button-default-style.html</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/button-default-style.html</guid>
            <pubDate>Fri, 10 Aug 2018 20:08:08 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="微信小程序之去除-button-默认样式" tabindex="-1">微信小程序之去除 Button 默认样式 <a class="header-anchor" href="#微信小程序之去除-button-默认样式" aria-label="Permalink to &quot;微信小程序之去除 Button 默认样式&quot;">&ZeroWidthSpace;</a></h1>
<p>在小程序开发过程中，使用率蛮高的组件button，因为经常要去除默认样式，然后再自定义样式，所以经常写，自己也总结分享一下简单的实现步骤。</p>
<h3 id="一-实现效果" tabindex="-1">（一）实现效果 <a class="header-anchor" href="#一-实现效果" aria-label="Permalink to &quot;（一）实现效果&quot;">&ZeroWidthSpace;</a></h3>
<p>1、实现前（默认样式）：</p>
<CustomImage src='/growth-record/platform/applet/button-default-01.png' /><p>2、实现后（去除默认边框和背景色）：</p>
<CustomImage src='/growth-record/platform/applet/button-default-02.png' /><h3 id="二-实现过程" tabindex="-1">（二）实现过程 <a class="header-anchor" href="#二-实现过程" aria-label="Permalink to &quot;（二）实现过程&quot;">&ZeroWidthSpace;</a></h3>
<p>首先了解一下默认的样式有哪些，然后根据自己的UI来实现：</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">margin-right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">padding-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">14</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">padding-right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">14</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">box-sizing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">border-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">18</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">text-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">text-decoration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2.55555556</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">-webkit-tap-highlight-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">transparent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#F8F8F8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>1、使用<code>::after</code> 伪类选择器，因为button的边框样式是通过<code>::after</code>方式实现的，如果在button上定义边框就会出现两条边框线，所以我们可以使用<code>::after</code>的方式去覆盖默认值。</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>2、还需要在将按钮背景色设置为白色，因为按钮默认背景色是灰色的。</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#fff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>3、去掉默认的圆角：</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>这样就可以搞定小程序按钮默认样式了，只是相当于一个文本的样式，还是有很多button的默认样式没有去除的，这个需要根据个人需求来设置的，这里不过多说明，如果需要自定义可以在按钮上一个类选择器就可以搞定。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[微信小程序之图片遮罩层 Demo]]></title>
            <link>https://super456.github.io/posts/growth-record/platform/applet/image-masking-demo.html</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/image-masking-demo.html</guid>
            <pubDate>Sun, 29 Jul 2018 20:07:01 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="微信小程序之图片遮罩层-demo" tabindex="-1">微信小程序之图片遮罩层 Demo <a class="header-anchor" href="#微信小程序之图片遮罩层-demo" aria-label="Permalink to &quot;微信小程序之图片遮罩层 Demo&quot;">&ZeroWidthSpace;</a></h1>
<p>在工作中经常会用到遮罩层弹窗，所以简单分享一下，之前写过的一个弹出广告图片遮罩层功能demo。</p>
<h3 id="一-实现效果" tabindex="-1">（一）实现效果 <a class="header-anchor" href="#一-实现效果" aria-label="Permalink to &quot;（一）实现效果&quot;">&ZeroWidthSpace;</a></h3>
<CustomImage src='/growth-record/platform/applet/image-masking-demo.gif' /><h3 id="二-实现过程" tabindex="-1">（二）实现过程 <a class="header-anchor" href="#二-实现过程" aria-label="Permalink to &quot;（二）实现过程&quot;">&ZeroWidthSpace;</a></h3>
<p>实现过程主要是设置css样式，比较容易理解。
1、设置wxml代码布局：设置一个背景布局：用来显示灰色背景；嵌套一个显示展示图片容器，嵌套一个显示闭关按钮的容器。</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>   &#x3C;view class="b1" hidden="{{flag}}"></span></span>
<span class="line"><span>		&#x3C;view class="b2"></span></span>
<span class="line"><span>			&#x3C;image src='../../images/test.jpg'/></span></span>
<span class="line"><span>		&#x3C;/view></span></span>
<span class="line"><span>		  &#x3C;view class="t_w"></span></span>
<span class="line"><span>		   &#x3C;cover-view class="t_image" bindtap="closeMask"></span></span>
<span class="line"><span>		     &#x3C;cover-image  src="../../images/qcm.png">&#x3C;/cover-image></span></span>
<span class="line"><span>		    &#x3C;/cover-view></span></span>
<span class="line"><span>		  &#x3C;/view></span></span>
<span class="line"><span>	&#x3C;/view></span></span></code></pre>
</div><p>2、wxss样式设置：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>/* 设置背景遮罩层样式 */</span></span>
<span class="line"><span>.b1 {</span></span>
<span class="line"><span>  position: fixed;</span></span>
<span class="line"><span>  width: 100%;</span></span>
<span class="line"><span>  height: 100%;</span></span>
<span class="line"><span>  top: 0;</span></span>
<span class="line"><span>  background: rgba(0, 0, 0, 0.4);</span></span>
<span class="line"><span>  display: flex;</span></span>
<span class="line"><span>  justify-content: center;</span></span>
<span class="line"><span>  align-items: center;</span></span>
<span class="line"><span>  flex-direction: column;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>/* 设置展示图片大小 */</span></span>
<span class="line"><span>.b2 {</span></span>
<span class="line"><span>  width: 50%;</span></span>
<span class="line"><span>  height: 50%;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>/* 设置展示图片与关闭按钮图片的距离 */</span></span>
<span class="line"><span>.t_w {</span></span>
<span class="line"><span>  margin-top: 20rpx;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>/* 设置关闭按钮图片显示的大小 */</span></span>
<span class="line"><span>.b2 image {</span></span>
<span class="line"><span>  width: 100%;</span></span>
<span class="line"><span>  height: 100%;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>/* 设置关闭按钮宽高 */</span></span>
<span class="line"><span>.t_image {</span></span>
<span class="line"><span>  width: 60rpx;</span></span>
<span class="line"><span>  height: 60rpx;</span></span>
<span class="line"><span>}</span></span></code></pre>
</div><p>3、 js两个方法控制显示与关闭操作：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span> data: {</span></span>
<span class="line"><span>    motto: '微信遮罩层显示',</span></span>
<span class="line"><span>   flag: true,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  showMask:function(){</span></span>
<span class="line"><span>    this.setData({ flag: false })</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  closeMask: function () {</span></span>
<span class="line"><span>    this.setData({ flag: true })</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>})</span></span></code></pre>
</div><h3 id="三-完整代码" tabindex="-1">（三）完整代码 <a class="header-anchor" href="#三-完整代码" aria-label="Permalink to &quot;（三）完整代码&quot;">&ZeroWidthSpace;</a></h3>
<p><a href="https://github.com/super456/wechatMask" target="_blank" rel="noreferrer">代码下载</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[微信小程序之登录欢迎页面 Demo]]></title>
            <link>https://super456.github.io/posts/growth-record/platform/applet/login-welcome-demo.html</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/login-welcome-demo.html</guid>
            <pubDate>Sun, 29 Jul 2018 20:07:01 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="微信小程序之登录欢迎页面-demo" tabindex="-1">微信小程序之登录欢迎页面 Demo <a class="header-anchor" href="#微信小程序之登录欢迎页面-demo" aria-label="Permalink to &quot;微信小程序之登录欢迎页面 Demo&quot;">&ZeroWidthSpace;</a></h1>
<p>之前有用过小程序的欢迎页面，也是GitHub上找到的一个案例。近期有用到，简单的分享一下，可以让有需要的人避免重复造轮子和更好的创新学习。</p>
<h3 id="一-效果预览" tabindex="-1">（一）效果预览 <a class="header-anchor" href="#一-效果预览" aria-label="Permalink to &quot;（一）效果预览&quot;">&ZeroWidthSpace;</a></h3>
<p>直接看效果如何，是否符合您的要求，不符合直接结束浏览，避免浪费您的时间。</p>
<CustomImage src='/growth-record/platform/applet/login-welcome-01.gif' /><h3 id="二-代码目录" tabindex="-1">（二）代码目录 <a class="header-anchor" href="#二-代码目录" aria-label="Permalink to &quot;（二）代码目录&quot;">&ZeroWidthSpace;</a></h3>
<p>简单实用，直接下载工具打开预览，<a href="https://github.com/super456/wechatWeclomePage" target="_blank" rel="noreferrer">代码下载</a></p>
<CustomImage src='/growth-record/platform/applet/login-welcome-02.png' /><h3 id="三-参考文献" tabindex="-1">（三）参考文献 <a class="header-anchor" href="#三-参考文献" aria-label="Permalink to &quot;（三）参考文献&quot;">&ZeroWidthSpace;</a></h3>
<p><a href="https://github.com/EastWorld/wechat-app-mall" target="_blank" rel="noreferrer">微信小程序商城，微信小程序微店</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[DIV + CSS 设置水平垂直居中方法]]></title>
            <link>https://super456.github.io/posts/growth-record/base/css/center-horizontally-vertically.html</link>
            <guid>https://super456.github.io/posts/growth-record/base/css/center-horizontally-vertically.html</guid>
            <pubDate>Sun, 15 Jul 2018 20:09:09 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="div-css-设置水平垂直居中方法" tabindex="-1">DIV + CSS 设置水平垂直居中方法 <a class="header-anchor" href="#div-css-设置水平垂直居中方法" aria-label="Permalink to &quot;DIV + CSS 设置水平垂直居中方法&quot;">&ZeroWidthSpace;</a></h1>
<p><strong>之前写前端页面经常会遇到这个问题，所以抽了个时间总结了一下这些常用的方法，通常分为两种情况来设置：已知宽高和未知。简单的分享一下经验。</strong></p>
<h3 id="一-已知宽高情况的设置" tabindex="-1">（一）已知宽高情况的设置 <a class="header-anchor" href="#一-已知宽高情况的设置" aria-label="Permalink to &quot;（一）已知宽高情况的设置&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>
<p><code>position：absolute;</code>，<code>margin：auto;</code>使用position的绝对定位和margin的居中定位 ，四个方向位置距离设置成一样就行了（通过填充父元素的可用空间 ，子元素设定了宽高，那么多余的空间，被margin：auto平均分配的原理）：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>//html代码</span></span>
<span class="line"><span>  &#x3C;div class="box1"></span></span>
<span class="line"><span>         &#x3C;div class="box2">div+css设置水平垂直居中显示&#x3C;/div></span></span>
<span class="line"><span> &#x3C;/div></span></span>
<span class="line"><span> //css样式代码</span></span>
<span class="line"><span>     .box1 {</span></span>
<span class="line"><span>     width: 400px;</span></span>
<span class="line"><span>     height: 400px;</span></span>
<span class="line"><span>     margin: auto;</span></span>
<span class="line"><span>     border: 1px solid red;</span></span>
<span class="line"><span>             /* 位置值设置相等即可*/</span></span>
<span class="line"><span>     top: 0;</span></span>
<span class="line"><span>     left: 0;</span></span>
<span class="line"><span>     right: 0;</span></span>
<span class="line"><span>     bottom: 0;</span></span>
<span class="line"><span>     position: absolute;</span></span>
<span class="line"><span> }</span></span></code></pre>
</div><p>运行结果：</p>
</li>
</ol>
<CustomImage src='/growth-record/base/css/center-01.png' /><ol start="2">
<li>设置 使用position的绝对定位和margin的居中定位，top和left设置与屏幕相距成50%，然后用transform向左（上）平移它自己宽度（高度）的50%即可：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>    .box1 {</span></span>
<span class="line"><span>     width: 400px;</span></span>
<span class="line"><span>     height: 400px;</span></span>
<span class="line"><span>     margin: auto;</span></span>
<span class="line"><span>     border: 1px solid red;</span></span>
<span class="line"><span>     top: 50%;</span></span>
<span class="line"><span>     left: 50%;</span></span>
<span class="line"><span>     position: absolute;</span></span>
<span class="line"><span>     transform: translate(-50%,-50%);</span></span>
<span class="line"><span> }</span></span></code></pre>
</div></li>
</ol>
<p>运行结果一样。
3. 设置 使用position的绝对定位和margin的居中定位，top和left设置与屏幕相距成50%，使用<code>margin:高的一半px 0 0 宽的一半px;</code> 即可：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>    .box1 {</span></span>
<span class="line"><span>     width: 400px;</span></span>
<span class="line"><span>     height: 400px;</span></span>
<span class="line"><span>     margin: auto;</span></span>
<span class="line"><span>     border: 1px solid red;</span></span>
<span class="line"><span>     top: 50%;</span></span>
<span class="line"><span>     left: 50%;</span></span>
<span class="line"><span>     position: absolute;</span></span>
<span class="line"><span>     margin: -200px 0 0 -200px;</span></span>
<span class="line"><span> }</span></span></code></pre>
</div><h3 id="二-未知元素宽高" tabindex="-1">（二）未知元素宽高 <a class="header-anchor" href="#二-未知元素宽高" aria-label="Permalink to &quot;（二）未知元素宽高&quot;">&ZeroWidthSpace;</a></h3>
<p>这里是使用了两个div的class为box1和box2，方便区别显示，主要设置box2来显示；</p>
<ol>
<li>通过position的绝对定位和固定定位left和top都设置相对屏幕的50%距离，然后使用transform的translate负偏移来显示：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>//html</span></span>
<span class="line"><span>    &#x3C;div class="box1"></span></span>
<span class="line"><span>     &#x3C;div class="box2">div+css设置水平垂直居中显示&#x3C;/div></span></span>
<span class="line"><span> &#x3C;/div></span></span>
<span class="line"><span> //css</span></span>
<span class="line"><span>     .box2 {</span></span>
<span class="line"><span>     border: 5px solid green;</span></span>
<span class="line"><span>     position: absolute;</span></span>
<span class="line"><span>     top: 50%;</span></span>
<span class="line"><span>     left: 50%;</span></span>
<span class="line"><span>     transform: translate(-50%,-50%);</span></span>
<span class="line"><span></span></span>
<span class="line"><span> }</span></span></code></pre>
</div>运行结果：</li>
</ol>
<CustomImage src='/growth-record/base/css/center-02.png' /><ol start="2">
<li>通过css设置父元素为display: table，子元素为 display: table-cell，这种方法是让元素包含的内容居中，但是会占据整个父元素，因为子元素没有设置宽高的，如下所示（红线方框是设置宽高的父元素）：</li>
</ol>
<CustomImage src='/growth-record/base/css/center-03.png' /><ol start="3">
<li>最实用的方法：css3新的布局方法——弹性布局 display: flex。在这个方法中，不管是在已知或未知元素宽高的情况下，都能使元素居中显示（推荐使用）。</li>
</ol>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>//css</span></span>
<span class="line"><span>.box1 {</span></span>
<span class="line"><span>        width: 400px;</span></span>
<span class="line"><span>        height: 400px;</span></span>
<span class="line"><span>        margin: auto;</span></span>
<span class="line"><span>        border: 5px solid red;</span></span>
<span class="line"><span>        display: flex;</span></span>
<span class="line"><span>        align-items: center;/*垂直居中*/</span></span>
<span class="line"><span>        justify-content: center;/*水平居中*/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    .box2 {</span></span>
<span class="line"><span>        border: 5px solid green;</span></span>
<span class="line"><span>    }</span></span></code></pre>
</div><p>运行结果：</p>
<CustomImage src='/growth-record/base/css/center-04.png' />]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue2 基础知识易错点]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/basics-knowledge.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/basics-knowledge.html</guid>
            <pubDate>Sat, 14 Jul 2018 20:01:01 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vue2-基础知识易错点" tabindex="-1">Vue2 基础知识易错点 <a class="header-anchor" href="#vue2-基础知识易错点" aria-label="Permalink to &quot;Vue2 基础知识易错点&quot;">&ZeroWidthSpace;</a></h1>
<p><strong>学完vue2.0，在写代码啦官网的<a href="https://xiedaimala.com/courses/0d531a6f-40a7-4120-a8f6-9e816ff9d51c#/common" target="_blank" rel="noreferrer">方方老师的《Vue 自测题》</a>测试了一下，惨不忍睹，记录一下测试中的容易错误知识点及坑。</strong></p>
<CustomImage src='/growth-record/frame/vue/basic-01.png' /><h3 id="一-安装与介绍" tabindex="-1">（一）安装与介绍 <a class="header-anchor" href="#一-安装与介绍" aria-label="Permalink to &quot;（一）安装与介绍&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>
<p>v-bind绑定之问题
html部分：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>    &#x3C;div id="app"></span></span>
<span class="line"><span>   &#x3C;span ____________???____________></span></span>
<span class="line"><span>     鼠标悬停几秒钟查看此处动态绑定的提示信息！</span></span>
<span class="line"><span>   &#x3C;/span></span></span>
<span class="line"><span> &#x3C;/div></span></span></code></pre>
</div><p>js部分：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>var app = new Vue({</span></span></code></pre>
</div></li>
</ol>
<p>el: '#app',
data: {
message: 'Hello Vue!'
}
})</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>问号处应该填入什么，才能使得 span 的 title 为 message 的值？</span></span>
<span class="line"><span></span></span>
<span class="line"><span>答案是：</span></span>
<span class="line"><span>(1).`:title="message"`；</span></span>
<span class="line"><span>(2).`v-bind:title="message"`；</span></span>
<span class="line"><span>(3).` :title=message`；</span></span>
<span class="line"><span>(4).`v-bind:title=message`；</span></span>
<span class="line"><span>后两种方法很迷，没找到解释，知道的小伙伴欢迎留言，建议答案都自己亲测试一下。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. 关于不同版本的都是正确的说法：</span></span>
<span class="line"><span>（1）如果你需要在客户端编译模板 (比如传入一个字符串给 template 选项，或挂载到一个元素上并以其 DOM 内部的 HTML 作为模板)，就将需要加上编译器，即完整版；</span></span>
<span class="line"><span>（2）当使用 vue-loader 或 vueify 的时候，*.vue 文件内部的模板会在构建时预编译成 JavaScript。你在最终打好的包里实际上是不需要编译器的，所以只用运行时版本即可；</span></span>
<span class="line"><span>（3）运行时版本相比完整版体积要小约 30%；</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### （二）实例与模板</span></span>
<span class="line"><span>1. `var vm = new Vue(options)`其中 options 是一个对象，请问文档中说 options 可以包含哪些 key ？</span></span>
<span class="line"><span></span></span>
<span class="line"><span>答案是：</span></span>
<span class="line"><span>（1） data props propsData computed methods watch</span></span>
<span class="line"><span>（2）el template render renderError</span></span>
<span class="line"><span>（3）beforeCreate created beforeMount mounted beforeUpdate updated activated deactivated beforeDestroy destroyed errorCaptured</span></span>
<span class="line"><span>（4）directives filters components parent mixins extends provide inject</span></span>
<span class="line"><span>（5）name delimiters functional model inheritAttrs comments</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. data数据问题</span></span>
<span class="line"><span>    html</span></span>
<span class="line"><span> ```</span></span>
<span class="line"><span></span></span>
<span class="line"><span> &#x3C;div id="app"></span></span>
<span class="line"><span>     &#x3C;span class=span-a></span></span>
<span class="line"><span>       {{obj.a}}</span></span>
<span class="line"><span>     &#x3C;/span></span></span>
<span class="line"><span>     &#x3C;span class=span-b></span></span>
<span class="line"><span>       {{obj.b}}</span></span>
<span class="line"><span>     &#x3C;/span></span></span>
<span class="line"><span>   &#x3C;/div></span></span>
<span class="line"><span> ```</span></span>
<span class="line"><span>    js</span></span>
<span class="line"><span> ```</span></span>
<span class="line"><span> var app = new Vue({</span></span>
<span class="line"><span>   el: '#app',</span></span>
<span class="line"><span>   data: {</span></span>
<span class="line"><span>     obj: {</span></span>
<span class="line"><span>       a: 'a',</span></span>
<span class="line"><span>     }</span></span>
<span class="line"><span>   },</span></span>
<span class="line"><span> })</span></span>
<span class="line"><span> app.obj.a = 'a2'</span></span>
<span class="line"><span> app.obj.b = 'b'</span></span>
<span class="line"><span> ```</span></span>
<span class="line"><span>    请问最终 span-a 和 span-b 中分别展示什么字符串？</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    答案是：` span-a 中显示a2，span-b 中显示b`，注意不是显示undefined。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. 文档中建议 Vue 实例的生命周期钩子不要写成箭头函数，给出的理由是什么</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    答：</span></span>
<span class="line"><span>    （1）箭头函数是和父级上下文绑定在一起的，this 不会是如你所预期的 Vue 实例；</span></span>
<span class="line"><span>  （2）经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### （三）计算属性和侦听器</span></span>
<span class="line"><span>1. 如果 data属性是对象 obj.count，那么要如何写代码才能监听 obj.count 的变化？</span></span></code></pre>
</div><p>var app = new Vue({
el: '#app',
data: {
obj:{count: 1},
modified: 0
},
watch:{
<em><strong><strong><strong>???</strong></strong></strong></em>_
this.modified += 1
}
}
})</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>答案是：` 'obj.count':function(){`可以监听指定的对象属性</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. 如果data中的对象 obj 有 N 个属性，要怎么才能监听所有属性呢？</span></span></code></pre>
</div><p>var app = new Vue({
el: '#app',
data: {
modified: 0,
obj: {a:1,b:2,c:3}
},
created(){
this.$watch('obj', ()=&gt;{
this.modified += 1
}, __<em><strong><strong><strong><strong>????</strong></strong></strong></strong></em>)
}
})</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>答案是：</span></span></code></pre>
</div><p>watch(){
obj:{
handler(oldval,newval){
console.log()
},
deep:true
}
}</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>如果想监听obj对象中的b属性变化时才执行handler函数，可以使用计算属性computed做中间层，如：</span></span></code></pre>
</div><pre><code>   var app = new Vue({
  el: '#app',
  data: {
    modified: 0,
    obj: {a:1,b:2,c:3}
  },
  created(){
      this.$watch('obj', ()=&gt;{
        this.modified += 1
      },
      computed: {
　　b() {
　　　　return this.obj.b
　　}
},
	watch(){
      b(oldval,newval){
      console.log()
		}
	}

})
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span></span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[wux-weapp 的微信小程序筛选框：FilterBar 组件分析]]></title>
            <link>https://super456.github.io/posts/growth-record/platform/applet/filter-bar.html</link>
            <guid>https://super456.github.io/posts/growth-record/platform/applet/filter-bar.html</guid>
            <pubDate>Thu, 12 Jul 2018 20:08:01 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="wux-weapp-的微信小程序筛选框-filterbar-组件分析" tabindex="-1">wux-weapp 的微信小程序筛选框：FilterBar 组件分析 <a class="header-anchor" href="#wux-weapp-的微信小程序筛选框-filterbar-组件分析" aria-label="Permalink to &quot;wux-weapp 的微信小程序筛选框：FilterBar 组件分析&quot;">&ZeroWidthSpace;</a></h1>
<p>本来是一个GitHub上wux-weapp组件的筛选框，但是整个项目过于系统化，想提取某个组件都是有点难度的，首先要看得懂某个组件的整个生命逻辑，所以自己也是摸索过来的，便简单的提取了wux-weapp组件的FilterBar筛选框的部分功能，满足个人需求及分享一下。</p>
<h3 id="一-原组件信息" tabindex="-1">（一）原组件信息 <a class="header-anchor" href="#一-原组件信息" aria-label="Permalink to &quot;（一）原组件信息&quot;">&ZeroWidthSpace;</a></h3>
<p>原组件是GitHub上的wux - 微信小程序自定义组件可以实现对话框、指示器、五星评分等22种功能。<a href="https://github.com/skyvow/wux" target="_blank" rel="noreferrer">点击这里跳转查看原组件</a>
<img src="https://img-home.csdnimg.cn/images/20230724024159.png?origin_url=http%3A%2F%2Fpbr0erxxq.bkt.clouddn.com%2Fwux-filterbar%2F01.png&amp;pos_id=img-KhgIsTyo-1713669973542" alt="外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传"></p>
<h3 id="二-原组件筛选框" tabindex="-1">（二）原组件筛选框 <a class="header-anchor" href="#二-原组件筛选框" aria-label="Permalink to &quot;（二）原组件筛选框&quot;">&ZeroWidthSpace;</a></h3>
<p><img src="https://img-home.csdnimg.cn/images/20230724024159.png?origin_url=http%3A%2F%2Fpbr0erxxq.bkt.clouddn.com%2Fwux-filterbar%2F02.gif&amp;pos_id=img-pRr6Lhzp-1713669973543" alt="外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传"></p>
<h3 id="三-提取的组件" tabindex="-1">（三）提取的组件 <a class="header-anchor" href="#三-提取的组件" aria-label="Permalink to &quot;（三）提取的组件&quot;">&ZeroWidthSpace;</a></h3>
<p>主要提取了筛选框页面中通过点击某个字或按钮右侧弹出的方式，方便个人将该组件放在任意需要的位置。
<img src="https://img-home.csdnimg.cn/images/20230724024159.png?origin_url=http%3A%2F%2Fpbr0erxxq.bkt.clouddn.com%2Fwux-filterbar%2F03.gif&amp;pos_id=img-P7dyJqz6-1713669973544" alt="外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传"></p>
<p><a href="https://github.com/super456/simpleFilterbar" target="_blank" rel="noreferrer">下载代码</a></p>
<p>简单的分享，各取所需吧。</p>
]]></content:encoded>
            <enclosure url="https://img-home.csdnimg.cn/images/20230724024159.png?origin_url=http%3A%2F%2Fpbr0erxxq.bkt.clouddn.com%2Fwux-filterbar%2F01.png&pos_id=img-KhgIsTyo-1713669973542" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Vue2 入门实战项目：快餐系统]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/newcomer-project.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/newcomer-project.html</guid>
            <pubDate>Thu, 12 Jul 2018 20:01:01 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vue2-入门实战项目-快餐系统" tabindex="-1">Vue2 入门实战项目：快餐系统 <a class="header-anchor" href="#vue2-入门实战项目-快餐系统" aria-label="Permalink to &quot;Vue2 入门实战项目：快餐系统&quot;">&ZeroWidthSpace;</a></h1>
<blockquote>
<p>最近学习vue看到网上很多学习的资料，就找了一个项目系统练习，主要是想学习了的一些知识点，系统的组合运用一遍。网上根据<strong>技术胖老师</strong>博客的内容自己也实战了一遍，挺实用的，对vue框架有了更深入的了解以及自身能力的提升。</p>
</blockquote>
<p>欢迎下载使用或二次开发。</p>
<h3 id="一-项目分析" tabindex="-1">（一）项目分析 <a class="header-anchor" href="#一-项目分析" aria-label="Permalink to &quot;（一）项目分析&quot;">&ZeroWidthSpace;</a></h3>
<p>这个项目主要是实现在线的用户点餐以及对点餐列表商品的增删改查等功能；然后使用mockplus工具画出草图，主要是方便开发。</p>
<CustomImage src='/growth-record/frame/vue/newcomer-01.png' /><h3 id="二-运用到的技术" tabindex="-1">（二）运用到的技术 <a class="header-anchor" href="#二-运用到的技术" aria-label="Permalink to &quot;（二）运用到的技术&quot;">&ZeroWidthSpace;</a></h3>
<p>1.使用vue-cli2.x搭建的开发环境；</p>
<p>2.使用vue-router做路由转换；</p>
<p>3.使用element-ui做界面美化；</p>
<p>4.使用axios做跨域请求接口数据；</p>
<p>5.使用icofont在线图标管理；</p>
<p>6.使用webpack打包管理；</p>
<p>7.使用vue2.0语法和es6语法；</p>
<h3 id="三-系统成果" tabindex="-1">（三）系统成果 <a class="header-anchor" href="#三-系统成果" aria-label="Permalink to &quot;（三）系统成果&quot;">&ZeroWidthSpace;</a></h3>
<CustomImage src='/growth-record/frame/vue/newcomer-02.png' /><h3 id="四-系统使用" tabindex="-1">（四）系统使用 <a class="header-anchor" href="#四-系统使用" aria-label="Permalink to &quot;（四）系统使用&quot;">&ZeroWidthSpace;</a></h3>
<p>1.前提是要有node.js、npm、vue-cli环境（最好有Git，会方便很多）；</p>
<p>2.<a href="https://github.com/super456/vue2.0-SellPosSystem" target="_blank" rel="noreferrer">下载项目</a>（git clone最好）；</p>
<p>3.打开终端切换到该项目名称下，执行以下命令行：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span># install dependencies 安装开发环境的依赖，因为不是直接打包上传的项目</span></span>
<span class="line"><span>npm install</span></span>
<span class="line"><span></span></span>
<span class="line"><span># serve with hot reload at localhost:8080 运行项目基本没问题</span></span>
<span class="line"><span>npm run dev</span></span></code></pre>
</div><h3 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">&ZeroWidthSpace;</a></h3>
<p>技术胖老师的 <a href="http://jspang.com/2017/05/22/vuedemo/" target="_blank" rel="noreferrer">Vue实战视频-快餐店收银系统</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Web 服务器 live-server 的安装及使用]]></title>
            <link>https://super456.github.io/posts/growth-record/other/toolGuide/live-server.html</link>
            <guid>https://super456.github.io/posts/growth-record/other/toolGuide/live-server.html</guid>
            <pubDate>Tue, 10 Jul 2018 20:04:09 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="web-服务器-live-server-的安装及使用" tabindex="-1">Web 服务器 live-server 的安装及使用 <a class="header-anchor" href="#web-服务器-live-server-的安装及使用" aria-label="Permalink to &quot;Web 服务器 live-server 的安装及使用&quot;">&ZeroWidthSpace;</a></h1>
<p><strong>在写一下简单的项目或学习一些技术的练习，没有服务器的话，每次写的代码都需要手动刷新浏览器。有点无奈，但是如果你安装了这个<code>live-server</code> 服务器就可以不用手动刷新，实时预览自己写的代码了。</strong></p>
<p>live-server是一个具有实时重载功能的小型开发服务器。用它来热加载HTML / JavaScript / CSS文件，但不能用于部署最终的网站系统。</p>
<h3 id="一-安装" tabindex="-1">（一）安装 <a class="header-anchor" href="#一-安装" aria-label="Permalink to &quot;（一）安装&quot;">&ZeroWidthSpace;</a></h3>
<p>1.前提条件需要node.js和npm的依赖（可以自己先搞定，不难）；
2.使用npm全局安装：<code>npm install -g live-server  </code>（本人使用淘宝镜像安装的）</p>
<CustomImage src='/growth-record/other/toolGuide/live-server-01.png' /><h3 id="二-使用" tabindex="-1">（二）使用 <a class="header-anchor" href="#二-使用" aria-label="Permalink to &quot;（二）使用&quot;">&ZeroWidthSpace;</a></h3>
<p>1.需要在你使用的项目根目录下启动：<code>liver-server</code>（本人使用git，在指定目录下右击-&gt;git bash here后使用启动命令即可）</p>
<CustomImage src='/growth-record/other/toolGuide/live-server-02.png' /><p>2.启动成功，网页自动弹项目目录出来；</p>
<CustomImage src='/growth-record/other/toolGuide/live-server-03.png' /><p>3.退出该服务器，在命令行使用：<code>ctrl+c</code></p>
<h3 id="三-简单的配置" tabindex="-1">（三）简单的配置 <a class="header-anchor" href="#三-简单的配置" aria-label="Permalink to &quot;（三）简单的配置&quot;">&ZeroWidthSpace;</a></h3>
<p>1.默认端口号为8080，如果想修改，最简单的方式是启动的时候添加启动参数：<code>live-server --port=8081</code> 即可</p>
<CustomImage src='/growth-record/other/toolGuide/live-server-04.png' /><p>2.<code>live-server --参数</code> 列表</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>--port=NUMBER - select port to use, default: PORT env var or 8080</span></span>
<span class="line"><span>--host=ADDRESS - select host address to bind to, default: IP env var or 0.0.0.0 (“any address”)</span></span>
<span class="line"><span>--no-browser - suppress automatic web browser launching</span></span>
<span class="line"><span>--browser=BROWSER - specify browser to use instead of system default</span></span>
<span class="line"><span>--quiet | -q - suppress logging</span></span>
<span class="line"><span>--verbose | -V - more logging (logs all requests, shows all listening IPv4 interfaces, etc.)</span></span>
<span class="line"><span>--open=PATH - launch browser to PATH instead of server root</span></span>
<span class="line"><span>--watch=PATH - comma-separated string of paths to exclusively watch for changes (default: watch everything)</span></span>
<span class="line"><span>--ignore=PATH - comma-separated string of paths to ignore (anymatch-compatible definition)</span></span>
<span class="line"><span>--ignorePattern=RGXP - Regular expression of files to ignore (ie .*\.jade) (DEPRECATED in favor of --ignore)</span></span>
<span class="line"><span>--middleware=PATH - path to .js file exporting a middleware function to add; can be a name without path nor extension to reference bundled middlewares in middleware folder</span></span>
<span class="line"><span>--entry-file=PATH - serve this file (server root relative) in place of missing files (useful for single page apps)</span></span>
<span class="line"><span>--mount=ROUTE:PATH - serve the paths contents under the defined route (multiple definitions possible)</span></span>
<span class="line"><span>--spa - translate requests from /abc to /#/abc (handy for Single Page Apps)</span></span>
<span class="line"><span>--wait=MILLISECONDS - (default 100ms) wait for all changes, before reloading</span></span>
<span class="line"><span>--htpasswd=PATH - Enables http-auth expecting htpasswd file located at PATH</span></span>
<span class="line"><span>--cors - Enables CORS for any origin (reflects request origin, requests with credentials are supported)</span></span>
<span class="line"><span>--https=PATH - PATH to a HTTPS configuration module</span></span>
<span class="line"><span>--proxy=ROUTE:URL - proxy all requests for ROUTE to URL</span></span>
<span class="line"><span>--help | -h - display terse usage hint and exit</span></span>
<span class="line"><span>--version | -v - display version and exit</span></span></code></pre>
</div><p>3.也可以把配置放在package.json的scripts下的server中，这样不用每次都命令行使用参数，然后使用命令行启动：<code>npm run server</code>（如何创建一个带package.json包的项目请看下一步）</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>"scripts": {</span></span>
<span class="line"><span>  "server": "live-server ./ --port=8081"</span></span>
<span class="line"><span>}</span></span></code></pre>
</div><p>4.创建一个带package.json包的项目，在项目根目录下使用命令行：<code>npm init</code>，可以自己设置</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>package name: (0710) demo</span></span>
<span class="line"><span>version: (1.0.0)</span></span>
<span class="line"><span>description: live-server的练习</span></span>
<span class="line"><span>entry point: (index.js)</span></span>
<span class="line"><span>test command:</span></span>
<span class="line"><span>git repository:</span></span>
<span class="line"><span>keywords:</span></span>
<span class="line"><span>author: 猿来独往</span></span>
<span class="line"><span>license: (ISC)</span></span>
<span class="line"><span>About to write to D:\GitHub_Repository\Clone_Files\vue-study\0710\package.json:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  "name": "demo",</span></span>
<span class="line"><span>  "version": "1.0.0",</span></span>
<span class="line"><span>  "description": "live-server的练习",</span></span>
<span class="line"><span>  "main": "index.js",</span></span>
<span class="line"><span>  "scripts": {</span></span>
<span class="line"><span>    "test": "echo \"Error: no test specified\" &#x26;&#x26; exit 1"</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  "author": "猿来独往",</span></span>
<span class="line"><span>  "license": "ISC"</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Is this OK? (yes)</span></span></code></pre>
</div><p>然后使用第三步的配置，运行该项目就使用：<code>npm run server</code></p>
<CustomImage src='/growth-record/other/toolGuide/live-server-04.png' /><p><strong>注意：如果浏览器不能实时自动刷新页面，可以试试用这个命令启动（亲测有效）：<code>live-server</code></strong></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue-CLI2 中的 Vue-Router 和 Vue-resource 实战]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/router-resource.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/router-resource.html</guid>
            <pubDate>Mon, 09 Jul 2018 20:04:01 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vue-cli2-中的-vue-router-和-vue-resource-实战" tabindex="-1">Vue-CLI2 中的 Vue-Router 和 Vue-Resource 实战 <a class="header-anchor" href="#vue-cli2-中的-vue-router-和-vue-resource-实战" aria-label="Permalink to &quot;Vue-CLI2 中的 Vue-Router 和 Vue-Resource 实战&quot;">&ZeroWidthSpace;</a></h1>
<p><strong>简单记录一下这两个插件的使用方法，写了一个demo，方便理解及应用。</strong></p>
<h3 id="一-安装vue-cli2-x脚手架" tabindex="-1">（一）安装vue-cli2.x脚手架 <a class="header-anchor" href="#一-安装vue-cli2-x脚手架" aria-label="Permalink to &quot;（一）安装vue-cli2.x脚手架&quot;">&ZeroWidthSpace;</a></h3>
<p>如果还没安装的，或安装过程不熟的，可以参考这篇文章教程，写的很详细——<a href="https://www.jianshu.com/p/1626b8643676/" target="_blank" rel="noreferrer">Vue2.0史上最全入坑教程（上）—— 搭建Vue脚手架（vue-cli）</a>，这个文章作者真的很用心，向他学习。</p>
<h3 id="二-安装vue-router和vue-resource插件" tabindex="-1">（二）安装vue-router和vue-resource插件 <a class="header-anchor" href="#二-安装vue-router和vue-resource插件" aria-label="Permalink to &quot;（二）安装vue-router和vue-resource插件&quot;">&ZeroWidthSpace;</a></h3>
<p>如果在安装脚手架的时候安装了vue-router，可以直接跳转到安装vue-resource。
如果不是的，可以使用命令：<code>cd &lt;项目文件夹&gt;</code> 切换到项目文件夹路径下，然后使用命令行安装：<code>npm install vue-router --save</code> 和<code>npm install vue-resource --save</code></p>
<p>这里说明一下安装<code>npm install 插件 +[参数]</code>，表示的意思：
1.使用：<code>npm install 插件</code>   ：会把这个插件安装到node_modules目录中，但不会修改package.json内容；</p>
<p>2.<code>npm install 插件 --save</code>  ：在项目发布上线之后还会依赖用到的插件，没有这个插件，项目不能正常的运行，自动更改package.json内容  ；</p>
<p>3.<code>npm install 插件 --save-dev </code>：把插件安装到开发依赖中，项目上线之后不会用到的插件，针对个别插件，比如说这个“babel-loader”，是在项目编译解析完成后发布就没用到了的，自动更改package.json内容；</p>
<h3 id="三-使用vue-router-vue-resource写一个跳转请求页面数据的demo" tabindex="-1">（三）使用vue-router+vue-resource写一个跳转请求页面数据的demo <a class="header-anchor" href="#三-使用vue-router-vue-resource写一个跳转请求页面数据的demo" aria-label="Permalink to &quot;（三）使用vue-router+vue-resource写一个跳转请求页面数据的demo&quot;">&ZeroWidthSpace;</a></h3>
<p>1.先看一下安装脚手架的时候安装的路由界面及配置：</p>
<CustomImage src='/growth-record/frame/vue/router-01.png' /><p>2.如果一开始没有的安装vue-router后自己手动安装的，可以参考这个main.js 和router文件夹的index.js配置的配置代码如下：
main.js代码：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>import Vue from 'vue'</span></span>
<span class="line"><span>import App from './App'</span></span>
<span class="line"><span>import router from './router'//引入路由指定文件</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Vue.config.productionTip = false</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/* eslint-disable no-new */</span></span>
<span class="line"><span>new Vue({</span></span>
<span class="line"><span>  el: '#app',</span></span>
<span class="line"><span>  router,//实例化，表示会使用</span></span>
<span class="line"><span>  render: h => h(App)//vue2.0写法</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  //以下是vue1.0的写法</span></span>
<span class="line"><span>  //components: { App },//注册组件信息</span></span>
<span class="line"><span> // template: '&#x3C;App/>'//简写的模板调用组件的标签</span></span>
<span class="line"><span>})</span></span></code></pre>
</div><p>如果对代码中的<code>render: h =&gt; h(App)//vue2.0写法</code> 不理解的可以查看我之前写的文章——<a href="https://blog.csdn.net/qq_35324453/article/details/80961128" target="_blank" rel="noreferrer">vue-cli2.x中的render: h =&gt; h(App)解析</a></p>
<p>router文件夹的index.js代码：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>import Vue from 'vue'</span></span>
<span class="line"><span>import Router from 'vue-router'//引入路由配置的模块</span></span>
<span class="line"><span>import HelloWorld from '@/components/HelloWorld'//引入需要路由转址的路径</span></span>
<span class="line"><span>import Home from '@/components/Home'//引入需要路由转址的路径</span></span>
<span class="line"><span>import VueResource from 'vue-resource'//引入vue-resource插件http请求</span></span>
<span class="line"><span>//下面这种方法引用也可以</span></span>
<span class="line"><span>// import HelloWorld from '../components/HelloWorld'//引入需要路由转址的路径</span></span>
<span class="line"><span>// import Home from '../components/Home'//引入需要路由转址的路径</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Vue.use(Router)//声明引用，全局使用</span></span>
<span class="line"><span>Vue.use(VueResource)//声明引用，全局使用</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default new Router({</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 注意当有多个路由的时候默认使用第一个路由地址</span></span>
<span class="line"><span>  routes: [//注意routers是一个对象数组</span></span>
<span class="line"><span>    {//需要跳转的组件需要import引进</span></span>
<span class="line"><span>      path: '/',//路由的地址，此时表示根路径</span></span>
<span class="line"><span>      name: 'HelloWorld',</span></span>
<span class="line"><span>      component: HelloWorld</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    {//需要跳转的组件需要import引进</span></span>
<span class="line"><span>      //路由的地址，此时表示根路径。注意第二个路由地址这里需要添加上组件名</span></span>
<span class="line"><span>      path: '/Home',</span></span>
<span class="line"><span>      name: 'Home',</span></span>
<span class="line"><span>      component: Home</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  mode:"history"//去掉url链接中的#符号</span></span>
<span class="line"><span>})</span></span></code></pre>
</div><p>3.添加一个组件Home.vue，添加位置如下：</p>
<CustomImage src='/growth-record/frame/vue/router-02.png' /><p>组件代码为：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>&#x3C;template></span></span>
<span class="line"><span>  &#x3C;div class="hello"></span></span>
<span class="line"><span>    &#x3C;h1>{{ msg }}&#x3C;/h1></span></span>
<span class="line"><span>    test</span></span>
<span class="line"><span>    &#x3C;p>以下是获取http请求的数据内容&#x3C;/p></span></span>
<span class="line"><span>    &#x3C;ul></span></span>
<span class="line"><span>        &#x3C;li v-for="user in users">{{user.id}}. {{user.name}}&#x3C;/li></span></span>
<span class="line"><span>    &#x3C;/ul></span></span>
<span class="line"><span>  &#x3C;/div></span></span>
<span class="line"><span>&#x3C;/template></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;script></span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>  name: 'home',</span></span>
<span class="line"><span>  data () {</span></span>
<span class="line"><span>    return {</span></span>
<span class="line"><span>      users:[],</span></span>
<span class="line"><span>      msg: 'hello Home'</span></span>
<span class="line"><span>    //   使用网络接口</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  created(){</span></span>
<span class="line"><span>    //   http请求,请求成功调用.then()函数，并将数据传给data</span></span>
<span class="line"><span>      this.$http.get("http://jsonplaceholder.typicode.com/users").then((data)=>{</span></span>
<span class="line"><span>        //   console.log(data);//请求成功的数据</span></span>
<span class="line"><span>        this.users=data.body;//将data数据的的body内容复制给定义的users数据</span></span>
<span class="line"><span>      })</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&#x3C;/script></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;!-- Add "scoped" attribute to limit CSS to this component only --></span></span>
<span class="line"><span>&#x3C;style scoped></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;/style></span></span></code></pre>
</div><p>4.需要在根组件App.vue下添加一下引入组件的内容：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>&#x3C;template></span></span>
<span class="line"><span>  &#x3C;div id="app"></span></span>
<span class="line"><span>    &#x3C;img src="./assets/logo.png"></span></span>
<span class="line"><span>    &#x3C;!--注意a标签会重新加载页面，相当于刷新页面--></span></span>
<span class="line"><span>    &#x3C;ul></span></span>
<span class="line"><span>      &#x3C;p>--注意a标签会重新加载页面，相当于刷新页面--&#x3C;/p></span></span>
<span class="line"><span>      &#x3C;li>&#x3C;a href="/">HelloWorld&#x3C;/a>&#x3C;/li></span></span>
<span class="line"><span>      &#x3C;li>&#x3C;a href="/Home">Home&#x3C;/a>&#x3C;/li></span></span>
<span class="line"><span>      &#x3C;p>此处使用router-link，不会刷新页面，相当于局部刷新&#x3C;/p></span></span>
<span class="line"><span>      &#x3C;li>&#x3C;router-link to="/">HelloWorld&#x3C;/router-link>&#x3C;/li></span></span>
<span class="line"><span>      &#x3C;li>&#x3C;router-link to="/Home">Home页面&#x3C;/router-link>&#x3C;/li></span></span>
<span class="line"><span>    &#x3C;/ul></span></span>
<span class="line"><span>    &#x3C;router-view/></span></span>
<span class="line"><span>  &#x3C;/div></span></span>
<span class="line"><span>&#x3C;/template></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;script></span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>  name: 'App'</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&#x3C;/script></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;style></span></span>
<span class="line"><span>#app {</span></span>
<span class="line"><span>  font-family: 'Avenir', Helvetica, Arial, sans-serif;</span></span>
<span class="line"><span>  -webkit-font-smoothing: antialiased;</span></span>
<span class="line"><span>  -moz-osx-font-smoothing: grayscale;</span></span>
<span class="line"><span>  text-align: center;</span></span>
<span class="line"><span>  color: #2c3e50;</span></span>
<span class="line"><span>  margin-top: 60px;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&#x3C;/style></span></span></code></pre>
</div><h3 id="四-运行结果" tabindex="-1">（四）运行结果 <a class="header-anchor" href="#四-运行结果" aria-label="Permalink to &quot;（四）运行结果&quot;">&ZeroWidthSpace;</a></h3>
<CustomImage src='/growth-record/frame/vue/router-03.gif' />]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue-CLI2 跨域请求 Demo（fetch、axios、proxyTable）]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/cross-domain-request.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/cross-domain-request.html</guid>
            <pubDate>Mon, 09 Jul 2018 20:02:01 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vue-cli2-跨域请求-demo-fetch、axios、proxytable" tabindex="-1">Vue-CLI2 跨域请求 Demo（fetch、axios、proxyTable） <a class="header-anchor" href="#vue-cli2-跨域请求-demo-fetch、axios、proxytable" aria-label="Permalink to &quot;Vue-CLI2 跨域请求 Demo（fetch、axios、proxyTable）&quot;">&ZeroWidthSpace;</a></h1>
<p><strong>学习中需要应用到跨域请求的问题，找了资料，也自己写了一个简单的demo，应用到fetch方法或axios方法，前提都需要配置proxyTable，特别感谢：Web前端网站教程-米斯特吴老师提供的案例和请求接口。</strong></p>
<h3 id="一-安装vue-cli2-x脚手架" tabindex="-1">（一）安装vue-cli2.x脚手架 <a class="header-anchor" href="#一-安装vue-cli2-x脚手架" aria-label="Permalink to &quot;（一）安装vue-cli2.x脚手架&quot;">&ZeroWidthSpace;</a></h3>
<p>如果还没安装的，或安装过程不熟的，可以参考这篇文章教程，写的很详细——<a href="https://www.jianshu.com/p/1626b8643676/" target="_blank" rel="noreferrer">Vue2.0史上最全入坑教程（上）—— 搭建Vue脚手架（vue-cli）</a></p>
<h3 id="二-配置proxytable跨域请求" tabindex="-1">（二）配置proxyTable跨域请求 <a class="header-anchor" href="#二-配置proxytable跨域请求" aria-label="Permalink to &quot;（二）配置proxyTable跨域请求&quot;">&ZeroWidthSpace;</a></h3>
<p>1.找到config文件夹下的index.js文件打开，找到proxyTable配置项：</p>
<CustomImage src='/growth-record/frame/vue/cross-01.png' /><p>2.配置代码参考如下：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>    //配置跨域请求,注意配置完之后需要重启编译该项目</span></span>
<span class="line"><span>    proxyTable: {</span></span>
<span class="line"><span>      //请求名字变量可以自己定义</span></span>
<span class="line"><span>      '/apis': {</span></span>
<span class="line"><span>        target: 'http://www.thenewstep.cn', // 请求的接口域名或IP地址，开头是http或https</span></span>
<span class="line"><span>        // secure: false,  // 如果是https接口，需要配置这个参数</span></span>
<span class="line"><span>        changeOrigin: true, // 是否跨域，如果接口跨域，需要进行这个参数配置</span></span>
<span class="line"><span>        pathRewrite: {</span></span>
<span class="line"><span>          '^/apis': ''//表示需要rewrite重写路径</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    },</span></span></code></pre>
</div><p>**注意：**可能你的接口地址原本是 <code>http://www.thenewstep.cn/test/test.html</code>，但是为了匹配代理地址，需要在前面加一个 <code>/apis</code>（自己定义的请求接口变量名）,  因此接口地址需要写成这样的即可生效 <code>/apis/test/test.html</code>。</p>
<h3 id="三-使用fetch实现跨域请求" tabindex="-1">（三）使用fetch实现跨域请求 <a class="header-anchor" href="#三-使用fetch实现跨域请求" aria-label="Permalink to &quot;（三）使用fetch实现跨域请求&quot;">&ZeroWidthSpace;</a></h3>
<p>1.在App.vue中添加以下代码即可：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>&#x3C;template></span></span>
<span class="line"><span>  &#x3C;div id="app"></span></span>
<span class="line"><span>    &#x3C;img src="./assets/logo.png"></span></span>
<span class="line"><span>    &#x3C;HelloWorld/></span></span>
<span class="line"><span>  &#x3C;/div></span></span>
<span class="line"><span>&#x3C;/template></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;script></span></span>
<span class="line"><span>import HelloWorld from './components/HelloWorld'</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>  name: 'App',</span></span>
<span class="line"><span>  components: {</span></span>
<span class="line"><span>    HelloWorld</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  created(){</span></span>
<span class="line"><span>    // fetch方法，注意apis对应config/index.js中的proxyTable设置的请求名字变量</span></span>
<span class="line"><span>    fetch("/apis/test/testToken.php",{</span></span>
<span class="line"><span>      method:"post",//设置请求类型</span></span>
<span class="line"><span>      headers:{</span></span>
<span class="line"><span>        "Content-type":"application/json",</span></span>
<span class="line"><span>        token:"f4c902c9ae5a2a9d8f84868ad064e706"//请求验证，根据请求方接口需要的</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      body:JSON.stringify({username:"test",password:"test"}),//设置发送请求的内容</span></span>
<span class="line"><span>    }).then(result=>{</span></span>
<span class="line"><span>      // console.log(result);</span></span>
<span class="line"><span>      //使用json解析请求成功的body内容</span></span>
<span class="line"><span>      return result.json();</span></span>
<span class="line"><span>    }).then(data=>{</span></span>
<span class="line"><span>      console.log(data);//查看打印出请求成功的内容</span></span>
<span class="line"><span>      if(data.success==1){</span></span>
<span class="line"><span>        console.log(data.msg);</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&#x3C;/script></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;style></span></span>
<span class="line"><span>#app {</span></span>
<span class="line"><span>  font-family: 'Avenir', Helvetica, Arial, sans-serif;</span></span>
<span class="line"><span>  -webkit-font-smoothing: antialiased;</span></span>
<span class="line"><span>  -moz-osx-font-smoothing: grayscale;</span></span>
<span class="line"><span>  text-align: center;</span></span>
<span class="line"><span>  color: #2c3e50;</span></span>
<span class="line"><span>  margin-top: 60px;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&#x3C;/style></span></span></code></pre>
</div><p>2.运行结果</p>
<CustomImage src='/growth-record/frame/vue/cross-02.png' /><h3 id="四-使用axios方法跨域请求" tabindex="-1">（四）使用axios方法跨域请求 <a class="header-anchor" href="#四-使用axios方法跨域请求" aria-label="Permalink to &quot;（四）使用axios方法跨域请求&quot;">&ZeroWidthSpace;</a></h3>
<p>1.安装axios：<code>npm install axios</code>；
2.在main.js文件引入axios模块并全局使用；</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>import Vue from 'vue'</span></span>
<span class="line"><span>import App from './App'</span></span>
<span class="line"><span>import axios from 'axios'//引入axios模块文件</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Vue.config.productionTip = false;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Vue.prototype.$axios=axios;//设置全局引用</span></span>
<span class="line"><span>//配置请求的设置</span></span>
<span class="line"><span>axios.defaults.headers.post['Content-type']="application/json";</span></span>
<span class="line"><span>axios.defaults.headers.common['token']="f4c902c9ae5a2a9d8f84868ad064e706";//配置参数，请求验证，根据请求方接口需要的</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/* eslint-disable no-new */</span></span>
<span class="line"><span>new Vue({</span></span>
<span class="line"><span>  el: '#app',</span></span>
<span class="line"><span>  render: h => h(App)</span></span>
<span class="line"><span>})</span></span></code></pre>
</div><p>3.修改App.vue组件代码为：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>&#x3C;template></span></span>
<span class="line"><span>&#x3C;div id="app"></span></span>
<span class="line"><span>    &#x3C;img src="./assets/logo.png"></span></span>
<span class="line"><span>    &#x3C;HelloWorld/></span></span>
<span class="line"><span>&#x3C;/div></span></span>
<span class="line"><span>&#x3C;/template></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;script></span></span>
<span class="line"><span>import HelloWorld from './components/HelloWorld'</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>    name: 'App',</span></span>
<span class="line"><span>    components: {</span></span>
<span class="line"><span>        HelloWorld</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    created() {</span></span>
<span class="line"><span>        //axios方法</span></span>
<span class="line"><span>        this.$axios.post("/apis/test/testToken.php", {</span></span>
<span class="line"><span>            username: "test",</span></span>
<span class="line"><span>            password: "test"</span></span>
<span class="line"><span>        }).then(result => {</span></span>
<span class="line"><span>            // return JSON.parse(JSON.stringify(result));</span></span>
<span class="line"><span>            return JSON.stringify(result.data);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            // console.log(data);</span></span>
<span class="line"><span>        }).then(data => {</span></span>
<span class="line"><span>            console.log(data);</span></span>
<span class="line"><span>            console.log("注意此刻的data是一个：" + typeof data);</span></span>
<span class="line"><span>            data = JSON.parse(data);</span></span>
<span class="line"><span>            if (data.success == 1) {</span></span>
<span class="line"><span>                console.log(data.msg);</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&#x3C;/script></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;style></span></span>
<span class="line"><span>#app {</span></span>
<span class="line"><span>    font-family: 'Avenir', Helvetica, Arial, sans-serif;</span></span>
<span class="line"><span>    -webkit-font-smoothing: antialiased;</span></span>
<span class="line"><span>    -moz-osx-font-smoothing: grayscale;</span></span>
<span class="line"><span>    text-align: center;</span></span>
<span class="line"><span>    color: #2c3e50;</span></span>
<span class="line"><span>    margin-top: 60px;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&#x3C;/style></span></span></code></pre>
</div><p>4.运行结果：</p>
<CustomImage src='/growth-record/frame/vue/cross-03.png' />]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue-CLI2 中的 render: h => h(App) 解析]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/render-app.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/render-app.html</guid>
            <pubDate>Sun, 08 Jul 2018 20:08:08 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vue-cli2-中的-render-h-h-app-解析" tabindex="-1">Vue-CLI2 中的 render: h =&gt; h(App) 解析 <a class="header-anchor" href="#vue-cli2-中的-render-h-h-app-解析" aria-label="Permalink to &quot;Vue-CLI2 中的 render: h =&gt; h(App) 解析&quot;">&ZeroWidthSpace;</a></h1>
<p><strong>对于这个，可能es6语法不熟的人很容易产生懵懂，因为我也不熟，所以记录一下，毕竟这也是个重要的知识点。</strong></p>
<h3 id="一-遇到的问题代码" tabindex="-1">（一）遇到的问题代码： <a class="header-anchor" href="#一-遇到的问题代码" aria-label="Permalink to &quot;（一）遇到的问题代码：&quot;">&ZeroWidthSpace;</a></h3>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>new Vue({</span></span>
<span class="line"><span>  el: '#app',</span></span>
<span class="line"><span>  router,//实例化，表示会使用</span></span>
<span class="line"><span>  render: h => h(App)//vue2.0写法</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  //以下是vue1.0的写法</span></span>
<span class="line"><span>  //components: { App },//注册组件信息</span></span>
<span class="line"><span> // template: '&#x3C;App/>'//简写的模板调用组件的标签</span></span>
<span class="line"><span>})</span></span></code></pre>
</div><p>官方的解释很全面但是不是很容易理解：<a href="https://cn.vuejs.org/v2/guide/render-function.html#%E6%B7%B1%E5%85%A5-data-%E5%AF%B9%E8%B1%A1" target="_blank" rel="noreferrer">createElement 参数</a></p>
<h3 id="二-代码分解" tabindex="-1">（二）代码分解 <a class="header-anchor" href="#二-代码分解" aria-label="Permalink to &quot;（二）代码分解&quot;">&ZeroWidthSpace;</a></h3>
<p>将<code>render: h =&gt; h(App)</code> 根据es6语法分解为：</p>
<h1 id="render-h-h-app" tabindex="-1"><code>render: h =&gt; h(App);</code> <a class="header-anchor" href="#render-h-h-app" aria-label="Permalink to &quot;`render: h =&gt; h(App);`&quot;">&ZeroWidthSpace;</a></h1>
<p>等价于</p>
<h1 id="render-h-return-h-app" tabindex="-1"><code>render: h =&gt; {return h(App);}</code> <a class="header-anchor" href="#render-h-return-h-app" aria-label="Permalink to &quot;`render: h =&gt; {return h(App);}`&quot;">&ZeroWidthSpace;</a></h1>
<p>等价于</p>
<h1 id="render-function-h-return-h-app" tabindex="-1"><code> render: function(h) { return h(App);}</code> <a class="header-anchor" href="#render-function-h-return-h-app" aria-label="Permalink to &quot;` render: function(h) { return h(App);}`&quot;">&ZeroWidthSpace;</a></h1>
<h1 id="等价于-render-function-createelement-return-createelement-app" tabindex="-1">等价于
<code> render: function(createElement) { return createElement(App);  }</code> <a class="header-anchor" href="#等价于-render-function-createelement-return-createelement-app" aria-label="Permalink to &quot;等价于
` render: function(createElement) { return createElement(App);  }`&quot;">&ZeroWidthSpace;</a></h1>
<h3 id="三-解析一下这个vue2-0渲染过程" tabindex="-1">（三）解析一下这个vue2.0渲染过程： <a class="header-anchor" href="#三-解析一下这个vue2-0渲染过程" aria-label="Permalink to &quot;（三）解析一下这个vue2.0渲染过程：&quot;">&ZeroWidthSpace;</a></h3>
<p>render函数用来渲染视图，也提供给<code>el</code>挂载，所以使用render函数就是为了页面显示出来。</p>
<p>1.render 方法是一个函数，在接受传入的参数 h 函数后，返回 <code>h(App)</code> 的函数调用结果。</p>
<p>2.在创建 vue 实例时，通过调用 render 方法来渲染实例页面的 DOM 结构。</p>
<p>3.当vue 在调用 render 方法时，会传入一个 createElement 函数作为参数，h 的实参是 createElement 函数，然后 createElement 会以 <code>App</code>为参数进行调用。</p>
<h3 id="四-写一个createelement函数的demo" tabindex="-1">（四）写一个createElement函数的demo <a class="header-anchor" href="#四-写一个createelement函数的demo" aria-label="Permalink to &quot;（四）写一个createElement函数的demo&quot;">&ZeroWidthSpace;</a></h3>
<p>创建一个组件，使用createElement函数调用</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>&#x3C;!DOCTYPE html></span></span>
<span class="line"><span>&#x3C;html lang="en"></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;head></span></span>
<span class="line"><span>    &#x3C;meta charset="UTF-8"></span></span>
<span class="line"><span>    &#x3C;title>createElement方法应用&#x3C;/title></span></span>
<span class="line"><span>    &#x3C;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js">&#x3C;/script></span></span>
<span class="line"><span>&#x3C;/head></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;body></span></span>
<span class="line"><span>    &#x3C;p>下面会使用createElement方法创建DOM结点&#x3C;/p></span></span>
<span class="line"><span>    &#x3C;div id="vue-app">&#x3C;/div></span></span>
<span class="line"><span>    &#x3C;script type="text/javascript"></span></span>
<span class="line"><span>        var app=Vue.component('app',{</span></span>
<span class="line"><span>            template:'&#x3C;h1>test&#x3C;/h1>'</span></span>
<span class="line"><span>        })</span></span>
<span class="line"><span>        new Vue({</span></span>
<span class="line"><span>            el: '#vue-app',</span></span>
<span class="line"><span>            render: function (createElement) {</span></span>
<span class="line"><span>                // return createElement('h1', '一则头条');//这个方式也可以</span></span>
<span class="line"><span>                return createElement(app);//使用调用组件</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>    &#x3C;/script></span></span>
<span class="line"><span>&#x3C;/body></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;/html></span></span></code></pre>
</div><p>运行结果是：</p>
<CustomImage src='/growth-record/frame/vue/render-app.png' />]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue2 生命周期的理解与应用]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/vue2-life-cycle.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/vue2-life-cycle.html</guid>
            <pubDate>Sun, 08 Jul 2018 20:08:08 GMT</pubDate>
            <description><![CDATA[# Vue2 生命周期的理解与应用
**在学习 Vue2.x 入门后，开始慢慢熟悉 Vue 的模式和开发脚手架项目实践过程中，需要对生命周期钩子函数一定的理解，多少会用到这些钩子函数，根据自己的理解写了一下，欢迎指正或学习交流。**

### （一）vue2.x生命周期图
<CustomImage src='/growth-record/frame/vue/vue2-life-01.png' />

### （二）生命周期钩子函数说明

| 生命周期钩子函数     | 	说明    |
|:]]></description>
            <content:encoded><![CDATA[<h1 id="vue2-生命周期的理解与应用" tabindex="-1">Vue2 生命周期的理解与应用 <a class="header-anchor" href="#vue2-生命周期的理解与应用" aria-label="Permalink to &quot;Vue2 生命周期的理解与应用&quot;">&ZeroWidthSpace;</a></h1>
<p><strong>在学习 Vue2.x 入门后，开始慢慢熟悉 Vue 的模式和开发脚手架项目实践过程中，需要对生命周期钩子函数一定的理解，多少会用到这些钩子函数，根据自己的理解写了一下，欢迎指正或学习交流。</strong></p>
<h3 id="一-vue2-x生命周期图" tabindex="-1">（一）vue2.x生命周期图 <a class="header-anchor" href="#一-vue2-x生命周期图" aria-label="Permalink to &quot;（一）vue2.x生命周期图&quot;">&ZeroWidthSpace;</a></h3>
<CustomImage src='/growth-record/frame/vue/vue2-life-01.png' /><h3 id="二-生命周期钩子函数说明" tabindex="-1">（二）生命周期钩子函数说明 <a class="header-anchor" href="#二-生命周期钩子函数说明" aria-label="Permalink to &quot;（二）生命周期钩子函数说明&quot;">&ZeroWidthSpace;</a></h3>
<table>
<thead>
<tr>
<th style="text-align:left">生命周期钩子函数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">beforeCreate</td>
<td style="text-align:left">在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</td>
</tr>
<tr>
<td style="text-align:left">created</td>
<td style="text-align:left">实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)属性初始化和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</td>
</tr>
<tr>
<td style="text-align:left">beforeMount</td>
<td style="text-align:left">在挂载开始之前被调用：相关的 render 函数首次被调用。</td>
</tr>
<tr>
<td style="text-align:left">mounted</td>
<td style="text-align:left"><code>el</code>被新创建的 <code>vm.$el</code> 替换，并挂载到实例上去之后调用该钩子。如果 root实例挂载了一个文档内元素，当mounted被调用时 <code>vm.$el</code> 也在文档内。</td>
</tr>
<tr>
<td style="text-align:left">beforeUpdate</td>
<td style="text-align:left">数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</td>
</tr>
<tr>
<td style="text-align:left">updated</td>
<td style="text-align:left">由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</td>
</tr>
<tr>
<td style="text-align:left">beforeDestroy</td>
<td style="text-align:left">实例销毁之前调用。在这一步，实例仍然完全可用。</td>
</tr>
<tr>
<td style="text-align:left">destroyed</td>
<td style="text-align:left">Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</td>
</tr>
</tbody>
</table>
<h3 id="三-代码演示" tabindex="-1">（三）代码演示 <a class="header-anchor" href="#三-代码演示" aria-label="Permalink to &quot;（三）代码演示&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>
<p>通过嵌套组件的页面加载查看显示顺序：
代码如下(可直接复制使用)：</p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"en"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"UTF-8"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"viewport"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"width=device-width, initial-scale=1.0"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"X-UA-Compatible"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ie=edge"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>vue生命周期的理解应用&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"vue-app"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>以下是调用组件信息&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"test"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">test-component</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-bind:msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"msg"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-on:msgchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"updateMsg($event)"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">test-component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">     var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         props: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'msg'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'&#x3C;button v-on:click="changeChuanzhi">点击向父组件事件传值--{{msg}}&#x3C;/button>'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">             changeChuanzhi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">                 this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"msgchange"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"子组件向父组件传值"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//注意两个参数：第一个参数是事件名，第二个参数是传递的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         deactivated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'component deactivated!'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         activated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'component activated'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">     new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         el: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'#vue-app'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             msg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'父亲给儿子的信息'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">             updateMsg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">                 this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> msg;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         components: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">             'test-component'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: child</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">         //生明周期示例</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         beforeCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">             alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"组件实例化之前执行的函数：beforeCreate()"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">             alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"组件实例化完毕，但页面还未显示出来:created()"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         beforeMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">             alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"组件挂载前，页面仍未展示，但虚拟DOM已经配置:beforeMount()"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">             alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"组件挂载后，此方法执行后，页面显示:mounted()"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         beforeUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">             alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"组件更新前，页面仍未更新，但虚拟DOM已经配置:beforeUpdate()"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         updated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">             alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"组件更新后，此方法执行后，页面显示:updated()"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         beforeDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">             alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"组件销毁前:beforeDestroy()"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         destroyed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">             alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"组件销毁:destroyed()"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>运行结果：</p>
</li>
</ol>
<CustomImage src='/growth-record/frame/vue/vue2-life-02.gif' /><ol start="2">
<li>
<p>通过控制台查看页面加载显示顺序日志：
代码如下（可直接复制使用）：</p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"en"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"UTF-8"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"viewport"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"width=device-width, initial-scale=1.0"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"X-UA-Compatible"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ie=edge"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>vue生命周期的理解应用&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"vue-app"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>以下是调用组件信息&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"test"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>默认显示的数据：{{msg}}&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">test-component</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-bind:msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"msg"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-on:msgchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"updateMsg($event)"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">test-component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">     var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         props: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'msg'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">             return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                 childtofather: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'子组件向父组件传值'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'&#x3C;button v-on:click="changeChuanzhi">点击向父组件事件传值--{{msg}}&#x3C;/button>'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">             changeChuanzhi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">                 this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"msgchange"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.childtofather); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//注意两个参数：第一个参数是事件名，第二个参数是传递的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">     var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         el: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'#vue-app'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             msg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'父亲给儿子的信息'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">             updateMsg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">                 this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> msg;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         components: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">             'test-component'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: child</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">         //生明周期示例</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         beforeCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">             // alert("组件实例化之前执行的函数：beforeCreate()");</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'beforeCreate 创建前状态===============》'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">             var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> state1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'el'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$el,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'data'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$data,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'msg'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(state1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">             // alert("组件实例化完毕，但页面还未显示出来:created()");</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'created 创建完毕状态===============》'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">             var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> state2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'el'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$el,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'data'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$data,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'msg'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(state2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         beforeMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">             // alert("组件挂载前，页面仍未展示，但虚拟DOM已经配置:beforeMount()");</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'beforeMount 挂载前状态===============》'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">             var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> state3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'el'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$el,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'data'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$data,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'msg'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$el);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(state3);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">             // alert("组件挂载后，此方法执行后，页面显示:mounted()");</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'mounted 挂载结束状态===============》'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">             var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> state4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'el'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$el,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'data'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$data,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'msg'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.msg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$el);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(state4);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         beforeUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">             // alert("组件更新前，页面仍未更新，但虚拟DOM已经配置:beforeUpdate()");</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'beforeUpdate 更新前状态===============》'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">             var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> state5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'el'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$el,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'data'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$data,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'msg'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$el);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(state5);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">             debugger</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         updated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">             // alert("组件更新后，此方法执行后，页面显示:updated()");</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'updated 更新完成状态===============》'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">             var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> state6 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'el'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$el,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'data'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$data,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'msg'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.msg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$el);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(state6);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         beforeDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">             // alert("组件销毁前:beforeDestroy()");</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'beforeDestroy 销毁前状态===============》'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">             var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> state7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'el'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$el,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'data'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$data,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'msg'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$el);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(state7);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         destroyed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">             // alert("组件销毁:destroyed()");</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'destroyed 销毁完成状态===============》'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">             var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> state8 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'el'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$el,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'data'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$data,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">                 'msg'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$el);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(state8);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>简单说明一下结构：
（1）创建了一个 Vue 根实例命名为 vue-app，将其挂载到页面 id 为 vue-app 的 dom 元素上。
（2）局部注册的一个组件 child 并在根实例中将其注册使其可以在根实例的作用域中使用。
（3）将子组件用 <code>&lt;keep-alive&gt;</code> 包裹，为接下来的测试作准备。
（4）打开开发者工具的控制台查看结果：</p>
</li>
</ol>
<CustomImage src='/growth-record/frame/vue/vue2-life-03.png' /><h4 id="结果分析" tabindex="-1">结果分析 <a class="header-anchor" href="#结果分析" aria-label="Permalink to &quot;结果分析&quot;">&ZeroWidthSpace;</a></h4>
<p>1.beforeCreate 执行时：data和el均未初始化，值为：undefined；</p>
<CustomImage src='/growth-record/frame/vue/vue2-life-04.png' /><p>2.created 执行时：Vue 实例观察的数据对象 data 已经配置好，已经可以得到 <code>vue-app.msg</code> 的值，但 Vue 实例使用的根 DOM 元素 el 还未初始化；</p>
<CustomImage src='/growth-record/frame/vue/vue2-life-05.png' /><p>3.beforeMount 执行时：data 和 el 均已经初始化，但从 <code>{{msg}}</code> 等页面展示数据可以看出此时 el 并没有渲染进数据，el 的值为“虚拟” DOM 的元素节点；</p>
<CustomImage src='/growth-record/frame/vue/vue2-life-06.png' /><p>4.mounted 执行时：此时 el 已经渲染完成并挂载到实例上，页面基本显示完成；</p>
<CustomImage src='/growth-record/frame/vue/vue2-life-07.png' /><p>5.beforeUpdate 执行时：会更新当前组件数据，但未在页面渲染出来；</p>
<CustomImage src='/growth-record/frame/vue/vue2-life-08.png' /><p>6.updated 执行时：会更新当前组件数据，并在页面渲染出来；</p>
<CustomImage src='/growth-record/frame/vue/vue2-life-09.png' /><p>7.beforeDestroy 和 destroyed 执行时：Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。注意：这里的销毁并不指代'抹去'，而是表示'解绑'。</p>
<CustomImage src='/growth-record/frame/vue/vue2-life-10.png' /><p>验证一下，控制台输入：<code>app.msg='super456'</code> 页面 <code>{{msg}}</code> 并没有显示出来，结果显示：</p>
<CustomImage src='/growth-record/frame/vue/vue2-life-11.png' /><h3 id="四-一些钩子函数应用" tabindex="-1">（四）一些钩子函数应用 <a class="header-anchor" href="#四-一些钩子函数应用" aria-label="Permalink to &quot;（四）一些钩子函数应用&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>beforeCreate 钩子中可以进行 loading 之类的动画加载；</li>
<li>在 created 钩子中可以对 data 数据进行操作，这个时候可以进行 ajax 请求将返回的数据赋给 data，还可以进行网络接口的请求操作；</li>
<li>在 mounted 钩子对挂载的 dom 进行操作，也可以进行后台获取数据操作；</li>
</ol>
<h3 id="五-文献参考" tabindex="-1">（五）文献参考 <a class="header-anchor" href="#五-文献参考" aria-label="Permalink to &quot;（五）文献参考&quot;">&ZeroWidthSpace;</a></h3>
<p><em>特别感谢：作者：hxgzj 的<a href="https://segmentfault.com/a/1190000010336178" target="_blank" rel="noreferrer">关于Vue.js2.0生命周期的研究与理解</a> 这篇文章分析的很详细，看完后参考写了一个案例出来的。内容中也引用了很多。</em></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue2 基础知识点（一）]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/vue2-basics-knowledge.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/vue2-basics-knowledge.html</guid>
            <pubDate>Sat, 07 Jul 2018 20:04:01 GMT</pubDate>
            <description><![CDATA[# Vue2 基础知识点（一）
**本文针对自己学习官方文档时，总结一些易容易混淆的知识点做一下记录。欢迎指正或学习交流。**

### （一）常用基础知识点

1. `v-on:click=''`、`@click=''`、`:click=''` 三种写法；
 注意函数调用：直接使用双花括号调用函数是要使用函数名+括号，其他直接使用函数名即可，或使用函数名+括号（click 事件中）注意传参的函数必须带括号，可以不带参数，不然会报错对象空值；

2.  `v-if=''` 条件渲染与`v-show=''` 的区别：`v-if` 条件：不存在不会占位空间不会被渲染挂载；`v-show` 为真时，去掉 `display：none`，为假时显示`display：none`。默认会占用空间，会被渲染挂载。

3.  `v-for=''` 可以通过两组方式遍历数组（也可以遍历对象）：一种是通过数组下标；另一种是循环遍历；
  `v-for='user in users' 或 v-for='(user,index) in users'` 第二个参数是数组索引值；

```html
<p>v-for还可以渲染div</p>
<div v-for='(user,index) in users'>
  <h3>{{index+1}}</h3>
  <span>{{user.name}}]]></description>
            <content:encoded><![CDATA[<h1 id="vue2-基础知识点-一" tabindex="-1">Vue2 基础知识点（一） <a class="header-anchor" href="#vue2-基础知识点-一" aria-label="Permalink to &quot;Vue2 基础知识点（一）&quot;">&ZeroWidthSpace;</a></h1>
<p><strong>本文针对自己学习官方文档时，总结一些易容易混淆的知识点做一下记录。欢迎指正或学习交流。</strong></p>
<h3 id="一-常用基础知识点" tabindex="-1">（一）常用基础知识点 <a class="header-anchor" href="#一-常用基础知识点" aria-label="Permalink to &quot;（一）常用基础知识点&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>
<p><code>v-on:click=''</code>、<code>@click=''</code>、<code>:click=''</code> 三种写法；
注意函数调用：直接使用双花括号调用函数是要使用函数名+括号，其他直接使用函数名即可，或使用函数名+括号（click 事件中）注意传参的函数必须带括号，可以不带参数，不然会报错对象空值；</p>
</li>
<li>
<p><code>v-if=''</code> 条件渲染与<code>v-show=''</code> 的区别：<code>v-if</code> 条件：不存在不会占位空间不会被渲染挂载；<code>v-show</code> 为真时，去掉 <code>display：none</code>，为假时显示<code>display：none</code>。默认会占用空间，会被渲染挂载。</p>
</li>
<li>
<p><code>v-for=''</code> 可以通过两组方式遍历数组（也可以遍历对象）：一种是通过数组下标；另一种是循环遍历；
<code>v-for='user in users' 或 v-for='(user,index) in users'</code> 第二个参数是数组索引值；</p>
</li>
</ol>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>v-for还可以渲染div&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'(user,index) in users'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{index+1}}&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{user.name}}---{{user.age}}&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>v-for使用template标签，这个标签不像div一样会被渲染出来，只渲染template里面的标签&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'(user,index) in users'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{index+1}}&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">h3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{user.name}}---{{user.age}}&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>遍历数组里面的对象，遍历两次&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'(user,index) in users'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"(item,key) in user"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">h5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{{item}}---{{key}}&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">h5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><ol start="4">
<li>数据双向绑定的两种方法：</li>
</ol>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>双向数据绑定ref/$refs示例：input/select/textarea&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">""</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>姓名&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">&#x3C;!-- ref属性标记值，可获取 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-on:keyup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"logName"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'refName'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>您输入的名字为：{{name}}&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"age"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>年龄&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-on:keyup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'logAge'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"age"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"refAge"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>您输入的年龄为：{{age}}&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>双向数据绑定v-model示例：input/select/textarea&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">""</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>姓名&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">&#x3C;!-- ref属性标记值，可获取 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'name'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>您输入的名字为：{{name}}&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"age"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>年龄&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"age"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>您输入的年龄为：{{age}}&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><pre><code>js部分：
</code></pre>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  el:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'#vue-app'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  data:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      age:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  methods:{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      logName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">          // console.log("您正在输入名字~");</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">          // $refs获取标记的值，后面接命名值+value</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">          // console.log(this.$refs.refName.value);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">          this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$refs.refName.value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      logAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">          // console.log("您正在输入年龄~");</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">          this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.$refs.refAge.value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><ol start="5">
<li><code>computed</code> 和 <code>methods</code> 方法：只要methods方法之一被调用，其他所有方法都会被渲染执行，很耗费性能；计算属性，只会调用相应的方法体，是应用于搜索，调用比较多的方法体。</li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue-CLI2 入门 Demo 游戏]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/newcomer-game.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/newcomer-game.html</guid>
            <pubDate>Thu, 05 Jul 2018 20:01:01 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vue-cli2-入门-demo-游戏" tabindex="-1">Vue-CLI2 入门 Demo 游戏 <a class="header-anchor" href="#vue-cli2-入门-demo-游戏" aria-label="Permalink to &quot;Vue-CLI2 入门 Demo 游戏&quot;">&ZeroWidthSpace;</a></h1>
<p><strong>第一次使用vue-cli2.x搭建一个小demo游戏。代码文件有很多注释信息，通俗易懂的使用这个脚手架搭建一个入门小项目哈。</strong></p>
<h2 id="介绍使用" tabindex="-1">介绍使用 <a class="header-anchor" href="#介绍使用" aria-label="Permalink to &quot;介绍使用&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>使用默认创建的脚手架；</li>
<li>修改App.vue、HelloWorld.vue文件，assets文件夹添加了两张图片；</li>
<li>然后编译运行；</li>
</ul>
<h2 id="运行截图" tabindex="-1">运行截图 <a class="header-anchor" href="#运行截图" aria-label="Permalink to &quot;运行截图&quot;">&ZeroWidthSpace;</a></h2>
<CustomImage src='/growth-record/frame/vue/game.gif' /><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>Web前端网站教程-米斯特吴</li>
</ul>
<p>源码在我的GitHub上：<a href="https://github.com/super456/vue-cli2.x-demo" target="_blank" rel="noreferrer">点击跳转</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue2 父子组件动态传值]]></title>
            <link>https://super456.github.io/posts/growth-record/frame/vue/vue2-component-props.html</link>
            <guid>https://super456.github.io/posts/growth-record/frame/vue/vue2-component-props.html</guid>
            <pubDate>Tue, 26 Jun 2018 20:02:02 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vue2-父子组件动态传值" tabindex="-1">Vue2 父子组件动态传值 <a class="header-anchor" href="#vue2-父子组件动态传值" aria-label="Permalink to &quot;Vue2 父子组件动态传值&quot;">&ZeroWidthSpace;</a></h1>
<p><strong>在学习 Vue2.x 的时候，遇到了一个问题，就是父子组件如何传递动态输入的值，文档介绍都是传递固定值的，比如我想传递一个刚输入的值呢，子组件如何显示？一下就是简单的代码：</strong></p>
<p>注：本人使用的是官方的<strong>脚手架</strong>学习的，可以通过父级组件向子级组件传递动态输入的值。然后本人重写了一个测试页面，直接复制代码就可以运行的（看懂以下代码，父子组件传递原理也是一样的，此处以对象为例）：</p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"en"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"UTF-8"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"viewport"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"width=device-width, initial-scale=1.0"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"X-UA-Compatible"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ie=edge"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>父组件向子组件动态传值示例&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    &#x3C;!-- 导入官方cdn的vue文件--></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"https://cdn.jsdelivr.net/npm/vue"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"app"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"item in items"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                {{item}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>添加一个列表项：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"newItem"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-on:keyup.enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'addNew()'</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> placeholder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"按回车键提交"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>显示输入框传递给子组件的添加内容（对象）：&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        &#x3C;!-- 注意这个传递的参数值必须前面有：v-bind:组件获取的变量名='需要传递的变量名' 或 :组件获取的变量名='需要传递的变量名'  ,否则传递的永远是字符串的值--></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        &#x3C;!-- 这种方式传递的是字符串 --></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        &#x3C;!-- &#x3C;component-a msg1childtofather='msgchildtofather'>&#x3C;/component-a> --></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        &#x3C;!-- 以下两种方式都是传递对象 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">component-a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> :msg1childtofather</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'msgchildtofather'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">component-a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        &#x3C;!-- &#x3C;component-a v-bind:msg1childtofather='msgchildtofather'>&#x3C;/component-a> --></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'component-a'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        props: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'msg1childtofather'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'&#x3C;h2 v-text=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\'</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">msg1childtofather</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\'</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">>&#x3C;/h2>'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">            output</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">                alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'You click button! and submit value:'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.msg1childtofather);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        el: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"#app"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            items: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            newItem: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">""</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            msgchildtofather: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">""</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">            addNew</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">                // 使用v-model和ul li input向数组items添加一个动态项内容，注意添加数组格式</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">                this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.newItem);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">                // 测试传递动态添加对象值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> childfather </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                    label: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.newItem,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                    label2: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'默认值'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                };</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">                this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.msgchildtofather </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> childfather;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">                this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.newItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ""</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>测试结果如下：</p>
<CustomImage src='/growth-record/frame/vue/props-01.png' /><CustomImage src='/growth-record/frame/vue/props-02.png' />]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[常用的 Markdown 语法格式来编写文章]]></title>
            <link>https://super456.github.io/posts/growth-record/other/toolGuide/markdown.html</link>
            <guid>https://super456.github.io/posts/growth-record/other/toolGuide/markdown.html</guid>
            <pubDate>Sat, 23 Jun 2018 20:02:01 GMT</pubDate>
            <description><![CDATA[# 常用的 Markdown 语法格式来编写文章
**注：本教程需要一点对markdown语法格式的了解，什么都不知道的，请直接看[献给写作者的 Markdown 新手指南][02]的参考资料，再来看本文，会更好的去学习。**

## 基本排版格式

### (一) 目录编辑

1. 导航目录链接制作,一般使用二级、三级标题格式(需要解析)

   第一种方式获取标题：

   ```md
     * TOC
     {:toc}
   ```

2. 小标题无序目录(注意空格)

   ```md
   * 目录一
   * 目录二
   ```

3. 小标题有序目录(注意空格)

   ```md
   1. 目录一
   2. 目录二
   ```

4. 锚点链接(注意英文字符)

   ```md
   [目录](#目录)
   [Fork 指南](#fork-指南)
   ```

### (二) 链接表示

1. 基本插入链接表示：
   * 网址链接：`[跳转名](https://xxx.github.io)`
   * 本地图片链接(最好使用图床网站获取图片url)： `![](/images/wiki/eclipse-need-java6.png)`
   * 待定链接：`[这个链接跳转不了](#)`

2. 统一的的链接跳转方式(为了排版好看一点)：

   ```md
   参考：[mpv keybindings][0]
   参考：[OPTIONS][1]
   参考：[MPV使用小记][2]

   [0]: https://github.com/mpv-player/mpv/blob/master/etc/input.conf
   [1]: https://github.com/mpv-player/mpv/blob/master/DOCS/man/options.rst
   [2]: https://segmentfault.com/a/1190000004533079
   ```

3. 快捷插入网址链接表示形式：`<http://example.com>`

### (三) 表格排版

4. 表格排版参考(注意空行)

   ```md
    | 功能     | 快捷键 for win  | 快捷键 for mac |
   |:]]></description>
            <content:encoded><![CDATA[<h1 id="常用的-markdown-语法格式来编写文章" tabindex="-1">常用的 Markdown 语法格式来编写文章 <a class="header-anchor" href="#常用的-markdown-语法格式来编写文章" aria-label="Permalink to &quot;常用的 Markdown 语法格式来编写文章&quot;">&ZeroWidthSpace;</a></h1>
<p><strong>注：本教程需要一点对markdown语法格式的了解，什么都不知道的，请直接看<a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="noreferrer">献给写作者的 Markdown 新手指南</a>的参考资料，再来看本文，会更好的去学习。</strong></p>
<h2 id="基本排版格式" tabindex="-1">基本排版格式 <a class="header-anchor" href="#基本排版格式" aria-label="Permalink to &quot;基本排版格式&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="一-目录编辑" tabindex="-1">(一) 目录编辑 <a class="header-anchor" href="#一-目录编辑" aria-label="Permalink to &quot;(一) 目录编辑&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>
<p>导航目录链接制作,一般使用二级、三级标题格式(需要解析)</p>
<p>第一种方式获取标题：</p>
<div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> TOC</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  {:toc}</span></span></code></pre>
</div></li>
<li>
<p>小标题无序目录(注意空格)</p>
<div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 目录一</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 目录二</span></span></code></pre>
</div></li>
<li>
<p>小标题有序目录(注意空格)</p>
<div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 目录一</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> 目录二</span></span></code></pre>
</div></li>
<li>
<p>锚点链接(注意英文字符)</p>
<div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">目录</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">#目录</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">Fork 指南</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">#fork-指南</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div></li>
</ol>
<h3 id="二-链接表示" tabindex="-1">(二) 链接表示 <a class="header-anchor" href="#二-链接表示" aria-label="Permalink to &quot;(二) 链接表示&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>
<p>基本插入链接表示：</p>
<ul>
<li>网址链接：<code>[跳转名](https://xxx.github.io)</code></li>
<li>本地图片链接(最好使用图床网站获取图片url)： <code>![](/images/wiki/eclipse-need-java6.png)</code></li>
<li>待定链接：<code>[这个链接跳转不了](#)</code></li>
</ul>
</li>
<li>
<p>统一的的链接跳转方式(为了排版好看一点)：</p>
<div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">参考：[</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">mpv keybindings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">][</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">参考：[</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">OPTIONS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">][</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">参考：[</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">MPV使用小记</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">][</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">https://github.com/mpv-player/mpv/blob/master/etc/input.conf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">https://github.com/mpv-player/mpv/blob/master/DOCS/man/options.rst</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">https://segmentfault.com/a/1190000004533079</span></span></code></pre>
</div></li>
<li>
<p>快捷插入网址链接表示形式：<code>&lt;http://example.com&gt;</code></p>
</li>
</ol>
<h3 id="三-表格排版" tabindex="-1">(三) 表格排版 <a class="header-anchor" href="#三-表格排版" aria-label="Permalink to &quot;(三) 表格排版&quot;">&ZeroWidthSpace;</a></h3>
<ol start="4">
<li>
<p>表格排版参考(注意空行)</p>
<div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> | 功能     | 快捷键 for win  | 快捷键 for mac |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">|:---------|:---------------|:---------------|</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">| Project  | M-1            | Cmd-1          |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">| Terminal | M-F12          | M-F12          |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">| Editor   | Esc            | Esc            |</span></span></code></pre>
</div><p><strong>注意：</strong><code>:---------</code> 表示文字居左显示，<code>:---------:</code> 表示文字居中显示，<code>---------:</code> 表示文字居右显示。</p>
</li>
</ol>
<h3 id="四-文字处理" tabindex="-1">(四) 文字处理 <a class="header-anchor" href="#四-文字处理" aria-label="Permalink to &quot;(四) 文字处理&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>
<p>分割线</p>
<ul>
<li>第一种方式：<code>-----</code></li>
<li>第二种方式：<code>***</code></li>
</ul>
<p>效果展示：</p>
<hr>
</li>
<li>
<p>删除线：<code>~~删除线~~</code> ，效果展示：<s>删除线</s></p>
</li>
<li>
<p>斜体：<code>*斜体*</code> ，效果展示：<em>斜体</em></p>
</li>
<li>
<p>表情插入(需要解析)</p>
<div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:camel:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:blush:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:smile:</span></span></code></pre>
</div><p><a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noreferrer">表情语法专属官网</a></p>
</li>
<li>
<p>脚注提醒(需要解析)</p>
<p>This is a text with footnote[^1].</p>
<p>[^1]: Here is the footnote 1 definition.</p>
</li>
<li>
<p>键盘键显示(需要解析)： <code>&lt;kbd&gt;Alt&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;S&lt;/kbd&gt;</code></p>
<p>效果展示：<kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>S</kbd></p>
</li>
<li>
<p>电子邮箱输入：<code>&lt;1111111111@qq.com&gt;</code> ，效果展示：<a href="mailto:1111111111@qq.com" target="_blank" rel="noreferrer">1111111111@qq.com</a></p>
</li>
<li>
<p>代办列表: 表示列表是否勾选状态</p>
<div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [ ] 不勾选</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] 勾选</span></span></code></pre>
</div></li>
<li>
<p>上下标(需要解析)</p>
<p><code>\^</code> 表示上标, <code>_</code> 表示下标。如果上下标的内容多于一个字符，要用{}把这些内容括起来当成一个整体。上下标是可以嵌套的，也可以同时使用。 例如：</p>
<p><code>x^{y^z}=(1+{\rm e}^x)^{-2xy^w}</code> ，效果展示：<code>x{yz}=(1+{\rm e}x){-2xy^w}</code>(解析有问题，需要装插件)</p>
</li>
<li>
<p>添加下划线： <code>php\_gd2.dll</code> ，效果展示： php_gd2.dll</p>
</li>
<li>
<p>笔记本和标签(部分编辑器支持)： <code>@(示例笔记本)[标签1|标签2|标签3]</code> 。</p>
</li>
</ol>
<h3 id="五-引用" tabindex="-1">(五) 引用 <a class="header-anchor" href="#五-引用" aria-label="Permalink to &quot;(五) 引用&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>
<p>区块引用可以嵌套，只要根据层次加上不同数量的 &gt; ：</p>
<div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">> 这是第一级引用。</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">></span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">> > 这是第二级引用。</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">></span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">> 现在回到第一级引用。</span></span></code></pre>
</div></li>
<li>
<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">> </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold">## 这是一个标题。</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">></span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">> </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">1.</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D"> 这是第一行列表项。</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">> </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">2.</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D"> 这是第二行列表项。</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">></span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">> 给出一些例子代码：</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">></span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">> return shell_exec("echo $input | $markdown_script");</span></span></code></pre>
</div></li>
<li>
<p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p>
<div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  Coding.net有以下主要功能:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D"> > 代码托管平台</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D"> > 在线运行环境</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D"> > 代码质量监控</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D"> > 项目管理平台</span></span></code></pre>
</div></li>
</ol>
<h3 id="六-简单的图形" tabindex="-1">(六) 简单的图形 <a class="header-anchor" href="#六-简单的图形" aria-label="Permalink to &quot;(六) 简单的图形&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>
<p>代码图形</p>
<div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">+-------------+                    +-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">|             |        ...         |             |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">+-------------+                    +-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">|             |                    |             |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">+-------------+                    +-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">| format str1 | &#x3C;-- esp            | format str2 | &#x3C;-- esp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">+-------------+                    +-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">| double low  |                    |     int     |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">+-------------+                    +-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">| double high |                    | double high |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">+-------------+  main stack frame  +-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">|     ...     |                    |     ...     |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">+-------------+                    +-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">|             |                    |             |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">+-------------+                    +-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">|   (%ebp)    | &#x3C;-- ebp            |   (%ebp)    | &#x3C;-- ebp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">+-------------+                    +-------------+</span></span></code></pre>
</div></li>
<li>
<p>构建文件夹图形</p>
<div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">app/src/main</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">├─assets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">├─java</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">│  ├─android</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">│  │  └─content</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">│  │      └─pm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">│  └─org</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">│      └─mazhuang</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">│          └─easycleaner</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">└─res</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   ├─drawable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   ├─layout</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   ├─menu</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   ...</span></span></code></pre>
</div></li>
</ol>
<h3 id="七-代码语法" tabindex="-1">(七) 代码语法 <a class="header-anchor" href="#七-代码语法" aria-label="Permalink to &quot;(七) 代码语法&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>
<p>单行代码语法：两个 `，中间输入内容</p>
</li>
<li>
<p>多行代码语法(注意前后空行)：第一行输入三个 ` 然后最后一行再输入三个</p>
</li>
<li>
<p>简单的语法高亮</p>
<div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 5234ab</span></span></code></pre>
</div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">print</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'Hello, World!'</span></span></code></pre>
</div></li>
<li>
<p>代码高亮语言标识符支持的语法</p>
<p>支持的有 <code>javascript（js）、cpp、makefile、vbnet、xml、c、java、cl、vim、sh、yaml、markdown(显示原语法格式)、html、vb、python</code> 等等</p>
</li>
</ol>
<h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>(1)、<a href="http://mazhuang.org/wiki/chinese-copywriting-guidelines/" target="_blank" rel="noreferrer">中文文案排版指北（简体中文版）</a></li>
<li>(2)、<a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="noreferrer">献给写作者的 Markdown 新手指南</a></li>
<li>(3)、<a href="https://coding.net/help/doc/project/markdown.html#section-2" target="_blank" rel="noreferrer">Markdown语法介绍</a></li>
<li>(4)、<a href="http://www.appinn.com/markdown/" target="_blank" rel="noreferrer">Markdown 语法说明 (简体中文版)</a></li>
<li>(5)、<a href="https://maxiang.io/" target="_blank" rel="noreferrer">马克飞象-在线编辑器</a></li>
</ul>
]]></content:encoded>
            <enclosure url="https://super456.github.io/images/wiki/eclipse-need-java6.png" length="0" type="image/png"/>
        </item>
    </channel>
</rss>