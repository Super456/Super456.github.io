import{j as a,b as e,c as t,aa as o}from"./chunks/framework.BdPFiiJb.js";const f=JSON.parse('{"title":"第 34 本《程序员的 README》","description":"对于刚刚成为软件工程师的新手来说，知道如何编写代码只是成功了一半。你可能很快就会发现，学校并没有教授在现实世界中至关重要的技能和工作中必要的流程。本书恰恰填补了这一环节，它是作者十多年来在大型公司指导初级工程师工作的教程，涵盖软件工程的基础知识和最佳实践。 本书第 1～2 章讲解当你在公司开启你的职业生涯时会发生什么；第 3～11 章会扩展你的工作技能，教你如何使用现有代码库、解决和防止技术债、编写生产级软件、管理依赖关系、有效地测试、评审代码、交付软件、处理 On-Call 时的事故和构建可演进的架构等；剩余章节涵盖管理能力和职业阶梯的提升等相关内容，例如敏捷计划、与管理者合作以及成长为资深工程师的必经之路。本书中非常重要的一部分内容是教你如何应对糟糕的管理，以及如何调整自己的节奏。 本书内容不仅浅显易懂，还覆盖整个软件开发周期，是一本技术主管希望每名新入行的工程师在开始工作之前都能阅读的书","frontmatter":{"title":"第 34 本《程序员的 README》","description":"对于刚刚成为软件工程师的新手来说，知道如何编写代码只是成功了一半。你可能很快就会发现，学校并没有教授在现实世界中至关重要的技能和工作中必要的流程。本书恰恰填补了这一环节，它是作者十多年来在大型公司指导初级工程师工作的教程，涵盖软件工程的基础知识和最佳实践。 本书第 1～2 章讲解当你在公司开启你的职业生涯时会发生什么；第 3～11 章会扩展你的工作技能，教你如何使用现有代码库、解决和防止技术债、编写生产级软件、管理依赖关系、有效地测试、评审代码、交付软件、处理 On-Call 时的事故和构建可演进的架构等；剩余章节涵盖管理能力和职业阶梯的提升等相关内容，例如敏捷计划、与管理者合作以及成长为资深工程师的必经之路。本书中非常重要的一部分内容是教你如何应对糟糕的管理，以及如何调整自己的节奏。 本书内容不仅浅显易懂，还覆盖整个软件开发周期，是一本技术主管希望每名新入行的工程师在开始工作之前都能阅读的书","date":"2024-02-18T20:00:00.000Z","cover":"../static/2024/34th.webp","tags":[2024,"程序员"],"categories":["朝花夕拾"]},"headers":[],"relativePath":"posts/read-book/2024/34th.md","filePath":"posts/read-book/2024/34th.md","lastUpdated":1713026660000}'),r={name:"posts/read-book/2024/34th.md"},s=o('<h1 id="第-34-本《程序员的-readme》" tabindex="-1">第 34 本《程序员的 README》 <a class="header-anchor" href="#第-34-本《程序员的-readme》" aria-label="Permalink to &quot;第 34 本《程序员的 README》&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>对于刚刚成为软件工程师的新手来说，知道如何编写代码只是成功了一半。你可能很快就会发现，学校并没有教授在现实世界中至关重要的技能和工作中必要的流程。本书恰恰填补了这一环节，它是作者十多年来在大型公司指导初级工程师工作的教程，涵盖软件工程的基础知识和最佳实践。 本书第 1～2 章讲解当你在公司开启你的职业生涯时会发生什么；第 3～11 章会扩展你的工作技能，教你如何使用现有代码库、解决和防止技术债、编写生产级软件、管理依赖关系、有效地测试、评审代码、交付软件、处理 On-Call 时的事故和构建可演进的架构等；剩余章节涵盖管理能力和职业阶梯的提升等相关内容，例如敏捷计划、与管理者合作以及成长为资深工程师的必经之路。本书中非常重要的一部分内容是教你如何应对糟糕的管理，以及如何调整自己的节奏。 本书内容不仅浅显易懂，还覆盖整个软件开发周期，是一本技术主管希望每名新入行的工程师在开始工作之前都能阅读的书</p><h2 id="感悟" tabindex="-1">感悟 <a class="header-anchor" href="#感悟" aria-label="Permalink to &quot;感悟&quot;">​</a></h2><p>2 月 11 日开始阅读，18 日读完。读完这本书的感觉，也是有点相见恨晚，确实读这本书要趁早，很多知识大学和工作都不会有人教你，都需要你主动去学和请教他人。所以说，它比较全面的介绍成为一名软件工程师的过程内容，可以让你少走很多弯路，比较全面的了解一个软件生命周期的过程，培养你的个人能力和工作全局观吧。特别是对新人刚入行的时候，有一个指导工作各个方面流程及实践的教程，对个人的成长和融入团队有非常大的帮助吧</p><p>印象深刻的几个章节中讲到：在进入职业生涯阶段会遇到的一些问题及如何解决，比如自己遇到问题不好意思问同事，死磕琢磨很久浪费了很多时间，还有遇到生产事故自己紧张害怕的要死，慌不择路只会适得其反等等类似的情况，作者建议我们应该“请保持开放的心态，好学深思，渴望提高，不惧破旧习，不惧提问题。”因为优秀的工程师通常会以指导和协助他人为荣，而且当你“向同事提问和学习是快速成长和习得新技能的有效方式”，所以不要吝啬你的主动哈，珍惜这段时间，争取最大努力快速提升自己咯。还有如何克服工作中常见的“冒充者综合征”和邓宁-克鲁格效应、如何阅读开源项目、如何向同事提问方式等等，都有很多讲解帮助</p><p>在提升工作技能方面：如何平衡“软件的熵”和“技术债”也有一些讲究和方法。如何代码章节方面介绍了很多注意事项和技巧，包括经常听到的“不要重复自己”(Don’t repeat yourself，DRY)是一个通常被教导的原则。如何晋级需要具备的几个能力有技术知识、执行力、沟通能力、领导力，我是非常认可，毕竟自己也是计算机专业科班出身，对技术要求及作者说到这几个能力都有刻意练习，比如写作水平差就平时多练习写技术调研方案文档、业务相关讲解文档、技术相关讲解或指南文档等等并分享团队阅读，收集改进反馈提升自己</p><p>在 On-Call 阶段印象深刻的一句话是：“你最好的能力是随时响应。”这句老话是成功On-Call 的关键。跟我轮值时候的一些解决问题方式不谋而合，自己平时也有应用类似的方式解决，但不够成体系的、规范的执行，也是自己做的不够好的地方。对于向上管理方面，如何对自己成长负责和工作汇报有更深刻的理解，之前以为自己做好手上的工作就行，还需要站在更高的角度思考问题及思考团队贡献、自身向上成长问题。对于职业规划方面，如何成为 T 型人才，未来发展等，但有些讲解不够全面，蜻蜓点水而已，可以结合《远见：如何规划职业生涯 3 大阶段》一起学习</p><p>还有其他方面也是很不错的，比如测试方面相关知识、设计文档撰写、代码评审、软件交付等等章节都非常详细，对于我这个工作几年的人，都还有很多不懂的或者没有遵守相关编写代码规则去做，有点惭愧，哈哈哈 总体来说，还是很不错的程序员指南，新人和老手阅读都会有受益，但可能新人阅读会受益更大吧，还有就是保持持续学习💪🏻</p>',9),l=[s];function n(d,i,p,c,_,h){return e(),t("div",null,l)}const u=a(r,[["render",n]]);export{f as __pageData,u as default};
